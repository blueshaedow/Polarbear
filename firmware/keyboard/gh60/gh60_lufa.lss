
gh60_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00005bb0  00005c44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005bb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ae  00800116  00800116  00005c5a  2**0
                  ALLOC
  3 .noinit       00000004  008001c4  008001c4  00005c5a  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  00005c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000008f  00000000  00000000  00006514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000950  00000000  00000000  000065a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00001549  00000000  00000000  00006ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000e082  00000000  00000000  0000843c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000342d  00000000  00000000  000164be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00008dc6  00000000  00000000  000198eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000ea0  00000000  00000000  000226b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003fbf  00000000  00000000  00023554  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004278  00000000  00000000  00027513  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000bb0  00000000  00000000  0002b78b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

inline
bool matrix_is_on(uint8_t row, uint8_t col)
{
    return (matrix[row] & ((matrix_row_t)1<<col));
}
       0:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__ctors_end>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       4:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
       8:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
{
    driver = d;
}

host_driver_t *host_get_driver(void)
{
       c:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}

void debug_action(action_t action)
{
      10:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>

/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
void del_mods(uint8_t mods) { real_mods &= ~mods; }
void set_mods(uint8_t mods) { real_mods = mods; }
      14:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
    if (bits >> 8) { bits >>= 8; n += 8;}
    if (bits >> 4) { bits >>= 4; n += 4;}
    if (bits >> 2) { bits >>= 2; n += 2;}
    if (bits >> 1) { bits >>= 1; n += 1;}
    return n;
}
      18:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
    set_sleep_mode(SLEEP_MODE_IDLE);
    sleep_enable();
    sei();
    sleep_cpu();
    sleep_disable();
}
      1c:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
    TIMSK0 = (1<<OCIE0A);
}

inline
void timer_clear(void)
{
      20:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
{
    eeprom_write_word(EECONFIG_MAGIC, EECONFIG_MAGIC_NUMBER);
}

void eeconfig_disable(void)
{
      24:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      28:	0c 94 ac 0f 	jmp	0x1f58	; 0x1f58 <__vector_10>
      2c:	0c 94 70 0f 	jmp	0x1ee0	; 0x1ee0 <__vector_11>
      30:	0c 94 9e 1f 	jmp	0x3f3c	; 0x3f3c <__vector_12>
      34:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      38:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      3c:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      40:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      44:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      48:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      4c:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      50:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      54:	0c 94 20 20 	jmp	0x4040	; 0x4040 <__vector_21>
      58:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      5c:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      60:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      64:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      68:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      6c:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      70:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      74:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      78:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      7c:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      80:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      84:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      88:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      8c:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      90:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      94:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      98:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      9c:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      a0:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      a4:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>
      a8:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__bad_interrupt>

000000ac <keymaps>:
      ac:	35 1e 1f 20 21 22 23 24 25 26 27 2d 2e 2a 2b 14     5.. !"#$%&'-.*+.
      bc:	1a 08 15 17 1c 18 0c 12 13 2f 30 31 39 04 16 07     ........./019...
      cc:	09 0a 0b 0d 0e 0f 33 34 00 28 e1 00 1d 1b 06 19     ......34.(......
      dc:	05 11 10 36 37 38 00 e5 e0 e3 e2 00 00 2c 00 00     ...678.......,..
      ec:	00 00 c0 e7 65 e4 35 1e 1f 20 21 22 23 24 25 26     ....e.5.. !"#$%&
      fc:	27 2d 2e 2a 2b 14 1a 09 13 0a 0d 0f 18 1c 33 2f     '-.*+.........3/
     10c:	30 31 2a 04 15 16 17 07 0b 11 08 0c 12 34 00 28     01*..........4.(
     11c:	e1 00 1d 1b 06 19 05 0e 10 36 37 38 00 e5 e0 e3     .........678....
     12c:	e2 00 00 2c 00 00 00 00 c0 e7 65 e4 35 1e 1f 20     ...,......e.5.. 
     13c:	21 22 23 24 25 26 27 2f 30 2a 2b 34 36 37 13 1c     !"#$%&'/0*+467..
     14c:	09 0a 06 15 0f 38 2e 31 39 04 12 08 18 0c 07 0b     .....8.19.......
     15c:	17 11 16 2d 00 28 e1 00 33 14 0d 0e 1b 05 10 1a     ...-.(..3.......
     16c:	19 1d 00 e5 e0 e3 e2 00 00 2c 00 00 00 00 c0 e7     .........,......
     17c:	65 e4 35 1e 1f 20 21 22 23 24 25 26 27 2d 2e 2a     e.5.. !"#$%&'-.*
     18c:	2b 14 07 15 1a 05 0d 09 18 13 33 2f 30 31 2a 04     +.........3/01*.
     19c:	16 0b 17 0a 1c 11 08 12 0c 34 00 28 e1 00 1d 1b     .........4.(....
     1ac:	10 06 19 0e 0f 36 37 38 00 e5 e0 e3 e2 00 00 2c     .....678.......,
     1bc:	00 00 00 00 c0 e7 65 e4 01 01 01 01 01 01 01 01     ......e.........
     1cc:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     1dc:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     1ec:	00 01 01 00 01 01 01 01 01 01 01 01 01 01 00 52     ...............R
     1fc:	01 01 01 00 00 01 00 00 00 00 01 50 51 4f 29 01     ...........PQO).
     20c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     21c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     22c:	01 01 01 01 01 01 00 01 01 00 01 01 01 01 01 01     ................
     23c:	01 01 01 01 00 01 01 01 01 00 00 01 00 00 00 00     ................
     24c:	01 01 01 01 29 3a 3b 3c 3d 3e 3f 40 41 42 43 44     ....):;<=>?@ABCD
     25c:	45 01 01 c2 52 01 01 01 01 01 01 b2 01 4a 49 c4     E...R........JI.
     26c:	01 50 51 4f 01 01 46 47 48 01 c3 4d 00 01 01 00     .PQO..FGH..M....
     27c:	4c 01 b5 a8 a9 aa 01 4b 4e 4c 00 01 01 01 01 00     L......KNL......
     28c:	00 c1 00 00 00 00 01 01 01 01 c5 c6 c7 c8 01 01     ................
     29c:	01 01 01 01 01 01 01 01 01 c5 c8 01 01 01 01 01     ................
     2ac:	01 01 01 01 01 01 01 01 01 c7 01 01 01 01 01 01     ................
     2bc:	01 01 00 01 01 00 01 01 c6 01 01 01 01 01 01 01     ................
     2cc:	00 01 01 01 01 00 00 01 00 00 00 00 01 01 01 01     ................

000002dc <fn_actions>:
     2dc:	f1 a6 21 8a 22 8a 29 13 f1 a7 01 8c 02 8c 04 8c     ..!.".).........
     2ec:	08 8c                                               ..

000002ee <__c.1520>:
     2ee:	0a 00                                               ..

000002f0 <__c.1518>:
     2f0:	25 30 31 36 62 00                                   %016b.

000002f6 <__c.1516>:
     2f6:	3a 20 00                                            : .

000002f9 <__c.1514>:
     2f9:	25 30 32 58 00                                      %02X.

000002fe <__c.1511>:
     2fe:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
     30e:	42 43 44 45 46 0a 00                                BCDEF..

00000315 <__c.1469>:
     315:	0a 00                                               ..

00000317 <__c.1467>:
     317:	25 30 32 58 00                                      %02X.

0000031c <__c.1465>:
     31c:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

00000326 <__c.5029>:
     326:	5b 73 5d 00                                         [s].

0000032a <__c.5027>:
     32a:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     33a:	00                                                  .

0000033b <__c.5025>:
     33b:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     34b:	00                                                  .

0000034c <__c.4816>:
     34c:	5b 57 5d 00                                         [W].

00000350 <__c.4812>:
     350:	5b 53 5d 00                                         [S].

00000354 <__c.4808>:
     354:	5b 52 5d 00                                         [R].

00000358 <__c.4803>:
     358:	5b 44 5d 00                                         [D].

0000035c <__c.4796>:
     35c:	5b 43 5d 00                                         [C].

00000360 <KeyboardReport>:
     360:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     370:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     380:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     390:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

0000039f <MouseReport>:
     39f:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     3af:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     3bf:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     3cf:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     3df:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

000003ec <ExtrakeyReport>:
     3ec:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     3fc:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     40c:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     41c:	10 95 01 81 00 c0                                   ......

00000422 <ConsoleReport>:
     422:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
     432:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

00000442 <NKROReport>:
     442:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     452:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     462:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
     472:	25 01 95 78 75 01 81 02 c0                          %..xu....

0000047b <DeviceDescriptor>:
     47b:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
     48b:	00 01                                               ..

0000048d <ConfigurationDescriptor>:
     48d:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     49d:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     4ad:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     4bd:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     4cd:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     4dd:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     4ed:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....
     4fd:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
     50d:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

0000051a <LanguageString>:
     51a:	04 03 09 04                                         ....

0000051e <ManufacturerString>:
     51e:	12 03 67 00 65 00 65 00 6b 00 68 00 61 00 63 00     ..g.e.e.k.h.a.c.
     52e:	6b 00 00 00                                         k...

00000532 <ProductString>:
     532:	0a 03 47 00 48 00 36 00 30 00 00 00                 ..G.H.6.0...

0000053e <__c.4554>:
     53e:	0a 00                                               ..

00000540 <__c.4549>:
     540:	25 30 32 58 20 00                                   %02X .

00000546 <__c.4546>:
     546:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     556:	20 00                                                .

00000558 <__c.4919>:
     558:	0a 00                                               ..

0000055a <__c.4917>:
     55a:	25 30 32 58 00                                      %02X.

0000055f <__c.4915>:
     55f:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led
     56f:	3a 20 00                                            : .

00000572 <__c.4761>:
     572:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
     582:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

00000590 <__c.4744>:
     590:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
     5a0:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

000005ae <__c.4843>:
     5ae:	64 6f 6e 65 2e 0a 00                                done...

000005b5 <__c.4837>:
     5b5:	62 6f 6f 67 6d 61 67 69 63 20 73 63 61 6e 3a 20     boogmagic scan: 
     5c5:	2e 2e 2e 20 00                                      ... .

000005ca <__c.4760>:
     5ca:	29 0a 00                                            )..

000005cd <__c.4758>:
     5cd:	25 75 00                                            %u.

000005d0 <__c.4756>:
     5d0:	2f 00                                               /.

000005d2 <__c.4754>:
     5d2:	25 75 00                                            %u.

000005d5 <__c.4752>:
     5d5:	5d 28 00                                            ](.

000005d8 <__c.4750>:
     5d8:	25 64 00                                            %d.

000005db <__c.4748>:
     5db:	20 00                                                .

000005dd <__c.4746>:
     5dd:	25 64 00                                            %d.

000005e0 <__c.4744>:
     5e0:	20 00                                                .

000005e2 <__c.4742>:
     5e2:	25 64 00                                            %d.

000005e5 <__c.4740>:
     5e5:	20 00                                                .

000005e7 <__c.4738>:
     5e7:	25 64 00                                            %d.

000005ea <__c.4736>:
     5ea:	7c 00                                               |.

000005ec <__c.4734>:
     5ec:	25 30 32 58 00                                      %02X.

000005f1 <__c.4732>:
     5f1:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     601:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     611:	20 5b 00                                             [.

00000614 <__c.5181>:
     614:	3f 00                                               ?.

00000616 <__c.5172>:
     616:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

00000621 <__c.5170>:
     621:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

0000062b <__c.5167>:
     62b:	74 69 6d 65 72 5f 63 6f 75 6e 74 3a 20 25 30 34     timer_count: %04
     63b:	6c 58 0a 00                                         lX..

0000063f <__c.5165>:
     63f:	6b 65 79 62 6f 61 72 64 5f 6e 6b 72 6f 3a 20 25     keyboard_nkro: %
     64f:	58 0a 00                                            X..

00000652 <__c.5163>:
     652:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     662:	58 0a 00                                            X..

00000665 <__c.5161>:
     665:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     675:	6c 3a 20 25 58 0a 00                                l: %X..

0000067c <__c.5159>:
     67c:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     68c:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000696 <__c.5157>:
     696:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

000006a4 <__c.5154>:
     6a4:	47 43 43 3a 20 34 2e 33 2e 33 20 41 56 52 2d 4c     GCC: 4.3.3 AVR-L
     6b4:	49 42 43 3a 20 31 2e 36 2e 37 20 41 56 52 5f 41     IBC: 1.6.7 AVR_A
     6c4:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

000006cf <__c.5152>:
     6cf:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     6df:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     6ef:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     6ff:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     70f:	30 39 36 0a 00                                      096..

00000714 <__c.5150>:
     714:	42 55 49 4c 44 3a 20 75 6e 6b 6e 6f 77 6e 20 28     BUILD: unknown (
     724:	31 36 3a 30 39 3a 30 31 20 44 65 63 20 31 31 20     16:09:01 Dec 11 
     734:	32 30 31 35 29 0a 00                                2015)..

0000073b <__c.5148>:
     73b:	56 49 44 3a 20 30 78 46 45 45 44 28 67 65 65 6b     VID: 0xFEED(geek
     74b:	68 61 63 6b 29 20 50 49 44 3a 20 30 78 36 30 36     hack) PID: 0x606
     75b:	30 28 47 48 36 30 29 20 56 45 52 3a 20 30 78 30     0(GH60) VER: 0x0
     76b:	30 30 31 0a 00                                      001..

00000770 <__c.5146>:
     770:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     780:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     790:	6f 72 20 47 48 36 30 0a 00                          or GH60..

00000799 <__c.5144>:
     799:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

000007a8 <__c.5141>:
     7a8:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

000007b5 <__c.5139>:
     7b5:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

000007c1 <__c.5136>:
     7c1:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

000007d1 <__c.5134>:
     7d1:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

000007e0 <__c.5131>:
     7e0:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

000007ee <__c.5129>:
     7ee:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

000007fb <__c.5126>:
     7fb:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000807 <__c.5124>:
     807:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000814 <__c.5121>:
     814:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     824:	00                                                  .

00000825 <__c.5118>:
     825:	43 3e 20 00                                         C> .

00000829 <__c.5112>:
     829:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000834 <__c.5073>:
     834:	0a 00                                               ..

00000836 <__c.5071>:
     836:	25 75 00                                            %u.

00000839 <__c.5069>:
     839:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000841 <__c.5067>:
     841:	0a 00                                               ..

00000843 <__c.5065>:
     843:	25 75 00                                            %u.

00000846 <__c.5063>:
     846:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     856:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000862 <__c.5061>:
     862:	0a 00                                               ..

00000864 <__c.5059>:
     864:	25 75 00                                            %u.

00000867 <__c.5057>:
     867:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     877:	20 00                                                .

00000879 <__c.5055>:
     879:	0a 00                                               ..

0000087b <__c.5053>:
     87b:	25 75 00                                            %u.

0000087e <__c.5051>:
     87e:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000888 <__c.5049>:
     888:	0a 00                                               ..

0000088a <__c.5047>:
     88a:	25 75 00                                            %u.

0000088d <__c.5045>:
     88d:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     89d:	20 00                                                .

0000089f <__c.5043>:
     89f:	0a 00                                               ..

000008a1 <__c.5041>:
     8a1:	25 75 00                                            %u.

000008a4 <__c.5039>:
     8a4:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     8b4:	20 00                                                .

000008b6 <__c.5037>:
     8b6:	0a 00                                               ..

000008b8 <__c.5035>:
     8b8:	25 75 00                                            %u.

000008bb <__c.5033>:
     8bb:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     8cb:	74 72 6f 6c 3a 20 00                                trol: .

000008d2 <__c.5031>:
     8d2:	0a 00                                               ..

000008d4 <__c.5029>:
     8d4:	25 75 00                                            %u.

000008d7 <__c.5027>:
     8d7:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     8e7:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

000008f0 <__c.5025>:
     8f0:	0a 00                                               ..

000008f2 <__c.5023>:
     8f2:	25 30 32 58 00                                      %02X.

000008f7 <__c.5021>:
     8f7:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     907:	77 3a 20 00                                         w: .

0000090b <__c.5018>:
     90b:	0a 00                                               ..

0000090d <__c.5016>:
     90d:	25 75 00                                            %u.

00000910 <__c.5014>:
     910:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000919 <__c.5012>:
     919:	0a 00                                               ..

0000091b <__c.5010>:
     91b:	25 75 00                                            %u.

0000091e <__c.5008>:
     91e:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

0000092a <__c.5006>:
     92a:	0a 00                                               ..

0000092c <__c.5004>:
     92c:	25 75 00                                            %u.

0000092f <__c.5002>:
     92f:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000939 <__c.5000>:
     939:	0a 00                                               ..

0000093b <__c.4998>:
     93b:	25 75 00                                            %u.

0000093e <__c.4996>:
     93e:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000948 <__c.4994>:
     948:	0a 00                                               ..

0000094a <__c.4992>:
     94a:	25 30 32 58 00                                      %02X.

0000094f <__c.4990>:
     94f:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     95f:	3a 20 00                                            : .

00000962 <__c.4987>:
     962:	0a 00                                               ..

00000964 <__c.4985>:
     964:	25 75 00                                            %u.

00000967 <__c.4983>:
     967:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000977 <__c.4978>:
     977:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     987:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     997:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     9a7:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     9b7:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     9c7:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     9d7:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     9e7:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     9f7:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     a07:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     a17:	4b 52 4f 0a 00                                      KRO..

00000a1c <__c.5215>:
     a1c:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     a2c:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     a3c:	73 65 6b 65 79 0a 00                                sekey..

00000a43 <__c.5450>:
     a43:	4c 25 64 0a 00                                      L%d..

00000a48 <__c.5231>:
     a48:	43 3e 20 00                                         C> .

00000a4c <__c.5229>:
     a4c:	3f 00                                               ?.

00000a4e <__c.5226>:
     a4e:	4d 3e 20 00                                         M> .

00000a52 <__c.5393>:
     a52:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     a62:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     a72:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     a82:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     a92:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

00000aa0 <__c.5391>:
     aa0:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     ab0:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     ac0:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     ad0:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     ae0:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     af0:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     b00:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     b10:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     b20:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     b30:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     b40:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     b50:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     b60:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     b70:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     b80:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     b90:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

00000b9b <__c.5424>:
     b9b:	4d 3e 00                                            M>.

00000b9e <__c.5422>:
     b9e:	4d 25 64 3e 20 00                                   M%d> .

00000ba4 <__c.5420>:
     ba4:	3f 00                                               ?.

00000ba6 <__c.5417>:
     ba6:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

00000bb3 <__c.5403>:
     bb3:	43 3e 20 00                                         C> .

00000bb7 <__c.5275>:
     bb7:	0a 00                                               ..

00000bb9 <__c.5273>:
     bb9:	25 75 00                                            %u.

00000bbc <__c.5271>:
     bbc:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     bcc:	5f 6d 61 78 3a 20 00                                _max: .

00000bd3 <__c.5269>:
     bd3:	0a 00                                               ..

00000bd5 <__c.5267>:
     bd5:	25 75 00                                            %u.

00000bd8 <__c.5265>:
     bd8:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     be8:	65 64 3a 20 00                                      ed: .

00000bed <__c.5263>:
     bed:	0a 00                                               ..

00000bef <__c.5261>:
     bef:	25 75 00                                            %u.

00000bf2 <__c.5259>:
     bf2:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     c02:	00                                                  .

00000c03 <__c.5257>:
     c03:	0a 00                                               ..

00000c05 <__c.5255>:
     c05:	25 75 00                                            %u.

00000c08 <__c.5253>:
     c08:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

00000c17 <__c.5251>:
     c17:	0a 00                                               ..

00000c19 <__c.5249>:
     c19:	25 75 00                                            %u.

00000c1c <__c.5247>:
     c1c:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     c2c:	20 00                                                .

00000c2e <__c.5245>:
     c2e:	0a 00                                               ..

00000c30 <__c.5243>:
     c30:	25 75 00                                            %u.

00000c33 <__c.5241>:
     c33:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     c43:	20 00                                                .

00000c45 <__c.5239>:
     c45:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

00000c53 <__c.5310>:
     c53:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     c63:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000c6e <__c.5307>:
     c6e:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     c7e:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000c87 <__c.5304>:
     c87:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     c97:	20 25 64 0a 00                                       %d..

00000c9c <__c.5301>:
     c9c:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     cac:	64 0a 00                                            d..

00000caf <__c.5298>:
     caf:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     cbf:	0a 00                                               ..

00000cc1 <__c.5294>:
     cc1:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000cd0 <__c.5366>:
     cd0:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     ce0:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000ceb <__c.5363>:
     ceb:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     cfb:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000d04 <__c.5360>:
     d04:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     d14:	20 25 64 0a 00                                       %d..

00000d19 <__c.5357>:
     d19:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     d29:	64 0a 00                                            d..

00000d2c <__c.5354>:
     d2c:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     d3c:	0a 00                                               ..

00000d3e <__c.5350>:
     d3e:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00 00     mk_delay = %d...

00000d4e <__ctors_end>:
     d4e:	11 24       	eor	r1, r1
     d50:	1f be       	out	0x3f, r1	; 63
     d52:	cf ef       	ldi	r28, 0xFF	; 255
     d54:	da e0       	ldi	r29, 0x0A	; 10
     d56:	de bf       	out	0x3e, r29	; 62
     d58:	cd bf       	out	0x3d, r28	; 61

00000d5a <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     d5a:	04 b6       	in	r0, 0x34	; 52
     d5c:	03 fe       	sbrs	r0, 3
     d5e:	24 c0       	rjmp	.+72     	; 0xda8 <__do_copy_data>
     d60:	80 91 c4 01 	lds	r24, 0x01C4
     d64:	90 91 c5 01 	lds	r25, 0x01C5
     d68:	a0 91 c6 01 	lds	r26, 0x01C6
     d6c:	b0 91 c7 01 	lds	r27, 0x01C7
     d70:	87 50       	subi	r24, 0x07	; 7
     d72:	90 4b       	sbci	r25, 0xB0	; 176
     d74:	a7 40       	sbci	r26, 0x07	; 7
     d76:	b0 4b       	sbci	r27, 0xB0	; 176
     d78:	b9 f4       	brne	.+46     	; 0xda8 <__do_copy_data>
        reset_key = 0;
     d7a:	10 92 c4 01 	sts	0x01C4, r1
     d7e:	10 92 c5 01 	sts	0x01C5, r1
     d82:	10 92 c6 01 	sts	0x01C6, r1
     d86:	10 92 c7 01 	sts	0x01C7, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     d8a:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     d8c:	84 b7       	in	r24, 0x34	; 52
     d8e:	87 7f       	andi	r24, 0xF7	; 247
     d90:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     d92:	88 e1       	ldi	r24, 0x18	; 24
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	80 93 60 00 	sts	0x0060, r24
     d9c:	10 92 60 00 	sts	0x0060, r1
     da0:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     da2:	e0 e0       	ldi	r30, 0x00	; 0
     da4:	f8 e3       	ldi	r31, 0x38	; 56
     da6:	09 95       	icall

00000da8 <__do_copy_data>:
     da8:	11 e0       	ldi	r17, 0x01	; 1
     daa:	a0 e0       	ldi	r26, 0x00	; 0
     dac:	b1 e0       	ldi	r27, 0x01	; 1
     dae:	e0 eb       	ldi	r30, 0xB0	; 176
     db0:	fb e5       	ldi	r31, 0x5B	; 91
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <.do_copy_data_start>

00000db4 <.do_copy_data_loop>:
     db4:	05 90       	lpm	r0, Z+
     db6:	0d 92       	st	X+, r0

00000db8 <.do_copy_data_start>:
     db8:	a6 31       	cpi	r26, 0x16	; 22
     dba:	b1 07       	cpc	r27, r17
     dbc:	d9 f7       	brne	.-10     	; 0xdb4 <.do_copy_data_loop>

00000dbe <__do_clear_bss>:
     dbe:	11 e0       	ldi	r17, 0x01	; 1
     dc0:	a6 e1       	ldi	r26, 0x16	; 22
     dc2:	b1 e0       	ldi	r27, 0x01	; 1
     dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <.do_clear_bss_start>

00000dc6 <.do_clear_bss_loop>:
     dc6:	1d 92       	st	X+, r1

00000dc8 <.do_clear_bss_start>:
     dc8:	a4 3c       	cpi	r26, 0xC4	; 196
     dca:	b1 07       	cpc	r27, r17
     dcc:	e1 f7       	brne	.-8      	; 0xdc6 <.do_clear_bss_loop>
     dce:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <main>
     dd2:	0c 94 d6 2d 	jmp	0x5bac	; 0x5bac <_exit>

00000dd6 <__bad_interrupt>:
     dd6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000dda <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     dda:	ff 93       	push	r31
	push	ZL
     ddc:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     dde:	e0 91 16 01 	lds	r30, 0x0116
	lds	ZH, xfunc_out+1	;/
     de2:	f0 91 17 01 	lds	r31, 0x0117
	sbiw	ZL, 0		;Skip if null
     de6:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     de8:	09 f0       	breq	.+2      	; 0xdec <xputc+0x12>
	icall
     dea:	09 95       	icall
2:	pop	ZL
     dec:	ef 91       	pop	r30
	pop	ZH
     dee:	ff 91       	pop	r31
	ret
     df0:	08 95       	ret

00000df2 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     df2:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     df4:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     df6:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     df8:	11 f0       	breq	.+4      	; 0xdfe <xputs+0xc>
	rcall	xputc
     dfa:	ef df       	rcall	.-34     	; 0xdda <xputc>
	rjmp	1b
     dfc:	fb cf       	rjmp	.-10     	; 0xdf4 <xputs+0x2>
2:	ret
     dfe:	08 95       	ret

00000e00 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     e00:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     e02:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     e04:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     e06:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     e08:	0c c0       	rjmp	.+24     	; 0xe22 <xitoa+0x22>
	neg	r20		;
     e0a:	41 95       	neg	r20
	sbrs	r25, 7		;
     e0c:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     e0e:	09 c0       	rjmp	.+18     	; 0xe22 <xitoa+0x22>
	ldi	r30, '-'	;
     e10:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     e12:	60 95       	com	r22
	com	r23		;
     e14:	70 95       	com	r23
	com	r24		;
     e16:	80 95       	com	r24
	com	r25		;
     e18:	90 95       	com	r25
	adc	r22, r1		;
     e1a:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     e1c:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     e1e:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     e20:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     e22:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <xitoa+0x2a>
	neg	r18		;
     e26:	21 95       	neg	r18
	ldi	r19, '0'	;/
     e28:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     e2a:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     e2c:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     e2e:	66 0f       	add	r22, r22
	rol	r23		;
     e30:	77 1f       	adc	r23, r23
	rol	r24		;
     e32:	88 1f       	adc	r24, r24
	rol	r25		;
     e34:	99 1f       	adc	r25, r25
	rol	r26		;
     e36:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     e38:	a4 17       	cp	r26, r20
	brcs	3f		;
     e3a:	10 f0       	brcs	.+4      	; 0xe40 <xitoa+0x40>
	sub	r26, r20	;
     e3c:	a4 1b       	sub	r26, r20
	inc	r22		;
     e3e:	63 95       	inc	r22
3:	dec	r21		;
     e40:	5a 95       	dec	r21
	brne	2b		;/
     e42:	a9 f7       	brne	.-22     	; 0xe2e <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     e44:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     e46:	08 f0       	brcs	.+2      	; 0xe4a <xitoa+0x4a>
	subi	r26, -7		;
     e48:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     e4a:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     e4c:	af 93       	push	r26
	inc	r31		;/
     e4e:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     e50:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     e52:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     e54:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     e56:	91 05       	cpc	r25, r1
	brne	1b		;/
     e58:	41 f7       	brne	.-48     	; 0xe2a <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     e5a:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     e5c:	11 f4       	brne	.+4      	; 0xe62 <xitoa+0x62>
	push	r30		;
     e5e:	ef 93       	push	r30
	inc	r31		;/
     e60:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     e62:	f2 17       	cp	r31, r18
	brcc	6f		;
     e64:	18 f4       	brcc	.+6      	; 0xe6c <xitoa+0x6c>
	push	r19		;
     e66:	3f 93       	push	r19
	inc	r31		;
     e68:	f3 95       	inc	r31
	rjmp	5b		;/
     e6a:	fb cf       	rjmp	.-10     	; 0xe62 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     e6c:	8f 91       	pop	r24
	rcall	xputc		;
     e6e:	b5 df       	rcall	.-150    	; 0xdda <xputc>
	dec	r31		;
     e70:	fa 95       	dec	r31
	brne	6b		;/
     e72:	e1 f7       	brne	.-8      	; 0xe6c <xitoa+0x6c>

	ret
     e74:	08 95       	ret

00000e76 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     e76:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     e78:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     e7a:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     e7c:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     e7e:	21 f0       	breq	.+8      	; 0xe88 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     e80:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     e82:	19 f0       	breq	.+6      	; 0xe8a <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     e84:	aa df       	rcall	.-172    	; 0xdda <xputc>
	rjmp	0b		;/
     e86:	f9 cf       	rjmp	.-14     	; 0xe7a <xvprintf+0x4>
90:	ret
     e88:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     e8a:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     e8c:	e8 94       	clt
	_LPMI	r21		;Get flags
     e8e:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     e90:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     e92:	c1 f3       	breq	.-16     	; 0xe84 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     e94:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     e96:	11 f4       	brne	.+4      	; 0xe9c <xvprintf+0x26>
	set			;/
     e98:	68 94       	set
22:	_LPMI	r21		;Get width
     e9a:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     e9c:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     e9e:	48 f4       	brcc	.+18     	; 0xeb2 <xvprintf+0x3c>
	subi	r21, '0'	;
     ea0:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     ea2:	90 f3       	brcs	.-28     	; 0xe88 <xvprintf+0x12>
	lsl	r18		;
     ea4:	22 0f       	add	r18, r18
	mov	r0, r18		;
     ea6:	02 2e       	mov	r0, r18
	lsl	r18		;
     ea8:	22 0f       	add	r18, r18
	lsl	r18		;
     eaa:	22 0f       	add	r18, r18
	add	r18, r0		;
     eac:	20 0d       	add	r18, r0
	add	r18, r21	;
     eae:	25 0f       	add	r18, r21
	rjmp	22b		;/
     eb0:	f4 cf       	rjmp	.-24     	; 0xe9a <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     eb2:	0e f4       	brtc	.+2      	; 0xeb6 <xvprintf+0x40>
	neg	r18		;
     eb4:	21 95       	neg	r18
25:	ld	r24, Y+		;
     eb6:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     eb8:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     eba:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     ebc:	19 f3       	breq	.-58     	; 0xe84 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     ebe:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     ec0:	29 f1       	breq	.+74     	; 0xf0c <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     ec2:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     ec4:	59 f1       	breq	.+86     	; 0xf1c <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     ec6:	bc 01       	movw	r22, r24
	clr	r24		;
     ec8:	88 27       	eor	r24, r24
	clr	r25		;
     eca:	99 27       	eor	r25, r25
	clt			;/
     ecc:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     ece:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     ed0:	21 f4       	brne	.+8      	; 0xeda <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     ed2:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     ed4:	99 91       	ld	r25, Y+
	set			;
     ed6:	68 94       	set
	_LPMI	r21		;/
     ed8:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     eda:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     edc:	39 f4       	brne	.+14     	; 0xeec <xvprintf+0x76>
	ldi	r20, -10	;
     ede:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     ee0:	7e f0       	brts	.+30     	; 0xf00 <xvprintf+0x8a>
	sbrs	r23, 7		;
     ee2:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     ee4:	0d c0       	rjmp	.+26     	; 0xf00 <xvprintf+0x8a>
	ldi	r24, -1		;
     ee6:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     ee8:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     eea:	0a c0       	rjmp	.+20     	; 0xf00 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     eec:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     eee:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     ef0:	39 f0       	breq	.+14     	; 0xf00 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     ef2:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     ef4:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     ef6:	21 f0       	breq	.+8      	; 0xf00 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     ef8:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     efa:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     efc:	09 f0       	breq	.+2      	; 0xf00 <xvprintf+0x8a>
	ret			;abort
     efe:	08 95       	ret
40:	push	ZH		;Output the value
     f00:	ff 93       	push	r31
	push	ZL		;
     f02:	ef 93       	push	r30
	rcall	xitoa		;
     f04:	7d df       	rcall	.-262    	; 0xe00 <xitoa>
42:	pop	ZL		;
     f06:	ef 91       	pop	r30
	pop	ZH		;
     f08:	ff 91       	pop	r31
	rjmp	0b		;/
     f0a:	b7 cf       	rjmp	.-146    	; 0xe7a <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     f0c:	ff 93       	push	r31
	push	ZL
     f0e:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     f10:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     f12:	81 91       	ld	r24, Z+
	cpi	r24, 0
     f14:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     f16:	b9 f3       	breq	.-18     	; 0xf06 <xvprintf+0x90>
	rcall	xputc
     f18:	60 df       	rcall	.-320    	; 0xdda <xputc>
	rjmp	51b
     f1a:	fb cf       	rjmp	.-10     	; 0xf12 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     f1c:	ff 93       	push	r31
	push	ZL
     f1e:	ef 93       	push	r30
	rcall	xputs
     f20:	68 df       	rcall	.-304    	; 0xdf2 <xputs>
	rjmp	42b
     f22:	f1 cf       	rjmp	.-30     	; 0xf06 <xvprintf+0x90>

00000f24 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     f24:	df 93       	push	r29
	push	YL
     f26:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     f28:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     f2a:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     f2c:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     f2e:	a3 df       	rcall	.-186    	; 0xe76 <xvprintf>
	pop	YL
     f30:	cf 91       	pop	r28
	pop	YH
     f32:	df 91       	pop	r29
	ret
     f34:	08 95       	ret

00000f36 <keymap_key_to_keycode>:


/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
     f36:	9e e0       	ldi	r25, 0x0E	; 14
     f38:	79 9f       	mul	r23, r25
     f3a:	f0 01       	movw	r30, r0
     f3c:	11 24       	eor	r1, r1
     f3e:	e6 0f       	add	r30, r22
     f40:	f1 1d       	adc	r31, r1
     f42:	96 e4       	ldi	r25, 0x46	; 70
     f44:	89 9f       	mul	r24, r25
     f46:	c0 01       	movw	r24, r0
     f48:	11 24       	eor	r1, r1
     f4a:	e8 0f       	add	r30, r24
     f4c:	f9 1f       	adc	r31, r25
     f4e:	e4 55       	subi	r30, 0x54	; 84
     f50:	ff 4f       	sbci	r31, 0xFF	; 255
     f52:	e4 91       	lpm	r30, Z+
}
     f54:	8e 2f       	mov	r24, r30
     f56:	08 95       	ret

00000f58 <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
     f58:	e8 2f       	mov	r30, r24
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	ee 0f       	add	r30, r30
     f5e:	ff 1f       	adc	r31, r31
     f60:	e4 5a       	subi	r30, 0xA4	; 164
     f62:	fe 4f       	sbci	r31, 0xFE	; 254
     f64:	25 91       	lpm	r18, Z+
     f66:	34 91       	lpm	r19, Z+
}
     f68:	c9 01       	movw	r24, r18
     f6a:	08 95       	ret

00000f6c <matrix_get_row>:

inline
matrix_row_t matrix_get_row(uint8_t row)
{
     f6c:	e8 2f       	mov	r30, r24
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	ee 0f       	add	r30, r30
     f72:	ff 1f       	adc	r31, r31
     f74:	e8 5e       	subi	r30, 0xE8	; 232
     f76:	fe 4f       	sbci	r31, 0xFE	; 254
    return matrix[row];
}
     f78:	80 81       	ld	r24, Z
     f7a:	91 81       	ldd	r25, Z+1	; 0x01
     f7c:	08 95       	ret

00000f7e <unselect_rows>:
 * pin: D0  D1  D2  D3  D5
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRD  &= ~0b00101111;
     f7e:	8a b1       	in	r24, 0x0a	; 10
     f80:	80 7d       	andi	r24, 0xD0	; 208
     f82:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~0b00101111;
     f84:	8b b1       	in	r24, 0x0b	; 11
     f86:	80 7d       	andi	r24, 0xD0	; 208
     f88:	8b b9       	out	0x0b, r24	; 11
}
     f8a:	08 95       	ret

00000f8c <matrix_init>:
}

void matrix_init(void)
{
    // initialize row and col
    unselect_rows();
     f8c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <unselect_rows>
 * pin:                                 B7                      (Rev.B)
 */
static void  init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRF  &= ~(1<<0 | 1<<1);
     f90:	80 b3       	in	r24, 0x10	; 16
     f92:	8c 7f       	andi	r24, 0xFC	; 252
     f94:	80 bb       	out	0x10, r24	; 16
    PORTF |=  (1<<0 | 1<<1);
     f96:	81 b3       	in	r24, 0x11	; 17
     f98:	83 60       	ori	r24, 0x03	; 3
     f9a:	81 bb       	out	0x11, r24	; 17
    DDRE  &= ~(1<<6);
     f9c:	6e 98       	cbi	0x0d, 6	; 13
    PORTE |=  (1<<6);
     f9e:	76 9a       	sbi	0x0e, 6	; 14
    DDRD  &= ~(1<<7 | 1<<6 | 1<<4);
     fa0:	8a b1       	in	r24, 0x0a	; 10
     fa2:	8f 72       	andi	r24, 0x2F	; 47
     fa4:	8a b9       	out	0x0a, r24	; 10
    PORTD |=  (1<<7 | 1<<6 | 1<<4);
     fa6:	8b b1       	in	r24, 0x0b	; 11
     fa8:	80 6d       	ori	r24, 0xD0	; 208
     faa:	8b b9       	out	0x0b, r24	; 11
    DDRC  &= ~(1<<7 | 1<<6);
     fac:	87 b1       	in	r24, 0x07	; 7
     fae:	8f 73       	andi	r24, 0x3F	; 63
     fb0:	87 b9       	out	0x07, r24	; 7
    PORTC |=  (1<<7 | 1<<6);
     fb2:	88 b1       	in	r24, 0x08	; 8
     fb4:	80 6c       	ori	r24, 0xC0	; 192
     fb6:	88 b9       	out	0x08, r24	; 8
    DDRB  &= ~(1<<7 | 1<<6 | 1<< 5 | 1<<4 | 1<<3 | 1<<1 | 1<<0);
     fb8:	84 b1       	in	r24, 0x04	; 4
     fba:	84 70       	andi	r24, 0x04	; 4
     fbc:	84 b9       	out	0x04, r24	; 4
    PORTB |=  (1<<7 | 1<<6 | 1<< 5 | 1<<4 | 1<<3 | 1<<1 | 1<<0);
     fbe:	85 b1       	in	r24, 0x05	; 5
     fc0:	8b 6f       	ori	r24, 0xFB	; 251
     fc2:	85 b9       	out	0x05, r24	; 5
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	90 e0       	ldi	r25, 0x00	; 0
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     fc8:	fc 01       	movw	r30, r24
     fca:	e8 5e       	subi	r30, 0xE8	; 232
     fcc:	fe 4f       	sbci	r31, 0xFE	; 254
     fce:	11 82       	std	Z+1, r1	; 0x01
     fd0:	10 82       	st	Z, r1
        matrix_debouncing[i] = 0;
     fd2:	fc 01       	movw	r30, r24
     fd4:	ee 5d       	subi	r30, 0xDE	; 222
     fd6:	fe 4f       	sbci	r31, 0xFE	; 254
     fd8:	11 82       	std	Z+1, r1	; 0x01
     fda:	10 82       	st	Z, r1
     fdc:	02 96       	adiw	r24, 0x02	; 2
    // initialize row and col
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
     fde:	8a 30       	cpi	r24, 0x0A	; 10
     fe0:	91 05       	cpc	r25, r1
     fe2:	91 f7       	brne	.-28     	; 0xfc8 <matrix_init+0x3c>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
     fe4:	08 95       	ret

00000fe6 <matrix_scan>:

uint8_t matrix_scan(void)
{
     fe6:	2f 92       	push	r2
     fe8:	3f 92       	push	r3
     fea:	4f 92       	push	r4
     fec:	5f 92       	push	r5
     fee:	6f 92       	push	r6
     ff0:	7f 92       	push	r7
     ff2:	8f 92       	push	r8
     ff4:	9f 92       	push	r9
     ff6:	af 92       	push	r10
     ff8:	bf 92       	push	r11
     ffa:	cf 92       	push	r12
     ffc:	df 92       	push	r13
     ffe:	ef 92       	push	r14
    1000:	ff 92       	push	r15
    1002:	0f 93       	push	r16
    1004:	1f 93       	push	r17
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	28 97       	sbiw	r28, 0x08	; 8
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	42 e2       	ldi	r20, 0x22	; 34
    101c:	a4 2e       	mov	r10, r20
    101e:	41 e0       	ldi	r20, 0x01	; 1
    1020:	b4 2e       	mov	r11, r20
    1022:	10 e0       	ldi	r17, 0x00	; 0
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
    1024:	05 e0       	ldi	r16, 0x05	; 5
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
    1026:	12 30       	cpi	r17, 0x02	; 2
    1028:	91 f0       	breq	.+36     	; 0x104e <matrix_scan+0x68>
    102a:	13 30       	cpi	r17, 0x03	; 3
    102c:	28 f4       	brcc	.+10     	; 0x1038 <matrix_scan+0x52>
    102e:	11 23       	and	r17, r17
    1030:	41 f0       	breq	.+16     	; 0x1042 <matrix_scan+0x5c>
    1032:	11 30       	cpi	r17, 0x01	; 1
    1034:	a1 f4       	brne	.+40     	; 0x105e <matrix_scan+0x78>
    1036:	08 c0       	rjmp	.+16     	; 0x1048 <matrix_scan+0x62>
    1038:	13 30       	cpi	r17, 0x03	; 3
    103a:	61 f0       	breq	.+24     	; 0x1054 <matrix_scan+0x6e>
    103c:	14 30       	cpi	r17, 0x04	; 4
    103e:	79 f4       	brne	.+30     	; 0x105e <matrix_scan+0x78>
    1040:	0c c0       	rjmp	.+24     	; 0x105a <matrix_scan+0x74>
        case 0:
            DDRD  |= (1<<0);
    1042:	50 9a       	sbi	0x0a, 0	; 10
            PORTD &= ~(1<<0);
    1044:	58 98       	cbi	0x0b, 0	; 11
    1046:	0b c0       	rjmp	.+22     	; 0x105e <matrix_scan+0x78>
            break;
        case 1:
            DDRD  |= (1<<1);
    1048:	51 9a       	sbi	0x0a, 1	; 10
            PORTD &= ~(1<<1);
    104a:	59 98       	cbi	0x0b, 1	; 11
    104c:	08 c0       	rjmp	.+16     	; 0x105e <matrix_scan+0x78>
            break;
        case 2:
            DDRD  |= (1<<2);
    104e:	52 9a       	sbi	0x0a, 2	; 10
            PORTD &= ~(1<<2);
    1050:	5a 98       	cbi	0x0b, 2	; 11
    1052:	05 c0       	rjmp	.+10     	; 0x105e <matrix_scan+0x78>
            break;
        case 3:
            DDRD  |= (1<<3);
    1054:	53 9a       	sbi	0x0a, 3	; 10
            PORTD &= ~(1<<3);
    1056:	5b 98       	cbi	0x0b, 3	; 11
    1058:	02 c0       	rjmp	.+4      	; 0x105e <matrix_scan+0x78>
            break;
        case 4:
            DDRD  |= (1<<5);
    105a:	55 9a       	sbi	0x0a, 5	; 10
            PORTD &= ~(1<<5);
    105c:	5d 98       	cbi	0x0b, 5	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    105e:	80 ea       	ldi	r24, 0xA0	; 160
    1060:	8a 95       	dec	r24
    1062:	f1 f7       	brne	.-4      	; 0x1060 <matrix_scan+0x7a>
    PORTB |=  (1<<7 | 1<<6 | 1<< 5 | 1<<4 | 1<<3 | 1<<1 | 1<<0);
}

static matrix_row_t read_cols(void)
{
    return (PINF&(1<<0) ? 0 : (1<<0)) |
    1064:	2f b1       	in	r18, 0x0f	; 15
    1066:	79 99       	sbic	0x0f, 1	; 15
    1068:	05 c0       	rjmp	.+10     	; 0x1074 <matrix_scan+0x8e>
    106a:	42 e0       	ldi	r20, 0x02	; 2
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	5a 83       	std	Y+2, r21	; 0x02
    1070:	49 83       	std	Y+1, r20	; 0x01
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <matrix_scan+0x92>
    1074:	1a 82       	std	Y+2, r1	; 0x02
    1076:	19 82       	std	Y+1, r1	; 0x01
    1078:	66 99       	sbic	0x0c, 6	; 12
    107a:	04 c0       	rjmp	.+8      	; 0x1084 <matrix_scan+0x9e>
    107c:	34 e0       	ldi	r19, 0x04	; 4
    107e:	23 2e       	mov	r2, r19
    1080:	31 2c       	mov	r3, r1
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <matrix_scan+0xa2>
    1084:	22 24       	eor	r2, r2
    1086:	33 24       	eor	r3, r3
    1088:	86 b1       	in	r24, 0x06	; 6
    108a:	48 2f       	mov	r20, r24
    108c:	55 27       	eor	r21, r21
    108e:	47 fd       	sbrc	r20, 7
    1090:	50 95       	com	r21
    1092:	40 95       	com	r20
    1094:	50 95       	com	r21
    1096:	44 27       	eor	r20, r20
    1098:	55 0f       	add	r21, r21
    109a:	44 1f       	adc	r20, r20
    109c:	55 27       	eor	r21, r21
    109e:	83 e0       	ldi	r24, 0x03	; 3
    10a0:	44 0f       	add	r20, r20
    10a2:	55 1f       	adc	r21, r21
    10a4:	8a 95       	dec	r24
    10a6:	e1 f7       	brne	.-8      	; 0x10a0 <matrix_scan+0xba>
    10a8:	36 99       	sbic	0x06, 6	; 6
    10aa:	04 c0       	rjmp	.+8      	; 0x10b4 <matrix_scan+0xce>
    10ac:	b0 e1       	ldi	r27, 0x10	; 16
    10ae:	4b 2e       	mov	r4, r27
    10b0:	51 2c       	mov	r5, r1
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <matrix_scan+0xd2>
    10b4:	44 24       	eor	r4, r4
    10b6:	55 24       	eor	r5, r5
    10b8:	1e 99       	sbic	0x03, 6	; 3
    10ba:	04 c0       	rjmp	.+8      	; 0x10c4 <matrix_scan+0xde>
    10bc:	a0 e2       	ldi	r26, 0x20	; 32
    10be:	6a 2e       	mov	r6, r26
    10c0:	71 2c       	mov	r7, r1
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <matrix_scan+0xe2>
    10c4:	66 24       	eor	r6, r6
    10c6:	77 24       	eor	r7, r7
    10c8:	4c 99       	sbic	0x09, 4	; 9
    10ca:	04 c0       	rjmp	.+8      	; 0x10d4 <matrix_scan+0xee>
    10cc:	f0 e4       	ldi	r31, 0x40	; 64
    10ce:	8f 2e       	mov	r8, r31
    10d0:	91 2c       	mov	r9, r1
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <matrix_scan+0xf2>
    10d4:	88 24       	eor	r8, r8
    10d6:	99 24       	eor	r9, r9
    10d8:	19 99       	sbic	0x03, 1	; 3
    10da:	04 c0       	rjmp	.+8      	; 0x10e4 <matrix_scan+0xfe>
    10dc:	e0 e8       	ldi	r30, 0x80	; 128
    10de:	ce 2e       	mov	r12, r30
    10e0:	d1 2c       	mov	r13, r1
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <matrix_scan+0x102>
    10e4:	cc 24       	eor	r12, r12
    10e6:	dd 24       	eor	r13, r13
    10e8:	18 9b       	sbis	0x03, 0	; 3
    10ea:	05 c0       	rjmp	.+10     	; 0x10f6 <matrix_scan+0x110>
    10ec:	1f 9b       	sbis	0x03, 7	; 3
    10ee:	03 c0       	rjmp	.+6      	; 0x10f6 <matrix_scan+0x110>
    10f0:	ee 24       	eor	r14, r14
    10f2:	ff 24       	eor	r15, r15
    10f4:	03 c0       	rjmp	.+6      	; 0x10fc <matrix_scan+0x116>
    10f6:	e1 2c       	mov	r14, r1
    10f8:	71 e0       	ldi	r23, 0x01	; 1
    10fa:	f7 2e       	mov	r15, r23
    10fc:	1d 99       	sbic	0x03, 5	; 3
    10fe:	05 c0       	rjmp	.+10     	; 0x110a <matrix_scan+0x124>
    1100:	60 e0       	ldi	r22, 0x00	; 0
    1102:	72 e0       	ldi	r23, 0x02	; 2
    1104:	7c 83       	std	Y+4, r23	; 0x04
    1106:	6b 83       	std	Y+3, r22	; 0x03
    1108:	02 c0       	rjmp	.+4      	; 0x110e <matrix_scan+0x128>
    110a:	1c 82       	std	Y+4, r1	; 0x04
    110c:	1b 82       	std	Y+3, r1	; 0x03
    110e:	1c 99       	sbic	0x03, 4	; 3
    1110:	03 c0       	rjmp	.+6      	; 0x1118 <matrix_scan+0x132>
    1112:	a0 e0       	ldi	r26, 0x00	; 0
    1114:	b4 e0       	ldi	r27, 0x04	; 4
    1116:	02 c0       	rjmp	.+4      	; 0x111c <matrix_scan+0x136>
    1118:	a0 e0       	ldi	r26, 0x00	; 0
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	89 b1       	in	r24, 0x09	; 9
    111e:	99 27       	eor	r25, r25
    1120:	87 fd       	sbrc	r24, 7
    1122:	90 95       	com	r25
    1124:	80 95       	com	r24
    1126:	90 95       	com	r25
    1128:	88 27       	eor	r24, r24
    112a:	99 0f       	add	r25, r25
    112c:	88 1f       	adc	r24, r24
    112e:	99 27       	eor	r25, r25
    1130:	98 2f       	mov	r25, r24
    1132:	88 27       	eor	r24, r24
    1134:	99 0f       	add	r25, r25
    1136:	99 0f       	add	r25, r25
    1138:	99 0f       	add	r25, r25
    113a:	4e 99       	sbic	0x09, 6	; 9
    113c:	05 c0       	rjmp	.+10     	; 0x1148 <matrix_scan+0x162>
    113e:	e0 e0       	ldi	r30, 0x00	; 0
    1140:	f0 e1       	ldi	r31, 0x10	; 16
    1142:	fe 83       	std	Y+6, r31	; 0x06
    1144:	ed 83       	std	Y+5, r30	; 0x05
    1146:	02 c0       	rjmp	.+4      	; 0x114c <matrix_scan+0x166>
    1148:	1e 82       	std	Y+6, r1	; 0x06
    114a:	1d 82       	std	Y+5, r1	; 0x05
    114c:	1b 99       	sbic	0x03, 3	; 3
    114e:	05 c0       	rjmp	.+10     	; 0x115a <matrix_scan+0x174>
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	70 e2       	ldi	r23, 0x20	; 32
    1154:	78 87       	std	Y+8, r23	; 0x08
    1156:	6f 83       	std	Y+7, r22	; 0x07
    1158:	02 c0       	rjmp	.+4      	; 0x115e <matrix_scan+0x178>
    115a:	18 86       	std	Y+8, r1	; 0x08
    115c:	1f 82       	std	Y+7, r1	; 0x07
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	e1 e0       	ldi	r30, 0x01	; 1
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	2e 27       	eor	r18, r30
    1166:	3f 27       	eor	r19, r31
    1168:	21 70       	andi	r18, 0x01	; 1
    116a:	30 70       	andi	r19, 0x00	; 0
    116c:	69 81       	ldd	r22, Y+1	; 0x01
    116e:	7a 81       	ldd	r23, Y+2	; 0x02
    1170:	26 2b       	or	r18, r22
    1172:	37 2b       	or	r19, r23
    1174:	22 29       	or	r18, r2
    1176:	33 29       	or	r19, r3
    1178:	24 2b       	or	r18, r20
    117a:	35 2b       	or	r19, r21
    117c:	24 29       	or	r18, r4
    117e:	35 29       	or	r19, r5
    1180:	26 29       	or	r18, r6
    1182:	37 29       	or	r19, r7
    1184:	28 29       	or	r18, r8
    1186:	39 29       	or	r19, r9
    1188:	2c 29       	or	r18, r12
    118a:	3d 29       	or	r19, r13
    118c:	2e 29       	or	r18, r14
    118e:	3f 29       	or	r19, r15
    1190:	eb 81       	ldd	r30, Y+3	; 0x03
    1192:	fc 81       	ldd	r31, Y+4	; 0x04
    1194:	2e 2b       	or	r18, r30
    1196:	3f 2b       	or	r19, r31
    1198:	2a 2b       	or	r18, r26
    119a:	3b 2b       	or	r19, r27
    119c:	28 2b       	or	r18, r24
    119e:	39 2b       	or	r19, r25
    11a0:	4d 81       	ldd	r20, Y+5	; 0x05
    11a2:	5e 81       	ldd	r21, Y+6	; 0x06
    11a4:	24 2b       	or	r18, r20
    11a6:	35 2b       	or	r19, r21
    11a8:	6f 81       	ldd	r22, Y+7	; 0x07
    11aa:	78 85       	ldd	r23, Y+8	; 0x08
    11ac:	26 2b       	or	r18, r22
    11ae:	37 2b       	or	r19, r23
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
    11b0:	d5 01       	movw	r26, r10
    11b2:	8d 91       	ld	r24, X+
    11b4:	9c 91       	ld	r25, X
    11b6:	11 97       	sbiw	r26, 0x01	; 1
    11b8:	82 17       	cp	r24, r18
    11ba:	93 07       	cpc	r25, r19
    11bc:	99 f1       	breq	.+102    	; 0x1224 <matrix_scan+0x23e>
            matrix_debouncing[i] = cols;
    11be:	2d 93       	st	X+, r18
    11c0:	3c 93       	st	X, r19
            if (debouncing) {
    11c2:	80 91 00 01 	lds	r24, 0x0100
    11c6:	88 23       	and	r24, r24
    11c8:	59 f1       	breq	.+86     	; 0x1220 <matrix_scan+0x23a>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    11ca:	80 91 a5 01 	lds	r24, 0x01A5
    11ce:	80 ff       	sbrs	r24, 0
    11d0:	04 c0       	rjmp	.+8      	; 0x11da <matrix_scan+0x1f4>
    11d2:	8c e1       	ldi	r24, 0x1C	; 28
    11d4:	93 e0       	ldi	r25, 0x03	; 3
    11d6:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    11da:	80 91 a5 01 	lds	r24, 0x01A5
    11de:	80 ff       	sbrs	r24, 0
    11e0:	17 c0       	rjmp	.+46     	; 0x1210 <matrix_scan+0x22a>
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <matrix_scan+0x1fe>
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <matrix_scan+0x200>
    11e6:	ed b7       	in	r30, 0x3d	; 61
    11e8:	fe b7       	in	r31, 0x3e	; 62
    11ea:	31 96       	adiw	r30, 0x01	; 1
    11ec:	47 e1       	ldi	r20, 0x17	; 23
    11ee:	53 e0       	ldi	r21, 0x03	; 3
    11f0:	ad b7       	in	r26, 0x3d	; 61
    11f2:	be b7       	in	r27, 0x3e	; 62
    11f4:	12 96       	adiw	r26, 0x02	; 2
    11f6:	5c 93       	st	X, r21
    11f8:	4e 93       	st	-X, r20
    11fa:	11 97       	sbiw	r26, 0x01	; 1
    11fc:	80 91 00 01 	lds	r24, 0x0100
    1200:	82 83       	std	Z+2, r24	; 0x02
    1202:	13 82       	std	Z+3, r1	; 0x03
    1204:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	80 91 a5 01 	lds	r24, 0x01A5
    1214:	80 ff       	sbrs	r24, 0
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <matrix_scan+0x23a>
    1218:	85 e1       	ldi	r24, 0x15	; 21
    121a:	93 e0       	ldi	r25, 0x03	; 3
    121c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
            }
            debouncing = DEBOUNCE;
    1220:	00 93 00 01 	sts	0x0100, r16
        }
        unselect_rows();
    1224:	0e 94 bf 07 	call	0xf7e	; 0xf7e <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    1228:	1f 5f       	subi	r17, 0xFF	; 255
    122a:	62 e0       	ldi	r22, 0x02	; 2
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	a6 0e       	add	r10, r22
    1230:	b7 1e       	adc	r11, r23
    1232:	15 30       	cpi	r17, 0x05	; 5
    1234:	09 f0       	breq	.+2      	; 0x1238 <matrix_scan+0x252>
    1236:	f7 ce       	rjmp	.-530    	; 0x1026 <matrix_scan+0x40>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    1238:	80 91 00 01 	lds	r24, 0x0100
    123c:	88 23       	and	r24, r24
    123e:	91 f1       	breq	.+100    	; 0x12a4 <matrix_scan+0x2be>
        if (--debouncing) {
    1240:	81 50       	subi	r24, 0x01	; 1
    1242:	80 93 00 01 	sts	0x0100, r24
    1246:	88 23       	and	r24, r24
    1248:	29 f0       	breq	.+10     	; 0x1254 <matrix_scan+0x26e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    124a:	80 ea       	ldi	r24, 0xA0	; 160
    124c:	9f e0       	ldi	r25, 0x0F	; 15
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	f1 f7       	brne	.-4      	; 0x124e <matrix_scan+0x268>
    1252:	28 c0       	rjmp	.+80     	; 0x12a4 <matrix_scan+0x2be>
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    1254:	80 91 22 01 	lds	r24, 0x0122
    1258:	90 91 23 01 	lds	r25, 0x0123
    125c:	90 93 19 01 	sts	0x0119, r25
    1260:	80 93 18 01 	sts	0x0118, r24
    1264:	80 91 24 01 	lds	r24, 0x0124
    1268:	90 91 25 01 	lds	r25, 0x0125
    126c:	90 93 1b 01 	sts	0x011B, r25
    1270:	80 93 1a 01 	sts	0x011A, r24
    1274:	80 91 26 01 	lds	r24, 0x0126
    1278:	90 91 27 01 	lds	r25, 0x0127
    127c:	90 93 1d 01 	sts	0x011D, r25
    1280:	80 93 1c 01 	sts	0x011C, r24
    1284:	80 91 28 01 	lds	r24, 0x0128
    1288:	90 91 29 01 	lds	r25, 0x0129
    128c:	90 93 1f 01 	sts	0x011F, r25
    1290:	80 93 1e 01 	sts	0x011E, r24
    1294:	80 91 2a 01 	lds	r24, 0x012A
    1298:	90 91 2b 01 	lds	r25, 0x012B
    129c:	90 93 21 01 	sts	0x0121, r25
    12a0:	80 93 20 01 	sts	0x0120, r24
            }
        }
    }

    return 1;
}
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	28 96       	adiw	r28, 0x08	; 8
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	ff 90       	pop	r15
    12bc:	ef 90       	pop	r14
    12be:	df 90       	pop	r13
    12c0:	cf 90       	pop	r12
    12c2:	bf 90       	pop	r11
    12c4:	af 90       	pop	r10
    12c6:	9f 90       	pop	r9
    12c8:	8f 90       	pop	r8
    12ca:	7f 90       	pop	r7
    12cc:	6f 90       	pop	r6
    12ce:	5f 90       	pop	r5
    12d0:	4f 90       	pop	r4
    12d2:	3f 90       	pop	r3
    12d4:	2f 90       	pop	r2
    12d6:	08 95       	ret

000012d8 <matrix_print>:
{
    return matrix[row];
}

void matrix_print(void)
{
    12d8:	cf 92       	push	r12
    12da:	df 92       	push	r13
    12dc:	ef 92       	push	r14
    12de:	ff 92       	push	r15
    12e0:	0f 93       	push	r16
    12e2:	1f 93       	push	r17
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    12e8:	8e ef       	ldi	r24, 0xFE	; 254
    12ea:	92 e0       	ldi	r25, 0x02	; 2
    12ec:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    12f0:	08 e1       	ldi	r16, 0x18	; 24
    12f2:	11 e0       	ldi	r17, 0x01	; 1
    12f4:	c0 e0       	ldi	r28, 0x00	; 0
    12f6:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    12f8:	69 ef       	ldi	r22, 0xF9	; 249
    12fa:	c6 2e       	mov	r12, r22
    12fc:	62 e0       	ldi	r22, 0x02	; 2
    12fe:	d6 2e       	mov	r13, r22
        pbin_reverse16(matrix_get_row(row));
    1300:	50 ef       	ldi	r21, 0xF0	; 240
    1302:	e5 2e       	mov	r14, r21
    1304:	52 e0       	ldi	r21, 0x02	; 2
    1306:	f5 2e       	mov	r15, r21

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    1308:	00 d0       	rcall	.+0      	; 0x130a <matrix_print+0x32>
    130a:	00 d0       	rcall	.+0      	; 0x130c <matrix_print+0x34>
    130c:	ed b7       	in	r30, 0x3d	; 61
    130e:	fe b7       	in	r31, 0x3e	; 62
    1310:	d2 82       	std	Z+2, r13	; 0x02
    1312:	c1 82       	std	Z+1, r12	; 0x01
    1314:	d4 83       	std	Z+4, r29	; 0x04
    1316:	c3 83       	std	Z+3, r28	; 0x03
    1318:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	86 ef       	ldi	r24, 0xF6	; 246
    1326:	92 e0       	ldi	r25, 0x02	; 2
    1328:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
        pbin_reverse16(matrix_get_row(row));
    132c:	f8 01       	movw	r30, r16
    132e:	81 91       	ld	r24, Z+
    1330:	91 91       	ld	r25, Z+
    1332:	8f 01       	movw	r16, r30
    1334:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <bitrev16>
    1338:	00 d0       	rcall	.+0      	; 0x133a <matrix_print+0x62>
    133a:	00 d0       	rcall	.+0      	; 0x133c <matrix_print+0x64>
    133c:	ed b7       	in	r30, 0x3d	; 61
    133e:	fe b7       	in	r31, 0x3e	; 62
    1340:	f2 82       	std	Z+2, r15	; 0x02
    1342:	e1 82       	std	Z+1, r14	; 0x01
    1344:	94 83       	std	Z+4, r25	; 0x04
    1346:	83 83       	std	Z+3, r24	; 0x03
    1348:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
        print("\n");
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	8e ee       	ldi	r24, 0xEE	; 238
    1356:	92 e0       	ldi	r25, 0x02	; 2
    1358:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    135c:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    135e:	c5 30       	cpi	r28, 0x05	; 5
    1360:	d1 05       	cpc	r29, r1
    1362:	91 f6       	brne	.-92     	; 0x1308 <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    1364:	df 91       	pop	r29
    1366:	cf 91       	pop	r28
    1368:	1f 91       	pop	r17
    136a:	0f 91       	pop	r16
    136c:	ff 90       	pop	r15
    136e:	ef 90       	pop	r14
    1370:	df 90       	pop	r13
    1372:	cf 90       	pop	r12
    1374:	08 95       	ret

00001376 <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
    1376:	81 ff       	sbrs	r24, 1
    1378:	02 c0       	rjmp	.+4      	; 0x137e <led_set+0x8>
        // output low
        DDRB |= (1<<2);
    137a:	22 9a       	sbi	0x04, 2	; 4
    137c:	01 c0       	rjmp	.+2      	; 0x1380 <led_set+0xa>
        PORTB &= ~(1<<2);
    } else {
        // Hi-Z
        DDRB &= ~(1<<2);
    137e:	22 98       	cbi	0x04, 2	; 4
        PORTB &= ~(1<<2);
    1380:	2a 98       	cbi	0x05, 2	; 5
    1382:	08 95       	ret

00001384 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    1384:	80 91 30 01 	lds	r24, 0x0130
    1388:	8f 5f       	subi	r24, 0xFF	; 255
    138a:	80 93 30 01 	sts	0x0130, r24
    138e:	62 e3       	ldi	r22, 0x32	; 50
    1390:	0e 94 72 2d 	call	0x5ae4	; 0x5ae4 <__udivmodqi4>
    1394:	99 23       	and	r25, r25
    1396:	a9 f5       	brne	.+106    	; 0x1402 <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
    1398:	10 92 30 01 	sts	0x0130, r1

    if (!console_flush) return;
    139c:	80 91 2e 01 	lds	r24, 0x012E
    13a0:	88 23       	and	r24, r24
    13a2:	79 f1       	breq	.+94     	; 0x1402 <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    13a4:	80 91 bb 01 	lds	r24, 0x01BB
    13a8:	84 30       	cpi	r24, 0x04	; 4
    13aa:	49 f5       	brne	.+82     	; 0x13fe <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    13ac:	90 91 e9 00 	lds	r25, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    13b0:	80 91 ec 00 	lds	r24, 0x00EC
    13b4:	80 fd       	sbrc	r24, 0
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <EVENT_USB_Device_StartOfFrame+0x38>
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	01 c0       	rjmp	.+2      	; 0x13be <EVENT_USB_Device_StartOfFrame+0x3a>
    13bc:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    13be:	9f 70       	andi	r25, 0x0F	; 15
    13c0:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13c2:	84 e0       	ldi	r24, 0x04	; 4
    13c4:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    13c8:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    13cc:	80 ff       	sbrs	r24, 0
    13ce:	14 c0       	rjmp	.+40     	; 0x13f8 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    13d0:	80 91 ee 00 	lds	r24, 0x00EE
    13d4:	87 fd       	sbrc	r24, 7
    13d6:	03 c0       	rjmp	.+6      	; 0x13de <EVENT_USB_Device_StartOfFrame+0x5a>
    13d8:	0f c0       	rjmp	.+30     	; 0x13f8 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    13da:	10 92 f1 00 	sts	0x00F1, r1
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13de:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    13e2:	85 fd       	sbrc	r24, 5
    13e4:	fa cf       	rjmp	.-12     	; 0x13da <EVENT_USB_Device_StartOfFrame+0x56>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    13e6:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    13ea:	80 ff       	sbrs	r24, 0
    13ec:	05 c0       	rjmp	.+10     	; 0x13f8 <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13ee:	80 91 e8 00 	lds	r24, 0x00E8
    13f2:	8e 77       	andi	r24, 0x7E	; 126
    13f4:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13f8:	9f 70       	andi	r25, 0x0F	; 15
    13fa:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    13fe:	10 92 2e 01 	sts	0x012E, r1
    1402:	08 95       	ret

00001404 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    1404:	80 91 2d 01 	lds	r24, 0x012D
    1408:	08 95       	ret

0000140a <sendchar>:
 * sendchar
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
#define SEND_TIMEOUT 5
int8_t sendchar(uint8_t c)
{
    140a:	68 2f       	mov	r22, r24
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    140c:	8f b7       	in	r24, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	10 92 2e 01 	sts	0x012E, r1
    1414:	8f bf       	out	0x3f, r24	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1416:	80 91 bb 01 	lds	r24, 0x01BB
    141a:	84 30       	cpi	r24, 0x04	; 4
    141c:	11 f0       	breq	.+4      	; 0x1422 <sendchar+0x18>
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	08 95       	ret
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1422:	90 91 e9 00 	lds	r25, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1426:	80 91 ec 00 	lds	r24, 0x00EC
    142a:	80 fd       	sbrc	r24, 0
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <sendchar+0x28>
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	01 c0       	rjmp	.+2      	; 0x1434 <sendchar+0x2a>
    1432:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1434:	39 2f       	mov	r19, r25
    1436:	3f 70       	andi	r19, 0x0F	; 15
    1438:	38 2b       	or	r19, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    143a:	84 e0       	ldi	r24, 0x04	; 4
    143c:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1440:	80 91 eb 00 	lds	r24, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1444:	80 ff       	sbrs	r24, 0
    1446:	43 c0       	rjmp	.+134    	; 0x14ce <sendchar+0xc4>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1448:	80 91 ee 00 	lds	r24, 0x00EE
    144c:	87 ff       	sbrs	r24, 7
    144e:	3f c0       	rjmp	.+126    	; 0x14ce <sendchar+0xc4>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    1450:	80 91 2f 01 	lds	r24, 0x012F
    1454:	88 23       	and	r24, r24
    1456:	21 f0       	breq	.+8      	; 0x1460 <sendchar+0x56>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1458:	80 91 e8 00 	lds	r24, 0x00E8
    145c:	85 ff       	sbrs	r24, 5
    145e:	37 c0       	rjmp	.+110    	; 0x14ce <sendchar+0xc4>
        goto ERROR_EXIT;
    }

    timeouted = false;
    1460:	10 92 2f 01 	sts	0x012F, r1
    1464:	25 e0       	ldi	r18, 0x05	; 5
    1466:	40 ea       	ldi	r20, 0xA0	; 160
    1468:	5f e0       	ldi	r21, 0x0F	; 15
    146a:	12 c0       	rjmp	.+36     	; 0x1490 <sendchar+0x86>

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    146c:	80 91 bb 01 	lds	r24, 0x01BB
    1470:	84 30       	cpi	r24, 0x04	; 4
    1472:	69 f5       	brne	.+90     	; 0x14ce <sendchar+0xc4>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1474:	80 91 eb 00 	lds	r24, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    1478:	85 fd       	sbrc	r24, 5
    147a:	29 c0       	rjmp	.+82     	; 0x14ce <sendchar+0xc4>
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    147c:	22 23       	and	r18, r18
    147e:	21 f4       	brne	.+8      	; 0x1488 <sendchar+0x7e>
            timeouted = true;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	80 93 2f 01 	sts	0x012F, r24
    1486:	23 c0       	rjmp	.+70     	; 0x14ce <sendchar+0xc4>
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    1488:	21 50       	subi	r18, 0x01	; 1
    148a:	ca 01       	movw	r24, r20
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	f1 f7       	brne	.-4      	; 0x148c <sendchar+0x82>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1490:	80 91 e8 00 	lds	r24, 0x00E8
    }

    timeouted = false;

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    1494:	85 ff       	sbrs	r24, 5
    1496:	ea cf       	rjmp	.-44     	; 0x146c <sendchar+0x62>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1498:	60 93 f1 00 	sts	0x00F1, r22
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    149c:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    14a0:	85 fd       	sbrc	r24, 5
    14a2:	0a c0       	rjmp	.+20     	; 0x14b8 <sendchar+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    14a4:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    14a8:	80 ff       	sbrs	r24, 0
    14aa:	fc cf       	rjmp	.-8      	; 0x14a4 <sendchar+0x9a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14ac:	80 91 e8 00 	lds	r24, 0x00E8
    14b0:	8e 77       	andi	r24, 0x7E	; 126
    14b2:	80 93 e8 00 	sts	0x00E8, r24
    14b6:	06 c0       	rjmp	.+12     	; 0x14c4 <sendchar+0xba>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    14b8:	9f b7       	in	r25, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	80 93 2e 01 	sts	0x012E, r24
    14c2:	9f bf       	out	0x3f, r25	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14c4:	3f 70       	andi	r19, 0x0F	; 15
    14c6:	30 93 e9 00 	sts	0x00E9, r19
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	08 95       	ret
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    14ce:	3f 70       	andi	r19, 0x0F	; 15
    14d0:	30 93 e9 00 	sts	0x00E9, r19
    14d4:	8f ef       	ldi	r24, 0xFF	; 255
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    14d6:	08 95       	ret

000014d8 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	00 d0       	rcall	.+0      	; 0x14de <send_consumer+0x6>
    14de:	0f 92       	push	r0
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	ac 01       	movw	r20, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    14e6:	80 91 bb 01 	lds	r24, 0x01BB
    14ea:	84 30       	cpi	r24, 0x04	; 4
    14ec:	29 f5       	brne	.+74     	; 0x1538 <send_consumer+0x60>
    14ee:	83 e0       	ldi	r24, 0x03	; 3
    14f0:	80 93 e9 00 	sts	0x00E9, r24
    14f4:	2f ef       	ldi	r18, 0xFF	; 255
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14f6:	95 ed       	ldi	r25, 0xD5	; 213
    14f8:	05 c0       	rjmp	.+10     	; 0x1504 <send_consumer+0x2c>
    14fa:	89 2f       	mov	r24, r25
    14fc:	8a 95       	dec	r24
    14fe:	f1 f7       	brne	.-4      	; 0x14fc <send_consumer+0x24>
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1500:	22 23       	and	r18, r18
    1502:	29 f0       	breq	.+10     	; 0x150e <send_consumer+0x36>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1504:	80 91 e8 00 	lds	r24, 0x00E8
    1508:	21 50       	subi	r18, 0x01	; 1
    150a:	85 ff       	sbrs	r24, 5
    150c:	f6 cf       	rjmp	.-20     	; 0x14fa <send_consumer+0x22>
    150e:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1512:	85 ff       	sbrs	r24, 5
    1514:	11 c0       	rjmp	.+34     	; 0x1538 <send_consumer+0x60>
        return;

    report_extra_t r = {
        .report_id = REPORT_ID_CONSUMER,
        .usage = data
    };
    1516:	5b 83       	std	Y+3, r21	; 0x03
    1518:	4a 83       	std	Y+2, r20	; 0x02
    151a:	83 e0       	ldi	r24, 0x03	; 3
    151c:	89 83       	std	Y+1, r24	; 0x01

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    if (!Endpoint_IsReadWriteAllowed()) return;

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    151e:	ce 01       	movw	r24, r28
    1520:	01 96       	adiw	r24, 0x01	; 1
    1522:	63 e0       	ldi	r22, 0x03	; 3
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	40 e0       	ldi	r20, 0x00	; 0
    1528:	50 e0       	ldi	r21, 0x00	; 0
    152a:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    152e:	80 91 e8 00 	lds	r24, 0x00E8
    1532:	8e 77       	andi	r24, 0x7E	; 126
    1534:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	0f 90       	pop	r0
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	08 95       	ret

00001544 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	00 d0       	rcall	.+0      	; 0x154a <send_system+0x6>
    154a:	0f 92       	push	r0
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	ac 01       	movw	r20, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1552:	80 91 bb 01 	lds	r24, 0x01BB
    1556:	84 30       	cpi	r24, 0x04	; 4
    1558:	29 f5       	brne	.+74     	; 0x15a4 <send_system+0x60>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    155a:	83 e0       	ldi	r24, 0x03	; 3
    155c:	80 93 e9 00 	sts	0x00E9, r24
    1560:	2f ef       	ldi	r18, 0xFF	; 255
    1562:	95 ed       	ldi	r25, 0xD5	; 213
    1564:	05 c0       	rjmp	.+10     	; 0x1570 <send_system+0x2c>
    1566:	89 2f       	mov	r24, r25
    1568:	8a 95       	dec	r24
    156a:	f1 f7       	brne	.-4      	; 0x1568 <send_system+0x24>
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    156c:	22 23       	and	r18, r18
    156e:	29 f0       	breq	.+10     	; 0x157a <send_system+0x36>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1570:	80 91 e8 00 	lds	r24, 0x00E8
    1574:	21 50       	subi	r18, 0x01	; 1
    1576:	85 ff       	sbrs	r24, 5
    1578:	f6 cf       	rjmp	.-20     	; 0x1566 <send_system+0x22>
    157a:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    157e:	85 ff       	sbrs	r24, 5
    1580:	11 c0       	rjmp	.+34     	; 0x15a4 <send_system+0x60>
        return;

    report_extra_t r = {
        .report_id = REPORT_ID_SYSTEM,
        .usage = data
    };
    1582:	5b 83       	std	Y+3, r21	; 0x03
    1584:	4a 83       	std	Y+2, r20	; 0x02
    1586:	82 e0       	ldi	r24, 0x02	; 2
    1588:	89 83       	std	Y+1, r24	; 0x01

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    if (!Endpoint_IsReadWriteAllowed()) return;

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    158a:	ce 01       	movw	r24, r28
    158c:	01 96       	adiw	r24, 0x01	; 1
    158e:	63 e0       	ldi	r22, 0x03	; 3
    1590:	70 e0       	ldi	r23, 0x00	; 0
    1592:	40 e0       	ldi	r20, 0x00	; 0
    1594:	50 e0       	ldi	r21, 0x00	; 0
    1596:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    159a:	80 91 e8 00 	lds	r24, 0x00E8
    159e:	8e 77       	andi	r24, 0x7E	; 126
    15a0:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <send_mouse>:

    keyboard_report_sent = *report;
}

static void send_mouse(report_mouse_t *report)
{
    15b0:	ac 01       	movw	r20, r24
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    15b2:	80 91 bb 01 	lds	r24, 0x01BB
    15b6:	84 30       	cpi	r24, 0x04	; 4
    15b8:	01 f5       	brne	.+64     	; 0x15fa <send_mouse+0x4a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15ba:	82 e0       	ldi	r24, 0x02	; 2
    15bc:	80 93 e9 00 	sts	0x00E9, r24
    15c0:	2f ef       	ldi	r18, 0xFF	; 255
    15c2:	95 ed       	ldi	r25, 0xD5	; 213
    15c4:	05 c0       	rjmp	.+10     	; 0x15d0 <send_mouse+0x20>
    15c6:	89 2f       	mov	r24, r25
    15c8:	8a 95       	dec	r24
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <send_mouse+0x18>

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    15cc:	22 23       	and	r18, r18
    15ce:	29 f0       	breq	.+10     	; 0x15da <send_mouse+0x2a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    15d0:	80 91 e8 00 	lds	r24, 0x00E8
    15d4:	21 50       	subi	r18, 0x01	; 1
    15d6:	85 ff       	sbrs	r24, 5
    15d8:	f6 cf       	rjmp	.-20     	; 0x15c6 <send_mouse+0x16>
    15da:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    15de:	85 ff       	sbrs	r24, 5
    15e0:	0c c0       	rjmp	.+24     	; 0x15fa <send_mouse+0x4a>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    15e2:	ca 01       	movw	r24, r20
    15e4:	65 e0       	ldi	r22, 0x05	; 5
    15e6:	70 e0       	ldi	r23, 0x00	; 0
    15e8:	40 e0       	ldi	r20, 0x00	; 0
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15f0:	80 91 e8 00 	lds	r24, 0x00E8
    15f4:	8e 77       	andi	r24, 0x7E	; 126
    15f6:	80 93 e8 00 	sts	0x00E8, r24
    15fa:	08 95       	ret

000015fc <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    15fc:	0f 93       	push	r16
    15fe:	1f 93       	push	r17
    1600:	18 2f       	mov	r17, r24
    1602:	09 2f       	mov	r16, r25
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1604:	80 91 bb 01 	lds	r24, 0x01BB
    1608:	84 30       	cpi	r24, 0x04	; 4
    160a:	09 f0       	breq	.+2      	; 0x160e <send_keyboard+0x12>
    160c:	4d c0       	rjmp	.+154    	; 0x16a8 <send_keyboard+0xac>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    160e:	80 91 01 01 	lds	r24, 0x0101
    1612:	88 23       	and	r24, r24
    1614:	e9 f0       	breq	.+58     	; 0x1650 <send_keyboard+0x54>
    1616:	80 91 0c 01 	lds	r24, 0x010C
    161a:	88 23       	and	r24, r24
    161c:	c9 f0       	breq	.+50     	; 0x1650 <send_keyboard+0x54>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    161e:	85 e0       	ldi	r24, 0x05	; 5
    1620:	80 93 e9 00 	sts	0x00E9, r24
    1624:	9f ef       	ldi	r25, 0xFF	; 255
    1626:	25 e1       	ldi	r18, 0x15	; 21
    1628:	05 c0       	rjmp	.+10     	; 0x1634 <send_keyboard+0x38>
    162a:	82 2f       	mov	r24, r18
    162c:	8a 95       	dec	r24
    162e:	f1 f7       	brne	.-4      	; 0x162c <send_keyboard+0x30>
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    1630:	99 23       	and	r25, r25
    1632:	29 f0       	breq	.+10     	; 0x163e <send_keyboard+0x42>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1634:	80 91 e8 00 	lds	r24, 0x00E8
    1638:	91 50       	subi	r25, 0x01	; 1
    163a:	85 ff       	sbrs	r24, 5
    163c:	f6 cf       	rjmp	.-20     	; 0x162a <send_keyboard+0x2e>
    163e:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1642:	85 ff       	sbrs	r24, 5
    1644:	31 c0       	rjmp	.+98     	; 0x16a8 <send_keyboard+0xac>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    1646:	81 2f       	mov	r24, r17
    1648:	90 2f       	mov	r25, r16
    164a:	60 e1       	ldi	r22, 0x10	; 16
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	18 c0       	rjmp	.+48     	; 0x1680 <send_keyboard+0x84>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	80 93 e9 00 	sts	0x00E9, r24
    1656:	9f ef       	ldi	r25, 0xFF	; 255
    1658:	25 ed       	ldi	r18, 0xD5	; 213
    165a:	05 c0       	rjmp	.+10     	; 0x1666 <send_keyboard+0x6a>
    165c:	82 2f       	mov	r24, r18
    165e:	8a 95       	dec	r24
    1660:	f1 f7       	brne	.-4      	; 0x165e <send_keyboard+0x62>
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1662:	99 23       	and	r25, r25
    1664:	29 f0       	breq	.+10     	; 0x1670 <send_keyboard+0x74>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1666:	80 91 e8 00 	lds	r24, 0x00E8
    166a:	91 50       	subi	r25, 0x01	; 1
    166c:	85 ff       	sbrs	r24, 5
    166e:	f6 cf       	rjmp	.-20     	; 0x165c <send_keyboard+0x60>
    1670:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1674:	85 ff       	sbrs	r24, 5
    1676:	18 c0       	rjmp	.+48     	; 0x16a8 <send_keyboard+0xac>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1678:	81 2f       	mov	r24, r17
    167a:	90 2f       	mov	r25, r16
    167c:	68 e0       	ldi	r22, 0x08	; 8
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	40 e0       	ldi	r20, 0x00	; 0
    1682:	50 e0       	ldi	r21, 0x00	; 0
    1684:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1688:	80 91 e8 00 	lds	r24, 0x00E8
    168c:	8e 77       	andi	r24, 0x7E	; 126
    168e:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    1692:	a1 e3       	ldi	r26, 0x31	; 49
    1694:	b1 e0       	ldi	r27, 0x01	; 1
    1696:	21 2f       	mov	r18, r17
    1698:	30 2f       	mov	r19, r16
    169a:	c9 01       	movw	r24, r18
    169c:	fc 01       	movw	r30, r24
    169e:	80 e1       	ldi	r24, 0x10	; 16
    16a0:	01 90       	ld	r0, Z+
    16a2:	0d 92       	st	X+, r0
    16a4:	81 50       	subi	r24, 0x01	; 1
    16a6:	e1 f7       	brne	.-8      	; 0x16a0 <send_keyboard+0xa4>
}
    16a8:	1f 91       	pop	r17
    16aa:	0f 91       	pop	r16
    16ac:	08 95       	ret

000016ae <EVENT_USB_Device_Suspend>:
    print("[R]");
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    16ae:	80 e5       	ldi	r24, 0x50	; 80
    16b0:	93 e0       	ldi	r25, 0x03	; 3
    16b2:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
#ifdef SLEEP_LED_ENABLE
    sleep_led_enable();
#endif
}
    16b6:	08 95       	ret

000016b8 <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    16b8:	84 e5       	ldi	r24, 0x54	; 84
    16ba:	93 e0       	ldi	r25, 0x03	; 3
    16bc:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
}
    16c0:	08 95       	ret

000016c2 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    16c2:	88 e5       	ldi	r24, 0x58	; 88
    16c4:	93 e0       	ldi	r25, 0x03	; 3
    16c6:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    16ca:	10 92 ba 01 	sts	0x01BA, r1
        USB_Disable();  // Disable all interrupts
	USB_Controller_Enable();
        USB_INT_Enable(USB_INT_VBUSTI);
    }
*/
}
    16ce:	08 95       	ret

000016d0 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    16d0:	8c e5       	ldi	r24, 0x5C	; 92
    16d2:	93 e0       	ldi	r25, 0x03	; 3
    16d4:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    16d8:	80 91 ba 01 	lds	r24, 0x01BA
    16dc:	88 23       	and	r24, r24
    16de:	49 f4       	brne	.+18     	; 0x16f2 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    16e0:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <USB_Disable>
        USB_Init();
    16e4:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    16e8:	80 91 e2 00 	lds	r24, 0x00E2
    16ec:	84 60       	ori	r24, 0x04	; 4
    16ee:	80 93 e2 00 	sts	0x00E2, r24
    16f2:	08 95       	ret

000016f4 <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    16f4:	84 b7       	in	r24, 0x34	; 52
    16f6:	87 7f       	andi	r24, 0xF7	; 247
    16f8:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    16fa:	88 e1       	ldi	r24, 0x18	; 24
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	80 93 60 00 	sts	0x0060, r24
    1704:	10 92 60 00 	sts	0x0060, r1
    1708:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    clock_prescale_set(clock_div_1);
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	20 e8       	ldi	r18, 0x80	; 128
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	20 93 61 00 	sts	0x0061, r18
    1718:	80 93 61 00 	sts	0x0061, r24
    171c:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    keyboard_setup();
    171e:	0e 94 8c 12 	call	0x2518	; 0x2518 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    1722:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <USB_Disable>

    USB_Init();
    1726:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <USB_Init>
    172a:	80 91 e2 00 	lds	r24, 0x00E2
    172e:	84 60       	ori	r24, 0x04	; 4
    1730:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    1734:	85 e0       	ldi	r24, 0x05	; 5
    1736:	9a e0       	ldi	r25, 0x0A	; 10
    1738:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <print_set_sendchar>
int main(void)
{
    setup_mcu();
    keyboard_setup();
    setup_usb();
    sei();
    173c:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    173e:	80 91 bb 01 	lds	r24, 0x01BB
    1742:	84 30       	cpi	r24, 0x04	; 4
    1744:	e1 f7       	brne	.-8      	; 0x173e <main+0x4a>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    1746:	8b e3       	ldi	r24, 0x3B	; 59
    1748:	93 e0       	ldi	r25, 0x03	; 3
    174a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>

    /* init modules */
    keyboard_init();
    174e:	0e 94 70 13 	call	0x26e0	; 0x26e0 <keyboard_init>
    host_set_driver(&lufa_driver);
    1752:	82 e0       	ldi	r24, 0x02	; 2
    1754:	91 e0       	ldi	r25, 0x01	; 1
    1756:	0e 94 ee 11 	call	0x23dc	; 0x23dc <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    175a:	8a e2       	ldi	r24, 0x2A	; 42
    175c:	93 e0       	ldi	r25, 0x03	; 3
    175e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    1762:	10 c0       	rjmp	.+32     	; 0x1784 <main+0x90>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
            print("[s]");
    1764:	86 e2       	ldi	r24, 0x26	; 38
    1766:	93 e0       	ldi	r25, 0x03	; 3
    1768:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
            suspend_power_down();
    176c:	0e 94 76 1f 	call	0x3eec	; 0x3eec <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1770:	80 91 b9 01 	lds	r24, 0x01B9
    1774:	88 23       	and	r24, r24
    1776:	31 f0       	breq	.+12     	; 0x1784 <main+0x90>
    1778:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <suspend_wakeup_condition>
    177c:	88 23       	and	r24, r24
    177e:	11 f0       	breq	.+4      	; 0x1784 <main+0x90>
                    USB_Device_SendRemoteWakeup();
    1780:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <USB_Device_SendRemoteWakeup>
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1784:	80 91 bb 01 	lds	r24, 0x01BB
    1788:	85 30       	cpi	r24, 0x05	; 5
    178a:	61 f3       	breq	.-40     	; 0x1764 <main+0x70>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
                    USB_Device_SendRemoteWakeup();
            }
        }

        keyboard_task();
    178c:	0e 94 c1 12 	call	0x2582	; 0x2582 <keyboard_task>
    1790:	f9 cf       	rjmp	.-14     	; 0x1784 <main+0x90>

00001792 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    1792:	80 91 bd 01 	lds	r24, 0x01BD
    1796:	83 30       	cpi	r24, 0x03	; 3
    1798:	09 f4       	brne	.+2      	; 0x179c <EVENT_USB_Device_ControlRequest+0xa>
    179a:	57 c0       	rjmp	.+174    	; 0x184a <EVENT_USB_Device_ControlRequest+0xb8>
    179c:	84 30       	cpi	r24, 0x04	; 4
    179e:	30 f4       	brcc	.+12     	; 0x17ac <EVENT_USB_Device_ControlRequest+0x1a>
    17a0:	81 30       	cpi	r24, 0x01	; 1
    17a2:	71 f0       	breq	.+28     	; 0x17c0 <EVENT_USB_Device_ControlRequest+0x2e>
    17a4:	82 30       	cpi	r24, 0x02	; 2
    17a6:	09 f0       	breq	.+2      	; 0x17aa <EVENT_USB_Device_ControlRequest+0x18>
    17a8:	b1 c0       	rjmp	.+354    	; 0x190c <EVENT_USB_Device_ControlRequest+0x17a>
    17aa:	98 c0       	rjmp	.+304    	; 0x18dc <EVENT_USB_Device_ControlRequest+0x14a>
    17ac:	8a 30       	cpi	r24, 0x0A	; 10
    17ae:	09 f4       	brne	.+2      	; 0x17b2 <EVENT_USB_Device_ControlRequest+0x20>
    17b0:	85 c0       	rjmp	.+266    	; 0x18bc <EVENT_USB_Device_ControlRequest+0x12a>
    17b2:	8b 30       	cpi	r24, 0x0B	; 11
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <EVENT_USB_Device_ControlRequest+0x26>
    17b6:	6a c0       	rjmp	.+212    	; 0x188c <EVENT_USB_Device_ControlRequest+0xfa>
    17b8:	89 30       	cpi	r24, 0x09	; 9
    17ba:	09 f0       	breq	.+2      	; 0x17be <EVENT_USB_Device_ControlRequest+0x2c>
    17bc:	a7 c0       	rjmp	.+334    	; 0x190c <EVENT_USB_Device_ControlRequest+0x17a>
    17be:	20 c0       	rjmp	.+64     	; 0x1800 <EVENT_USB_Device_ControlRequest+0x6e>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    17c0:	80 91 bc 01 	lds	r24, 0x01BC
    17c4:	81 3a       	cpi	r24, 0xA1	; 161
    17c6:	09 f0       	breq	.+2      	; 0x17ca <EVENT_USB_Device_ControlRequest+0x38>
    17c8:	a1 c0       	rjmp	.+322    	; 0x190c <EVENT_USB_Device_ControlRequest+0x17a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17ca:	80 91 e8 00 	lds	r24, 0x00E8
    17ce:	87 7f       	andi	r24, 0xF7	; 247
    17d0:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    17d4:	80 91 c0 01 	lds	r24, 0x01C0
    17d8:	90 91 c1 01 	lds	r25, 0x01C1
    17dc:	89 2b       	or	r24, r25
    17de:	21 f4       	brne	.+8      	; 0x17e8 <EVENT_USB_Device_ControlRequest+0x56>
    17e0:	81 e3       	ldi	r24, 0x31	; 49
    17e2:	91 e0       	ldi	r25, 0x01	; 1
    17e4:	60 e1       	ldi	r22, 0x10	; 16
    17e6:	03 c0       	rjmp	.+6      	; 0x17ee <EVENT_USB_Device_ControlRequest+0x5c>
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	60 e0       	ldi	r22, 0x00	; 0
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    17ee:	70 e0       	ldi	r23, 0x00	; 0
    17f0:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    17f4:	80 91 e8 00 	lds	r24, 0x00E8
    17f8:	8b 77       	andi	r24, 0x7B	; 123
    17fa:	80 93 e8 00 	sts	0x00E8, r24
    17fe:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1800:	80 91 bc 01 	lds	r24, 0x01BC
    1804:	81 32       	cpi	r24, 0x21	; 33
    1806:	09 f0       	breq	.+2      	; 0x180a <EVENT_USB_Device_ControlRequest+0x78>
    1808:	81 c0       	rjmp	.+258    	; 0x190c <EVENT_USB_Device_ControlRequest+0x17a>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    180a:	80 91 c0 01 	lds	r24, 0x01C0
    180e:	90 91 c1 01 	lds	r25, 0x01C1
    1812:	00 97       	sbiw	r24, 0x00	; 0
    1814:	19 f0       	breq	.+6      	; 0x181c <EVENT_USB_Device_ControlRequest+0x8a>
    1816:	04 97       	sbiw	r24, 0x04	; 4
    1818:	09 f0       	breq	.+2      	; 0x181c <EVENT_USB_Device_ControlRequest+0x8a>
    181a:	78 c0       	rjmp	.+240    	; 0x190c <EVENT_USB_Device_ControlRequest+0x17a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    181c:	80 91 e8 00 	lds	r24, 0x00E8
    1820:	87 7f       	andi	r24, 0xF7	; 247
    1822:	80 93 e8 00 	sts	0x00E8, r24
    1826:	05 c0       	rjmp	.+10     	; 0x1832 <EVENT_USB_Device_ControlRequest+0xa0>
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1828:	80 91 bb 01 	lds	r24, 0x01BB
    182c:	88 23       	and	r24, r24
    182e:	09 f4       	brne	.+2      	; 0x1832 <EVENT_USB_Device_ControlRequest+0xa0>
    1830:	6d c0       	rjmp	.+218    	; 0x190c <EVENT_USB_Device_ControlRequest+0x17a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1832:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    1836:	82 ff       	sbrs	r24, 2
    1838:	f7 cf       	rjmp	.-18     	; 0x1828 <EVENT_USB_Device_ControlRequest+0x96>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    183a:	80 91 f1 00 	lds	r24, 0x00F1
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    183e:	80 93 2d 01 	sts	0x012D, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1842:	80 91 e8 00 	lds	r24, 0x00E8
    1846:	8b 77       	andi	r24, 0x7B	; 123
    1848:	1c c0       	rjmp	.+56     	; 0x1882 <EVENT_USB_Device_ControlRequest+0xf0>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    184a:	80 91 bc 01 	lds	r24, 0x01BC
    184e:	81 3a       	cpi	r24, 0xA1	; 161
    1850:	09 f0       	breq	.+2      	; 0x1854 <EVENT_USB_Device_ControlRequest+0xc2>
    1852:	5c c0       	rjmp	.+184    	; 0x190c <EVENT_USB_Device_ControlRequest+0x17a>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1854:	80 91 c0 01 	lds	r24, 0x01C0
    1858:	90 91 c1 01 	lds	r25, 0x01C1
    185c:	89 2b       	or	r24, r25
    185e:	09 f0       	breq	.+2      	; 0x1862 <EVENT_USB_Device_ControlRequest+0xd0>
    1860:	55 c0       	rjmp	.+170    	; 0x190c <EVENT_USB_Device_ControlRequest+0x17a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1862:	80 91 e8 00 	lds	r24, 0x00E8
    1866:	87 7f       	andi	r24, 0xF7	; 247
    1868:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    186c:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    1870:	80 ff       	sbrs	r24, 0
    1872:	fc cf       	rjmp	.-8      	; 0x186c <EVENT_USB_Device_ControlRequest+0xda>
                    Endpoint_Write_8(keyboard_protocol);
    1874:	80 91 01 01 	lds	r24, 0x0101
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1878:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    187c:	80 91 e8 00 	lds	r24, 0x00E8
    1880:	8e 77       	andi	r24, 0x7E	; 126
    1882:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearIN();
                    Endpoint_ClearStatusStage();
    1886:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <Endpoint_ClearStatusStage>
    188a:	08 95       	ret
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    188c:	80 91 bc 01 	lds	r24, 0x01BC
    1890:	81 32       	cpi	r24, 0x21	; 33
    1892:	e1 f5       	brne	.+120    	; 0x190c <EVENT_USB_Device_ControlRequest+0x17a>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1894:	80 91 c0 01 	lds	r24, 0x01C0
    1898:	90 91 c1 01 	lds	r25, 0x01C1
    189c:	89 2b       	or	r24, r25
    189e:	b1 f5       	brne	.+108    	; 0x190c <EVENT_USB_Device_ControlRequest+0x17a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18a0:	80 91 e8 00 	lds	r24, 0x00E8
    18a4:	87 7f       	andi	r24, 0xF7	; 247
    18a6:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    18aa:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    18ae:	80 91 be 01 	lds	r24, 0x01BE
    18b2:	80 93 01 01 	sts	0x0101, r24
                    clear_keyboard();
    18b6:	0e 94 d6 13 	call	0x27ac	; 0x27ac <clear_keyboard>
    18ba:	08 95       	ret
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    18bc:	80 91 bc 01 	lds	r24, 0x01BC
    18c0:	81 32       	cpi	r24, 0x21	; 33
    18c2:	21 f5       	brne	.+72     	; 0x190c <EVENT_USB_Device_ControlRequest+0x17a>
    18c4:	80 91 e8 00 	lds	r24, 0x00E8
    18c8:	87 7f       	andi	r24, 0xF7	; 247
    18ca:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    18ce:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    18d2:	80 91 bf 01 	lds	r24, 0x01BF
    18d6:	80 93 2c 01 	sts	0x012C, r24
    18da:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    18dc:	80 91 bc 01 	lds	r24, 0x01BC
    18e0:	81 3a       	cpi	r24, 0xA1	; 161
    18e2:	a1 f4       	brne	.+40     	; 0x190c <EVENT_USB_Device_ControlRequest+0x17a>
    18e4:	80 91 e8 00 	lds	r24, 0x00E8
    18e8:	87 7f       	andi	r24, 0xF7	; 247
    18ea:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18ee:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    18f2:	80 ff       	sbrs	r24, 0
    18f4:	fc cf       	rjmp	.-8      	; 0x18ee <EVENT_USB_Device_ControlRequest+0x15c>
                Endpoint_Write_8(keyboard_idle);
    18f6:	80 91 2c 01 	lds	r24, 0x012C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18fa:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18fe:	80 91 e8 00 	lds	r24, 0x00E8
    1902:	8e 77       	andi	r24, 0x7E	; 126
    1904:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    1908:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <Endpoint_ClearStatusStage>
    190c:	08 95       	ret

0000190e <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	61 ec       	ldi	r22, 0xC1	; 193
    1912:	42 e0       	ldi	r20, 0x02	; 2
    1914:	0e 94 65 0e 	call	0x1cca	; 0x1cca <Endpoint_ConfigureEndpoint_Prv>
#ifdef NKRO_ENABLE
    /* Setup NKRO HID Report Endpoints */
    ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
                                     NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
#endif
}
    1918:	82 e0       	ldi	r24, 0x02	; 2
    191a:	61 ec       	ldi	r22, 0xC1	; 193
    191c:	42 e0       	ldi	r20, 0x02	; 2
    191e:	0e 94 65 0e 	call	0x1cca	; 0x1cca <Endpoint_ConfigureEndpoint_Prv>
    1922:	83 e0       	ldi	r24, 0x03	; 3
    1924:	61 ec       	ldi	r22, 0xC1	; 193
    1926:	42 e0       	ldi	r20, 0x02	; 2
    1928:	0e 94 65 0e 	call	0x1cca	; 0x1cca <Endpoint_ConfigureEndpoint_Prv>
    192c:	84 e0       	ldi	r24, 0x04	; 4
    192e:	61 ec       	ldi	r22, 0xC1	; 193
    1930:	42 e2       	ldi	r20, 0x22	; 34
    1932:	0e 94 65 0e 	call	0x1cca	; 0x1cca <Endpoint_ConfigureEndpoint_Prv>
    1936:	85 e0       	ldi	r24, 0x05	; 5
    1938:	61 ec       	ldi	r22, 0xC1	; 193
    193a:	42 e1       	ldi	r20, 0x12	; 18
    193c:	0e 94 65 0e 	call	0x1cca	; 0x1cca <Endpoint_ConfigureEndpoint_Prv>
    1940:	08 95       	ret

00001942 <EVENT_USB_Device_WakeUp>:
#endif
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    1942:	8c e4       	ldi	r24, 0x4C	; 76
    1944:	93 e0       	ldi	r25, 0x03	; 3
    1946:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    suspend_wakeup_init();
    194a:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <suspend_wakeup_init>
#ifdef SLEEP_LED_ENABLE
    sleep_led_disable();
    // NOTE: converters may not accept this
    led_set(host_keyboard_leds());
#endif
}
    194e:	08 95       	ret

00001950 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    1950:	da 01       	movw	r26, r20
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1952:	93 30       	cpi	r25, 0x03	; 3
    1954:	c1 f0       	breq	.+48     	; 0x1986 <CALLBACK_USB_GetDescriptor+0x36>
    1956:	94 30       	cpi	r25, 0x04	; 4
    1958:	30 f4       	brcc	.+12     	; 0x1966 <CALLBACK_USB_GetDescriptor+0x16>
    195a:	91 30       	cpi	r25, 0x01	; 1
    195c:	51 f0       	breq	.+20     	; 0x1972 <CALLBACK_USB_GetDescriptor+0x22>
    195e:	92 30       	cpi	r25, 0x02	; 2
    1960:	09 f0       	breq	.+2      	; 0x1964 <CALLBACK_USB_GetDescriptor+0x14>
    1962:	6d c0       	rjmp	.+218    	; 0x1a3e <CALLBACK_USB_GetDescriptor+0xee>
    1964:	0b c0       	rjmp	.+22     	; 0x197c <CALLBACK_USB_GetDescriptor+0x2c>
    1966:	91 32       	cpi	r25, 0x21	; 33
    1968:	21 f1       	breq	.+72     	; 0x19b2 <CALLBACK_USB_GetDescriptor+0x62>
    196a:	92 32       	cpi	r25, 0x22	; 34
    196c:	09 f0       	breq	.+2      	; 0x1970 <CALLBACK_USB_GetDescriptor+0x20>
    196e:	67 c0       	rjmp	.+206    	; 0x1a3e <CALLBACK_USB_GetDescriptor+0xee>
    1970:	3f c0       	rjmp	.+126    	; 0x19f0 <CALLBACK_USB_GetDescriptor+0xa0>
    1972:	eb e7       	ldi	r30, 0x7B	; 123
    1974:	f4 e0       	ldi	r31, 0x04	; 4
    1976:	22 e1       	ldi	r18, 0x12	; 18
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	65 c0       	rjmp	.+202    	; 0x1a46 <CALLBACK_USB_GetDescriptor+0xf6>
    197c:	ed e8       	ldi	r30, 0x8D	; 141
    197e:	f4 e0       	ldi	r31, 0x04	; 4
    1980:	2d e8       	ldi	r18, 0x8D	; 141
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	60 c0       	rjmp	.+192    	; 0x1a46 <CALLBACK_USB_GetDescriptor+0xf6>
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    1986:	81 30       	cpi	r24, 0x01	; 1
    1988:	51 f0       	breq	.+20     	; 0x199e <CALLBACK_USB_GetDescriptor+0x4e>
    198a:	81 30       	cpi	r24, 0x01	; 1
    198c:	20 f0       	brcs	.+8      	; 0x1996 <CALLBACK_USB_GetDescriptor+0x46>
    198e:	82 30       	cpi	r24, 0x02	; 2
    1990:	09 f0       	breq	.+2      	; 0x1994 <CALLBACK_USB_GetDescriptor+0x44>
    1992:	55 c0       	rjmp	.+170    	; 0x1a3e <CALLBACK_USB_GetDescriptor+0xee>
    1994:	08 c0       	rjmp	.+16     	; 0x19a6 <CALLBACK_USB_GetDescriptor+0x56>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1996:	ea e1       	ldi	r30, 0x1A	; 26
    1998:	f5 e0       	ldi	r31, 0x05	; 5
    199a:	84 91       	lpm	r24, Z+
    199c:	07 c0       	rjmp	.+14     	; 0x19ac <CALLBACK_USB_GetDescriptor+0x5c>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    199e:	ee e1       	ldi	r30, 0x1E	; 30
    19a0:	f5 e0       	ldi	r31, 0x05	; 5
    19a2:	84 91       	lpm	r24, Z+
    19a4:	03 c0       	rjmp	.+6      	; 0x19ac <CALLBACK_USB_GetDescriptor+0x5c>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    19a6:	e2 e3       	ldi	r30, 0x32	; 50
    19a8:	f5 e0       	ldi	r31, 0x05	; 5
    19aa:	84 91       	lpm	r24, Z+
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	4a c0       	rjmp	.+148    	; 0x1a46 <CALLBACK_USB_GetDescriptor+0xf6>
                    break;
            }
            break;
        case HID_DTYPE_HID:
            switch (wIndex) {
    19b2:	62 30       	cpi	r22, 0x02	; 2
    19b4:	a1 f0       	breq	.+40     	; 0x19de <CALLBACK_USB_GetDescriptor+0x8e>
    19b6:	63 30       	cpi	r22, 0x03	; 3
    19b8:	28 f4       	brcc	.+10     	; 0x19c4 <CALLBACK_USB_GetDescriptor+0x74>
    19ba:	66 23       	and	r22, r22
    19bc:	41 f0       	breq	.+16     	; 0x19ce <CALLBACK_USB_GetDescriptor+0x7e>
    19be:	61 30       	cpi	r22, 0x01	; 1
    19c0:	f1 f5       	brne	.+124    	; 0x1a3e <CALLBACK_USB_GetDescriptor+0xee>
    19c2:	08 c0       	rjmp	.+16     	; 0x19d4 <CALLBACK_USB_GetDescriptor+0x84>
    19c4:	63 30       	cpi	r22, 0x03	; 3
    19c6:	71 f0       	breq	.+28     	; 0x19e4 <CALLBACK_USB_GetDescriptor+0x94>
    19c8:	64 30       	cpi	r22, 0x04	; 4
    19ca:	c9 f5       	brne	.+114    	; 0x1a3e <CALLBACK_USB_GetDescriptor+0xee>
    19cc:	0e c0       	rjmp	.+28     	; 0x19ea <CALLBACK_USB_GetDescriptor+0x9a>
    19ce:	ef e9       	ldi	r30, 0x9F	; 159
    19d0:	f4 e0       	ldi	r31, 0x04	; 4
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <CALLBACK_USB_GetDescriptor+0x88>
    19d4:	e8 eb       	ldi	r30, 0xB8	; 184
    19d6:	f4 e0       	ldi	r31, 0x04	; 4
    19d8:	29 e0       	ldi	r18, 0x09	; 9
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	34 c0       	rjmp	.+104    	; 0x1a46 <CALLBACK_USB_GetDescriptor+0xf6>
                break;
#ifdef MOUSE_ENABLE
            case MOUSE_INTERFACE:
                Address = &ConfigurationDescriptor.Mouse_HID;
                Size    = sizeof(USB_HID_Descriptor_HID_t);
                break;
    19de:	e1 ed       	ldi	r30, 0xD1	; 209
    19e0:	f4 e0       	ldi	r31, 0x04	; 4
    19e2:	fa cf       	rjmp	.-12     	; 0x19d8 <CALLBACK_USB_GetDescriptor+0x88>
#endif
#ifdef EXTRAKEY_ENABLE
            case EXTRAKEY_INTERFACE:
                Address = &ConfigurationDescriptor.Extrakey_HID;
                Size    = sizeof(USB_HID_Descriptor_HID_t);
                break;
    19e4:	ea ee       	ldi	r30, 0xEA	; 234
    19e6:	f4 e0       	ldi	r31, 0x04	; 4
    19e8:	f7 cf       	rjmp	.-18     	; 0x19d8 <CALLBACK_USB_GetDescriptor+0x88>
#endif
#ifdef CONSOLE_ENABLE
            case CONSOLE_INTERFACE:
                Address = &ConfigurationDescriptor.Console_HID;
                Size    = sizeof(USB_HID_Descriptor_HID_t);
                break;
    19ea:	ea e0       	ldi	r30, 0x0A	; 10
    19ec:	f5 e0       	ldi	r31, 0x05	; 5
    19ee:	f4 cf       	rjmp	.-24     	; 0x19d8 <CALLBACK_USB_GetDescriptor+0x88>
                break;
#endif
            }
            break;
        case HID_DTYPE_Report:
            switch (wIndex) {
    19f0:	62 30       	cpi	r22, 0x02	; 2
    19f2:	b1 f0       	breq	.+44     	; 0x1a20 <CALLBACK_USB_GetDescriptor+0xd0>
    19f4:	63 30       	cpi	r22, 0x03	; 3
    19f6:	28 f4       	brcc	.+10     	; 0x1a02 <CALLBACK_USB_GetDescriptor+0xb2>
    19f8:	66 23       	and	r22, r22
    19fa:	41 f0       	breq	.+16     	; 0x1a0c <CALLBACK_USB_GetDescriptor+0xbc>
    19fc:	61 30       	cpi	r22, 0x01	; 1
    19fe:	f9 f4       	brne	.+62     	; 0x1a3e <CALLBACK_USB_GetDescriptor+0xee>
    1a00:	0a c0       	rjmp	.+20     	; 0x1a16 <CALLBACK_USB_GetDescriptor+0xc6>
    1a02:	63 30       	cpi	r22, 0x03	; 3
    1a04:	91 f0       	breq	.+36     	; 0x1a2a <CALLBACK_USB_GetDescriptor+0xda>
    1a06:	64 30       	cpi	r22, 0x04	; 4
    1a08:	d1 f4       	brne	.+52     	; 0x1a3e <CALLBACK_USB_GetDescriptor+0xee>
    1a0a:	14 c0       	rjmp	.+40     	; 0x1a34 <CALLBACK_USB_GetDescriptor+0xe4>
    1a0c:	e0 e6       	ldi	r30, 0x60	; 96
    1a0e:	f3 e0       	ldi	r31, 0x03	; 3
    1a10:	2f e3       	ldi	r18, 0x3F	; 63
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	18 c0       	rjmp	.+48     	; 0x1a46 <CALLBACK_USB_GetDescriptor+0xf6>
    1a16:	ef e9       	ldi	r30, 0x9F	; 159
    1a18:	f3 e0       	ldi	r31, 0x03	; 3
    1a1a:	2d e4       	ldi	r18, 0x4D	; 77
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	13 c0       	rjmp	.+38     	; 0x1a46 <CALLBACK_USB_GetDescriptor+0xf6>
                break;
#ifdef MOUSE_ENABLE
            case MOUSE_INTERFACE:
                Address = &MouseReport;
                Size    = sizeof(MouseReport);
                break;
    1a20:	ec ee       	ldi	r30, 0xEC	; 236
    1a22:	f3 e0       	ldi	r31, 0x03	; 3
    1a24:	26 e3       	ldi	r18, 0x36	; 54
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	0e c0       	rjmp	.+28     	; 0x1a46 <CALLBACK_USB_GetDescriptor+0xf6>
#endif
#ifdef EXTRAKEY_ENABLE
            case EXTRAKEY_INTERFACE:
                Address = &ExtrakeyReport;
                Size    = sizeof(ExtrakeyReport);
                break;
    1a2a:	e2 e2       	ldi	r30, 0x22	; 34
    1a2c:	f4 e0       	ldi	r31, 0x04	; 4
    1a2e:	20 e2       	ldi	r18, 0x20	; 32
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	09 c0       	rjmp	.+18     	; 0x1a46 <CALLBACK_USB_GetDescriptor+0xf6>
#endif
#ifdef CONSOLE_ENABLE
            case CONSOLE_INTERFACE:
                Address = &ConsoleReport;
                Size    = sizeof(ConsoleReport);
                break;
    1a34:	e2 e4       	ldi	r30, 0x42	; 66
    1a36:	f4 e0       	ldi	r31, 0x04	; 4
    1a38:	29 e3       	ldi	r18, 0x39	; 57
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	04 c0       	rjmp	.+8      	; 0x1a46 <CALLBACK_USB_GetDescriptor+0xf6>
    1a3e:	e0 e0       	ldi	r30, 0x00	; 0
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1a46:	ed 93       	st	X+, r30
    1a48:	fc 93       	st	X, r31
    return Size;
}
    1a4a:	c9 01       	movw	r24, r18
    1a4c:	08 95       	ret

00001a4e <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1a4e:	80 e1       	ldi	r24, 0x10	; 16
    1a50:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1a52:	82 e1       	ldi	r24, 0x12	; 18
    1a54:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1a56:	09 b4       	in	r0, 0x29	; 41
    1a58:	00 fe       	sbrs	r0, 0
    1a5a:	fd cf       	rjmp	.-6      	; 0x1a56 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1a5c:	80 91 d8 00 	lds	r24, 0x00D8
    1a60:	8f 7d       	andi	r24, 0xDF	; 223
    1a62:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1a66:	80 91 e0 00 	lds	r24, 0x00E0
    1a6a:	82 60       	ori	r24, 0x02	; 2
    1a6c:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    1a70:	80 91 e0 00 	lds	r24, 0x00E0
    1a74:	81 fd       	sbrc	r24, 1
    1a76:	fc cf       	rjmp	.-8      	; 0x1a70 <USB_Device_SendRemoteWakeup+0x22>
}
    1a78:	08 95       	ret

00001a7a <Endpoint_Write_Control_Stream_LE>:
    1a7a:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1a7c:	40 91 c2 01 	lds	r20, 0x01C2
    1a80:	50 91 c3 01 	lds	r21, 0x01C3
    1a84:	46 17       	cp	r20, r22
    1a86:	57 07       	cpc	r21, r23
    1a88:	18 f4       	brcc	.+6      	; 0x1a90 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1a8a:	f9 01       	movw	r30, r18
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	43 c0       	rjmp	.+134    	; 0x1b16 <Endpoint_Write_Control_Stream_LE+0x9c>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1a90:	61 15       	cp	r22, r1
    1a92:	71 05       	cpc	r23, r1
    1a94:	11 f0       	breq	.+4      	; 0x1a9a <Endpoint_Write_Control_Stream_LE+0x20>
    1a96:	ab 01       	movw	r20, r22
    1a98:	f8 cf       	rjmp	.-16     	; 0x1a8a <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a9a:	80 91 e8 00 	lds	r24, 0x00E8
    1a9e:	8e 77       	andi	r24, 0x7E	; 126
    1aa0:	80 93 e8 00 	sts	0x00E8, r24
    1aa4:	40 e0       	ldi	r20, 0x00	; 0
    1aa6:	50 e0       	ldi	r21, 0x00	; 0
    1aa8:	f0 cf       	rjmp	.-32     	; 0x1a8a <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1aaa:	80 91 bb 01 	lds	r24, 0x01BB

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1aae:	88 23       	and	r24, r24
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <Endpoint_Write_Control_Stream_LE+0x3a>
    1ab2:	47 c0       	rjmp	.+142    	; 0x1b42 <Endpoint_Write_Control_Stream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1ab4:	85 30       	cpi	r24, 0x05	; 5
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <Endpoint_Write_Control_Stream_LE+0x40>
    1ab8:	46 c0       	rjmp	.+140    	; 0x1b46 <Endpoint_Write_Control_Stream_LE+0xcc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1aba:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1abe:	83 fd       	sbrc	r24, 3
    1ac0:	44 c0       	rjmp	.+136    	; 0x1b4a <Endpoint_Write_Control_Stream_LE+0xd0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ac2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1ac6:	82 fd       	sbrc	r24, 2
    1ac8:	36 c0       	rjmp	.+108    	; 0x1b36 <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1aca:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1ace:	80 ff       	sbrs	r24, 0
    1ad0:	22 c0       	rjmp	.+68     	; 0x1b16 <Endpoint_Write_Control_Stream_LE+0x9c>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1ad2:	80 91 f3 00 	lds	r24, 0x00F3
    1ad6:	90 91 f2 00 	lds	r25, 0x00F2
    1ada:	78 2f       	mov	r23, r24
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	29 2f       	mov	r18, r25
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	26 2b       	or	r18, r22
    1ae4:	37 2b       	or	r19, r23
    1ae6:	07 c0       	rjmp	.+14     	; 0x1af6 <Endpoint_Write_Control_Stream_LE+0x7c>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1ae8:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1aea:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1aee:	41 50       	subi	r20, 0x01	; 1
    1af0:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1af2:	2f 5f       	subi	r18, 0xFF	; 255
    1af4:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1af6:	41 15       	cp	r20, r1
    1af8:	51 05       	cpc	r21, r1
    1afa:	19 f0       	breq	.+6      	; 0x1b02 <Endpoint_Write_Control_Stream_LE+0x88>
    1afc:	28 30       	cpi	r18, 0x08	; 8
    1afe:	31 05       	cpc	r19, r1
    1b00:	98 f3       	brcs	.-26     	; 0x1ae8 <Endpoint_Write_Control_Stream_LE+0x6e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	28 30       	cpi	r18, 0x08	; 8
    1b06:	31 05       	cpc	r19, r1
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <Endpoint_Write_Control_Stream_LE+0x92>
    1b0a:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b0c:	80 91 e8 00 	lds	r24, 0x00E8
    1b10:	8e 77       	andi	r24, 0x7E	; 126
    1b12:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1b16:	41 15       	cp	r20, r1
    1b18:	51 05       	cpc	r21, r1
    1b1a:	39 f6       	brne	.-114    	; 0x1aaa <Endpoint_Write_Control_Stream_LE+0x30>
    1b1c:	99 23       	and	r25, r25
    1b1e:	29 f6       	brne	.-118    	; 0x1aaa <Endpoint_Write_Control_Stream_LE+0x30>
    1b20:	0a c0       	rjmp	.+20     	; 0x1b36 <Endpoint_Write_Control_Stream_LE+0xbc>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b22:	80 91 bb 01 	lds	r24, 0x01BB

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b26:	88 23       	and	r24, r24
    1b28:	61 f0       	breq	.+24     	; 0x1b42 <Endpoint_Write_Control_Stream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b2a:	85 30       	cpi	r24, 0x05	; 5
    1b2c:	61 f0       	breq	.+24     	; 0x1b46 <Endpoint_Write_Control_Stream_LE+0xcc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b2e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1b32:	83 fd       	sbrc	r24, 3
    1b34:	0a c0       	rjmp	.+20     	; 0x1b4a <Endpoint_Write_Control_Stream_LE+0xd0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b36:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1b3a:	82 ff       	sbrs	r24, 2
    1b3c:	f2 cf       	rjmp	.-28     	; 0x1b22 <Endpoint_Write_Control_Stream_LE+0xa8>
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	08 95       	ret
    1b42:	82 e0       	ldi	r24, 0x02	; 2
    1b44:	08 95       	ret
    1b46:	83 e0       	ldi	r24, 0x03	; 3
    1b48:	08 95       	ret
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1b4c:	08 95       	ret

00001b4e <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1b4e:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1b50:	40 91 c2 01 	lds	r20, 0x01C2
    1b54:	50 91 c3 01 	lds	r21, 0x01C3
    1b58:	46 17       	cp	r20, r22
    1b5a:	57 07       	cpc	r21, r23
    1b5c:	18 f4       	brcc	.+6      	; 0x1b64 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1b5e:	f9 01       	movw	r30, r18
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	44 c0       	rjmp	.+136    	; 0x1bec <Endpoint_Write_Control_PStream_LE+0x9e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1b64:	61 15       	cp	r22, r1
    1b66:	71 05       	cpc	r23, r1
    1b68:	11 f0       	breq	.+4      	; 0x1b6e <Endpoint_Write_Control_PStream_LE+0x20>
    1b6a:	ab 01       	movw	r20, r22
    1b6c:	f8 cf       	rjmp	.-16     	; 0x1b5e <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b6e:	80 91 e8 00 	lds	r24, 0x00E8
    1b72:	8e 77       	andi	r24, 0x7E	; 126
    1b74:	80 93 e8 00 	sts	0x00E8, r24
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	50 e0       	ldi	r21, 0x00	; 0
    1b7c:	f0 cf       	rjmp	.-32     	; 0x1b5e <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b7e:	80 91 bb 01 	lds	r24, 0x01BB

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b82:	88 23       	and	r24, r24
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <Endpoint_Write_Control_PStream_LE+0x3a>
    1b86:	48 c0       	rjmp	.+144    	; 0x1c18 <Endpoint_Write_Control_PStream_LE+0xca>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b88:	85 30       	cpi	r24, 0x05	; 5
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <Endpoint_Write_Control_PStream_LE+0x40>
    1b8c:	47 c0       	rjmp	.+142    	; 0x1c1c <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b8e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1b92:	83 fd       	sbrc	r24, 3
    1b94:	45 c0       	rjmp	.+138    	; 0x1c20 <Endpoint_Write_Control_PStream_LE+0xd2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b96:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1b9a:	82 fd       	sbrc	r24, 2
    1b9c:	37 c0       	rjmp	.+110    	; 0x1c0c <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b9e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1ba2:	80 ff       	sbrs	r24, 0
    1ba4:	23 c0       	rjmp	.+70     	; 0x1bec <Endpoint_Write_Control_PStream_LE+0x9e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1ba6:	80 91 f3 00 	lds	r24, 0x00F3
    1baa:	90 91 f2 00 	lds	r25, 0x00F2
    1bae:	78 2f       	mov	r23, r24
    1bb0:	60 e0       	ldi	r22, 0x00	; 0
    1bb2:	29 2f       	mov	r18, r25
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	26 2b       	or	r18, r22
    1bb8:	37 2b       	or	r19, r23
    1bba:	08 c0       	rjmp	.+16     	; 0x1bcc <Endpoint_Write_Control_PStream_LE+0x7e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1bbc:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1bbe:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1bc2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1bc4:	41 50       	subi	r20, 0x01	; 1
    1bc6:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1bc8:	2f 5f       	subi	r18, 0xFF	; 255
    1bca:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1bcc:	41 15       	cp	r20, r1
    1bce:	51 05       	cpc	r21, r1
    1bd0:	19 f0       	breq	.+6      	; 0x1bd8 <Endpoint_Write_Control_PStream_LE+0x8a>
    1bd2:	28 30       	cpi	r18, 0x08	; 8
    1bd4:	31 05       	cpc	r19, r1
    1bd6:	90 f3       	brcs	.-28     	; 0x1bbc <Endpoint_Write_Control_PStream_LE+0x6e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	28 30       	cpi	r18, 0x08	; 8
    1bdc:	31 05       	cpc	r19, r1
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <Endpoint_Write_Control_PStream_LE+0x94>
    1be0:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1be2:	80 91 e8 00 	lds	r24, 0x00E8
    1be6:	8e 77       	andi	r24, 0x7E	; 126
    1be8:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1bec:	41 15       	cp	r20, r1
    1bee:	51 05       	cpc	r21, r1
    1bf0:	31 f6       	brne	.-116    	; 0x1b7e <Endpoint_Write_Control_PStream_LE+0x30>
    1bf2:	99 23       	and	r25, r25
    1bf4:	21 f6       	brne	.-120    	; 0x1b7e <Endpoint_Write_Control_PStream_LE+0x30>
    1bf6:	0a c0       	rjmp	.+20     	; 0x1c0c <Endpoint_Write_Control_PStream_LE+0xbe>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1bf8:	80 91 bb 01 	lds	r24, 0x01BB

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1bfc:	88 23       	and	r24, r24
    1bfe:	61 f0       	breq	.+24     	; 0x1c18 <Endpoint_Write_Control_PStream_LE+0xca>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1c00:	85 30       	cpi	r24, 0x05	; 5
    1c02:	61 f0       	breq	.+24     	; 0x1c1c <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1c04:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1c08:	83 fd       	sbrc	r24, 3
    1c0a:	0a c0       	rjmp	.+20     	; 0x1c20 <Endpoint_Write_Control_PStream_LE+0xd2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c0c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1c10:	82 ff       	sbrs	r24, 2
    1c12:	f2 cf       	rjmp	.-28     	; 0x1bf8 <Endpoint_Write_Control_PStream_LE+0xaa>
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	08 95       	ret
    1c18:	82 e0       	ldi	r24, 0x02	; 2
    1c1a:	08 95       	ret
    1c1c:	83 e0       	ldi	r24, 0x03	; 3
    1c1e:	08 95       	ret
    1c20:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1c22:	08 95       	ret

00001c24 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1c24:	bf 92       	push	r11
    1c26:	cf 92       	push	r12
    1c28:	df 92       	push	r13
    1c2a:	ef 92       	push	r14
    1c2c:	ff 92       	push	r15
    1c2e:	0f 93       	push	r16
    1c30:	1f 93       	push	r17
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
    1c36:	18 2f       	mov	r17, r24
    1c38:	09 2f       	mov	r16, r25
    1c3a:	7b 01       	movw	r14, r22
    1c3c:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1c3e:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <Endpoint_WaitUntilReady>
    1c42:	b8 2e       	mov	r11, r24
    1c44:	88 23       	and	r24, r24
    1c46:	b1 f5       	brne	.+108    	; 0x1cb4 <Endpoint_Write_Stream_LE+0x90>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1c48:	81 2f       	mov	r24, r17
    1c4a:	90 2f       	mov	r25, r16
    1c4c:	9c 01       	movw	r18, r24
    1c4e:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1c50:	c1 14       	cp	r12, r1
    1c52:	d1 04       	cpc	r13, r1
    1c54:	39 f0       	breq	.+14     	; 0x1c64 <Endpoint_Write_Stream_LE+0x40>
	{
		Length -= *BytesProcessed;
    1c56:	f6 01       	movw	r30, r12
    1c58:	80 81       	ld	r24, Z
    1c5a:	91 81       	ldd	r25, Z+1	; 0x01
    1c5c:	e8 1a       	sub	r14, r24
    1c5e:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1c60:	c8 0f       	add	r28, r24
    1c62:	d9 1f       	adc	r29, r25
    1c64:	00 e0       	ldi	r16, 0x00	; 0
    1c66:	10 e0       	ldi	r17, 0x00	; 0
    1c68:	22 c0       	rjmp	.+68     	; 0x1cae <Endpoint_Write_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1c6a:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1c6e:	85 fd       	sbrc	r24, 5
    1c70:	16 c0       	rjmp	.+44     	; 0x1c9e <Endpoint_Write_Stream_LE+0x7a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c72:	80 91 e8 00 	lds	r24, 0x00E8
    1c76:	8e 77       	andi	r24, 0x7E	; 126
    1c78:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1c7c:	c1 14       	cp	r12, r1
    1c7e:	d1 04       	cpc	r13, r1
    1c80:	49 f0       	breq	.+18     	; 0x1c94 <Endpoint_Write_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
    1c82:	f6 01       	movw	r30, r12
    1c84:	80 81       	ld	r24, Z
    1c86:	91 81       	ldd	r25, Z+1	; 0x01
    1c88:	80 0f       	add	r24, r16
    1c8a:	91 1f       	adc	r25, r17
    1c8c:	91 83       	std	Z+1, r25	; 0x01
    1c8e:	80 83       	st	Z, r24
    1c90:	85 e0       	ldi	r24, 0x05	; 5
    1c92:	11 c0       	rjmp	.+34     	; 0x1cb6 <Endpoint_Write_Stream_LE+0x92>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1c94:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <Endpoint_WaitUntilReady>
    1c98:	88 23       	and	r24, r24
    1c9a:	49 f0       	breq	.+18     	; 0x1cae <Endpoint_Write_Stream_LE+0x8a>
    1c9c:	0c c0       	rjmp	.+24     	; 0x1cb6 <Endpoint_Write_Stream_LE+0x92>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1c9e:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1ca0:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1ca4:	08 94       	sec
    1ca6:	e1 08       	sbc	r14, r1
    1ca8:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1caa:	0f 5f       	subi	r16, 0xFF	; 255
    1cac:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1cae:	e1 14       	cp	r14, r1
    1cb0:	f1 04       	cpc	r15, r1
    1cb2:	d9 f6       	brne	.-74     	; 0x1c6a <Endpoint_Write_Stream_LE+0x46>
    1cb4:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1cb6:	df 91       	pop	r29
    1cb8:	cf 91       	pop	r28
    1cba:	1f 91       	pop	r17
    1cbc:	0f 91       	pop	r16
    1cbe:	ff 90       	pop	r15
    1cc0:	ef 90       	pop	r14
    1cc2:	df 90       	pop	r13
    1cc4:	cf 90       	pop	r12
    1cc6:	bf 90       	pop	r11
    1cc8:	08 95       	ret

00001cca <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
    1cca:	38 2f       	mov	r19, r24
    1ccc:	28 2f       	mov	r18, r24
    1cce:	2e c0       	rjmp	.+92     	; 0x1d2c <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1cd0:	82 2f       	mov	r24, r18
    1cd2:	8f 70       	andi	r24, 0x0F	; 15
    1cd4:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1cd8:	23 17       	cp	r18, r19
    1cda:	21 f4       	brne	.+8      	; 0x1ce4 <Endpoint_ConfigureEndpoint_Prv+0x1a>
    1cdc:	76 2f       	mov	r23, r22
    1cde:	94 2f       	mov	r25, r20
    1ce0:	50 e0       	ldi	r21, 0x00	; 0
    1ce2:	06 c0       	rjmp	.+12     	; 0x1cf0 <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1ce4:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1ce8:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
    1cec:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1cf0:	91 ff       	sbrs	r25, 1
    1cf2:	1b c0       	rjmp	.+54     	; 0x1d2a <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1cf4:	80 91 eb 00 	lds	r24, 0x00EB
    1cf8:	8e 7f       	andi	r24, 0xFE	; 254
    1cfa:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1cfe:	80 91 ed 00 	lds	r24, 0x00ED
    1d02:	8d 7f       	andi	r24, 0xFD	; 253
    1d04:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1d08:	80 91 eb 00 	lds	r24, 0x00EB
    1d0c:	81 60       	ori	r24, 0x01	; 1
    1d0e:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1d12:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1d16:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
    1d1a:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1d1e:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1d22:	87 fd       	sbrc	r24, 7
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <Endpoint_ConfigureEndpoint_Prv+0x60>
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1d2a:	2f 5f       	subi	r18, 0xFF	; 255
    1d2c:	27 30       	cpi	r18, 0x07	; 7
    1d2e:	80 f2       	brcs	.-96     	; 0x1cd0 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d30:	3f 70       	andi	r19, 0x0F	; 15
    1d32:	30 93 e9 00 	sts	0x00E9, r19
    1d36:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1d38:	08 95       	ret

00001d3a <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1d3a:	80 91 bc 01 	lds	r24, 0x01BC
    1d3e:	88 23       	and	r24, r24
    1d40:	9c f4       	brge	.+38     	; 0x1d68 <Endpoint_ClearStatusStage+0x2e>
    1d42:	04 c0       	rjmp	.+8      	; 0x1d4c <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1d44:	80 91 bb 01 	lds	r24, 0x01BB
    1d48:	88 23       	and	r24, r24
    1d4a:	b9 f0       	breq	.+46     	; 0x1d7a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1d4c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1d50:	82 ff       	sbrs	r24, 2
    1d52:	f8 cf       	rjmp	.-16     	; 0x1d44 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1d54:	80 91 e8 00 	lds	r24, 0x00E8
    1d58:	8b 77       	andi	r24, 0x7B	; 123
    1d5a:	80 93 e8 00 	sts	0x00E8, r24
    1d5e:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1d60:	80 91 bb 01 	lds	r24, 0x01BB
    1d64:	88 23       	and	r24, r24
    1d66:	49 f0       	breq	.+18     	; 0x1d7a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1d68:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1d6c:	80 ff       	sbrs	r24, 0
    1d6e:	f8 cf       	rjmp	.-16     	; 0x1d60 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d70:	80 91 e8 00 	lds	r24, 0x00E8
    1d74:	8e 77       	andi	r24, 0x7E	; 126
    1d76:	80 93 e8 00 	sts	0x00E8, r24
    1d7a:	08 95       	ret

00001d7c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1d7c:	40 91 e4 00 	lds	r20, 0x00E4
    1d80:	50 91 e5 00 	lds	r21, 0x00E5
    1d84:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1d86:	80 91 ec 00 	lds	r24, 0x00EC
    1d8a:	80 ff       	sbrs	r24, 0
    1d8c:	24 c0       	rjmp	.+72     	; 0x1dd6 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1d8e:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1d92:	80 fd       	sbrc	r24, 0
    1d94:	1e c0       	rjmp	.+60     	; 0x1dd2 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1d96:	80 91 bb 01 	lds	r24, 0x01BB

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1d9a:	88 23       	and	r24, r24
    1d9c:	11 f4       	brne	.+4      	; 0x1da2 <Endpoint_WaitUntilReady+0x26>
    1d9e:	82 e0       	ldi	r24, 0x02	; 2
    1da0:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1da2:	85 30       	cpi	r24, 0x05	; 5
    1da4:	11 f4       	brne	.+4      	; 0x1daa <Endpoint_WaitUntilReady+0x2e>
    1da6:	83 e0       	ldi	r24, 0x03	; 3
    1da8:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1daa:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1dae:	85 ff       	sbrs	r24, 5
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <Endpoint_WaitUntilReady+0x3a>
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	08 95       	ret
    1db6:	80 91 e4 00 	lds	r24, 0x00E4
    1dba:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1dbe:	84 17       	cp	r24, r20
    1dc0:	95 07       	cpc	r25, r21
    1dc2:	09 f3       	breq	.-62     	; 0x1d86 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1dc4:	22 23       	and	r18, r18
    1dc6:	11 f4       	brne	.+4      	; 0x1dcc <Endpoint_WaitUntilReady+0x50>
    1dc8:	84 e0       	ldi	r24, 0x04	; 4
    1dca:	08 95       	ret
    1dcc:	21 50       	subi	r18, 0x01	; 1
    1dce:	ac 01       	movw	r20, r24
    1dd0:	da cf       	rjmp	.-76     	; 0x1d86 <Endpoint_WaitUntilReady+0xa>
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1dd4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1dd6:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1dda:	82 ff       	sbrs	r24, 2
    1ddc:	dc cf       	rjmp	.-72     	; 0x1d96 <Endpoint_WaitUntilReady+0x1a>
    1dde:	f9 cf       	rjmp	.-14     	; 0x1dd2 <Endpoint_WaitUntilReady+0x56>

00001de0 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1de0:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1de4:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1de8:	e0 ee       	ldi	r30, 0xE0	; 224
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	81 60       	ori	r24, 0x01	; 1
    1df0:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1df2:	a8 ed       	ldi	r26, 0xD8	; 216
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	8c 91       	ld	r24, X
    1df8:	8f 77       	andi	r24, 0x7F	; 127
    1dfa:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1dfc:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1dfe:	e7 ed       	ldi	r30, 0xD7	; 215
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	8e 7f       	andi	r24, 0xFE	; 254
    1e06:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1e08:	8c 91       	ld	r24, X
    1e0a:	8f 7e       	andi	r24, 0xEF	; 239
    1e0c:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1e0e:	10 92 ba 01 	sts	0x01BA, r1
}
    1e12:	08 95       	ret

00001e14 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    1e14:	ef 92       	push	r14
    1e16:	ff 92       	push	r15
    1e18:	0f 93       	push	r16
    1e1a:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1e1c:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1e20:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1e24:	08 ed       	ldi	r16, 0xD8	; 216
    1e26:	10 e0       	ldi	r17, 0x00	; 0
    1e28:	f8 01       	movw	r30, r16
    1e2a:	80 81       	ld	r24, Z
    1e2c:	8f 77       	andi	r24, 0x7F	; 127
    1e2e:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    1e30:	80 81       	ld	r24, Z
    1e32:	80 68       	ori	r24, 0x80	; 128
    1e34:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1e36:	80 81       	ld	r24, Z
    1e38:	8f 7d       	andi	r24, 0xDF	; 223
    1e3a:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1e3c:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1e3e:	10 92 bb 01 	sts	0x01BB, r1
	USB_Device_ConfigurationNumber  = 0;
    1e42:	10 92 b7 01 	sts	0x01B7, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1e46:	10 92 b9 01 	sts	0x01B9, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1e4a:	10 92 b8 01 	sts	0x01B8, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1e4e:	80 ee       	ldi	r24, 0xE0	; 224
    1e50:	e8 2e       	mov	r14, r24
    1e52:	f1 2c       	mov	r15, r1
    1e54:	f7 01       	movw	r30, r14
    1e56:	80 81       	ld	r24, Z
    1e58:	8b 7f       	andi	r24, 0xFB	; 251
    1e5a:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1e5c:	f8 01       	movw	r30, r16
    1e5e:	80 81       	ld	r24, Z
    1e60:	81 60       	ori	r24, 0x01	; 1
    1e62:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	60 e0       	ldi	r22, 0x00	; 0
    1e68:	42 e0       	ldi	r20, 0x02	; 2
    1e6a:	0e 94 65 0e 	call	0x1cca	; 0x1cca <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1e6e:	e1 ee       	ldi	r30, 0xE1	; 225
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	8e 7f       	andi	r24, 0xFE	; 254
    1e76:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1e78:	e2 ee       	ldi	r30, 0xE2	; 226
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	81 60       	ori	r24, 0x01	; 1
    1e80:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1e82:	80 81       	ld	r24, Z
    1e84:	88 60       	ori	r24, 0x08	; 8
    1e86:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1e88:	f7 01       	movw	r30, r14
    1e8a:	80 81       	ld	r24, Z
    1e8c:	8e 7f       	andi	r24, 0xFE	; 254
    1e8e:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1e90:	f8 01       	movw	r30, r16
    1e92:	80 81       	ld	r24, Z
    1e94:	80 61       	ori	r24, 0x10	; 16
    1e96:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1e98:	1f 91       	pop	r17
    1e9a:	0f 91       	pop	r16
    1e9c:	ff 90       	pop	r15
    1e9e:	ef 90       	pop	r14
    1ea0:	08 95       	ret

00001ea2 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1ea2:	e8 ed       	ldi	r30, 0xD8	; 216
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	8f 7e       	andi	r24, 0xEF	; 239
    1eaa:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1eac:	e7 ed       	ldi	r30, 0xD7	; 215
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	81 60       	ori	r24, 0x01	; 1
    1eb4:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1eb6:	84 e0       	ldi	r24, 0x04	; 4
    1eb8:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	80 93 ba 01 	sts	0x01BA, r24

	USB_ResetInterface();
    1ec0:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <USB_ResetInterface>
}
    1ec4:	08 95       	ret

00001ec6 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1ec6:	e8 ed       	ldi	r30, 0xD8	; 216
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	8e 7f       	andi	r24, 0xFE	; 254
    1ece:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1ed0:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    1ed4:	08 95       	ret

00001ed6 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1ed6:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1eda:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    1ede:	08 95       	ret

00001ee0 <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1ee0:	1f 92       	push	r1
    1ee2:	0f 92       	push	r0
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	0f 92       	push	r0
    1ee8:	11 24       	eor	r1, r1
    1eea:	1f 93       	push	r17
    1eec:	2f 93       	push	r18
    1eee:	3f 93       	push	r19
    1ef0:	4f 93       	push	r20
    1ef2:	5f 93       	push	r21
    1ef4:	6f 93       	push	r22
    1ef6:	7f 93       	push	r23
    1ef8:	8f 93       	push	r24
    1efa:	9f 93       	push	r25
    1efc:	af 93       	push	r26
    1efe:	bf 93       	push	r27
    1f00:	ef 93       	push	r30
    1f02:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1f04:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1f08:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f0c:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1f10:	80 91 f0 00 	lds	r24, 0x00F0
    1f14:	87 7f       	andi	r24, 0xF7	; 247
    1f16:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1f1a:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1f1c:	0e 94 7e 10 	call	0x20fc	; 0x20fc <USB_Device_ProcessControlRequest>
    1f20:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1f24:	80 91 f0 00 	lds	r24, 0x00F0
    1f28:	88 60       	ori	r24, 0x08	; 8
    1f2a:	80 93 f0 00 	sts	0x00F0, r24
    1f2e:	1f 70       	andi	r17, 0x0F	; 15
    1f30:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1f34:	ff 91       	pop	r31
    1f36:	ef 91       	pop	r30
    1f38:	bf 91       	pop	r27
    1f3a:	af 91       	pop	r26
    1f3c:	9f 91       	pop	r25
    1f3e:	8f 91       	pop	r24
    1f40:	7f 91       	pop	r23
    1f42:	6f 91       	pop	r22
    1f44:	5f 91       	pop	r21
    1f46:	4f 91       	pop	r20
    1f48:	3f 91       	pop	r19
    1f4a:	2f 91       	pop	r18
    1f4c:	1f 91       	pop	r17
    1f4e:	0f 90       	pop	r0
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	0f 90       	pop	r0
    1f54:	1f 90       	pop	r1
    1f56:	18 95       	reti

00001f58 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1f58:	1f 92       	push	r1
    1f5a:	0f 92       	push	r0
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	0f 92       	push	r0
    1f60:	11 24       	eor	r1, r1
    1f62:	2f 93       	push	r18
    1f64:	3f 93       	push	r19
    1f66:	4f 93       	push	r20
    1f68:	5f 93       	push	r21
    1f6a:	6f 93       	push	r22
    1f6c:	7f 93       	push	r23
    1f6e:	8f 93       	push	r24
    1f70:	9f 93       	push	r25
    1f72:	af 93       	push	r26
    1f74:	bf 93       	push	r27
    1f76:	ef 93       	push	r30
    1f78:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1f7a:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1f7e:	82 ff       	sbrs	r24, 2
    1f80:	0b c0       	rjmp	.+22     	; 0x1f98 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1f82:	80 91 e2 00 	lds	r24, 0x00E2
    1f86:	82 ff       	sbrs	r24, 2
    1f88:	07 c0       	rjmp	.+14     	; 0x1f98 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1f8a:	80 91 e1 00 	lds	r24, 0x00E1
    1f8e:	8b 7f       	andi	r24, 0xFB	; 251
    1f90:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1f94:	0e 94 c2 09 	call	0x1384	; 0x1384 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1f98:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1f9c:	80 ff       	sbrs	r24, 0
    1f9e:	1f c0       	rjmp	.+62     	; 0x1fde <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1fa0:	80 91 d8 00 	lds	r24, 0x00D8
    1fa4:	80 ff       	sbrs	r24, 0
    1fa6:	1b c0       	rjmp	.+54     	; 0x1fde <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1fa8:	80 91 da 00 	lds	r24, 0x00DA
    1fac:	8e 7f       	andi	r24, 0xFE	; 254
    1fae:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1fb2:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1fb6:	80 ff       	sbrs	r24, 0
    1fb8:	0d c0       	rjmp	.+26     	; 0x1fd4 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1fba:	80 e1       	ldi	r24, 0x10	; 16
    1fbc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1fbe:	82 e1       	ldi	r24, 0x12	; 18
    1fc0:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1fc2:	09 b4       	in	r0, 0x29	; 41
    1fc4:	00 fe       	sbrs	r0, 0
    1fc6:	fd cf       	rjmp	.-6      	; 0x1fc2 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	80 93 bb 01 	sts	0x01BB, r24
			EVENT_USB_Device_Connect();
    1fce:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <EVENT_USB_Device_Connect>
    1fd2:	05 c0       	rjmp	.+10     	; 0x1fde <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1fd4:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1fd6:	10 92 bb 01 	sts	0x01BB, r1
			EVENT_USB_Device_Disconnect();
    1fda:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1fde:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1fe2:	80 ff       	sbrs	r24, 0
    1fe4:	19 c0       	rjmp	.+50     	; 0x2018 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1fe6:	80 91 e2 00 	lds	r24, 0x00E2
    1fea:	80 ff       	sbrs	r24, 0
    1fec:	15 c0       	rjmp	.+42     	; 0x2018 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1fee:	80 91 e2 00 	lds	r24, 0x00E2
    1ff2:	8e 7f       	andi	r24, 0xFE	; 254
    1ff4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1ff8:	80 91 e2 00 	lds	r24, 0x00E2
    1ffc:	80 61       	ori	r24, 0x10	; 16
    1ffe:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    2002:	80 91 d8 00 	lds	r24, 0x00D8
    2006:	80 62       	ori	r24, 0x20	; 32
    2008:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    200c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    200e:	85 e0       	ldi	r24, 0x05	; 5
    2010:	80 93 bb 01 	sts	0x01BB, r24
		EVENT_USB_Device_Suspend();
    2014:	0e 94 57 0b 	call	0x16ae	; 0x16ae <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    2018:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    201c:	84 ff       	sbrs	r24, 4
    201e:	30 c0       	rjmp	.+96     	; 0x2080 <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    2020:	80 91 e2 00 	lds	r24, 0x00E2
    2024:	84 ff       	sbrs	r24, 4
    2026:	2c c0       	rjmp	.+88     	; 0x2080 <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2028:	80 e1       	ldi	r24, 0x10	; 16
    202a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    202c:	82 e1       	ldi	r24, 0x12	; 18
    202e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    2030:	09 b4       	in	r0, 0x29	; 41
    2032:	00 fe       	sbrs	r0, 0
    2034:	fd cf       	rjmp	.-6      	; 0x2030 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2036:	80 91 d8 00 	lds	r24, 0x00D8
    203a:	8f 7d       	andi	r24, 0xDF	; 223
    203c:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    2040:	80 91 e1 00 	lds	r24, 0x00E1
    2044:	8f 7e       	andi	r24, 0xEF	; 239
    2046:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    204a:	80 91 e2 00 	lds	r24, 0x00E2
    204e:	8f 7e       	andi	r24, 0xEF	; 239
    2050:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2054:	80 91 e2 00 	lds	r24, 0x00E2
    2058:	81 60       	ori	r24, 0x01	; 1
    205a:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    205e:	80 91 b7 01 	lds	r24, 0x01B7
    2062:	88 23       	and	r24, r24
    2064:	11 f0       	breq	.+4      	; 0x206a <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    2066:	84 e0       	ldi	r24, 0x04	; 4
    2068:	07 c0       	rjmp	.+14     	; 0x2078 <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    206a:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    206e:	87 fd       	sbrc	r24, 7
    2070:	02 c0       	rjmp	.+4      	; 0x2076 <__vector_10+0x11e>
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	01 c0       	rjmp	.+2      	; 0x2078 <__vector_10+0x120>
    2076:	83 e0       	ldi	r24, 0x03	; 3
    2078:	80 93 bb 01 	sts	0x01BB, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    207c:	0e 94 a1 0c 	call	0x1942	; 0x1942 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    2080:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    2084:	83 ff       	sbrs	r24, 3
    2086:	29 c0       	rjmp	.+82     	; 0x20da <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    2088:	80 91 e2 00 	lds	r24, 0x00E2
    208c:	83 ff       	sbrs	r24, 3
    208e:	25 c0       	rjmp	.+74     	; 0x20da <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    2090:	80 91 e1 00 	lds	r24, 0x00E1
    2094:	87 7f       	andi	r24, 0xF7	; 247
    2096:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    209a:	82 e0       	ldi	r24, 0x02	; 2
    209c:	80 93 bb 01 	sts	0x01BB, r24
		USB_Device_ConfigurationNumber = 0;
    20a0:	10 92 b7 01 	sts	0x01B7, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    20a4:	80 91 e1 00 	lds	r24, 0x00E1
    20a8:	8e 7f       	andi	r24, 0xFE	; 254
    20aa:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    20ae:	80 91 e2 00 	lds	r24, 0x00E2
    20b2:	8e 7f       	andi	r24, 0xFE	; 254
    20b4:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    20b8:	80 91 e2 00 	lds	r24, 0x00E2
    20bc:	80 61       	ori	r24, 0x10	; 16
    20be:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	60 e0       	ldi	r22, 0x00	; 0
    20c6:	42 e0       	ldi	r20, 0x02	; 2
    20c8:	0e 94 65 0e 	call	0x1cca	; 0x1cca <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    20cc:	80 91 f0 00 	lds	r24, 0x00F0
    20d0:	88 60       	ori	r24, 0x08	; 8
    20d2:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    20d6:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    20da:	ff 91       	pop	r31
    20dc:	ef 91       	pop	r30
    20de:	bf 91       	pop	r27
    20e0:	af 91       	pop	r26
    20e2:	9f 91       	pop	r25
    20e4:	8f 91       	pop	r24
    20e6:	7f 91       	pop	r23
    20e8:	6f 91       	pop	r22
    20ea:	5f 91       	pop	r21
    20ec:	4f 91       	pop	r20
    20ee:	3f 91       	pop	r19
    20f0:	2f 91       	pop	r18
    20f2:	0f 90       	pop	r0
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	0f 90       	pop	r0
    20f8:	1f 90       	pop	r1
    20fa:	18 95       	reti

000020fc <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    20fc:	1f 93       	push	r17
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	ac 97       	sbiw	r28, 0x2c	; 44
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	de bf       	out	0x3e, r29	; 62
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	cd bf       	out	0x3d, r28	; 61
    2112:	ec eb       	ldi	r30, 0xBC	; 188
    2114:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2116:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    211a:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    211c:	21 e0       	ldi	r18, 0x01	; 1
    211e:	e4 3c       	cpi	r30, 0xC4	; 196
    2120:	f2 07       	cpc	r31, r18
    2122:	c9 f7       	brne	.-14     	; 0x2116 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    2124:	0e 94 c9 0b 	call	0x1792	; 0x1792 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2128:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    212c:	83 ff       	sbrs	r24, 3
    212e:	3e c1       	rjmp	.+636    	; 0x23ac <USB_Device_ProcessControlRequest+0x2b0>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    2130:	80 91 bc 01 	lds	r24, 0x01BC

		switch (USB_ControlRequest.bRequest)
    2134:	30 91 bd 01 	lds	r19, 0x01BD
    2138:	35 30       	cpi	r19, 0x05	; 5
    213a:	09 f4       	brne	.+2      	; 0x213e <USB_Device_ProcessControlRequest+0x42>
    213c:	87 c0       	rjmp	.+270    	; 0x224c <USB_Device_ProcessControlRequest+0x150>
    213e:	36 30       	cpi	r19, 0x06	; 6
    2140:	40 f4       	brcc	.+16     	; 0x2152 <USB_Device_ProcessControlRequest+0x56>
    2142:	31 30       	cpi	r19, 0x01	; 1
    2144:	c9 f1       	breq	.+114    	; 0x21b8 <USB_Device_ProcessControlRequest+0xbc>
    2146:	31 30       	cpi	r19, 0x01	; 1
    2148:	70 f0       	brcs	.+28     	; 0x2166 <USB_Device_ProcessControlRequest+0x6a>
    214a:	33 30       	cpi	r19, 0x03	; 3
    214c:	09 f0       	breq	.+2      	; 0x2150 <USB_Device_ProcessControlRequest+0x54>
    214e:	2e c1       	rjmp	.+604    	; 0x23ac <USB_Device_ProcessControlRequest+0x2b0>
    2150:	33 c0       	rjmp	.+102    	; 0x21b8 <USB_Device_ProcessControlRequest+0xbc>
    2152:	38 30       	cpi	r19, 0x08	; 8
    2154:	09 f4       	brne	.+2      	; 0x2158 <USB_Device_ProcessControlRequest+0x5c>
    2156:	f9 c0       	rjmp	.+498    	; 0x234a <USB_Device_ProcessControlRequest+0x24e>
    2158:	39 30       	cpi	r19, 0x09	; 9
    215a:	09 f4       	brne	.+2      	; 0x215e <USB_Device_ProcessControlRequest+0x62>
    215c:	09 c1       	rjmp	.+530    	; 0x2370 <USB_Device_ProcessControlRequest+0x274>
    215e:	36 30       	cpi	r19, 0x06	; 6
    2160:	09 f0       	breq	.+2      	; 0x2164 <USB_Device_ProcessControlRequest+0x68>
    2162:	24 c1       	rjmp	.+584    	; 0x23ac <USB_Device_ProcessControlRequest+0x2b0>
    2164:	97 c0       	rjmp	.+302    	; 0x2294 <USB_Device_ProcessControlRequest+0x198>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2166:	80 38       	cpi	r24, 0x80	; 128
    2168:	21 f0       	breq	.+8      	; 0x2172 <USB_Device_ProcessControlRequest+0x76>
    216a:	82 38       	cpi	r24, 0x82	; 130
    216c:	09 f0       	breq	.+2      	; 0x2170 <USB_Device_ProcessControlRequest+0x74>
    216e:	1e c1       	rjmp	.+572    	; 0x23ac <USB_Device_ProcessControlRequest+0x2b0>
    2170:	08 c0       	rjmp	.+16     	; 0x2182 <USB_Device_ProcessControlRequest+0x86>
    2172:	90 91 b8 01 	lds	r25, 0x01B8
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    2176:	80 91 b9 01 	lds	r24, 0x01B9
    217a:	88 23       	and	r24, r24
    217c:	99 f0       	breq	.+38     	; 0x21a4 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    217e:	92 60       	ori	r25, 0x02	; 2
    2180:	11 c0       	rjmp	.+34     	; 0x21a4 <USB_Device_ProcessControlRequest+0xa8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2182:	80 91 c0 01 	lds	r24, 0x01C0
    2186:	8f 70       	andi	r24, 0x0F	; 15
    2188:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    218c:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	25 e0       	ldi	r18, 0x05	; 5
    2194:	96 95       	lsr	r25
    2196:	87 95       	ror	r24
    2198:	2a 95       	dec	r18
    219a:	e1 f7       	brne	.-8      	; 0x2194 <USB_Device_ProcessControlRequest+0x98>
    219c:	98 2f       	mov	r25, r24
    219e:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    21a0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    21a4:	80 91 e8 00 	lds	r24, 0x00E8
    21a8:	87 7f       	andi	r24, 0xF7	; 247
    21aa:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    21ae:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    21b2:	10 92 f1 00 	sts	0x00F1, r1
    21b6:	d4 c0       	rjmp	.+424    	; 0x2360 <USB_Device_ProcessControlRequest+0x264>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    21b8:	88 23       	and	r24, r24
    21ba:	19 f0       	breq	.+6      	; 0x21c2 <USB_Device_ProcessControlRequest+0xc6>
    21bc:	82 30       	cpi	r24, 0x02	; 2
    21be:	09 f0       	breq	.+2      	; 0x21c2 <USB_Device_ProcessControlRequest+0xc6>
    21c0:	f5 c0       	rjmp	.+490    	; 0x23ac <USB_Device_ProcessControlRequest+0x2b0>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	8f 71       	andi	r24, 0x1F	; 31
    21c6:	90 70       	andi	r25, 0x00	; 0
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	21 f0       	breq	.+8      	; 0x21d4 <USB_Device_ProcessControlRequest+0xd8>
    21cc:	02 97       	sbiw	r24, 0x02	; 2
    21ce:	09 f0       	breq	.+2      	; 0x21d2 <USB_Device_ProcessControlRequest+0xd6>
    21d0:	ed c0       	rjmp	.+474    	; 0x23ac <USB_Device_ProcessControlRequest+0x2b0>
    21d2:	0c c0       	rjmp	.+24     	; 0x21ec <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    21d4:	80 91 be 01 	lds	r24, 0x01BE
    21d8:	81 30       	cpi	r24, 0x01	; 1
    21da:	09 f0       	breq	.+2      	; 0x21de <USB_Device_ProcessControlRequest+0xe2>
    21dc:	e7 c0       	rjmp	.+462    	; 0x23ac <USB_Device_ProcessControlRequest+0x2b0>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    21de:	10 92 b9 01 	sts	0x01B9, r1
    21e2:	33 30       	cpi	r19, 0x03	; 3
    21e4:	69 f5       	brne	.+90     	; 0x2240 <USB_Device_ProcessControlRequest+0x144>
    21e6:	80 93 b9 01 	sts	0x01B9, r24
    21ea:	2a c0       	rjmp	.+84     	; 0x2240 <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    21ec:	80 91 be 01 	lds	r24, 0x01BE
    21f0:	88 23       	and	r24, r24
    21f2:	31 f5       	brne	.+76     	; 0x2240 <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    21f4:	20 91 c0 01 	lds	r18, 0x01C0
    21f8:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    21fa:	09 f4       	brne	.+2      	; 0x21fe <USB_Device_ProcessControlRequest+0x102>
    21fc:	d7 c0       	rjmp	.+430    	; 0x23ac <USB_Device_ProcessControlRequest+0x2b0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    21fe:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    2202:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    2206:	80 ff       	sbrs	r24, 0
    2208:	1b c0       	rjmp	.+54     	; 0x2240 <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    220a:	33 30       	cpi	r19, 0x03	; 3
    220c:	21 f4       	brne	.+8      	; 0x2216 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    220e:	80 91 eb 00 	lds	r24, 0x00EB
    2212:	80 62       	ori	r24, 0x20	; 32
    2214:	13 c0       	rjmp	.+38     	; 0x223c <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    2216:	80 91 eb 00 	lds	r24, 0x00EB
    221a:	80 61       	ori	r24, 0x10	; 16
    221c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	02 c0       	rjmp	.+4      	; 0x222a <USB_Device_ProcessControlRequest+0x12e>
    2226:	88 0f       	add	r24, r24
    2228:	99 1f       	adc	r25, r25
    222a:	2a 95       	dec	r18
    222c:	e2 f7       	brpl	.-8      	; 0x2226 <USB_Device_ProcessControlRequest+0x12a>
    222e:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    2232:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2236:	80 91 eb 00 	lds	r24, 0x00EB
    223a:	88 60       	ori	r24, 0x08	; 8
    223c:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2240:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2244:	80 91 e8 00 	lds	r24, 0x00E8
    2248:	87 7f       	andi	r24, 0xF7	; 247
    224a:	8d c0       	rjmp	.+282    	; 0x2366 <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    224c:	88 23       	and	r24, r24
    224e:	09 f0       	breq	.+2      	; 0x2252 <USB_Device_ProcessControlRequest+0x156>
    2250:	ad c0       	rjmp	.+346    	; 0x23ac <USB_Device_ProcessControlRequest+0x2b0>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    2252:	10 91 be 01 	lds	r17, 0x01BE
    2256:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2258:	80 91 e3 00 	lds	r24, 0x00E3
    225c:	80 78       	andi	r24, 0x80	; 128
    225e:	81 2b       	or	r24, r17
    2260:	80 93 e3 00 	sts	0x00E3, r24
    2264:	80 91 e8 00 	lds	r24, 0x00E8
    2268:	87 7f       	andi	r24, 0xF7	; 247
    226a:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    226e:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2272:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    2276:	80 ff       	sbrs	r24, 0
    2278:	fc cf       	rjmp	.-8      	; 0x2272 <USB_Device_ProcessControlRequest+0x176>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    227a:	80 91 e3 00 	lds	r24, 0x00E3
    227e:	80 68       	ori	r24, 0x80	; 128
    2280:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2284:	11 23       	and	r17, r17
    2286:	11 f4       	brne	.+4      	; 0x228c <USB_Device_ProcessControlRequest+0x190>
    2288:	82 e0       	ldi	r24, 0x02	; 2
    228a:	01 c0       	rjmp	.+2      	; 0x228e <USB_Device_ProcessControlRequest+0x192>
    228c:	83 e0       	ldi	r24, 0x03	; 3
    228e:	80 93 bb 01 	sts	0x01BB, r24
    2292:	8c c0       	rjmp	.+280    	; 0x23ac <USB_Device_ProcessControlRequest+0x2b0>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2294:	80 58       	subi	r24, 0x80	; 128
    2296:	82 30       	cpi	r24, 0x02	; 2
    2298:	08 f0       	brcs	.+2      	; 0x229c <USB_Device_ProcessControlRequest+0x1a0>
    229a:	88 c0       	rjmp	.+272    	; 0x23ac <USB_Device_ProcessControlRequest+0x2b0>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    229c:	80 91 be 01 	lds	r24, 0x01BE
    22a0:	90 91 bf 01 	lds	r25, 0x01BF
    22a4:	23 e0       	ldi	r18, 0x03	; 3
    22a6:	8c 3d       	cpi	r24, 0xDC	; 220
    22a8:	92 07       	cpc	r25, r18
    22aa:	09 f0       	breq	.+2      	; 0x22ae <USB_Device_ProcessControlRequest+0x1b2>
    22ac:	34 c0       	rjmp	.+104    	; 0x2316 <USB_Device_ProcessControlRequest+0x21a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    22ae:	83 e0       	ldi	r24, 0x03	; 3
    22b0:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    22b2:	8a e2       	ldi	r24, 0x2A	; 42
    22b4:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    22b6:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    22b8:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    22ba:	de 01       	movw	r26, r28
    22bc:	15 96       	adiw	r26, 0x05	; 5
    22be:	6e e0       	ldi	r22, 0x0E	; 14
    22c0:	40 e0       	ldi	r20, 0x00	; 0
    22c2:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    22c4:	11 e2       	ldi	r17, 0x21	; 33
    22c6:	e6 2f       	mov	r30, r22
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	10 93 57 00 	sts	0x0057, r17
    22ce:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    22d0:	40 ff       	sbrs	r20, 0
    22d2:	03 c0       	rjmp	.+6      	; 0x22da <USB_Device_ProcessControlRequest+0x1de>
					{
						SerialByte >>= 4;
    22d4:	82 95       	swap	r24
    22d6:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    22d8:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    22da:	8f 70       	andi	r24, 0x0F	; 15
    22dc:	28 2f       	mov	r18, r24
    22de:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    22e0:	8a 30       	cpi	r24, 0x0A	; 10
    22e2:	18 f0       	brcs	.+6      	; 0x22ea <USB_Device_ProcessControlRequest+0x1ee>
    22e4:	c9 01       	movw	r24, r18
    22e6:	c7 96       	adiw	r24, 0x37	; 55
    22e8:	02 c0       	rjmp	.+4      	; 0x22ee <USB_Device_ProcessControlRequest+0x1f2>
    22ea:	c9 01       	movw	r24, r18
    22ec:	c0 96       	adiw	r24, 0x30	; 48
    22ee:	8d 93       	st	X+, r24
    22f0:	9d 93       	st	X+, r25
    22f2:	4f 5f       	subi	r20, 0xFF	; 255
    22f4:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    22f6:	44 31       	cpi	r20, 0x14	; 20
    22f8:	51 05       	cpc	r21, r1
    22fa:	29 f7       	brne	.-54     	; 0x22c6 <USB_Device_ProcessControlRequest+0x1ca>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    22fc:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22fe:	80 91 e8 00 	lds	r24, 0x00E8
    2302:	87 7f       	andi	r24, 0xF7	; 247
    2304:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    2308:	ce 01       	movw	r24, r28
    230a:	03 96       	adiw	r24, 0x03	; 3
    230c:	6a e2       	ldi	r22, 0x2A	; 42
    230e:	70 e0       	ldi	r23, 0x00	; 0
    2310:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <Endpoint_Write_Control_Stream_LE>
    2314:	14 c0       	rjmp	.+40     	; 0x233e <USB_Device_ProcessControlRequest+0x242>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2316:	60 91 c0 01 	lds	r22, 0x01C0
    231a:	ae 01       	movw	r20, r28
    231c:	4f 5f       	subi	r20, 0xFF	; 255
    231e:	5f 4f       	sbci	r21, 0xFF	; 255
    2320:	0e 94 a8 0c 	call	0x1950	; 0x1950 <CALLBACK_USB_GetDescriptor>
    2324:	bc 01       	movw	r22, r24
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	09 f4       	brne	.+2      	; 0x232c <USB_Device_ProcessControlRequest+0x230>
    232a:	40 c0       	rjmp	.+128    	; 0x23ac <USB_Device_ProcessControlRequest+0x2b0>
    232c:	80 91 e8 00 	lds	r24, 0x00E8
    2330:	87 7f       	andi	r24, 0xF7	; 247
    2332:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	9a 81       	ldd	r25, Y+2	; 0x02
    233a:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    233e:	80 91 e8 00 	lds	r24, 0x00E8
    2342:	8b 77       	andi	r24, 0x7B	; 123
    2344:	80 93 e8 00 	sts	0x00E8, r24
    2348:	31 c0       	rjmp	.+98     	; 0x23ac <USB_Device_ProcessControlRequest+0x2b0>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    234a:	80 38       	cpi	r24, 0x80	; 128
    234c:	79 f5       	brne	.+94     	; 0x23ac <USB_Device_ProcessControlRequest+0x2b0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    234e:	80 91 e8 00 	lds	r24, 0x00E8
    2352:	87 7f       	andi	r24, 0xF7	; 247
    2354:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2358:	80 91 b7 01 	lds	r24, 0x01B7
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    235c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2360:	80 91 e8 00 	lds	r24, 0x00E8
    2364:	8e 77       	andi	r24, 0x7E	; 126
    2366:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    236a:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <Endpoint_ClearStatusStage>
    236e:	1e c0       	rjmp	.+60     	; 0x23ac <USB_Device_ProcessControlRequest+0x2b0>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2370:	88 23       	and	r24, r24
    2372:	e1 f4       	brne	.+56     	; 0x23ac <USB_Device_ProcessControlRequest+0x2b0>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2374:	90 91 be 01 	lds	r25, 0x01BE
    2378:	92 30       	cpi	r25, 0x02	; 2
    237a:	c0 f4       	brcc	.+48     	; 0x23ac <USB_Device_ProcessControlRequest+0x2b0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    237c:	80 91 e8 00 	lds	r24, 0x00E8
    2380:	87 7f       	andi	r24, 0xF7	; 247
    2382:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2386:	90 93 b7 01 	sts	0x01B7, r25

	Endpoint_ClearStatusStage();
    238a:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    238e:	80 91 b7 01 	lds	r24, 0x01B7
    2392:	88 23       	and	r24, r24
    2394:	31 f4       	brne	.+12     	; 0x23a2 <USB_Device_ProcessControlRequest+0x2a6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2396:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    239a:	87 fd       	sbrc	r24, 7
    239c:	02 c0       	rjmp	.+4      	; 0x23a2 <USB_Device_ProcessControlRequest+0x2a6>
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	01 c0       	rjmp	.+2      	; 0x23a4 <USB_Device_ProcessControlRequest+0x2a8>
    23a2:	84 e0       	ldi	r24, 0x04	; 4
    23a4:	80 93 bb 01 	sts	0x01BB, r24

	EVENT_USB_Device_ConfigurationChanged();
    23a8:	0e 94 87 0c 	call	0x190e	; 0x190e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    23ac:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    23b0:	83 ff       	sbrs	r24, 3
    23b2:	0a c0       	rjmp	.+20     	; 0x23c8 <USB_Device_ProcessControlRequest+0x2cc>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    23b4:	80 91 e8 00 	lds	r24, 0x00E8
    23b8:	87 7f       	andi	r24, 0xF7	; 247
    23ba:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    23be:	80 91 eb 00 	lds	r24, 0x00EB
    23c2:	80 62       	ori	r24, 0x20	; 32
    23c4:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    23c8:	ac 96       	adiw	r28, 0x2c	; 44
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	cd bf       	out	0x3d, r28	; 61
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	1f 91       	pop	r17
    23da:	08 95       	ret

000023dc <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    23dc:	90 93 46 01 	sts	0x0146, r25
    23e0:	80 93 45 01 	sts	0x0145, r24
}
    23e4:	08 95       	ret

000023e6 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    23e6:	e0 91 45 01 	lds	r30, 0x0145
    23ea:	f0 91 46 01 	lds	r31, 0x0146
    23ee:	30 97       	sbiw	r30, 0x00	; 0
    23f0:	11 f4       	brne	.+4      	; 0x23f6 <host_keyboard_leds+0x10>
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	08 95       	ret
    return (*driver->keyboard_leds)();
    23f6:	01 90       	ld	r0, Z+
    23f8:	f0 81       	ld	r31, Z
    23fa:	e0 2d       	mov	r30, r0
    23fc:	09 95       	icall
}
    23fe:	08 95       	ret

00002400 <host_mouse_send>:
    }
}

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    2400:	e0 91 45 01 	lds	r30, 0x0145
    2404:	f0 91 46 01 	lds	r31, 0x0146
    2408:	30 97       	sbiw	r30, 0x00	; 0
    240a:	21 f0       	breq	.+8      	; 0x2414 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    240c:	04 80       	ldd	r0, Z+4	; 0x04
    240e:	f5 81       	ldd	r31, Z+5	; 0x05
    2410:	e0 2d       	mov	r30, r0
    2412:	09 95       	icall
    2414:	08 95       	ret

00002416 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    2416:	9c 01       	movw	r18, r24
    if (report == last_system_report) return;
    2418:	80 91 43 01 	lds	r24, 0x0143
    241c:	90 91 44 01 	lds	r25, 0x0144
    2420:	28 17       	cp	r18, r24
    2422:	39 07       	cpc	r19, r25
    2424:	79 f0       	breq	.+30     	; 0x2444 <host_system_send+0x2e>
    last_system_report = report;
    2426:	30 93 44 01 	sts	0x0144, r19
    242a:	20 93 43 01 	sts	0x0143, r18

    if (!driver) return;
    242e:	e0 91 45 01 	lds	r30, 0x0145
    2432:	f0 91 46 01 	lds	r31, 0x0146
    2436:	30 97       	sbiw	r30, 0x00	; 0
    2438:	29 f0       	breq	.+10     	; 0x2444 <host_system_send+0x2e>
    (*driver->send_system)(report);
    243a:	06 80       	ldd	r0, Z+6	; 0x06
    243c:	f7 81       	ldd	r31, Z+7	; 0x07
    243e:	e0 2d       	mov	r30, r0
    2440:	c9 01       	movw	r24, r18
    2442:	09 95       	icall
    2444:	08 95       	ret

00002446 <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    2446:	9c 01       	movw	r18, r24
    if (report == last_consumer_report) return;
    2448:	80 91 41 01 	lds	r24, 0x0141
    244c:	90 91 42 01 	lds	r25, 0x0142
    2450:	28 17       	cp	r18, r24
    2452:	39 07       	cpc	r19, r25
    2454:	79 f0       	breq	.+30     	; 0x2474 <host_consumer_send+0x2e>
    last_consumer_report = report;
    2456:	30 93 42 01 	sts	0x0142, r19
    245a:	20 93 41 01 	sts	0x0141, r18

    if (!driver) return;
    245e:	e0 91 45 01 	lds	r30, 0x0145
    2462:	f0 91 46 01 	lds	r31, 0x0146
    2466:	30 97       	sbiw	r30, 0x00	; 0
    2468:	29 f0       	breq	.+10     	; 0x2474 <host_consumer_send+0x2e>
    (*driver->send_consumer)(report);
    246a:	00 84       	ldd	r0, Z+8	; 0x08
    246c:	f1 85       	ldd	r31, Z+9	; 0x09
    246e:	e0 2d       	mov	r30, r0
    2470:	c9 01       	movw	r24, r18
    2472:	09 95       	icall
    2474:	08 95       	ret

00002476 <host_keyboard_send>:
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2476:	ef 92       	push	r14
    2478:	ff 92       	push	r15
    247a:	0f 93       	push	r16
    247c:	1f 93       	push	r17
    247e:	cf 93       	push	r28
    2480:	df 93       	push	r29
    2482:	18 2f       	mov	r17, r24
    2484:	09 2f       	mov	r16, r25
    if (!driver) return;
    2486:	e0 91 45 01 	lds	r30, 0x0145
    248a:	f0 91 46 01 	lds	r31, 0x0146
    248e:	30 97       	sbiw	r30, 0x00	; 0
    2490:	d9 f1       	breq	.+118    	; 0x2508 <host_keyboard_send+0x92>
    (*driver->send_keyboard)(report);
    2492:	02 80       	ldd	r0, Z+2	; 0x02
    2494:	f3 81       	ldd	r31, Z+3	; 0x03
    2496:	e0 2d       	mov	r30, r0
    2498:	09 95       	icall

    if (debug_keyboard) {
    249a:	80 91 a5 01 	lds	r24, 0x01A5
    249e:	82 ff       	sbrs	r24, 2
    24a0:	33 c0       	rjmp	.+102    	; 0x2508 <host_keyboard_send+0x92>
        dprint("keyboard_report: ");
    24a2:	80 ff       	sbrs	r24, 0
    24a4:	04 c0       	rjmp	.+8      	; 0x24ae <host_keyboard_send+0x38>
    24a6:	86 e4       	ldi	r24, 0x46	; 70
    24a8:	95 e0       	ldi	r25, 0x05	; 5
    24aa:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    24ae:	81 2f       	mov	r24, r17
    24b0:	90 2f       	mov	r25, r16
    24b2:	9c 01       	movw	r18, r24
    24b4:	e9 01       	movw	r28, r18
    24b6:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    24b8:	80 e4       	ldi	r24, 0x40	; 64
    24ba:	e8 2e       	mov	r14, r24
    24bc:	85 e0       	ldi	r24, 0x05	; 5
    24be:	f8 2e       	mov	r15, r24
    24c0:	80 91 a5 01 	lds	r24, 0x01A5
    24c4:	80 ff       	sbrs	r24, 0
    24c6:	14 c0       	rjmp	.+40     	; 0x24f0 <host_keyboard_send+0x7a>
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <host_keyboard_send+0x54>
    24ca:	00 d0       	rcall	.+0      	; 0x24cc <host_keyboard_send+0x56>
    24cc:	ed b7       	in	r30, 0x3d	; 61
    24ce:	fe b7       	in	r31, 0x3e	; 62
    24d0:	31 96       	adiw	r30, 0x01	; 1
    24d2:	ad b7       	in	r26, 0x3d	; 61
    24d4:	be b7       	in	r27, 0x3e	; 62
    24d6:	12 96       	adiw	r26, 0x02	; 2
    24d8:	fc 92       	st	X, r15
    24da:	ee 92       	st	-X, r14
    24dc:	11 97       	sbiw	r26, 0x01	; 1
    24de:	88 81       	ld	r24, Y
    24e0:	82 83       	std	Z+2, r24	; 0x02
    24e2:	13 82       	std	Z+3, r1	; 0x03
    24e4:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    24f0:	1f 5f       	subi	r17, 0xFF	; 255
    24f2:	21 96       	adiw	r28, 0x01	; 1
    24f4:	10 31       	cpi	r17, 0x10	; 16
    24f6:	21 f7       	brne	.-56     	; 0x24c0 <host_keyboard_send+0x4a>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    24f8:	80 91 a5 01 	lds	r24, 0x01A5
    24fc:	80 ff       	sbrs	r24, 0
    24fe:	04 c0       	rjmp	.+8      	; 0x2508 <host_keyboard_send+0x92>
    2500:	8e e3       	ldi	r24, 0x3E	; 62
    2502:	95 e0       	ldi	r25, 0x05	; 5
    2504:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    }
}
    2508:	df 91       	pop	r29
    250a:	cf 91       	pop	r28
    250c:	1f 91       	pop	r17
    250e:	0f 91       	pop	r16
    2510:	ff 90       	pop	r15
    2512:	ef 90       	pop	r14
    2514:	08 95       	ret

00002516 <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    2516:	08 95       	ret

00002518 <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    2518:	0e 94 8b 12 	call	0x2516	; 0x2516 <matrix_setup>
}
    251c:	08 95       	ret

0000251e <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    251e:	1f 93       	push	r17
    2520:	18 2f       	mov	r17, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    2522:	80 91 a5 01 	lds	r24, 0x01A5
    2526:	82 ff       	sbrs	r24, 2
    2528:	27 c0       	rjmp	.+78     	; 0x2578 <keyboard_set_leds+0x5a>
    252a:	80 ff       	sbrs	r24, 0
    252c:	04 c0       	rjmp	.+8      	; 0x2536 <keyboard_set_leds+0x18>
    252e:	8f e5       	ldi	r24, 0x5F	; 95
    2530:	95 e0       	ldi	r25, 0x05	; 5
    2532:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    2536:	80 91 a5 01 	lds	r24, 0x01A5
    253a:	80 ff       	sbrs	r24, 0
    253c:	15 c0       	rjmp	.+42     	; 0x2568 <keyboard_set_leds+0x4a>
    253e:	00 d0       	rcall	.+0      	; 0x2540 <keyboard_set_leds+0x22>
    2540:	00 d0       	rcall	.+0      	; 0x2542 <keyboard_set_leds+0x24>
    2542:	ed b7       	in	r30, 0x3d	; 61
    2544:	fe b7       	in	r31, 0x3e	; 62
    2546:	31 96       	adiw	r30, 0x01	; 1
    2548:	8a e5       	ldi	r24, 0x5A	; 90
    254a:	95 e0       	ldi	r25, 0x05	; 5
    254c:	ad b7       	in	r26, 0x3d	; 61
    254e:	be b7       	in	r27, 0x3e	; 62
    2550:	12 96       	adiw	r26, 0x02	; 2
    2552:	9c 93       	st	X, r25
    2554:	8e 93       	st	-X, r24
    2556:	11 97       	sbiw	r26, 0x01	; 1
    2558:	12 83       	std	Z+2, r17	; 0x02
    255a:	13 82       	std	Z+3, r1	; 0x03
    255c:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	80 91 a5 01 	lds	r24, 0x01A5
    256c:	80 ff       	sbrs	r24, 0
    256e:	04 c0       	rjmp	.+8      	; 0x2578 <keyboard_set_leds+0x5a>
    2570:	88 e5       	ldi	r24, 0x58	; 88
    2572:	95 e0       	ldi	r25, 0x05	; 5
    2574:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    led_set(leds);
    2578:	81 2f       	mov	r24, r17
    257a:	0e 94 bb 09 	call	0x1376	; 0x1376 <led_set>
}
    257e:	1f 91       	pop	r17
    2580:	08 95       	ret

00002582 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2582:	2f 92       	push	r2
    2584:	3f 92       	push	r3
    2586:	5f 92       	push	r5
    2588:	6f 92       	push	r6
    258a:	7f 92       	push	r7
    258c:	8f 92       	push	r8
    258e:	9f 92       	push	r9
    2590:	af 92       	push	r10
    2592:	bf 92       	push	r11
    2594:	cf 92       	push	r12
    2596:	df 92       	push	r13
    2598:	ef 92       	push	r14
    259a:	ff 92       	push	r15
    259c:	0f 93       	push	r16
    259e:	1f 93       	push	r17
    25a0:	df 93       	push	r29
    25a2:	cf 93       	push	r28
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
    25a8:	2a 97       	sbiw	r28, 0x0a	; 10
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	f8 94       	cli
    25ae:	de bf       	out	0x3e, r29	; 62
    25b0:	0f be       	out	0x3f, r0	; 63
    25b2:	cd bf       	out	0x3d, r28	; 61
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    25b4:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <matrix_scan>
    25b8:	28 e4       	ldi	r18, 0x48	; 72
    25ba:	82 2e       	mov	r8, r18
    25bc:	21 e0       	ldi	r18, 0x01	; 1
    25be:	92 2e       	mov	r9, r18
    25c0:	aa 24       	eor	r10, r10
    25c2:	bb 24       	eor	r11, r11
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    25c4:	91 e0       	ldi	r25, 0x01	; 1
    25c6:	29 2e       	mov	r2, r25
    25c8:	31 2c       	mov	r3, r1
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    25ca:	5a 2c       	mov	r5, r10
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    25cc:	8a 2d       	mov	r24, r10
    25ce:	0e 94 b6 07 	call	0xf6c	; 0xf6c <matrix_get_row>
    25d2:	6c 01       	movw	r12, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    25d4:	f4 01       	movw	r30, r8
    25d6:	e0 80       	ld	r14, Z
    25d8:	f1 80       	ldd	r15, Z+1	; 0x01
    25da:	e8 26       	eor	r14, r24
    25dc:	f9 26       	eor	r15, r25
        if (matrix_change) {
    25de:	e1 14       	cp	r14, r1
    25e0:	f1 04       	cpc	r15, r1
    25e2:	e1 f1       	breq	.+120    	; 0x265c <keyboard_task+0xda>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    25e4:	80 91 a5 01 	lds	r24, 0x01A5
    25e8:	81 ff       	sbrs	r24, 1
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <keyboard_task+0x6e>
    25ec:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <matrix_print>
    25f0:	00 e0       	ldi	r16, 0x00	; 0
    25f2:	10 e0       	ldi	r17, 0x00	; 0
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    25f4:	31 01       	movw	r6, r2
    25f6:	00 2e       	mov	r0, r16
    25f8:	02 c0       	rjmp	.+4      	; 0x25fe <keyboard_task+0x7c>
    25fa:	66 0c       	add	r6, r6
    25fc:	77 1c       	adc	r7, r7
    25fe:	0a 94       	dec	r0
    2600:	e2 f7       	brpl	.-8      	; 0x25fa <keyboard_task+0x78>
    2602:	c3 01       	movw	r24, r6
    2604:	8e 21       	and	r24, r14
    2606:	9f 21       	and	r25, r15
    2608:	89 2b       	or	r24, r25
    260a:	19 f1       	breq	.+70     	; 0x2652 <keyboard_task+0xd0>
                    action_exec((keyevent_t){
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
    260c:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <timer_read>
    2610:	9c 01       	movw	r18, r24
    2612:	09 83       	std	Y+1, r16	; 0x01
    2614:	5a 82       	std	Y+2, r5	; 0x02
    2616:	1b 82       	std	Y+3, r1	; 0x03
    2618:	c6 20       	and	r12, r6
    261a:	d7 20       	and	r13, r7
    261c:	cd 28       	or	r12, r13
    261e:	11 f0       	breq	.+4      	; 0x2624 <keyboard_task+0xa2>
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	8b 83       	std	Y+3, r24	; 0x03
    2624:	c9 01       	movw	r24, r18
    2626:	81 60       	ori	r24, 0x01	; 1
    2628:	78 2f       	mov	r23, r24
    262a:	9d 83       	std	Y+5, r25	; 0x05
    262c:	8c 83       	std	Y+4, r24	; 0x04
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    262e:	49 81       	ldd	r20, Y+1	; 0x01
    2630:	5a 81       	ldd	r21, Y+2	; 0x02
    2632:	6b 81       	ldd	r22, Y+3	; 0x03
    2634:	8d 81       	ldd	r24, Y+5	; 0x05
    2636:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    263a:	f5 01       	movw	r30, r10
    263c:	ee 0f       	add	r30, r30
    263e:	ff 1f       	adc	r31, r31
    2640:	e8 5b       	subi	r30, 0xB8	; 184
    2642:	fe 4f       	sbci	r31, 0xFE	; 254
    2644:	80 81       	ld	r24, Z
    2646:	91 81       	ldd	r25, Z+1	; 0x01
    2648:	86 25       	eor	r24, r6
    264a:	97 25       	eor	r25, r7
    264c:	91 83       	std	Z+1, r25	; 0x01
    264e:	80 83       	st	Z, r24
    2650:	21 c0       	rjmp	.+66     	; 0x2694 <keyboard_task+0x112>
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    2652:	0f 5f       	subi	r16, 0xFF	; 255
    2654:	1f 4f       	sbci	r17, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    2656:	0e 30       	cpi	r16, 0x0E	; 14
    2658:	11 05       	cpc	r17, r1
    265a:	61 f6       	brne	.-104    	; 0x25f4 <keyboard_task+0x72>
    265c:	08 94       	sec
    265e:	a1 1c       	adc	r10, r1
    2660:	b1 1c       	adc	r11, r1
    2662:	82 e0       	ldi	r24, 0x02	; 2
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	88 0e       	add	r8, r24
    2668:	99 1e       	adc	r9, r25
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    266a:	95 e0       	ldi	r25, 0x05	; 5
    266c:	a9 16       	cp	r10, r25
    266e:	b1 04       	cpc	r11, r1
    2670:	09 f0       	breq	.+2      	; 0x2674 <keyboard_task+0xf2>
    2672:	ab cf       	rjmp	.-170    	; 0x25ca <keyboard_task+0x48>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    2674:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <timer_read>
    2678:	2f ef       	ldi	r18, 0xFF	; 255
    267a:	2e 83       	std	Y+6, r18	; 0x06
    267c:	2f 83       	std	Y+7, r18	; 0x07
    267e:	18 86       	std	Y+8, r1	; 0x08
    2680:	81 60       	ori	r24, 0x01	; 1
    2682:	78 2f       	mov	r23, r24
    2684:	9a 87       	std	Y+10, r25	; 0x0a
    2686:	89 87       	std	Y+9, r24	; 0x09
    2688:	4f ef       	ldi	r20, 0xFF	; 255
    268a:	5f ef       	ldi	r21, 0xFF	; 255
    268c:	60 e0       	ldi	r22, 0x00	; 0
    268e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2690:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <action_exec>

MATRIX_LOOP_END:

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    2694:	0e 94 92 24 	call	0x4924	; 0x4924 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2698:	10 91 47 01 	lds	r17, 0x0147
    269c:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <host_keyboard_leds>
    26a0:	18 17       	cp	r17, r24
    26a2:	31 f0       	breq	.+12     	; 0x26b0 <keyboard_task+0x12e>
        led_status = host_keyboard_leds();
    26a4:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <host_keyboard_leds>
    26a8:	80 93 47 01 	sts	0x0147, r24
        keyboard_set_leds(led_status);
    26ac:	0e 94 8f 12 	call	0x251e	; 0x251e <keyboard_set_leds>
    }
}
    26b0:	2a 96       	adiw	r28, 0x0a	; 10
    26b2:	0f b6       	in	r0, 0x3f	; 63
    26b4:	f8 94       	cli
    26b6:	de bf       	out	0x3e, r29	; 62
    26b8:	0f be       	out	0x3f, r0	; 63
    26ba:	cd bf       	out	0x3d, r28	; 61
    26bc:	cf 91       	pop	r28
    26be:	df 91       	pop	r29
    26c0:	1f 91       	pop	r17
    26c2:	0f 91       	pop	r16
    26c4:	ff 90       	pop	r15
    26c6:	ef 90       	pop	r14
    26c8:	df 90       	pop	r13
    26ca:	cf 90       	pop	r12
    26cc:	bf 90       	pop	r11
    26ce:	af 90       	pop	r10
    26d0:	9f 90       	pop	r9
    26d2:	8f 90       	pop	r8
    26d4:	7f 90       	pop	r7
    26d6:	6f 90       	pop	r6
    26d8:	5f 90       	pop	r5
    26da:	3f 90       	pop	r3
    26dc:	2f 90       	pop	r2
    26de:	08 95       	ret

000026e0 <keyboard_init>:
    matrix_setup();
}

void keyboard_init(void)
{
    timer_init();
    26e0:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <timer_init>
    matrix_init();
    26e4:	0e 94 c6 07 	call	0xf8c	; 0xf8c <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    26e8:	0e 94 ad 20 	call	0x415a	; 0x415a <bootmagic>
#endif

#ifdef BACKLIGHT_ENABLE
    backlight_init();
#endif
}
    26ec:	08 95       	ret

000026ee <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	00 d0       	rcall	.+0      	; 0x26f4 <debug_event+0x6>
    26f4:	00 d0       	rcall	.+0      	; 0x26f6 <debug_event+0x8>
    26f6:	0f 92       	push	r0
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <debug_record>:

void debug_record(keyrecord_t record)
{
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	00 d0       	rcall	.+0      	; 0x2712 <debug_record+0x6>
    2712:	00 d0       	rcall	.+0      	; 0x2714 <debug_record+0x8>
    2714:	00 d0       	rcall	.+0      	; 0x2716 <debug_record+0xa>
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    271a:	26 96       	adiw	r28, 0x06	; 6
    271c:	0f b6       	in	r0, 0x3f	; 63
    271e:	f8 94       	cli
    2720:	de bf       	out	0x3e, r29	; 62
    2722:	0f be       	out	0x3f, r0	; 63
    2724:	cd bf       	out	0x3d, r28	; 61
    2726:	cf 91       	pop	r28
    2728:	df 91       	pop	r29
    272a:	08 95       	ret

0000272c <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    272c:	0e 94 c4 1b 	call	0x3788	; 0x3788 <layer_switch_get_action>
    2730:	48 2f       	mov	r20, r24

    switch (action.kind.id) {
    2732:	89 2f       	mov	r24, r25
    2734:	82 95       	swap	r24
    2736:	8f 70       	andi	r24, 0x0F	; 15
    2738:	28 2f       	mov	r18, r24
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	2c 30       	cpi	r18, 0x0C	; 12
    273e:	31 05       	cpc	r19, r1
    2740:	4c f4       	brge	.+18     	; 0x2754 <is_tap_key+0x28>
    2742:	2a 30       	cpi	r18, 0x0A	; 10
    2744:	31 05       	cpc	r19, r1
    2746:	6c f4       	brge	.+26     	; 0x2762 <is_tap_key+0x36>
    2748:	22 50       	subi	r18, 0x02	; 2
    274a:	30 40       	sbci	r19, 0x00	; 0
    274c:	22 30       	cpi	r18, 0x02	; 2
    274e:	31 05       	cpc	r19, r1
    2750:	c0 f4       	brcc	.+48     	; 0x2782 <is_tap_key+0x56>
    2752:	07 c0       	rjmp	.+14     	; 0x2762 <is_tap_key+0x36>
    2754:	2c 30       	cpi	r18, 0x0C	; 12
    2756:	31 05       	cpc	r19, r1
    2758:	51 f0       	breq	.+20     	; 0x276e <is_tap_key+0x42>
    275a:	2f 30       	cpi	r18, 0x0F	; 15
    275c:	31 05       	cpc	r19, r1
    275e:	89 f4       	brne	.+34     	; 0x2782 <is_tap_key+0x56>
    2760:	06 c0       	rjmp	.+12     	; 0x276e <is_tap_key+0x42>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2762:	40 3e       	cpi	r20, 0xE0	; 224
    2764:	10 f0       	brcs	.+4      	; 0x276a <is_tap_key+0x3e>
    2766:	40 3f       	cpi	r20, 0xF0	; 240
    2768:	61 f4       	brne	.+24     	; 0x2782 <is_tap_key+0x56>
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	08 95       	ret
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    276e:	9f 70       	andi	r25, 0x0F	; 15
    2770:	89 2f       	mov	r24, r25
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	23 e0       	ldi	r18, 0x03	; 3
    2776:	96 95       	lsr	r25
    2778:	87 95       	ror	r24
    277a:	2a 95       	dec	r18
    277c:	e1 f7       	brne	.-8      	; 0x2776 <is_tap_key+0x4a>
    277e:	81 70       	andi	r24, 0x01	; 1
    2780:	08 95       	ret
    2782:	80 e0       	ldi	r24, 0x00	; 0
            return false;
    }
    return false;
}
    2784:	08 95       	ret

00002786 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2786:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <clear_weak_mods>
    clear_keys();
    278a:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <clear_keys>
    send_keyboard_report();
    278e:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2792:	0e 94 b6 23 	call	0x476c	; 0x476c <mousekey_clear>
    mousekey_send();
    2796:	0e 94 c2 23 	call	0x4784	; 0x4784 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	0e 94 0b 12 	call	0x2416	; 0x2416 <host_system_send>
    host_consumer_send(0);
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	0e 94 23 12 	call	0x2446	; 0x2446 <host_consumer_send>
#endif
}
    27aa:	08 95       	ret

000027ac <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    27ac:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <clear_mods>
    clear_keyboard_but_mods();
    27b0:	0e 94 c3 13 	call	0x2786	; 0x2786 <clear_keyboard_but_mods>
}
    27b4:	08 95       	ret

000027b6 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    27b6:	88 23       	and	r24, r24
    27b8:	21 f0       	breq	.+8      	; 0x27c2 <unregister_mods+0xc>
        del_mods(mods);
    27ba:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <del_mods>
        send_keyboard_report();
    27be:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <send_keyboard_report>
    27c2:	08 95       	ret

000027c4 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    27c4:	88 23       	and	r24, r24
    27c6:	21 f0       	breq	.+8      	; 0x27d0 <register_mods+0xc>
        add_mods(mods);
    27c8:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <add_mods>
        send_keyboard_report();
    27cc:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <send_keyboard_report>
    27d0:	08 95       	ret

000027d2 <unregister_code>:
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}

void unregister_code(uint8_t code)
{
    27d2:	28 2f       	mov	r18, r24
    if (code == KC_NO) {
    27d4:	88 23       	and	r24, r24
    27d6:	09 f4       	brne	.+2      	; 0x27da <unregister_code+0x8>
    27d8:	4e c0       	rjmp	.+156    	; 0x2876 <unregister_code+0xa4>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    27da:	82 38       	cpi	r24, 0x82	; 130
    27dc:	59 f4       	brne	.+22     	; 0x27f4 <unregister_code+0x22>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    27de:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <host_keyboard_leds>
    27e2:	81 ff       	sbrs	r24, 1
    27e4:	48 c0       	rjmp	.+144    	; 0x2876 <unregister_code+0xa4>
#endif
        add_key(KC_CAPSLOCK);
    27e6:	89 e3       	ldi	r24, 0x39	; 57
    27e8:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <add_key>
        send_keyboard_report();
    27ec:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    27f0:	89 e3       	ldi	r24, 0x39	; 57
    27f2:	0c c0       	rjmp	.+24     	; 0x280c <unregister_code+0x3a>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    27f4:	83 38       	cpi	r24, 0x83	; 131
    27f6:	69 f4       	brne	.+26     	; 0x2812 <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    27f8:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <host_keyboard_leds>
    27fc:	80 ff       	sbrs	r24, 0
    27fe:	3b c0       	rjmp	.+118    	; 0x2876 <unregister_code+0xa4>
#endif
        add_key(KC_NUMLOCK);
    2800:	83 e5       	ldi	r24, 0x53	; 83
    2802:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <add_key>
        send_keyboard_report();
    2806:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <send_keyboard_report>
        del_key(KC_NUMLOCK);
    280a:	83 e5       	ldi	r24, 0x53	; 83
    280c:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <del_key>
    2810:	1f c0       	rjmp	.+62     	; 0x2850 <unregister_code+0x7e>
        send_keyboard_report();
    }

    else if (KC_LOCKING_SCROLL == code) {
    2812:	84 38       	cpi	r24, 0x84	; 132
    2814:	59 f4       	brne	.+22     	; 0x282c <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    2816:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <host_keyboard_leds>
    281a:	82 ff       	sbrs	r24, 2
    281c:	2c c0       	rjmp	.+88     	; 0x2876 <unregister_code+0xa4>
#endif
        add_key(KC_SCROLLLOCK);
    281e:	87 e4       	ldi	r24, 0x47	; 71
    2820:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <add_key>
        send_keyboard_report();
    2824:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    2828:	87 e4       	ldi	r24, 0x47	; 71
    282a:	f0 cf       	rjmp	.-32     	; 0x280c <unregister_code+0x3a>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    282c:	84 50       	subi	r24, 0x04	; 4
    282e:	81 3a       	cpi	r24, 0xA1	; 161
    2830:	10 f4       	brcc	.+4      	; 0x2836 <unregister_code+0x64>
        del_key(code);
    2832:	82 2f       	mov	r24, r18
    2834:	eb cf       	rjmp	.-42     	; 0x280c <unregister_code+0x3a>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2836:	82 2f       	mov	r24, r18
    2838:	80 5e       	subi	r24, 0xE0	; 224
    283a:	88 30       	cpi	r24, 0x08	; 8
    283c:	60 f4       	brcc	.+24     	; 0x2856 <unregister_code+0x84>
        del_mods(MOD_BIT(code));
    283e:	27 70       	andi	r18, 0x07	; 7
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	01 c0       	rjmp	.+2      	; 0x2848 <unregister_code+0x76>
    2846:	88 0f       	add	r24, r24
    2848:	2a 95       	dec	r18
    284a:	ea f7       	brpl	.-6      	; 0x2846 <unregister_code+0x74>
    284c:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <del_mods>
        send_keyboard_report();
    2850:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <send_keyboard_report>
    2854:	08 95       	ret
    }
    else if IS_SYSTEM(code) {
    2856:	82 2f       	mov	r24, r18
    2858:	85 5a       	subi	r24, 0xA5	; 165
    285a:	83 30       	cpi	r24, 0x03	; 3
    285c:	28 f4       	brcc	.+10     	; 0x2868 <unregister_code+0x96>
        host_system_send(0);
    285e:	80 e0       	ldi	r24, 0x00	; 0
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	0e 94 0b 12 	call	0x2416	; 0x2416 <host_system_send>
    2866:	08 95       	ret
    }
    else if IS_CONSUMER(code) {
    2868:	28 5a       	subi	r18, 0xA8	; 168
    286a:	23 31       	cpi	r18, 0x13	; 19
    286c:	20 f4       	brcc	.+8      	; 0x2876 <unregister_code+0xa4>
        host_consumer_send(0);
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	0e 94 23 12 	call	0x2446	; 0x2446 <host_consumer_send>
    2876:	08 95       	ret

00002878 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    2878:	1f 93       	push	r17
    287a:	18 2f       	mov	r17, r24
    if (code == KC_NO) {
    287c:	88 23       	and	r24, r24
    287e:	09 f4       	brne	.+2      	; 0x2882 <register_code+0xa>
    2880:	d0 c0       	rjmp	.+416    	; 0x2a22 <register_code+0x1aa>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2882:	82 38       	cpi	r24, 0x82	; 130
    2884:	59 f4       	brne	.+22     	; 0x289c <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    2886:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <host_keyboard_leds>
    288a:	81 fd       	sbrc	r24, 1
    288c:	ca c0       	rjmp	.+404    	; 0x2a22 <register_code+0x1aa>
#endif
        add_key(KC_CAPSLOCK);
    288e:	89 e3       	ldi	r24, 0x39	; 57
    2890:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <add_key>
        send_keyboard_report();
    2894:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    2898:	89 e3       	ldi	r24, 0x39	; 57
    289a:	0c c0       	rjmp	.+24     	; 0x28b4 <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    289c:	83 38       	cpi	r24, 0x83	; 131
    289e:	79 f4       	brne	.+30     	; 0x28be <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    28a0:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <host_keyboard_leds>
    28a4:	80 fd       	sbrc	r24, 0
    28a6:	bd c0       	rjmp	.+378    	; 0x2a22 <register_code+0x1aa>
#endif
        add_key(KC_NUMLOCK);
    28a8:	83 e5       	ldi	r24, 0x53	; 83
    28aa:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <add_key>
        send_keyboard_report();
    28ae:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <send_keyboard_report>
        del_key(KC_NUMLOCK);
    28b2:	83 e5       	ldi	r24, 0x53	; 83
    28b4:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <del_key>
        send_keyboard_report();
    28b8:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <send_keyboard_report>
    28bc:	b2 c0       	rjmp	.+356    	; 0x2a22 <register_code+0x1aa>
    }

    else if (KC_LOCKING_SCROLL == code) {
    28be:	84 38       	cpi	r24, 0x84	; 132
    28c0:	59 f4       	brne	.+22     	; 0x28d8 <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    28c2:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <host_keyboard_leds>
    28c6:	82 fd       	sbrc	r24, 2
    28c8:	ac c0       	rjmp	.+344    	; 0x2a22 <register_code+0x1aa>
#endif
        add_key(KC_SCROLLLOCK);
    28ca:	87 e4       	ldi	r24, 0x47	; 71
    28cc:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <add_key>
        send_keyboard_report();
    28d0:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    28d4:	87 e4       	ldi	r24, 0x47	; 71
    28d6:	ee cf       	rjmp	.-36     	; 0x28b4 <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    28d8:	84 50       	subi	r24, 0x04	; 4
    28da:	81 3a       	cpi	r24, 0xA1	; 161
    28dc:	50 f4       	brcc	.+20     	; 0x28f2 <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    28de:	81 2f       	mov	r24, r17
    28e0:	0e 94 82 2a 	call	0x5504	; 0x5504 <command_proc>
    28e4:	88 23       	and	r24, r24
    28e6:	09 f0       	breq	.+2      	; 0x28ea <register_code+0x72>
    28e8:	9c c0       	rjmp	.+312    	; 0x2a22 <register_code+0x1aa>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    28ea:	81 2f       	mov	r24, r17
    28ec:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <add_key>
    28f0:	e3 cf       	rjmp	.-58     	; 0x28b8 <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    28f2:	81 2f       	mov	r24, r17
    28f4:	80 5e       	subi	r24, 0xE0	; 224
    28f6:	88 30       	cpi	r24, 0x08	; 8
    28f8:	50 f4       	brcc	.+20     	; 0x290e <register_code+0x96>
        add_mods(MOD_BIT(code));
    28fa:	17 70       	andi	r17, 0x07	; 7
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	01 c0       	rjmp	.+2      	; 0x2904 <register_code+0x8c>
    2902:	88 0f       	add	r24, r24
    2904:	1a 95       	dec	r17
    2906:	ea f7       	brpl	.-6      	; 0x2902 <register_code+0x8a>
    2908:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <add_mods>
    290c:	d5 cf       	rjmp	.-86     	; 0x28b8 <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    290e:	81 2f       	mov	r24, r17
    2910:	85 5a       	subi	r24, 0xA5	; 165
    2912:	83 30       	cpi	r24, 0x03	; 3
    2914:	a0 f4       	brcc	.+40     	; 0x293e <register_code+0xc6>
        host_system_send(KEYCODE2SYSTEM(code));
    2916:	15 3a       	cpi	r17, 0xA5	; 165
    2918:	19 f4       	brne	.+6      	; 0x2920 <register_code+0xa8>
    291a:	81 e8       	ldi	r24, 0x81	; 129
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	0c c0       	rjmp	.+24     	; 0x2938 <register_code+0xc0>
    2920:	16 3a       	cpi	r17, 0xA6	; 166
    2922:	19 f4       	brne	.+6      	; 0x292a <register_code+0xb2>
    2924:	82 e8       	ldi	r24, 0x82	; 130
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	07 c0       	rjmp	.+14     	; 0x2938 <register_code+0xc0>
    292a:	17 3a       	cpi	r17, 0xA7	; 167
    292c:	19 f0       	breq	.+6      	; 0x2934 <register_code+0xbc>
    292e:	80 e0       	ldi	r24, 0x00	; 0
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	02 c0       	rjmp	.+4      	; 0x2938 <register_code+0xc0>
    2934:	83 e8       	ldi	r24, 0x83	; 131
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	0e 94 0b 12 	call	0x2416	; 0x2416 <host_system_send>
    293c:	72 c0       	rjmp	.+228    	; 0x2a22 <register_code+0x1aa>
    }
    else if IS_CONSUMER(code) {
    293e:	81 2f       	mov	r24, r17
    2940:	88 5a       	subi	r24, 0xA8	; 168
    2942:	83 31       	cpi	r24, 0x13	; 19
    2944:	08 f0       	brcs	.+2      	; 0x2948 <register_code+0xd0>
    2946:	6d c0       	rjmp	.+218    	; 0x2a22 <register_code+0x1aa>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2948:	18 3a       	cpi	r17, 0xA8	; 168
    294a:	19 f4       	brne	.+6      	; 0x2952 <register_code+0xda>
    294c:	82 ee       	ldi	r24, 0xE2	; 226
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	66 c0       	rjmp	.+204    	; 0x2a1e <register_code+0x1a6>
    2952:	19 3a       	cpi	r17, 0xA9	; 169
    2954:	19 f4       	brne	.+6      	; 0x295c <register_code+0xe4>
    2956:	89 ee       	ldi	r24, 0xE9	; 233
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	61 c0       	rjmp	.+194    	; 0x2a1e <register_code+0x1a6>
    295c:	1a 3a       	cpi	r17, 0xAA	; 170
    295e:	19 f4       	brne	.+6      	; 0x2966 <register_code+0xee>
    2960:	8a ee       	ldi	r24, 0xEA	; 234
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	5c c0       	rjmp	.+184    	; 0x2a1e <register_code+0x1a6>
    2966:	1b 3a       	cpi	r17, 0xAB	; 171
    2968:	19 f4       	brne	.+6      	; 0x2970 <register_code+0xf8>
    296a:	85 eb       	ldi	r24, 0xB5	; 181
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	57 c0       	rjmp	.+174    	; 0x2a1e <register_code+0x1a6>
    2970:	1c 3a       	cpi	r17, 0xAC	; 172
    2972:	19 f4       	brne	.+6      	; 0x297a <register_code+0x102>
    2974:	86 eb       	ldi	r24, 0xB6	; 182
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	52 c0       	rjmp	.+164    	; 0x2a1e <register_code+0x1a6>
    297a:	1b 3b       	cpi	r17, 0xBB	; 187
    297c:	19 f4       	brne	.+6      	; 0x2984 <register_code+0x10c>
    297e:	83 eb       	ldi	r24, 0xB3	; 179
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	4d c0       	rjmp	.+154    	; 0x2a1e <register_code+0x1a6>
    2984:	1c 3b       	cpi	r17, 0xBC	; 188
    2986:	19 f4       	brne	.+6      	; 0x298e <register_code+0x116>
    2988:	84 eb       	ldi	r24, 0xB4	; 180
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	48 c0       	rjmp	.+144    	; 0x2a1e <register_code+0x1a6>
    298e:	1d 3a       	cpi	r17, 0xAD	; 173
    2990:	19 f4       	brne	.+6      	; 0x2998 <register_code+0x120>
    2992:	87 eb       	ldi	r24, 0xB7	; 183
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	43 c0       	rjmp	.+134    	; 0x2a1e <register_code+0x1a6>
    2998:	10 3b       	cpi	r17, 0xB0	; 176
    299a:	19 f4       	brne	.+6      	; 0x29a2 <register_code+0x12a>
    299c:	8c ec       	ldi	r24, 0xCC	; 204
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	3e c0       	rjmp	.+124    	; 0x2a1e <register_code+0x1a6>
    29a2:	1e 3a       	cpi	r17, 0xAE	; 174
    29a4:	19 f4       	brne	.+6      	; 0x29ac <register_code+0x134>
    29a6:	8d ec       	ldi	r24, 0xCD	; 205
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	39 c0       	rjmp	.+114    	; 0x2a1e <register_code+0x1a6>
    29ac:	1f 3a       	cpi	r17, 0xAF	; 175
    29ae:	19 f4       	brne	.+6      	; 0x29b6 <register_code+0x13e>
    29b0:	83 e8       	ldi	r24, 0x83	; 131
    29b2:	91 e0       	ldi	r25, 0x01	; 1
    29b4:	34 c0       	rjmp	.+104    	; 0x2a1e <register_code+0x1a6>
    29b6:	11 3b       	cpi	r17, 0xB1	; 177
    29b8:	19 f4       	brne	.+6      	; 0x29c0 <register_code+0x148>
    29ba:	8a e8       	ldi	r24, 0x8A	; 138
    29bc:	91 e0       	ldi	r25, 0x01	; 1
    29be:	2f c0       	rjmp	.+94     	; 0x2a1e <register_code+0x1a6>
    29c0:	12 3b       	cpi	r17, 0xB2	; 178
    29c2:	19 f4       	brne	.+6      	; 0x29ca <register_code+0x152>
    29c4:	82 e9       	ldi	r24, 0x92	; 146
    29c6:	91 e0       	ldi	r25, 0x01	; 1
    29c8:	2a c0       	rjmp	.+84     	; 0x2a1e <register_code+0x1a6>
    29ca:	13 3b       	cpi	r17, 0xB3	; 179
    29cc:	19 f4       	brne	.+6      	; 0x29d4 <register_code+0x15c>
    29ce:	84 e9       	ldi	r24, 0x94	; 148
    29d0:	91 e0       	ldi	r25, 0x01	; 1
    29d2:	25 c0       	rjmp	.+74     	; 0x2a1e <register_code+0x1a6>
    29d4:	14 3b       	cpi	r17, 0xB4	; 180
    29d6:	19 f4       	brne	.+6      	; 0x29de <register_code+0x166>
    29d8:	81 e2       	ldi	r24, 0x21	; 33
    29da:	92 e0       	ldi	r25, 0x02	; 2
    29dc:	20 c0       	rjmp	.+64     	; 0x2a1e <register_code+0x1a6>
    29de:	15 3b       	cpi	r17, 0xB5	; 181
    29e0:	19 f4       	brne	.+6      	; 0x29e8 <register_code+0x170>
    29e2:	83 e2       	ldi	r24, 0x23	; 35
    29e4:	92 e0       	ldi	r25, 0x02	; 2
    29e6:	1b c0       	rjmp	.+54     	; 0x2a1e <register_code+0x1a6>
    29e8:	16 3b       	cpi	r17, 0xB6	; 182
    29ea:	19 f4       	brne	.+6      	; 0x29f2 <register_code+0x17a>
    29ec:	84 e2       	ldi	r24, 0x24	; 36
    29ee:	92 e0       	ldi	r25, 0x02	; 2
    29f0:	16 c0       	rjmp	.+44     	; 0x2a1e <register_code+0x1a6>
    29f2:	17 3b       	cpi	r17, 0xB7	; 183
    29f4:	19 f4       	brne	.+6      	; 0x29fc <register_code+0x184>
    29f6:	85 e2       	ldi	r24, 0x25	; 37
    29f8:	92 e0       	ldi	r25, 0x02	; 2
    29fa:	11 c0       	rjmp	.+34     	; 0x2a1e <register_code+0x1a6>
    29fc:	18 3b       	cpi	r17, 0xB8	; 184
    29fe:	19 f4       	brne	.+6      	; 0x2a06 <register_code+0x18e>
    2a00:	86 e2       	ldi	r24, 0x26	; 38
    2a02:	92 e0       	ldi	r25, 0x02	; 2
    2a04:	0c c0       	rjmp	.+24     	; 0x2a1e <register_code+0x1a6>
    2a06:	19 3b       	cpi	r17, 0xB9	; 185
    2a08:	19 f4       	brne	.+6      	; 0x2a10 <register_code+0x198>
    2a0a:	87 e2       	ldi	r24, 0x27	; 39
    2a0c:	92 e0       	ldi	r25, 0x02	; 2
    2a0e:	07 c0       	rjmp	.+14     	; 0x2a1e <register_code+0x1a6>
    2a10:	1a 3b       	cpi	r17, 0xBA	; 186
    2a12:	19 f0       	breq	.+6      	; 0x2a1a <register_code+0x1a2>
    2a14:	80 e0       	ldi	r24, 0x00	; 0
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	02 c0       	rjmp	.+4      	; 0x2a1e <register_code+0x1a6>
    2a1a:	8a e2       	ldi	r24, 0x2A	; 42
    2a1c:	92 e0       	ldi	r25, 0x02	; 2
    2a1e:	0e 94 23 12 	call	0x2446	; 0x2446 <host_consumer_send>
    }
}
    2a22:	1f 91       	pop	r17
    2a24:	08 95       	ret

00002a26 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    2a26:	af 92       	push	r10
    2a28:	bf 92       	push	r11
    2a2a:	cf 92       	push	r12
    2a2c:	df 92       	push	r13
    2a2e:	ef 92       	push	r14
    2a30:	ff 92       	push	r15
    2a32:	0f 93       	push	r16
    2a34:	1f 93       	push	r17
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
    2a3e:	2a 97       	sbiw	r28, 0x0a	; 10
    2a40:	0f b6       	in	r0, 0x3f	; 63
    2a42:	f8 94       	cli
    2a44:	de bf       	out	0x3e, r29	; 62
    2a46:	0f be       	out	0x3f, r0	; 63
    2a48:	cd bf       	out	0x3d, r28	; 61
    2a4a:	5c 01       	movw	r10, r24
    keyevent_t event = record->event;
    2a4c:	de 01       	movw	r26, r28
    2a4e:	11 96       	adiw	r26, 0x01	; 1
    2a50:	fc 01       	movw	r30, r24
    2a52:	85 e0       	ldi	r24, 0x05	; 5
    2a54:	01 90       	ld	r0, Z+
    2a56:	0d 92       	st	X+, r0
    2a58:	81 50       	subi	r24, 0x01	; 1
    2a5a:	e1 f7       	brne	.-8      	; 0x2a54 <process_action+0x2e>
    2a5c:	0b 81       	ldd	r16, Y+3	; 0x03
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    2a5e:	f5 01       	movw	r30, r10
    2a60:	f5 80       	ldd	r15, Z+5	; 0x05
    2a62:	f2 94       	swap	r15
    2a64:	4f e0       	ldi	r20, 0x0F	; 15
    2a66:	f4 22       	and	r15, r20
#endif

    if (IS_NOEVENT(event)) { return; }
    2a68:	de 01       	movw	r26, r28
    2a6a:	16 96       	adiw	r26, 0x06	; 6
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	31 96       	adiw	r30, 0x01	; 1
    2a70:	85 e0       	ldi	r24, 0x05	; 5
    2a72:	01 90       	ld	r0, Z+
    2a74:	0d 92       	st	X+, r0
    2a76:	81 50       	subi	r24, 0x01	; 1
    2a78:	e1 f7       	brne	.-8      	; 0x2a72 <process_action+0x4c>
    2a7a:	3e 81       	ldd	r19, Y+6	; 0x06
    2a7c:	2f 81       	ldd	r18, Y+7	; 0x07

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2a7e:	89 85       	ldd	r24, Y+9	; 0x09
    2a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a82:	89 2b       	or	r24, r25
    2a84:	09 f4       	brne	.+2      	; 0x2a88 <process_action+0x62>
    2a86:	f8 c1       	rjmp	.+1008   	; 0x2e78 <process_action+0x452>
    2a88:	2f 3f       	cpi	r18, 0xFF	; 255
    2a8a:	09 f0       	breq	.+2      	; 0x2a8e <process_action+0x68>
    2a8c:	c8 c1       	rjmp	.+912    	; 0x2e1e <process_action+0x3f8>
    2a8e:	3f 3f       	cpi	r19, 0xFF	; 255
    2a90:	09 f0       	breq	.+2      	; 0x2a94 <process_action+0x6e>
    2a92:	c5 c1       	rjmp	.+906    	; 0x2e1e <process_action+0x3f8>
    2a94:	f1 c1       	rjmp	.+994    	; 0x2e78 <process_action+0x452>
    2a96:	8d 2d       	mov	r24, r13
    2a98:	8f 70       	andi	r24, 0x0F	; 15
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
                                                                action.key.mods<<4;
    2a9a:	22 23       	and	r18, r18
    2a9c:	11 f4       	brne	.+4      	; 0x2aa2 <process_action+0x7c>
    2a9e:	18 2f       	mov	r17, r24
    2aa0:	03 c0       	rjmp	.+6      	; 0x2aa8 <process_action+0x82>
    2aa2:	18 2f       	mov	r17, r24
    2aa4:	12 95       	swap	r17
    2aa6:	10 7f       	andi	r17, 0xF0	; 240
                if (event.pressed) {
    2aa8:	00 23       	and	r16, r16
    2aaa:	49 f0       	breq	.+18     	; 0x2abe <process_action+0x98>
                    if (mods) {
    2aac:	11 23       	and	r17, r17
    2aae:	09 f4       	brne	.+2      	; 0x2ab2 <process_action+0x8c>
    2ab0:	90 c1       	rjmp	.+800    	; 0x2dd2 <process_action+0x3ac>
                        add_weak_mods(mods);
    2ab2:	81 2f       	mov	r24, r17
    2ab4:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <add_weak_mods>
                        send_keyboard_report();
    2ab8:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <send_keyboard_report>
    2abc:	8a c1       	rjmp	.+788    	; 0x2dd2 <process_action+0x3ac>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2abe:	8c 2d       	mov	r24, r12
    2ac0:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <unregister_code>
                    if (mods) {
    2ac4:	11 23       	and	r17, r17
    2ac6:	09 f4       	brne	.+2      	; 0x2aca <process_action+0xa4>
    2ac8:	d7 c1       	rjmp	.+942    	; 0x2e78 <process_action+0x452>
                        del_weak_mods(mods);
    2aca:	81 2f       	mov	r24, r17
    2acc:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <del_weak_mods>
                        send_keyboard_report();
    2ad0:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <send_keyboard_report>
    2ad4:	d1 c1       	rjmp	.+930    	; 0x2e78 <process_action+0x452>
    2ad6:	8d 2d       	mov	r24, r13
    2ad8:	8f 70       	andi	r24, 0x0F	; 15
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
                                                                    action.key.mods<<4;
    2ada:	20 32       	cpi	r18, 0x20	; 32
    2adc:	11 f4       	brne	.+4      	; 0x2ae2 <process_action+0xbc>
    2ade:	18 2f       	mov	r17, r24
    2ae0:	03 c0       	rjmp	.+6      	; 0x2ae8 <process_action+0xc2>
    2ae2:	18 2f       	mov	r17, r24
    2ae4:	12 95       	swap	r17
    2ae6:	10 7f       	andi	r17, 0xF0	; 240
                switch (action.layer_tap.code) {
    2ae8:	cc 20       	and	r12, r12
    2aea:	21 f0       	breq	.+8      	; 0x2af4 <process_action+0xce>
    2aec:	f1 e0       	ldi	r31, 0x01	; 1
    2aee:	cf 16       	cp	r12, r31
    2af0:	29 f5       	brne	.+74     	; 0x2b3c <process_action+0x116>
    2af2:	14 c0       	rjmp	.+40     	; 0x2b1c <process_action+0xf6>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    2af4:	00 23       	and	r16, r16
    2af6:	49 f0       	breq	.+18     	; 0x2b0a <process_action+0xe4>
                            if (tap_count == 0) {
    2af8:	ff 20       	and	r15, r15
    2afa:	51 f1       	breq	.+84     	; 0x2b50 <process_action+0x12a>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    2afc:	21 e0       	ldi	r18, 0x01	; 1
    2afe:	f2 16       	cp	r15, r18
    2b00:	39 f5       	brne	.+78     	; 0x2b50 <process_action+0x12a>
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    2b02:	81 2f       	mov	r24, r17
    2b04:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <set_oneshot_mods>
    2b08:	b7 c1       	rjmp	.+878    	; 0x2e78 <process_action+0x452>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    2b0a:	ff 20       	and	r15, r15
    2b0c:	21 f0       	breq	.+8      	; 0x2b16 <process_action+0xf0>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	f8 16       	cp	r15, r24
    2b12:	09 f4       	brne	.+2      	; 0x2b16 <process_action+0xf0>
    2b14:	b1 c1       	rjmp	.+866    	; 0x2e78 <process_action+0x452>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    2b16:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <clear_oneshot_mods>
    2b1a:	2f c1       	rjmp	.+606    	; 0x2d7a <process_action+0x354>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    2b1c:	00 23       	and	r16, r16
    2b1e:	49 f0       	breq	.+18     	; 0x2b32 <process_action+0x10c>
                            if (tap_count <= TAPPING_TOGGLE) {
    2b20:	e5 e0       	ldi	r30, 0x05	; 5
    2b22:	ef 15       	cp	r30, r15
    2b24:	08 f4       	brcc	.+2      	; 0x2b28 <process_action+0x102>
    2b26:	a8 c1       	rjmp	.+848    	; 0x2e78 <process_action+0x452>
                                if (mods & get_mods()) {
    2b28:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <get_mods>
    2b2c:	81 23       	and	r24, r17
    2b2e:	81 f0       	breq	.+32     	; 0x2b50 <process_action+0x12a>
    2b30:	24 c1       	rjmp	.+584    	; 0x2d7a <process_action+0x354>
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2b32:	f4 e0       	ldi	r31, 0x04	; 4
    2b34:	ff 15       	cp	r31, r15
    2b36:	08 f4       	brcc	.+2      	; 0x2b3a <process_action+0x114>
    2b38:	9f c1       	rjmp	.+830    	; 0x2e78 <process_action+0x452>
    2b3a:	1f c1       	rjmp	.+574    	; 0x2d7a <process_action+0x354>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2b3c:	00 23       	and	r16, r16
    2b3e:	61 f0       	breq	.+24     	; 0x2b58 <process_action+0x132>
                            if (tap_count > 0) {
    2b40:	ff 20       	and	r15, r15
    2b42:	31 f0       	breq	.+12     	; 0x2b50 <process_action+0x12a>
                                if (record->tap.interrupted) {
    2b44:	f5 01       	movw	r30, r10
    2b46:	85 81       	ldd	r24, Z+5	; 0x05
    2b48:	80 ff       	sbrs	r24, 0
    2b4a:	43 c1       	rjmp	.+646    	; 0x2dd2 <process_action+0x3ac>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2b4c:	8f 70       	andi	r24, 0x0F	; 15
    2b4e:	85 83       	std	Z+5, r24	; 0x05
                                    register_mods(mods);
    2b50:	81 2f       	mov	r24, r17
    2b52:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <register_mods>
    2b56:	90 c1       	rjmp	.+800    	; 0x2e78 <process_action+0x452>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2b58:	ff 20       	and	r15, r15
    2b5a:	09 f4       	brne	.+2      	; 0x2b5e <process_action+0x138>
    2b5c:	0e c1       	rjmp	.+540    	; 0x2d7a <process_action+0x354>
    2b5e:	44 c1       	rjmp	.+648    	; 0x2de8 <process_action+0x3c2>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    2b60:	8d 2d       	mov	r24, r13
    2b62:	86 95       	lsr	r24
    2b64:	86 95       	lsr	r24
    2b66:	83 70       	andi	r24, 0x03	; 3
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	00 97       	sbiw	r24, 0x00	; 0
    2b6c:	21 f0       	breq	.+8      	; 0x2b76 <process_action+0x150>
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	09 f0       	breq	.+2      	; 0x2b74 <process_action+0x14e>
    2b72:	82 c1       	rjmp	.+772    	; 0x2e78 <process_action+0x452>
    2b74:	0a c0       	rjmp	.+20     	; 0x2b8a <process_action+0x164>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2b76:	00 23       	and	r16, r16
    2b78:	19 f0       	breq	.+6      	; 0x2b80 <process_action+0x15a>
                        host_system_send(action.usage.code);
    2b7a:	c6 01       	movw	r24, r12
    2b7c:	93 70       	andi	r25, 0x03	; 3
    2b7e:	02 c0       	rjmp	.+4      	; 0x2b84 <process_action+0x15e>
                    } else {
                        host_system_send(0);
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	0e 94 0b 12 	call	0x2416	; 0x2416 <host_system_send>
    2b88:	77 c1       	rjmp	.+750    	; 0x2e78 <process_action+0x452>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2b8a:	00 23       	and	r16, r16
    2b8c:	19 f0       	breq	.+6      	; 0x2b94 <process_action+0x16e>
                        host_consumer_send(action.usage.code);
    2b8e:	c6 01       	movw	r24, r12
    2b90:	93 70       	andi	r25, 0x03	; 3
    2b92:	02 c0       	rjmp	.+4      	; 0x2b98 <process_action+0x172>
                    } else {
                        host_consumer_send(0);
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	0e 94 23 12 	call	0x2446	; 0x2446 <host_consumer_send>
    2b9c:	6d c1       	rjmp	.+730    	; 0x2e78 <process_action+0x452>
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2b9e:	00 23       	and	r16, r16
    2ba0:	21 f0       	breq	.+8      	; 0x2baa <process_action+0x184>
                mousekey_on(action.key.code);
    2ba2:	8c 2d       	mov	r24, r12
    2ba4:	0e 94 c4 22 	call	0x4588	; 0x4588 <mousekey_on>
    2ba8:	03 c0       	rjmp	.+6      	; 0x2bb0 <process_action+0x18a>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    2baa:	8c 2d       	mov	r24, r12
    2bac:	0e 94 2e 23 	call	0x465c	; 0x465c <mousekey_off>
                mousekey_send();
    2bb0:	0e 94 c2 23 	call	0x4784	; 0x4784 <mousekey_send>
    2bb4:	61 c1       	rjmp	.+706    	; 0x2e78 <process_action+0x452>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2bb6:	8d 2d       	mov	r24, r13
    2bb8:	83 70       	andi	r24, 0x03	; 3
    2bba:	09 f0       	breq	.+2      	; 0x2bbe <process_action+0x198>
    2bbc:	5e c0       	rjmp	.+188    	; 0x2c7a <process_action+0x254>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2bbe:	00 23       	and	r16, r16
    2bc0:	09 f0       	breq	.+2      	; 0x2bc4 <process_action+0x19e>
    2bc2:	5a c1       	rjmp	.+692    	; 0x2e78 <process_action+0x452>
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2bc4:	2c 2d       	mov	r18, r12
    2bc6:	22 95       	swap	r18
    2bc8:	26 95       	lsr	r18
    2bca:	27 70       	andi	r18, 0x07	; 7
    2bcc:	22 0f       	add	r18, r18
    2bce:	22 0f       	add	r18, r18
    2bd0:	8c 2d       	mov	r24, r12
    2bd2:	8f 70       	andi	r24, 0x0F	; 15
    2bd4:	e8 2e       	mov	r14, r24
    2bd6:	ff 24       	eor	r15, r15
    2bd8:	00 e0       	ldi	r16, 0x00	; 0
    2bda:	10 e0       	ldi	r17, 0x00	; 0
    2bdc:	02 2e       	mov	r0, r18
    2bde:	04 c0       	rjmp	.+8      	; 0x2be8 <process_action+0x1c2>
    2be0:	ee 0c       	add	r14, r14
    2be2:	ff 1c       	adc	r15, r15
    2be4:	00 1f       	adc	r16, r16
    2be6:	11 1f       	adc	r17, r17
    2be8:	0a 94       	dec	r0
    2bea:	d2 f7       	brpl	.-12     	; 0x2be0 <process_action+0x1ba>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2bec:	c4 fc       	sbrc	r12, 4
    2bee:	05 c0       	rjmp	.+10     	; 0x2bfa <process_action+0x1d4>
    2bf0:	60 e0       	ldi	r22, 0x00	; 0
    2bf2:	70 e0       	ldi	r23, 0x00	; 0
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	0f c0       	rjmp	.+30     	; 0x2c18 <process_action+0x1f2>
    2bfa:	6f e0       	ldi	r22, 0x0F	; 15
    2bfc:	70 e0       	ldi	r23, 0x00	; 0
    2bfe:	80 e0       	ldi	r24, 0x00	; 0
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	04 c0       	rjmp	.+8      	; 0x2c0c <process_action+0x1e6>
    2c04:	66 0f       	add	r22, r22
    2c06:	77 1f       	adc	r23, r23
    2c08:	88 1f       	adc	r24, r24
    2c0a:	99 1f       	adc	r25, r25
    2c0c:	2a 95       	dec	r18
    2c0e:	d2 f7       	brpl	.-12     	; 0x2c04 <process_action+0x1de>
    2c10:	60 95       	com	r22
    2c12:	70 95       	com	r23
    2c14:	80 95       	com	r24
    2c16:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    2c18:	d6 94       	lsr	r13
    2c1a:	d6 94       	lsr	r13
    2c1c:	f3 e0       	ldi	r31, 0x03	; 3
    2c1e:	df 22       	and	r13, r31
    2c20:	4d 2d       	mov	r20, r13
    2c22:	50 e0       	ldi	r21, 0x00	; 0
    2c24:	41 30       	cpi	r20, 0x01	; 1
    2c26:	51 05       	cpc	r21, r1
    2c28:	a9 f0       	breq	.+42     	; 0x2c54 <process_action+0x22e>
    2c2a:	42 30       	cpi	r20, 0x02	; 2
    2c2c:	51 05       	cpc	r21, r1
    2c2e:	1c f4       	brge	.+6      	; 0x2c36 <process_action+0x210>
    2c30:	45 2b       	or	r20, r21
    2c32:	49 f0       	breq	.+18     	; 0x2c46 <process_action+0x220>
    2c34:	21 c1       	rjmp	.+578    	; 0x2e78 <process_action+0x452>
    2c36:	42 30       	cpi	r20, 0x02	; 2
    2c38:	51 05       	cpc	r21, r1
    2c3a:	89 f0       	breq	.+34     	; 0x2c5e <process_action+0x238>
    2c3c:	43 30       	cpi	r20, 0x03	; 3
    2c3e:	51 05       	cpc	r21, r1
    2c40:	09 f0       	breq	.+2      	; 0x2c44 <process_action+0x21e>
    2c42:	1a c1       	rjmp	.+564    	; 0x2e78 <process_action+0x452>
    2c44:	13 c0       	rjmp	.+38     	; 0x2c6c <process_action+0x246>
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2c46:	6e 29       	or	r22, r14
    2c48:	7f 29       	or	r23, r15
    2c4a:	80 2b       	or	r24, r16
    2c4c:	91 2b       	or	r25, r17
    2c4e:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <default_layer_and>
    2c52:	12 c1       	rjmp	.+548    	; 0x2e78 <process_action+0x452>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
    2c54:	6e 29       	or	r22, r14
    2c56:	7f 29       	or	r23, r15
    2c58:	80 2b       	or	r24, r16
    2c5a:	91 2b       	or	r25, r17
    2c5c:	0b c0       	rjmp	.+22     	; 0x2c74 <process_action+0x24e>
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2c5e:	6e 29       	or	r22, r14
    2c60:	7f 29       	or	r23, r15
    2c62:	80 2b       	or	r24, r16
    2c64:	91 2b       	or	r25, r17
    2c66:	0e 94 c5 1c 	call	0x398a	; 0x398a <default_layer_xor>
    2c6a:	06 c1       	rjmp	.+524    	; 0x2e78 <process_action+0x452>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2c6c:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <default_layer_and>
    2c70:	c8 01       	movw	r24, r16
    2c72:	b7 01       	movw	r22, r14
    2c74:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <default_layer_or>
    2c78:	ff c0       	rjmp	.+510    	; 0x2e78 <process_action+0x452>
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2c7c:	00 23       	and	r16, r16
    2c7e:	11 f4       	brne	.+4      	; 0x2c84 <process_action+0x25e>
    2c80:	96 95       	lsr	r25
    2c82:	87 95       	ror	r24
    2c84:	81 70       	andi	r24, 0x01	; 1
    2c86:	09 f4       	brne	.+2      	; 0x2c8a <process_action+0x264>
    2c88:	f7 c0       	rjmp	.+494    	; 0x2e78 <process_action+0x452>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2c8a:	2c 2d       	mov	r18, r12
    2c8c:	22 95       	swap	r18
    2c8e:	26 95       	lsr	r18
    2c90:	27 70       	andi	r18, 0x07	; 7
    2c92:	22 0f       	add	r18, r18
    2c94:	22 0f       	add	r18, r18
    2c96:	8c 2d       	mov	r24, r12
    2c98:	8f 70       	andi	r24, 0x0F	; 15
    2c9a:	e8 2e       	mov	r14, r24
    2c9c:	ff 24       	eor	r15, r15
    2c9e:	00 e0       	ldi	r16, 0x00	; 0
    2ca0:	10 e0       	ldi	r17, 0x00	; 0
    2ca2:	02 2e       	mov	r0, r18
    2ca4:	04 c0       	rjmp	.+8      	; 0x2cae <process_action+0x288>
    2ca6:	ee 0c       	add	r14, r14
    2ca8:	ff 1c       	adc	r15, r15
    2caa:	00 1f       	adc	r16, r16
    2cac:	11 1f       	adc	r17, r17
    2cae:	0a 94       	dec	r0
    2cb0:	d2 f7       	brpl	.-12     	; 0x2ca6 <process_action+0x280>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2cb2:	c4 fc       	sbrc	r12, 4
    2cb4:	05 c0       	rjmp	.+10     	; 0x2cc0 <process_action+0x29a>
    2cb6:	60 e0       	ldi	r22, 0x00	; 0
    2cb8:	70 e0       	ldi	r23, 0x00	; 0
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	0f c0       	rjmp	.+30     	; 0x2cde <process_action+0x2b8>
    2cc0:	6f e0       	ldi	r22, 0x0F	; 15
    2cc2:	70 e0       	ldi	r23, 0x00	; 0
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	04 c0       	rjmp	.+8      	; 0x2cd2 <process_action+0x2ac>
    2cca:	66 0f       	add	r22, r22
    2ccc:	77 1f       	adc	r23, r23
    2cce:	88 1f       	adc	r24, r24
    2cd0:	99 1f       	adc	r25, r25
    2cd2:	2a 95       	dec	r18
    2cd4:	d2 f7       	brpl	.-12     	; 0x2cca <process_action+0x2a4>
    2cd6:	60 95       	com	r22
    2cd8:	70 95       	com	r23
    2cda:	80 95       	com	r24
    2cdc:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    2cde:	d6 94       	lsr	r13
    2ce0:	d6 94       	lsr	r13
    2ce2:	23 e0       	ldi	r18, 0x03	; 3
    2ce4:	d2 22       	and	r13, r18
    2ce6:	4d 2d       	mov	r20, r13
    2ce8:	50 e0       	ldi	r21, 0x00	; 0
    2cea:	41 30       	cpi	r20, 0x01	; 1
    2cec:	51 05       	cpc	r21, r1
    2cee:	a9 f0       	breq	.+42     	; 0x2d1a <process_action+0x2f4>
    2cf0:	42 30       	cpi	r20, 0x02	; 2
    2cf2:	51 05       	cpc	r21, r1
    2cf4:	1c f4       	brge	.+6      	; 0x2cfc <process_action+0x2d6>
    2cf6:	45 2b       	or	r20, r21
    2cf8:	49 f0       	breq	.+18     	; 0x2d0c <process_action+0x2e6>
    2cfa:	be c0       	rjmp	.+380    	; 0x2e78 <process_action+0x452>
    2cfc:	42 30       	cpi	r20, 0x02	; 2
    2cfe:	51 05       	cpc	r21, r1
    2d00:	89 f0       	breq	.+34     	; 0x2d24 <process_action+0x2fe>
    2d02:	43 30       	cpi	r20, 0x03	; 3
    2d04:	51 05       	cpc	r21, r1
    2d06:	09 f0       	breq	.+2      	; 0x2d0a <process_action+0x2e4>
    2d08:	b7 c0       	rjmp	.+366    	; 0x2e78 <process_action+0x452>
    2d0a:	13 c0       	rjmp	.+38     	; 0x2d32 <process_action+0x30c>
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2d0c:	6e 29       	or	r22, r14
    2d0e:	7f 29       	or	r23, r15
    2d10:	80 2b       	or	r24, r16
    2d12:	91 2b       	or	r25, r17
    2d14:	0e 94 29 1c 	call	0x3852	; 0x3852 <layer_and>
    2d18:	af c0       	rjmp	.+350    	; 0x2e78 <process_action+0x452>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
    2d1a:	6e 29       	or	r22, r14
    2d1c:	7f 29       	or	r23, r15
    2d1e:	80 2b       	or	r24, r16
    2d20:	91 2b       	or	r25, r17
    2d22:	0b c0       	rjmp	.+22     	; 0x2d3a <process_action+0x314>
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2d24:	6e 29       	or	r22, r14
    2d26:	7f 29       	or	r23, r15
    2d28:	80 2b       	or	r24, r16
    2d2a:	91 2b       	or	r25, r17
    2d2c:	0e 94 18 1c 	call	0x3830	; 0x3830 <layer_xor>
    2d30:	a3 c0       	rjmp	.+326    	; 0x2e78 <process_action+0x452>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2d32:	0e 94 29 1c 	call	0x3852	; 0x3852 <layer_and>
    2d36:	c8 01       	movw	r24, r16
    2d38:	b7 01       	movw	r22, r14
    2d3a:	0e 94 3a 1c 	call	0x3874	; 0x3874 <layer_or>
    2d3e:	9c c0       	rjmp	.+312    	; 0x2e78 <process_action+0x452>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2d40:	80 ef       	ldi	r24, 0xF0	; 240
    2d42:	c8 16       	cp	r12, r24
    2d44:	f1 f0       	breq	.+60     	; 0x2d82 <process_action+0x35c>
    2d46:	8c 15       	cp	r24, r12
    2d48:	20 f0       	brcs	.+8      	; 0x2d52 <process_action+0x32c>
    2d4a:	e0 ee       	ldi	r30, 0xE0	; 224
    2d4c:	ce 16       	cp	r12, r30
    2d4e:	e8 f1       	brcs	.+122    	; 0x2dca <process_action+0x3a4>
    2d50:	09 c0       	rjmp	.+18     	; 0x2d64 <process_action+0x33e>
    2d52:	f2 ef       	ldi	r31, 0xF2	; 242
    2d54:	cf 16       	cp	r12, r31
    2d56:	51 f1       	breq	.+84     	; 0x2dac <process_action+0x386>
    2d58:	cf 16       	cp	r12, r31
    2d5a:	18 f1       	brcs	.+70     	; 0x2da2 <process_action+0x37c>
    2d5c:	23 ef       	ldi	r18, 0xF3	; 243
    2d5e:	c2 16       	cp	r12, r18
    2d60:	a1 f5       	brne	.+104    	; 0x2dca <process_action+0x3a4>
    2d62:	29 c0       	rjmp	.+82     	; 0x2db6 <process_action+0x390>
    2d64:	1c 2d       	mov	r17, r12
    2d66:	1f 70       	andi	r17, 0x0F	; 15
    2d68:	8d 2d       	mov	r24, r13
    2d6a:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2d6c:	00 23       	and	r16, r16
    2d6e:	19 f0       	breq	.+6      	; 0x2d76 <process_action+0x350>
                        layer_on(action.layer_tap.val);
    2d70:	0e 94 87 1c 	call	0x390e	; 0x390e <layer_on>
    2d74:	ed ce       	rjmp	.-550    	; 0x2b50 <process_action+0x12a>
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
    2d76:	0e 94 67 1c 	call	0x38ce	; 0x38ce <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2d7a:	81 2f       	mov	r24, r17
    2d7c:	0e 94 db 13 	call	0x27b6	; 0x27b6 <unregister_mods>
    2d80:	7b c0       	rjmp	.+246    	; 0x2e78 <process_action+0x452>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2d82:	00 23       	and	r16, r16
    2d84:	29 f0       	breq	.+10     	; 0x2d90 <process_action+0x36a>
                        if (tap_count < TAPPING_TOGGLE) {
    2d86:	84 e0       	ldi	r24, 0x04	; 4
    2d88:	8f 15       	cp	r24, r15
    2d8a:	08 f4       	brcc	.+2      	; 0x2d8e <process_action+0x368>
    2d8c:	75 c0       	rjmp	.+234    	; 0x2e78 <process_action+0x452>
    2d8e:	04 c0       	rjmp	.+8      	; 0x2d98 <process_action+0x372>
                            layer_invert(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2d90:	e5 e0       	ldi	r30, 0x05	; 5
    2d92:	ef 15       	cp	r30, r15
    2d94:	08 f4       	brcc	.+2      	; 0x2d98 <process_action+0x372>
    2d96:	70 c0       	rjmp	.+224    	; 0x2e78 <process_action+0x452>
                            layer_invert(action.layer_tap.val);
    2d98:	8d 2d       	mov	r24, r13
    2d9a:	8f 71       	andi	r24, 0x1F	; 31
    2d9c:	0e 94 4b 1c 	call	0x3896	; 0x3896 <layer_invert>
    2da0:	6b c0       	rjmp	.+214    	; 0x2e78 <process_action+0x452>
    2da2:	8d 2d       	mov	r24, r13
    2da4:	8f 71       	andi	r24, 0x1F	; 31
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2da6:	00 23       	and	r16, r16
    2da8:	29 f1       	breq	.+74     	; 0x2df4 <process_action+0x3ce>
    2daa:	19 c0       	rjmp	.+50     	; 0x2dde <process_action+0x3b8>
    2dac:	8d 2d       	mov	r24, r13
    2dae:	8f 71       	andi	r24, 0x1F	; 31
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2db0:	00 23       	and	r16, r16
    2db2:	a9 f0       	breq	.+42     	; 0x2dde <process_action+0x3b8>
    2db4:	1f c0       	rjmp	.+62     	; 0x2df4 <process_action+0x3ce>
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2db6:	00 23       	and	r16, r16
    2db8:	29 f0       	breq	.+10     	; 0x2dc4 <process_action+0x39e>
    2dba:	8d 2d       	mov	r24, r13
    2dbc:	8f 71       	andi	r24, 0x1F	; 31
    2dbe:	0e 94 a3 1c 	call	0x3946	; 0x3946 <layer_move>
    2dc2:	5a c0       	rjmp	.+180    	; 0x2e78 <process_action+0x452>
    2dc4:	0e 94 b3 1c 	call	0x3966	; 0x3966 <layer_clear>
    2dc8:	57 c0       	rjmp	.+174    	; 0x2e78 <process_action+0x452>
                                    layer_clear();
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2dca:	00 23       	and	r16, r16
    2dcc:	59 f0       	breq	.+22     	; 0x2de4 <process_action+0x3be>
                        if (tap_count > 0) {
    2dce:	ff 20       	and	r15, r15
    2dd0:	21 f0       	breq	.+8      	; 0x2dda <process_action+0x3b4>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2dd2:	8c 2d       	mov	r24, r12
    2dd4:	0e 94 3c 14 	call	0x2878	; 0x2878 <register_code>
    2dd8:	4f c0       	rjmp	.+158    	; 0x2e78 <process_action+0x452>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
    2dda:	8d 2d       	mov	r24, r13
    2ddc:	8f 71       	andi	r24, 0x1F	; 31
    2dde:	0e 94 87 1c 	call	0x390e	; 0x390e <layer_on>
    2de2:	4a c0       	rjmp	.+148    	; 0x2e78 <process_action+0x452>
                        }
                    } else {
                        if (tap_count > 0) {
    2de4:	ff 20       	and	r15, r15
    2de6:	21 f0       	breq	.+8      	; 0x2df0 <process_action+0x3ca>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2de8:	8c 2d       	mov	r24, r12
    2dea:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <unregister_code>
    2dee:	44 c0       	rjmp	.+136    	; 0x2e78 <process_action+0x452>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
                            layer_off(action.layer_tap.val);
    2df0:	8d 2d       	mov	r24, r13
    2df2:	8f 71       	andi	r24, 0x1F	; 31
    2df4:	0e 94 67 1c 	call	0x38ce	; 0x38ce <layer_off>
    2df8:	3f c0       	rjmp	.+126    	; 0x2e78 <process_action+0x452>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2dfa:	ff e0       	ldi	r31, 0x0F	; 15
    2dfc:	df 22       	and	r13, r31
    2dfe:	c5 01       	movw	r24, r10
    2e00:	6c 2d       	mov	r22, r12
    2e02:	4d 2d       	mov	r20, r13
    2e04:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <action_get_macro>
    2e08:	0e 94 49 1b 	call	0x3692	; 0x3692 <action_macro_play>
    2e0c:	35 c0       	rjmp	.+106    	; 0x2e78 <process_action+0x452>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2e0e:	2f e0       	ldi	r18, 0x0F	; 15
    2e10:	d2 22       	and	r13, r18
    2e12:	c5 01       	movw	r24, r10
    2e14:	6c 2d       	mov	r22, r12
    2e16:	4d 2d       	mov	r20, r13
    2e18:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <action_function>
    2e1c:	2d c0       	rjmp	.+90     	; 0x2e78 <process_action+0x452>
    uint8_t tap_count = record->tap.count;
#endif

    if (IS_NOEVENT(event)) { return; }

    action_t action = layer_switch_get_action(event.key);
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
    2e20:	9a 81       	ldd	r25, Y+2	; 0x02
    2e22:	0e 94 c4 1b 	call	0x3788	; 0x3788 <layer_switch_get_action>
    2e26:	6c 01       	movw	r12, r24
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2e28:	0e 94 c3 1b 	call	0x3786	; 0x3786 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2e2c:	0e 94 c2 1b 	call	0x3784	; 0x3784 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    2e30:	8d 2d       	mov	r24, r13
    2e32:	82 95       	swap	r24
    2e34:	8f 70       	andi	r24, 0x0F	; 15
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	85 30       	cpi	r24, 0x05	; 5
    2e3a:	91 05       	cpc	r25, r1
    2e3c:	09 f4       	brne	.+2      	; 0x2e40 <process_action+0x41a>
    2e3e:	af ce       	rjmp	.-674    	; 0x2b9e <process_action+0x178>
    2e40:	86 30       	cpi	r24, 0x06	; 6
    2e42:	91 05       	cpc	r25, r1
    2e44:	54 f4       	brge	.+20     	; 0x2e5a <process_action+0x434>
    2e46:	84 30       	cpi	r24, 0x04	; 4
    2e48:	91 05       	cpc	r25, r1
    2e4a:	0c f0       	brlt	.+2      	; 0x2e4e <process_action+0x428>
    2e4c:	89 ce       	rjmp	.-750    	; 0x2b60 <process_action+0x13a>
    2e4e:	2d 2d       	mov	r18, r13
    2e50:	20 7f       	andi	r18, 0xF0	; 240
    2e52:	02 97       	sbiw	r24, 0x02	; 2
    2e54:	0c f0       	brlt	.+2      	; 0x2e58 <process_action+0x432>
    2e56:	3f ce       	rjmp	.-898    	; 0x2ad6 <process_action+0xb0>
    2e58:	1e ce       	rjmp	.-964    	; 0x2a96 <process_action+0x70>
    2e5a:	8c 30       	cpi	r24, 0x0C	; 12
    2e5c:	91 05       	cpc	r25, r1
    2e5e:	3c f4       	brge	.+14     	; 0x2e6e <process_action+0x448>
    2e60:	8a 30       	cpi	r24, 0x0A	; 10
    2e62:	91 05       	cpc	r25, r1
    2e64:	0c f0       	brlt	.+2      	; 0x2e68 <process_action+0x442>
    2e66:	6c cf       	rjmp	.-296    	; 0x2d40 <process_action+0x31a>
    2e68:	08 97       	sbiw	r24, 0x08	; 8
    2e6a:	31 f4       	brne	.+12     	; 0x2e78 <process_action+0x452>
    2e6c:	a4 ce       	rjmp	.-696    	; 0x2bb6 <process_action+0x190>
    2e6e:	8c 30       	cpi	r24, 0x0C	; 12
    2e70:	91 05       	cpc	r25, r1
    2e72:	19 f2       	breq	.-122    	; 0x2dfa <process_action+0x3d4>
    2e74:	0f 97       	sbiw	r24, 0x0f	; 15
    2e76:	59 f2       	breq	.-106    	; 0x2e0e <process_action+0x3e8>
            break;
#endif
        default:
            break;
    }
}
    2e78:	2a 96       	adiw	r28, 0x0a	; 10
    2e7a:	0f b6       	in	r0, 0x3f	; 63
    2e7c:	f8 94       	cli
    2e7e:	de bf       	out	0x3e, r29	; 62
    2e80:	0f be       	out	0x3f, r0	; 63
    2e82:	cd bf       	out	0x3d, r28	; 61
    2e84:	cf 91       	pop	r28
    2e86:	df 91       	pop	r29
    2e88:	1f 91       	pop	r17
    2e8a:	0f 91       	pop	r16
    2e8c:	ff 90       	pop	r15
    2e8e:	ef 90       	pop	r14
    2e90:	df 90       	pop	r13
    2e92:	cf 90       	pop	r12
    2e94:	bf 90       	pop	r11
    2e96:	af 90       	pop	r10
    2e98:	08 95       	ret

00002e9a <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2e9a:	df 93       	push	r29
    2e9c:	cf 93       	push	r28
    2e9e:	cd b7       	in	r28, 0x3d	; 61
    2ea0:	de b7       	in	r29, 0x3e	; 62
    2ea2:	2b 97       	sbiw	r28, 0x0b	; 11
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	f8 94       	cli
    2ea8:	de bf       	out	0x3e, r29	; 62
    2eaa:	0f be       	out	0x3f, r0	; 63
    2eac:	cd bf       	out	0x3d, r28	; 61
    2eae:	34 2f       	mov	r19, r20
    2eb0:	4f 83       	std	Y+7, r20	; 0x07
    2eb2:	25 2f       	mov	r18, r21
    2eb4:	58 87       	std	Y+8, r21	; 0x08
    2eb6:	69 87       	std	Y+9, r22	; 0x09
    2eb8:	7a 87       	std	Y+10, r23	; 0x0a
    2eba:	8b 87       	std	Y+11, r24	; 0x0b
    2ebc:	47 2f       	mov	r20, r23
    2ebe:	58 2f       	mov	r21, r24
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	31 96       	adiw	r30, 0x01	; 1
    2ec4:	86 e0       	ldi	r24, 0x06	; 6
    2ec6:	df 01       	movw	r26, r30
    2ec8:	1d 92       	st	X+, r1
    2eca:	8a 95       	dec	r24
    2ecc:	e9 f7       	brne	.-6      	; 0x2ec8 <action_exec+0x2e>
    2ece:	6b 83       	std	Y+3, r22	; 0x03
    2ed0:	39 83       	std	Y+1, r19	; 0x01
    2ed2:	2a 83       	std	Y+2, r18	; 0x02
    2ed4:	4c 83       	std	Y+4, r20	; 0x04
    2ed6:	5d 83       	std	Y+5, r21	; 0x05

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    2ed8:	43 2f       	mov	r20, r19
    2eda:	52 2f       	mov	r21, r18
    2edc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ede:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee0:	0e 94 8a 1a 	call	0x3514	; 0x3514 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    2ee4:	2b 96       	adiw	r28, 0x0b	; 11
    2ee6:	0f b6       	in	r0, 0x3f	; 63
    2ee8:	f8 94       	cli
    2eea:	de bf       	out	0x3e, r29	; 62
    2eec:	0f be       	out	0x3f, r0	; 63
    2eee:	cd bf       	out	0x3d, r28	; 61
    2ef0:	cf 91       	pop	r28
    2ef2:	df 91       	pop	r29
    2ef4:	08 95       	ret

00002ef6 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2ef6:	0f 93       	push	r16
    2ef8:	1f 93       	push	r17
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2efa:	00 91 59 01 	lds	r16, 0x0159
    2efe:	15 c0       	rjmp	.+42     	; 0x2f2a <debug_waiting_buffer+0x34>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2f00:	10 e0       	ldi	r17, 0x00	; 0
    2f02:	f8 01       	movw	r30, r16
    2f04:	ee 0f       	add	r30, r30
    2f06:	ff 1f       	adc	r31, r31
    2f08:	e0 0f       	add	r30, r16
    2f0a:	f1 1f       	adc	r31, r17
    2f0c:	ee 0f       	add	r30, r30
    2f0e:	ff 1f       	adc	r31, r31
    2f10:	e6 5a       	subi	r30, 0xA6	; 166
    2f12:	fe 4f       	sbci	r31, 0xFE	; 254
    2f14:	40 81       	ld	r20, Z
    2f16:	51 81       	ldd	r21, Z+1	; 0x01
    2f18:	62 81       	ldd	r22, Z+2	; 0x02
    2f1a:	73 81       	ldd	r23, Z+3	; 0x03
    2f1c:	84 81       	ldd	r24, Z+4	; 0x04
    2f1e:	95 81       	ldd	r25, Z+5	; 0x05
    2f20:	0e 94 86 13 	call	0x270c	; 0x270c <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f24:	0f 5f       	subi	r16, 0xFF	; 255
    2f26:	1f 4f       	sbci	r17, 0xFF	; 255
    2f28:	07 70       	andi	r16, 0x07	; 7
    2f2a:	80 91 58 01 	lds	r24, 0x0158
    2f2e:	08 17       	cp	r16, r24
    2f30:	39 f7       	brne	.-50     	; 0x2f00 <debug_waiting_buffer+0xa>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2f32:	1f 91       	pop	r17
    2f34:	0f 91       	pop	r16
    2f36:	08 95       	ret

00002f38 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2f38:	40 91 52 01 	lds	r20, 0x0152
    2f3c:	50 91 53 01 	lds	r21, 0x0153
    2f40:	60 91 54 01 	lds	r22, 0x0154
    2f44:	70 91 55 01 	lds	r23, 0x0155
    2f48:	80 91 56 01 	lds	r24, 0x0156
    2f4c:	90 91 57 01 	lds	r25, 0x0157
    2f50:	0e 94 86 13 	call	0x270c	; 0x270c <debug_record>
}
    2f54:	08 95       	ret

00002f56 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    2f56:	0f 93       	push	r16
    2f58:	1f 93       	push	r17
    2f5a:	cf 93       	push	r28
    2f5c:	df 93       	push	r29
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2f5e:	80 91 57 01 	lds	r24, 0x0157
    2f62:	82 95       	swap	r24
    2f64:	8f 70       	andi	r24, 0x0F	; 15
    2f66:	09 f0       	breq	.+2      	; 0x2f6a <waiting_buffer_scan_tap+0x14>
    2f68:	6d c0       	rjmp	.+218    	; 0x3044 <waiting_buffer_scan_tap+0xee>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2f6a:	80 91 54 01 	lds	r24, 0x0154
    2f6e:	88 23       	and	r24, r24
    2f70:	09 f4       	brne	.+2      	; 0x2f74 <waiting_buffer_scan_tap+0x1e>
    2f72:	68 c0       	rjmp	.+208    	; 0x3044 <waiting_buffer_scan_tap+0xee>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f74:	60 91 59 01 	lds	r22, 0x0159
    2f78:	00 91 58 01 	lds	r16, 0x0158
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2f7c:	40 91 55 01 	lds	r20, 0x0155
    2f80:	50 91 56 01 	lds	r21, 0x0156
    2f84:	10 91 53 01 	lds	r17, 0x0153
    2f88:	70 91 52 01 	lds	r23, 0x0152
    2f8c:	ea 01       	movw	r28, r20
    2f8e:	c0 95       	com	r28
    2f90:	d0 95       	com	r29
    2f92:	55 c0       	rjmp	.+170    	; 0x303e <waiting_buffer_scan_tap+0xe8>
    2f94:	41 15       	cp	r20, r1
    2f96:	51 05       	cpc	r21, r1
    2f98:	09 f4       	brne	.+2      	; 0x2f9c <waiting_buffer_scan_tap+0x46>
    2f9a:	4f c0       	rjmp	.+158    	; 0x303a <waiting_buffer_scan_tap+0xe4>
    2f9c:	1f 3f       	cpi	r17, 0xFF	; 255
    2f9e:	49 f4       	brne	.+18     	; 0x2fb2 <waiting_buffer_scan_tap+0x5c>
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	7f 3f       	cpi	r23, 0xFF	; 255
    2fa6:	11 f4       	brne	.+4      	; 0x2fac <waiting_buffer_scan_tap+0x56>
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	88 23       	and	r24, r24
    2fae:	09 f0       	breq	.+2      	; 0x2fb2 <waiting_buffer_scan_tap+0x5c>
    2fb0:	44 c0       	rjmp	.+136    	; 0x303a <waiting_buffer_scan_tap+0xe4>
    2fb2:	26 2f       	mov	r18, r22
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	f9 01       	movw	r30, r18
    2fb8:	ee 0f       	add	r30, r30
    2fba:	ff 1f       	adc	r31, r31
    2fbc:	e2 0f       	add	r30, r18
    2fbe:	f3 1f       	adc	r31, r19
    2fc0:	df 01       	movw	r26, r30
    2fc2:	aa 0f       	add	r26, r26
    2fc4:	bb 1f       	adc	r27, r27
    2fc6:	a6 5a       	subi	r26, 0xA6	; 166
    2fc8:	be 4f       	sbci	r27, 0xFE	; 254
    2fca:	11 96       	adiw	r26, 0x01	; 1
    2fcc:	8c 91       	ld	r24, X
    2fce:	11 97       	sbiw	r26, 0x01	; 1
    2fd0:	18 17       	cp	r17, r24
    2fd2:	99 f5       	brne	.+102    	; 0x303a <waiting_buffer_scan_tap+0xe4>
    2fd4:	8c 91       	ld	r24, X
    2fd6:	78 17       	cp	r23, r24
    2fd8:	81 f5       	brne	.+96     	; 0x303a <waiting_buffer_scan_tap+0xe4>
    2fda:	ee 0f       	add	r30, r30
    2fdc:	ff 1f       	adc	r31, r31
    2fde:	e4 5a       	subi	r30, 0xA4	; 164
    2fe0:	fe 4f       	sbci	r31, 0xFE	; 254
    2fe2:	80 81       	ld	r24, Z
    2fe4:	88 23       	and	r24, r24
    2fe6:	49 f5       	brne	.+82     	; 0x303a <waiting_buffer_scan_tap+0xe4>
    2fe8:	13 96       	adiw	r26, 0x03	; 3
    2fea:	8d 91       	ld	r24, X+
    2fec:	9c 91       	ld	r25, X
    2fee:	14 97       	sbiw	r26, 0x04	; 4
    2ff0:	84 17       	cp	r24, r20
    2ff2:	95 07       	cpc	r25, r21
    2ff4:	18 f0       	brcs	.+6      	; 0x2ffc <waiting_buffer_scan_tap+0xa6>
    2ff6:	84 1b       	sub	r24, r20
    2ff8:	95 0b       	sbc	r25, r21
    2ffa:	02 c0       	rjmp	.+4      	; 0x3000 <waiting_buffer_scan_tap+0xaa>
    2ffc:	8c 0f       	add	r24, r28
    2ffe:	9d 1f       	adc	r25, r29
    3000:	88 3c       	cpi	r24, 0xC8	; 200
    3002:	91 05       	cpc	r25, r1
    3004:	d0 f4       	brcc	.+52     	; 0x303a <waiting_buffer_scan_tap+0xe4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
            tapping_key.tap.count = 1;
    3006:	80 91 57 01 	lds	r24, 0x0157
    300a:	8f 70       	andi	r24, 0x0F	; 15
    300c:	80 61       	ori	r24, 0x10	; 16
    300e:	80 93 57 01 	sts	0x0157, r24
            waiting_buffer[i].tap.count = 1;
    3012:	f9 01       	movw	r30, r18
    3014:	ee 0f       	add	r30, r30
    3016:	ff 1f       	adc	r31, r31
    3018:	e2 0f       	add	r30, r18
    301a:	f3 1f       	adc	r31, r19
    301c:	ee 0f       	add	r30, r30
    301e:	ff 1f       	adc	r31, r31
    3020:	e1 5a       	subi	r30, 0xA1	; 161
    3022:	fe 4f       	sbci	r31, 0xFE	; 254
    3024:	80 81       	ld	r24, Z
    3026:	8f 70       	andi	r24, 0x0F	; 15
    3028:	80 61       	ori	r24, 0x10	; 16
    302a:	80 83       	st	Z, r24
            process_action(&tapping_key);
    302c:	82 e5       	ldi	r24, 0x52	; 82
    302e:	91 e0       	ldi	r25, 0x01	; 1
    3030:	0e 94 13 15 	call	0x2a26	; 0x2a26 <process_action>

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    3034:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <debug_waiting_buffer>
    3038:	05 c0       	rjmp	.+10     	; 0x3044 <waiting_buffer_scan_tap+0xee>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    303a:	6f 5f       	subi	r22, 0xFF	; 255
    303c:	67 70       	andi	r22, 0x07	; 7
    303e:	60 17       	cp	r22, r16
    3040:	09 f0       	breq	.+2      	; 0x3044 <waiting_buffer_scan_tap+0xee>
    3042:	a8 cf       	rjmp	.-176    	; 0x2f94 <waiting_buffer_scan_tap+0x3e>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    3044:	df 91       	pop	r29
    3046:	cf 91       	pop	r28
    3048:	1f 91       	pop	r17
    304a:	0f 91       	pop	r16
    304c:	08 95       	ret

0000304e <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    304e:	df 92       	push	r13
    3050:	ef 92       	push	r14
    3052:	ff 92       	push	r15
    3054:	0f 93       	push	r16
    3056:	1f 93       	push	r17
    3058:	df 93       	push	r29
    305a:	cf 93       	push	r28
    305c:	cd b7       	in	r28, 0x3d	; 61
    305e:	de b7       	in	r29, 0x3e	; 62
    3060:	6b 97       	sbiw	r28, 0x1b	; 27
    3062:	0f b6       	in	r0, 0x3f	; 63
    3064:	f8 94       	cli
    3066:	de bf       	out	0x3e, r29	; 62
    3068:	0f be       	out	0x3f, r0	; 63
    306a:	cd bf       	out	0x3d, r28	; 61
    306c:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    306e:	dc 01       	movw	r26, r24
    3070:	12 96       	adiw	r26, 0x02	; 2
    3072:	dc 90       	ld	r13, X
    3074:	12 97       	sbiw	r26, 0x02	; 2
    3076:	4c 91       	ld	r20, X
    3078:	11 96       	adiw	r26, 0x01	; 1
    307a:	5c 91       	ld	r21, X
    307c:	11 97       	sbiw	r26, 0x01	; 1
    307e:	13 96       	adiw	r26, 0x03	; 3
    3080:	ed 90       	ld	r14, X+
    3082:	fc 90       	ld	r15, X
    3084:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    3086:	20 91 55 01 	lds	r18, 0x0155
    308a:	30 91 56 01 	lds	r19, 0x0156
    308e:	60 91 53 01 	lds	r22, 0x0153
    3092:	70 91 52 01 	lds	r23, 0x0152
    3096:	21 15       	cp	r18, r1
    3098:	31 05       	cpc	r19, r1
    309a:	09 f4       	brne	.+2      	; 0x309e <process_tapping+0x50>
    309c:	db c1       	rjmp	.+950    	; 0x3454 <process_tapping+0x406>
    309e:	6f 3f       	cpi	r22, 0xFF	; 255
    30a0:	09 f0       	breq	.+2      	; 0x30a4 <process_tapping+0x56>
    30a2:	03 c2       	rjmp	.+1030   	; 0x34aa <process_tapping+0x45c>
    30a4:	7f 3f       	cpi	r23, 0xFF	; 255
    30a6:	09 f0       	breq	.+2      	; 0x30aa <process_tapping+0x5c>
    30a8:	00 c2       	rjmp	.+1024   	; 0x34aa <process_tapping+0x45c>
    30aa:	d4 c1       	rjmp	.+936    	; 0x3454 <process_tapping+0x406>
        if (WITHIN_TAPPING_TERM(event)) {
    30ac:	e2 16       	cp	r14, r18
    30ae:	f3 06       	cpc	r15, r19
    30b0:	40 f0       	brcs	.+16     	; 0x30c2 <process_tapping+0x74>
    30b2:	c7 01       	movw	r24, r14
    30b4:	82 1b       	sub	r24, r18
    30b6:	93 0b       	sbc	r25, r19
    30b8:	88 3c       	cpi	r24, 0xC8	; 200
    30ba:	91 05       	cpc	r25, r1
    30bc:	08 f0       	brcs	.+2      	; 0x30c0 <process_tapping+0x72>
    30be:	ee c0       	rjmp	.+476    	; 0x329c <process_tapping+0x24e>
    30c0:	08 c0       	rjmp	.+16     	; 0x30d2 <process_tapping+0x84>
    30c2:	20 95       	com	r18
    30c4:	30 95       	com	r19
    30c6:	2e 0d       	add	r18, r14
    30c8:	3f 1d       	adc	r19, r15
    30ca:	28 3c       	cpi	r18, 0xC8	; 200
    30cc:	31 05       	cpc	r19, r1
    30ce:	08 f0       	brcs	.+2      	; 0x30d2 <process_tapping+0x84>
    30d0:	e5 c0       	rjmp	.+458    	; 0x329c <process_tapping+0x24e>
            if (tapping_key.tap.count == 0) {
    30d2:	80 91 57 01 	lds	r24, 0x0157
    30d6:	80 7f       	andi	r24, 0xF0	; 240
    30d8:	09 f0       	breq	.+2      	; 0x30dc <process_tapping+0x8e>
    30da:	95 c0       	rjmp	.+298    	; 0x3206 <process_tapping+0x1b8>
    30dc:	6f 3f       	cpi	r22, 0xFF	; 255
    30de:	09 f0       	breq	.+2      	; 0x30e2 <process_tapping+0x94>
    30e0:	ea c1       	rjmp	.+980    	; 0x34b6 <process_tapping+0x468>
    30e2:	7f 3f       	cpi	r23, 0xFF	; 255
    30e4:	09 f0       	breq	.+2      	; 0x30e8 <process_tapping+0x9a>
    30e6:	e7 c1       	rjmp	.+974    	; 0x34b6 <process_tapping+0x468>
    30e8:	15 c0       	rjmp	.+42     	; 0x3114 <process_tapping+0xc6>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    30ea:	74 17       	cp	r23, r20
    30ec:	99 f4       	brne	.+38     	; 0x3114 <process_tapping+0xc6>
    30ee:	dd 20       	and	r13, r13
    30f0:	89 f4       	brne	.+34     	; 0x3114 <process_tapping+0xc6>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    30f2:	80 91 57 01 	lds	r24, 0x0157
    30f6:	8f 70       	andi	r24, 0x0F	; 15
    30f8:	80 61       	ori	r24, 0x10	; 16
    30fa:	80 93 57 01 	sts	0x0157, r24
                    debug_tapping_key();
    30fe:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <debug_tapping_key>
                    process_action(&tapping_key);
    3102:	82 e5       	ldi	r24, 0x52	; 82
    3104:	91 e0       	ldi	r25, 0x01	; 1
    3106:	0e 94 13 15 	call	0x2a26	; 0x2a26 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    310a:	80 91 57 01 	lds	r24, 0x0157
    310e:	f8 01       	movw	r30, r16
    3110:	85 83       	std	Z+5, r24	; 0x05
    3112:	bc c1       	rjmp	.+888    	; 0x348c <process_tapping+0x43e>
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    3114:	fd 82       	std	Y+5, r15	; 0x05
    3116:	ec 82       	std	Y+4, r14	; 0x04
    3118:	5a 83       	std	Y+2, r21	; 0x02
    311a:	49 83       	std	Y+1, r20	; 0x01
    311c:	db 82       	std	Y+3, r13	; 0x03
    311e:	de 01       	movw	r26, r28
    3120:	16 96       	adiw	r26, 0x06	; 6
    3122:	fe 01       	movw	r30, r28
    3124:	31 96       	adiw	r30, 0x01	; 1
    3126:	85 e0       	ldi	r24, 0x05	; 5
    3128:	01 90       	ld	r0, Z+
    312a:	0d 92       	st	X+, r0
    312c:	81 50       	subi	r24, 0x01	; 1
    312e:	e1 f7       	brne	.-8      	; 0x3128 <process_tapping+0xda>
    3130:	68 85       	ldd	r22, Y+8	; 0x08
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    3132:	de 01       	movw	r26, r28
    3134:	1b 96       	adiw	r26, 0x0b	; 11
    3136:	fe 01       	movw	r30, r28
    3138:	36 96       	adiw	r30, 0x06	; 6
    313a:	85 e0       	ldi	r24, 0x05	; 5
    313c:	01 90       	ld	r0, Z+
    313e:	0d 92       	st	X+, r0
    3140:	81 50       	subi	r24, 0x01	; 1
    3142:	e1 f7       	brne	.-8      	; 0x313c <process_tapping+0xee>
    3144:	2c 85       	ldd	r18, Y+12	; 0x0c
    3146:	3b 85       	ldd	r19, Y+11	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    3148:	8e 85       	ldd	r24, Y+14	; 0x0e
    314a:	9f 85       	ldd	r25, Y+15	; 0x0f
    314c:	89 2b       	or	r24, r25
    314e:	09 f4       	brne	.+2      	; 0x3152 <process_tapping+0x104>
    3150:	51 c0       	rjmp	.+162    	; 0x31f4 <process_tapping+0x1a6>
    3152:	2f 3f       	cpi	r18, 0xFF	; 255
    3154:	09 f0       	breq	.+2      	; 0x3158 <process_tapping+0x10a>
    3156:	b3 c1       	rjmp	.+870    	; 0x34be <process_tapping+0x470>
    3158:	3f 3f       	cpi	r19, 0xFF	; 255
    315a:	09 f0       	breq	.+2      	; 0x315e <process_tapping+0x110>
    315c:	b0 c1       	rjmp	.+864    	; 0x34be <process_tapping+0x470>
    315e:	4a c0       	rjmp	.+148    	; 0x31f4 <process_tapping+0x1a6>
    3160:	fd 82       	std	Y+5, r15	; 0x05
    3162:	ec 82       	std	Y+4, r14	; 0x04
    3164:	5a 83       	std	Y+2, r21	; 0x02
    3166:	49 83       	std	Y+1, r20	; 0x01
    3168:	db 82       	std	Y+3, r13	; 0x03
    316a:	de 01       	movw	r26, r28
    316c:	1b 96       	adiw	r26, 0x0b	; 11
    316e:	fe 01       	movw	r30, r28
    3170:	31 96       	adiw	r30, 0x01	; 1
    3172:	85 e0       	ldi	r24, 0x05	; 5
    3174:	01 90       	ld	r0, Z+
    3176:	0d 92       	st	X+, r0
    3178:	81 50       	subi	r24, 0x01	; 1
    317a:	e1 f7       	brne	.-8      	; 0x3174 <process_tapping+0x126>
    317c:	fc 84       	ldd	r15, Y+12	; 0x0c
    317e:	7b 85       	ldd	r23, Y+11	; 0x0b
    3180:	6d 85       	ldd	r22, Y+13	; 0x0d
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3182:	80 91 59 01 	lds	r24, 0x0159
    3186:	90 91 58 01 	lds	r25, 0x0158
    318a:	1f c0       	rjmp	.+62     	; 0x31ca <process_tapping+0x17c>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    318c:	28 2f       	mov	r18, r24
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	f9 01       	movw	r30, r18
    3192:	ee 0f       	add	r30, r30
    3194:	ff 1f       	adc	r31, r31
    3196:	e2 0f       	add	r30, r18
    3198:	f3 1f       	adc	r31, r19
    319a:	df 01       	movw	r26, r30
    319c:	aa 0f       	add	r26, r26
    319e:	bb 1f       	adc	r27, r27
    31a0:	a6 5a       	subi	r26, 0xA6	; 166
    31a2:	be 4f       	sbci	r27, 0xFE	; 254
    31a4:	11 96       	adiw	r26, 0x01	; 1
    31a6:	8c 91       	ld	r24, X
    31a8:	11 97       	sbiw	r26, 0x01	; 1
    31aa:	f8 16       	cp	r15, r24
    31ac:	51 f4       	brne	.+20     	; 0x31c2 <process_tapping+0x174>
    31ae:	8c 91       	ld	r24, X
    31b0:	78 17       	cp	r23, r24
    31b2:	39 f4       	brne	.+14     	; 0x31c2 <process_tapping+0x174>
    31b4:	ee 0f       	add	r30, r30
    31b6:	ff 1f       	adc	r31, r31
    31b8:	e4 5a       	subi	r30, 0xA4	; 164
    31ba:	fe 4f       	sbci	r31, 0xFE	; 254
    31bc:	80 81       	ld	r24, Z
    31be:	68 17       	cp	r22, r24
    31c0:	c9 f4       	brne	.+50     	; 0x31f4 <process_tapping+0x1a6>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    31c2:	2f 5f       	subi	r18, 0xFF	; 255
    31c4:	3f 4f       	sbci	r19, 0xFF	; 255
    31c6:	82 2f       	mov	r24, r18
    31c8:	87 70       	andi	r24, 0x07	; 7
    31ca:	89 17       	cp	r24, r25
    31cc:	f9 f6       	brne	.-66     	; 0x318c <process_tapping+0x13e>
    31ce:	8d c1       	rjmp	.+794    	; 0x34ea <process_tapping+0x49c>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    31d0:	9f 70       	andi	r25, 0x0F	; 15
    31d2:	59 f0       	breq	.+22     	; 0x31ea <process_tapping+0x19c>
    31d4:	44 23       	and	r20, r20
    31d6:	49 f4       	brne	.+18     	; 0x31ea <process_tapping+0x19c>
    31d8:	59 c1       	rjmp	.+690    	; 0x348c <process_tapping+0x43e>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    31da:	9f 70       	andi	r25, 0x0F	; 15
    31dc:	31 f0       	breq	.+12     	; 0x31ea <process_tapping+0x19c>
    31de:	d8 01       	movw	r26, r16
    31e0:	15 96       	adiw	r26, 0x05	; 5
    31e2:	8c 91       	ld	r24, X
    31e4:	80 7f       	andi	r24, 0xF0	; 240
    31e6:	09 f4       	brne	.+2      	; 0x31ea <process_tapping+0x19c>
    31e8:	51 c1       	rjmp	.+674    	; 0x348c <process_tapping+0x43e>
                            if (IS_MOD(action.key.code)) return false;
    31ea:	40 5e       	subi	r20, 0xE0	; 224
    31ec:	48 30       	cpi	r20, 0x08	; 8
    31ee:	08 f4       	brcc	.+2      	; 0x31f2 <process_tapping+0x1a4>
    31f0:	4d c1       	rjmp	.+666    	; 0x348c <process_tapping+0x43e>
    31f2:	48 c1       	rjmp	.+656    	; 0x3484 <process_tapping+0x436>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    31f4:	dd 20       	and	r13, r13
    31f6:	09 f4       	brne	.+2      	; 0x31fa <process_tapping+0x1ac>
    31f8:	49 c1       	rjmp	.+658    	; 0x348c <process_tapping+0x43e>
                        tapping_key.tap.interrupted = true;
    31fa:	80 91 57 01 	lds	r24, 0x0157
    31fe:	81 60       	ori	r24, 0x01	; 1
    3200:	80 93 57 01 	sts	0x0157, r24
    3204:	43 c1       	rjmp	.+646    	; 0x348c <process_tapping+0x43e>
    3206:	6f 3f       	cpi	r22, 0xFF	; 255
    3208:	09 f0       	breq	.+2      	; 0x320c <process_tapping+0x1be>
    320a:	5d c1       	rjmp	.+698    	; 0x34c6 <process_tapping+0x478>
    320c:	7f 3f       	cpi	r23, 0xFF	; 255
    320e:	09 f0       	breq	.+2      	; 0x3212 <process_tapping+0x1c4>
    3210:	5a c1       	rjmp	.+692    	; 0x34c6 <process_tapping+0x478>
    3212:	14 c0       	rjmp	.+40     	; 0x323c <process_tapping+0x1ee>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3214:	74 17       	cp	r23, r20
    3216:	91 f4       	brne	.+36     	; 0x323c <process_tapping+0x1ee>
    3218:	dd 20       	and	r13, r13
    321a:	81 f4       	brne	.+32     	; 0x323c <process_tapping+0x1ee>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    321c:	80 91 57 01 	lds	r24, 0x0157
    3220:	f8 01       	movw	r30, r16
    3222:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    3224:	c8 01       	movw	r24, r16
    3226:	0e 94 13 15 	call	0x2a26	; 0x2a26 <process_action>
                    tapping_key = *keyp;
    322a:	a2 e5       	ldi	r26, 0x52	; 82
    322c:	b1 e0       	ldi	r27, 0x01	; 1
    322e:	f8 01       	movw	r30, r16
    3230:	86 e0       	ldi	r24, 0x06	; 6
    3232:	01 90       	ld	r0, Z+
    3234:	0d 92       	st	X+, r0
    3236:	81 50       	subi	r24, 0x01	; 1
    3238:	e1 f7       	brne	.-8      	; 0x3232 <process_tapping+0x1e4>
    323a:	20 c1       	rjmp	.+576    	; 0x347c <process_tapping+0x42e>
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    323c:	5a 83       	std	Y+2, r21	; 0x02
    323e:	49 83       	std	Y+1, r20	; 0x01
    3240:	89 81       	ldd	r24, Y+1	; 0x01
    3242:	9a 81       	ldd	r25, Y+2	; 0x02
    3244:	0e 94 96 13 	call	0x272c	; 0x272c <is_tap_key>
    3248:	88 23       	and	r24, r24
    324a:	09 f4       	brne	.+2      	; 0x324e <process_tapping+0x200>
    324c:	1b c1       	rjmp	.+566    	; 0x3484 <process_tapping+0x436>
    324e:	dd 20       	and	r13, r13
    3250:	09 f4       	brne	.+2      	; 0x3254 <process_tapping+0x206>
    3252:	18 c1       	rjmp	.+560    	; 0x3484 <process_tapping+0x436>
                    if (tapping_key.tap.count > 1) {
    3254:	30 91 57 01 	lds	r19, 0x0157
    3258:	83 2f       	mov	r24, r19
    325a:	82 95       	swap	r24
    325c:	8f 70       	andi	r24, 0x0F	; 15
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	02 97       	sbiw	r24, 0x02	; 2
    3262:	9c f0       	brlt	.+38     	; 0x328a <process_tapping+0x23c>
                        process_action(&(keyrecord_t){
                                .tap = tapping_key.tap,
                                .event.key = tapping_key.event.key,
                                .event.time = event.time,
                                .event.pressed = false
                        });
    3264:	90 91 53 01 	lds	r25, 0x0153
    3268:	20 91 52 01 	lds	r18, 0x0152
    326c:	fe 01       	movw	r30, r28
    326e:	70 96       	adiw	r30, 0x10	; 16
    3270:	86 e0       	ldi	r24, 0x06	; 6
    3272:	df 01       	movw	r26, r30
    3274:	1d 92       	st	X+, r1
    3276:	8a 95       	dec	r24
    3278:	e9 f7       	brne	.-6      	; 0x3274 <process_tapping+0x226>
    327a:	99 8b       	std	Y+17, r25	; 0x11
    327c:	28 8b       	std	Y+16, r18	; 0x10
    327e:	fc 8a       	std	Y+20, r15	; 0x14
    3280:	eb 8a       	std	Y+19, r14	; 0x13
    3282:	3d 8b       	std	Y+21, r19	; 0x15
                }
                else if (is_tap_key(event.key) && event.pressed) {
                    if (tapping_key.tap.count > 1) {
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3284:	cf 01       	movw	r24, r30
    3286:	0e 94 13 15 	call	0x2a26	; 0x2a26 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    328a:	a2 e5       	ldi	r26, 0x52	; 82
    328c:	b1 e0       	ldi	r27, 0x01	; 1
    328e:	f8 01       	movw	r30, r16
    3290:	86 e0       	ldi	r24, 0x06	; 6
    3292:	01 90       	ld	r0, Z+
    3294:	0d 92       	st	X+, r0
    3296:	81 50       	subi	r24, 0x01	; 1
    3298:	e1 f7       	brne	.-8      	; 0x3292 <process_tapping+0x244>
    329a:	ee c0       	rjmp	.+476    	; 0x3478 <process_tapping+0x42a>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    329c:	80 91 57 01 	lds	r24, 0x0157
    32a0:	80 7f       	andi	r24, 0xF0	; 240
    32a2:	a9 f4       	brne	.+42     	; 0x32ce <process_tapping+0x280>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    32a4:	7e 2d       	mov	r23, r14
    32a6:	fd 82       	std	Y+5, r15	; 0x05
    32a8:	ec 82       	std	Y+4, r14	; 0x04
    32aa:	5a 83       	std	Y+2, r21	; 0x02
    32ac:	49 83       	std	Y+1, r20	; 0x01
    32ae:	db 82       	std	Y+3, r13	; 0x03
    32b0:	6d 2d       	mov	r22, r13
    32b2:	8d 81       	ldd	r24, Y+5	; 0x05
    32b4:	0e 94 77 13 	call	0x26ee	; 0x26ee <debug_event>
                process_action(&tapping_key);
    32b8:	02 e5       	ldi	r16, 0x52	; 82
    32ba:	11 e0       	ldi	r17, 0x01	; 1
    32bc:	c8 01       	movw	r24, r16
    32be:	0e 94 13 15 	call	0x2a26	; 0x2a26 <process_action>
                tapping_key = (keyrecord_t){};
    32c2:	86 e0       	ldi	r24, 0x06	; 6
    32c4:	f8 01       	movw	r30, r16
    32c6:	11 92       	st	Z+, r1
    32c8:	8a 95       	dec	r24
    32ca:	e9 f7       	brne	.-6      	; 0x32c6 <process_tapping+0x278>
    32cc:	c0 c0       	rjmp	.+384    	; 0x344e <process_tapping+0x400>
    32ce:	6f 3f       	cpi	r22, 0xFF	; 255
    32d0:	09 f0       	breq	.+2      	; 0x32d4 <process_tapping+0x286>
    32d2:	fd c0       	rjmp	.+506    	; 0x34ce <process_tapping+0x480>
    32d4:	7f 3f       	cpi	r23, 0xFF	; 255
    32d6:	09 f0       	breq	.+2      	; 0x32da <process_tapping+0x28c>
    32d8:	fa c0       	rjmp	.+500    	; 0x34ce <process_tapping+0x480>
    32da:	14 c0       	rjmp	.+40     	; 0x3304 <process_tapping+0x2b6>
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    32dc:	74 17       	cp	r23, r20
    32de:	91 f4       	brne	.+36     	; 0x3304 <process_tapping+0x2b6>
    32e0:	dd 20       	and	r13, r13
    32e2:	81 f4       	brne	.+32     	; 0x3304 <process_tapping+0x2b6>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    32e4:	80 91 57 01 	lds	r24, 0x0157
    32e8:	d8 01       	movw	r26, r16
    32ea:	15 96       	adiw	r26, 0x05	; 5
    32ec:	8c 93       	st	X, r24
                    process_action(keyp);
    32ee:	c8 01       	movw	r24, r16
    32f0:	0e 94 13 15 	call	0x2a26	; 0x2a26 <process_action>
                    tapping_key = (keyrecord_t){};
    32f4:	e2 e5       	ldi	r30, 0x52	; 82
    32f6:	f1 e0       	ldi	r31, 0x01	; 1
    32f8:	86 e0       	ldi	r24, 0x06	; 6
    32fa:	df 01       	movw	r26, r30
    32fc:	1d 92       	st	X+, r1
    32fe:	8a 95       	dec	r24
    3300:	e9 f7       	brne	.-6      	; 0x32fc <process_tapping+0x2ae>
    3302:	be c0       	rjmp	.+380    	; 0x3480 <process_tapping+0x432>
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3304:	5a 83       	std	Y+2, r21	; 0x02
    3306:	49 83       	std	Y+1, r20	; 0x01
    3308:	89 81       	ldd	r24, Y+1	; 0x01
    330a:	9a 81       	ldd	r25, Y+2	; 0x02
    330c:	0e 94 96 13 	call	0x272c	; 0x272c <is_tap_key>
    3310:	88 23       	and	r24, r24
    3312:	09 f4       	brne	.+2      	; 0x3316 <process_tapping+0x2c8>
    3314:	b7 c0       	rjmp	.+366    	; 0x3484 <process_tapping+0x436>
    3316:	dd 20       	and	r13, r13
    3318:	09 f4       	brne	.+2      	; 0x331c <process_tapping+0x2ce>
    331a:	b4 c0       	rjmp	.+360    	; 0x3484 <process_tapping+0x436>
                    if (tapping_key.tap.count > 1) {
    331c:	30 91 57 01 	lds	r19, 0x0157
    3320:	83 2f       	mov	r24, r19
    3322:	82 95       	swap	r24
    3324:	8f 70       	andi	r24, 0x0F	; 15
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	02 97       	sbiw	r24, 0x02	; 2
    332a:	9c f0       	brlt	.+38     	; 0x3352 <process_tapping+0x304>
                        process_action(&(keyrecord_t){
                                .tap = tapping_key.tap,
                                .event.key = tapping_key.event.key,
                                .event.time = event.time,
                                .event.pressed = false
                        });
    332c:	90 91 53 01 	lds	r25, 0x0153
    3330:	20 91 52 01 	lds	r18, 0x0152
    3334:	fe 01       	movw	r30, r28
    3336:	76 96       	adiw	r30, 0x16	; 22
    3338:	86 e0       	ldi	r24, 0x06	; 6
    333a:	df 01       	movw	r26, r30
    333c:	1d 92       	st	X+, r1
    333e:	8a 95       	dec	r24
    3340:	e9 f7       	brne	.-6      	; 0x333c <process_tapping+0x2ee>
    3342:	9f 8b       	std	Y+23, r25	; 0x17
    3344:	2e 8b       	std	Y+22, r18	; 0x16
    3346:	fa 8e       	std	Y+26, r15	; 0x1a
    3348:	e9 8e       	std	Y+25, r14	; 0x19
    334a:	3b 8f       	std	Y+27, r19	; 0x1b
                }
                else if (is_tap_key(event.key) && event.pressed) {
                    if (tapping_key.tap.count > 1) {
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    334c:	cf 01       	movw	r24, r30
    334e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    3352:	a2 e5       	ldi	r26, 0x52	; 82
    3354:	b1 e0       	ldi	r27, 0x01	; 1
    3356:	f8 01       	movw	r30, r16
    3358:	86 e0       	ldi	r24, 0x06	; 6
    335a:	01 90       	ld	r0, Z+
    335c:	0d 92       	st	X+, r0
    335e:	81 50       	subi	r24, 0x01	; 1
    3360:	e1 f7       	brne	.-8      	; 0x335a <process_tapping+0x30c>
    3362:	8a c0       	rjmp	.+276    	; 0x3478 <process_tapping+0x42a>
    3364:	6f 3f       	cpi	r22, 0xFF	; 255
    3366:	09 f0       	breq	.+2      	; 0x336a <process_tapping+0x31c>
    3368:	b6 c0       	rjmp	.+364    	; 0x34d6 <process_tapping+0x488>
    336a:	7f 3f       	cpi	r23, 0xFF	; 255
    336c:	09 f0       	breq	.+2      	; 0x3370 <process_tapping+0x322>
    336e:	b3 c0       	rjmp	.+358    	; 0x34d6 <process_tapping+0x488>
    3370:	71 c0       	rjmp	.+226    	; 0x3454 <process_tapping+0x406>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    3372:	e2 16       	cp	r14, r18
    3374:	f3 06       	cpc	r15, r19
    3376:	40 f0       	brcs	.+16     	; 0x3388 <process_tapping+0x33a>
    3378:	c7 01       	movw	r24, r14
    337a:	82 1b       	sub	r24, r18
    337c:	93 0b       	sbc	r25, r19
    337e:	88 3c       	cpi	r24, 0xC8	; 200
    3380:	91 05       	cpc	r25, r1
    3382:	08 f0       	brcs	.+2      	; 0x3386 <process_tapping+0x338>
    3384:	53 c0       	rjmp	.+166    	; 0x342c <process_tapping+0x3de>
    3386:	08 c0       	rjmp	.+16     	; 0x3398 <process_tapping+0x34a>
    3388:	20 95       	com	r18
    338a:	30 95       	com	r19
    338c:	2e 0d       	add	r18, r14
    338e:	3f 1d       	adc	r19, r15
    3390:	28 3c       	cpi	r18, 0xC8	; 200
    3392:	31 05       	cpc	r19, r1
    3394:	08 f0       	brcs	.+2      	; 0x3398 <process_tapping+0x34a>
    3396:	4a c0       	rjmp	.+148    	; 0x342c <process_tapping+0x3de>
            if (event.pressed) {
    3398:	dd 20       	and	r13, r13
    339a:	09 f4       	brne	.+2      	; 0x339e <process_tapping+0x350>
    339c:	73 c0       	rjmp	.+230    	; 0x3484 <process_tapping+0x436>
    339e:	6f 3f       	cpi	r22, 0xFF	; 255
    33a0:	09 f0       	breq	.+2      	; 0x33a4 <process_tapping+0x356>
    33a2:	9f c0       	rjmp	.+318    	; 0x34e2 <process_tapping+0x494>
    33a4:	7f 3f       	cpi	r23, 0xFF	; 255
    33a6:	09 f0       	breq	.+2      	; 0x33aa <process_tapping+0x35c>
    33a8:	9c c0       	rjmp	.+312    	; 0x34e2 <process_tapping+0x494>
    33aa:	29 c0       	rjmp	.+82     	; 0x33fe <process_tapping+0x3b0>
                if (IS_TAPPING_KEY(event.key)) {
    33ac:	74 17       	cp	r23, r20
    33ae:	39 f5       	brne	.+78     	; 0x33fe <process_tapping+0x3b0>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    33b0:	90 91 57 01 	lds	r25, 0x0157
    33b4:	90 fd       	sbrc	r25, 0
    33b6:	1a c0       	rjmp	.+52     	; 0x33ec <process_tapping+0x39e>
    33b8:	89 2f       	mov	r24, r25
    33ba:	82 95       	swap	r24
    33bc:	8f 70       	andi	r24, 0x0F	; 15
    33be:	b1 f0       	breq	.+44     	; 0x33ec <process_tapping+0x39e>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    33c0:	f8 01       	movw	r30, r16
    33c2:	95 83       	std	Z+5, r25	; 0x05
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    33c4:	8f 30       	cpi	r24, 0x0F	; 15
    33c6:	31 f0       	breq	.+12     	; 0x33d4 <process_tapping+0x386>
    33c8:	8f 5f       	subi	r24, 0xFF	; 255
    33ca:	82 95       	swap	r24
    33cc:	80 7f       	andi	r24, 0xF0	; 240
    33ce:	9f 70       	andi	r25, 0x0F	; 15
    33d0:	98 2b       	or	r25, r24
    33d2:	95 83       	std	Z+5, r25	; 0x05
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    33d4:	c8 01       	movw	r24, r16
    33d6:	0e 94 13 15 	call	0x2a26	; 0x2a26 <process_action>
                        tapping_key = *keyp;
    33da:	a2 e5       	ldi	r26, 0x52	; 82
    33dc:	b1 e0       	ldi	r27, 0x01	; 1
    33de:	f8 01       	movw	r30, r16
    33e0:	86 e0       	ldi	r24, 0x06	; 6
    33e2:	01 90       	ld	r0, Z+
    33e4:	0d 92       	st	X+, r0
    33e6:	81 50       	subi	r24, 0x01	; 1
    33e8:	e1 f7       	brne	.-8      	; 0x33e2 <process_tapping+0x394>
    33ea:	48 c0       	rjmp	.+144    	; 0x347c <process_tapping+0x42e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    33ec:	a2 e5       	ldi	r26, 0x52	; 82
    33ee:	b1 e0       	ldi	r27, 0x01	; 1
    33f0:	f8 01       	movw	r30, r16
    33f2:	86 e0       	ldi	r24, 0x06	; 6
    33f4:	01 90       	ld	r0, Z+
    33f6:	0d 92       	st	X+, r0
    33f8:	81 50       	subi	r24, 0x01	; 1
    33fa:	e1 f7       	brne	.-8      	; 0x33f4 <process_tapping+0x3a6>
    33fc:	41 c0       	rjmp	.+130    	; 0x3480 <process_tapping+0x432>
                        return true;
                    }
                } else if (is_tap_key(event.key)) {
    33fe:	5a 83       	std	Y+2, r21	; 0x02
    3400:	49 83       	std	Y+1, r20	; 0x01
    3402:	89 81       	ldd	r24, Y+1	; 0x01
    3404:	9a 81       	ldd	r25, Y+2	; 0x02
    3406:	0e 94 96 13 	call	0x272c	; 0x272c <is_tap_key>
    340a:	88 23       	and	r24, r24
    340c:	49 f0       	breq	.+18     	; 0x3420 <process_tapping+0x3d2>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    340e:	a2 e5       	ldi	r26, 0x52	; 82
    3410:	b1 e0       	ldi	r27, 0x01	; 1
    3412:	f8 01       	movw	r30, r16
    3414:	86 e0       	ldi	r24, 0x06	; 6
    3416:	01 90       	ld	r0, Z+
    3418:	0d 92       	st	X+, r0
    341a:	81 50       	subi	r24, 0x01	; 1
    341c:	e1 f7       	brne	.-8      	; 0x3416 <process_tapping+0x3c8>
    341e:	2c c0       	rjmp	.+88     	; 0x3478 <process_tapping+0x42a>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    3420:	80 91 57 01 	lds	r24, 0x0157
    3424:	81 60       	ori	r24, 0x01	; 1
    3426:	80 93 57 01 	sts	0x0157, r24
    342a:	2c c0       	rjmp	.+88     	; 0x3484 <process_tapping+0x436>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    342c:	7e 2d       	mov	r23, r14
    342e:	fd 82       	std	Y+5, r15	; 0x05
    3430:	ec 82       	std	Y+4, r14	; 0x04
    3432:	5a 83       	std	Y+2, r21	; 0x02
    3434:	49 83       	std	Y+1, r20	; 0x01
    3436:	db 82       	std	Y+3, r13	; 0x03
    3438:	6d 2d       	mov	r22, r13
    343a:	8d 81       	ldd	r24, Y+5	; 0x05
    343c:	0e 94 77 13 	call	0x26ee	; 0x26ee <debug_event>
            tapping_key = (keyrecord_t){};
    3440:	e2 e5       	ldi	r30, 0x52	; 82
    3442:	f1 e0       	ldi	r31, 0x01	; 1
    3444:	86 e0       	ldi	r24, 0x06	; 6
    3446:	df 01       	movw	r26, r30
    3448:	1d 92       	st	X+, r1
    344a:	8a 95       	dec	r24
    344c:	e9 f7       	brne	.-6      	; 0x3448 <process_tapping+0x3fa>
            debug_tapping_key();
    344e:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <debug_tapping_key>
    3452:	1c c0       	rjmp	.+56     	; 0x348c <process_tapping+0x43e>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    3454:	dd 20       	and	r13, r13
    3456:	b1 f0       	breq	.+44     	; 0x3484 <process_tapping+0x436>
    3458:	5a 83       	std	Y+2, r21	; 0x02
    345a:	49 83       	std	Y+1, r20	; 0x01
    345c:	89 81       	ldd	r24, Y+1	; 0x01
    345e:	9a 81       	ldd	r25, Y+2	; 0x02
    3460:	0e 94 96 13 	call	0x272c	; 0x272c <is_tap_key>
    3464:	88 23       	and	r24, r24
    3466:	71 f0       	breq	.+28     	; 0x3484 <process_tapping+0x436>
            debug("Tapping: Start(Press tap key).\n");
            tapping_key = *keyp;
    3468:	a2 e5       	ldi	r26, 0x52	; 82
    346a:	b1 e0       	ldi	r27, 0x01	; 1
    346c:	f8 01       	movw	r30, r16
    346e:	86 e0       	ldi	r24, 0x06	; 6
    3470:	01 90       	ld	r0, Z+
    3472:	0d 92       	st	X+, r0
    3474:	81 50       	subi	r24, 0x01	; 1
    3476:	e1 f7       	brne	.-8      	; 0x3470 <process_tapping+0x422>
            waiting_buffer_scan_tap();
    3478:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <waiting_buffer_scan_tap>
            debug_tapping_key();
    347c:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <debug_tapping_key>
    3480:	81 e0       	ldi	r24, 0x01	; 1
    3482:	05 c0       	rjmp	.+10     	; 0x348e <process_tapping+0x440>
            return true;
        } else {
            process_action(keyp);
    3484:	c8 01       	movw	r24, r16
    3486:	0e 94 13 15 	call	0x2a26	; 0x2a26 <process_action>
    348a:	fa cf       	rjmp	.-12     	; 0x3480 <process_tapping+0x432>
            return true;
    348c:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
}
    348e:	6b 96       	adiw	r28, 0x1b	; 27
    3490:	0f b6       	in	r0, 0x3f	; 63
    3492:	f8 94       	cli
    3494:	de bf       	out	0x3e, r29	; 62
    3496:	0f be       	out	0x3f, r0	; 63
    3498:	cd bf       	out	0x3d, r28	; 61
    349a:	cf 91       	pop	r28
    349c:	df 91       	pop	r29
    349e:	1f 91       	pop	r17
    34a0:	0f 91       	pop	r16
    34a2:	ff 90       	pop	r15
    34a4:	ef 90       	pop	r14
    34a6:	df 90       	pop	r13
    34a8:	08 95       	ret
bool process_tapping(keyrecord_t *keyp)
{
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    34aa:	80 91 54 01 	lds	r24, 0x0154
    34ae:	88 23       	and	r24, r24
    34b0:	09 f4       	brne	.+2      	; 0x34b4 <process_tapping+0x466>
    34b2:	58 cf       	rjmp	.-336    	; 0x3364 <process_tapping+0x316>
    34b4:	fb cd       	rjmp	.-1034   	; 0x30ac <process_tapping+0x5e>
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    34b6:	65 17       	cp	r22, r21
    34b8:	09 f0       	breq	.+2      	; 0x34bc <process_tapping+0x46e>
    34ba:	2c ce       	rjmp	.-936    	; 0x3114 <process_tapping+0xc6>
    34bc:	16 ce       	rjmp	.-980    	; 0x30ea <process_tapping+0x9c>
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    34be:	61 30       	cpi	r22, 0x01	; 1
    34c0:	09 f4       	brne	.+2      	; 0x34c4 <process_tapping+0x476>
    34c2:	98 ce       	rjmp	.-720    	; 0x31f4 <process_tapping+0x1a6>
    34c4:	4d ce       	rjmp	.-870    	; 0x3160 <process_tapping+0x112>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    34c6:	65 17       	cp	r22, r21
    34c8:	09 f0       	breq	.+2      	; 0x34cc <process_tapping+0x47e>
    34ca:	b8 ce       	rjmp	.-656    	; 0x323c <process_tapping+0x1ee>
    34cc:	a3 ce       	rjmp	.-698    	; 0x3214 <process_tapping+0x1c6>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    34ce:	65 17       	cp	r22, r21
    34d0:	09 f0       	breq	.+2      	; 0x34d4 <process_tapping+0x486>
    34d2:	18 cf       	rjmp	.-464    	; 0x3304 <process_tapping+0x2b6>
    34d4:	03 cf       	rjmp	.-506    	; 0x32dc <process_tapping+0x28e>
                    process_action(keyp);
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
    34d6:	80 91 54 01 	lds	r24, 0x0154
    34da:	88 23       	and	r24, r24
    34dc:	09 f0       	breq	.+2      	; 0x34e0 <process_tapping+0x492>
    34de:	ba cf       	rjmp	.-140    	; 0x3454 <process_tapping+0x406>
    34e0:	48 cf       	rjmp	.-368    	; 0x3372 <process_tapping+0x324>
        if (WITHIN_TAPPING_TERM(event)) {
            if (event.pressed) {
                if (IS_TAPPING_KEY(event.key)) {
    34e2:	65 17       	cp	r22, r21
    34e4:	09 f0       	breq	.+2      	; 0x34e8 <process_tapping+0x49a>
    34e6:	8b cf       	rjmp	.-234    	; 0x33fe <process_tapping+0x3b0>
    34e8:	61 cf       	rjmp	.-318    	; 0x33ac <process_tapping+0x35e>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    34ea:	5a 83       	std	Y+2, r21	; 0x02
    34ec:	49 83       	std	Y+1, r20	; 0x01
    34ee:	89 81       	ldd	r24, Y+1	; 0x01
    34f0:	9a 81       	ldd	r25, Y+2	; 0x02
    34f2:	0e 94 c4 1b 	call	0x3788	; 0x3788 <layer_switch_get_action>
    34f6:	48 2f       	mov	r20, r24
                    switch (action.kind.id) {
    34f8:	89 2f       	mov	r24, r25
    34fa:	82 95       	swap	r24
    34fc:	8f 70       	andi	r24, 0x0F	; 15
    34fe:	28 2f       	mov	r18, r24
    3500:	30 e0       	ldi	r19, 0x00	; 0
    3502:	22 30       	cpi	r18, 0x02	; 2
    3504:	31 05       	cpc	r19, r1
    3506:	0c f4       	brge	.+2      	; 0x350a <process_tapping+0x4bc>
    3508:	63 ce       	rjmp	.-826    	; 0x31d0 <process_tapping+0x182>
    350a:	24 30       	cpi	r18, 0x04	; 4
    350c:	31 05       	cpc	r19, r1
    350e:	0c f0       	brlt	.+2      	; 0x3512 <process_tapping+0x4c4>
    3510:	b9 cf       	rjmp	.-142    	; 0x3484 <process_tapping+0x436>
    3512:	63 ce       	rjmp	.-826    	; 0x31da <process_tapping+0x18c>

00003514 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    3514:	0f 93       	push	r16
    3516:	1f 93       	push	r17
    3518:	df 93       	push	r29
    351a:	cf 93       	push	r28
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62
    3520:	2c 97       	sbiw	r28, 0x0c	; 12
    3522:	0f b6       	in	r0, 0x3f	; 63
    3524:	f8 94       	cli
    3526:	de bf       	out	0x3e, r29	; 62
    3528:	0f be       	out	0x3f, r0	; 63
    352a:	cd bf       	out	0x3d, r28	; 61
    352c:	4f 83       	std	Y+7, r20	; 0x07
    352e:	58 87       	std	Y+8, r21	; 0x08
    3530:	69 87       	std	Y+9, r22	; 0x09
    3532:	7a 87       	std	Y+10, r23	; 0x0a
    3534:	8b 87       	std	Y+11, r24	; 0x0b
    3536:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    3538:	8e 01       	movw	r16, r28
    353a:	09 5f       	subi	r16, 0xF9	; 249
    353c:	1f 4f       	sbci	r17, 0xFF	; 255
    353e:	c8 01       	movw	r24, r16
    3540:	0e 94 27 18 	call	0x304e	; 0x304e <process_tapping>
    3544:	88 23       	and	r24, r24
    3546:	d9 f0       	breq	.+54     	; 0x357e <action_tapping_process+0x6a>
        if (!IS_NOEVENT(record.event)) {
    3548:	28 85       	ldd	r18, Y+8	; 0x08
    354a:	3f 81       	ldd	r19, Y+7	; 0x07
    354c:	8a 85       	ldd	r24, Y+10	; 0x0a
    354e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3550:	89 2b       	or	r24, r25
    3552:	09 f4       	brne	.+2      	; 0x3556 <action_tapping_process+0x42>
    3554:	6b c0       	rjmp	.+214    	; 0x362c <action_tapping_process+0x118>
    3556:	2f 3f       	cpi	r18, 0xFF	; 255
    3558:	49 f4       	brne	.+18     	; 0x356c <action_tapping_process+0x58>
    355a:	80 e0       	ldi	r24, 0x00	; 0
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	3f 3f       	cpi	r19, 0xFF	; 255
    3560:	11 f4       	brne	.+4      	; 0x3566 <action_tapping_process+0x52>
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	88 23       	and	r24, r24
    3568:	09 f0       	breq	.+2      	; 0x356c <action_tapping_process+0x58>
    356a:	60 c0       	rjmp	.+192    	; 0x362c <action_tapping_process+0x118>
            debug("processed: "); debug_record(record); debug("\n");
    356c:	4f 81       	ldd	r20, Y+7	; 0x07
    356e:	58 85       	ldd	r21, Y+8	; 0x08
    3570:	69 85       	ldd	r22, Y+9	; 0x09
    3572:	7a 85       	ldd	r23, Y+10	; 0x0a
    3574:	8b 85       	ldd	r24, Y+11	; 0x0b
    3576:	9c 85       	ldd	r25, Y+12	; 0x0c
    3578:	0e 94 86 13 	call	0x270c	; 0x270c <debug_record>
    357c:	57 c0       	rjmp	.+174    	; 0x362c <action_tapping_process+0x118>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
    357e:	de 01       	movw	r26, r28
    3580:	11 96       	adiw	r26, 0x01	; 1
    3582:	f8 01       	movw	r30, r16
    3584:	86 e0       	ldi	r24, 0x06	; 6
    3586:	01 90       	ld	r0, Z+
    3588:	0d 92       	st	X+, r0
    358a:	81 50       	subi	r24, 0x01	; 1
    358c:	e1 f7       	brne	.-8      	; 0x3586 <action_tapping_process+0x72>
    358e:	f9 81       	ldd	r31, Y+1	; 0x01
    3590:	ea 81       	ldd	r30, Y+2	; 0x02
    3592:	4c 81       	ldd	r20, Y+4	; 0x04
    3594:	5d 81       	ldd	r21, Y+5	; 0x05
    3596:	41 15       	cp	r20, r1
    3598:	51 05       	cpc	r21, r1
    359a:	09 f4       	brne	.+2      	; 0x359e <action_tapping_process+0x8a>
    359c:	47 c0       	rjmp	.+142    	; 0x362c <action_tapping_process+0x118>
    359e:	ef 3f       	cpi	r30, 0xFF	; 255
    35a0:	09 f0       	breq	.+2      	; 0x35a4 <action_tapping_process+0x90>
    35a2:	4c c0       	rjmp	.+152    	; 0x363c <action_tapping_process+0x128>
    35a4:	ff 3f       	cpi	r31, 0xFF	; 255
    35a6:	09 f0       	breq	.+2      	; 0x35aa <action_tapping_process+0x96>
    35a8:	49 c0       	rjmp	.+146    	; 0x363c <action_tapping_process+0x128>
    35aa:	40 c0       	rjmp	.+128    	; 0x362c <action_tapping_process+0x118>
    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    35ac:	f9 83       	std	Y+1, r31	; 0x01
    35ae:	ea 83       	std	Y+2, r30	; 0x02
    35b0:	5d 83       	std	Y+5, r21	; 0x05
    35b2:	4c 83       	std	Y+4, r20	; 0x04
    35b4:	f9 01       	movw	r30, r18
    35b6:	ee 0f       	add	r30, r30
    35b8:	ff 1f       	adc	r31, r31
    35ba:	e2 0f       	add	r30, r18
    35bc:	f3 1f       	adc	r31, r19
    35be:	ee 0f       	add	r30, r30
    35c0:	ff 1f       	adc	r31, r31
    35c2:	e6 5a       	subi	r30, 0xA6	; 166
    35c4:	fe 4f       	sbci	r31, 0xFE	; 254
    35c6:	de 01       	movw	r26, r28
    35c8:	11 96       	adiw	r26, 0x01	; 1
    35ca:	86 e0       	ldi	r24, 0x06	; 6
    35cc:	0d 90       	ld	r0, X+
    35ce:	01 92       	st	Z+, r0
    35d0:	81 50       	subi	r24, 0x01	; 1
    35d2:	e1 f7       	brne	.-8      	; 0x35cc <action_tapping_process+0xb8>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    35d4:	60 93 58 01 	sts	0x0158, r22

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    35d8:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <debug_waiting_buffer>
    35dc:	27 c0       	rjmp	.+78     	; 0x362c <action_tapping_process+0x118>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    35de:	91 9f       	mul	r25, r17
    35e0:	c0 01       	movw	r24, r0
    35e2:	11 24       	eor	r1, r1
    35e4:	86 5a       	subi	r24, 0xA6	; 166
    35e6:	9e 4f       	sbci	r25, 0xFE	; 254
    35e8:	0e 94 27 18 	call	0x304e	; 0x304e <process_tapping>
    35ec:	88 23       	and	r24, r24
    35ee:	09 f4       	brne	.+2      	; 0x35f2 <action_tapping_process+0xde>
    35f0:	45 c0       	rjmp	.+138    	; 0x367c <action_tapping_process+0x168>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    35f2:	80 91 59 01 	lds	r24, 0x0159
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	fc 01       	movw	r30, r24
    35fa:	ee 0f       	add	r30, r30
    35fc:	ff 1f       	adc	r31, r31
    35fe:	e8 0f       	add	r30, r24
    3600:	f9 1f       	adc	r31, r25
    3602:	ee 0f       	add	r30, r30
    3604:	ff 1f       	adc	r31, r31
    3606:	e6 5a       	subi	r30, 0xA6	; 166
    3608:	fe 4f       	sbci	r31, 0xFE	; 254
    360a:	40 81       	ld	r20, Z
    360c:	51 81       	ldd	r21, Z+1	; 0x01
    360e:	62 81       	ldd	r22, Z+2	; 0x02
    3610:	73 81       	ldd	r23, Z+3	; 0x03
    3612:	84 81       	ldd	r24, Z+4	; 0x04
    3614:	95 81       	ldd	r25, Z+5	; 0x05
    3616:	0e 94 86 13 	call	0x270c	; 0x270c <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    361a:	80 91 59 01 	lds	r24, 0x0159
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	01 96       	adiw	r24, 0x01	; 1
    3622:	87 70       	andi	r24, 0x07	; 7
    3624:	90 70       	andi	r25, 0x00	; 0
    3626:	80 93 59 01 	sts	0x0159, r24
    362a:	01 c0       	rjmp	.+2      	; 0x362e <action_tapping_process+0x11a>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    362c:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    362e:	90 91 59 01 	lds	r25, 0x0159
    3632:	80 91 58 01 	lds	r24, 0x0158
    3636:	98 17       	cp	r25, r24
    3638:	91 f6       	brne	.-92     	; 0x35de <action_tapping_process+0xca>
    363a:	20 c0       	rjmp	.+64     	; 0x367c <action_tapping_process+0x168>
{
    if (IS_NOEVENT(record.event)) {
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    363c:	80 91 58 01 	lds	r24, 0x0158
    3640:	28 2f       	mov	r18, r24
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	2f 5f       	subi	r18, 0xFF	; 255
    3646:	3f 4f       	sbci	r19, 0xFF	; 255
    3648:	b9 01       	movw	r22, r18
    364a:	67 70       	andi	r22, 0x07	; 7
    364c:	70 70       	andi	r23, 0x00	; 0
    364e:	21 50       	subi	r18, 0x01	; 1
    3650:	30 40       	sbci	r19, 0x00	; 0
    3652:	80 91 59 01 	lds	r24, 0x0159
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	68 17       	cp	r22, r24
    365a:	79 07       	cpc	r23, r25
    365c:	09 f0       	breq	.+2      	; 0x3660 <action_tapping_process+0x14c>
    365e:	a6 cf       	rjmp	.-180    	; 0x35ac <action_tapping_process+0x98>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    3660:	0e 94 d6 13 	call	0x27ac	; 0x27ac <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    3664:	10 92 58 01 	sts	0x0158, r1
    waiting_buffer_tail = 0;
    3668:	10 92 59 01 	sts	0x0159, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    366c:	e2 e5       	ldi	r30, 0x52	; 82
    366e:	f1 e0       	ldi	r31, 0x01	; 1
    3670:	86 e0       	ldi	r24, 0x06	; 6
    3672:	df 01       	movw	r26, r30
    3674:	1d 92       	st	X+, r1
    3676:	8a 95       	dec	r24
    3678:	e9 f7       	brne	.-6      	; 0x3674 <action_tapping_process+0x160>
    367a:	d8 cf       	rjmp	.-80     	; 0x362c <action_tapping_process+0x118>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    367c:	2c 96       	adiw	r28, 0x0c	; 12
    367e:	0f b6       	in	r0, 0x3f	; 63
    3680:	f8 94       	cli
    3682:	de bf       	out	0x3e, r29	; 62
    3684:	0f be       	out	0x3f, r0	; 63
    3686:	cd bf       	out	0x3d, r28	; 61
    3688:	cf 91       	pop	r28
    368a:	df 91       	pop	r29
    368c:	1f 91       	pop	r17
    368e:	0f 91       	pop	r16
    3690:	08 95       	ret

00003692 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    3692:	cf 92       	push	r12
    3694:	df 92       	push	r13
    3696:	ef 92       	push	r14
    3698:	ff 92       	push	r15
    369a:	1f 93       	push	r17
    369c:	cf 93       	push	r28
    369e:	df 93       	push	r29
    36a0:	ec 01       	movw	r28, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    36a2:	00 97       	sbiw	r24, 0x00	; 0
    36a4:	09 f4       	brne	.+2      	; 0x36a8 <action_macro_play+0x16>
    36a6:	66 c0       	rjmp	.+204    	; 0x3774 <action_macro_play+0xe2>
    36a8:	10 e0       	ldi	r17, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    36aa:	90 ea       	ldi	r25, 0xA0	; 160
    36ac:	c9 2e       	mov	r12, r25
    36ae:	9f e0       	ldi	r25, 0x0F	; 15
    36b0:	d9 2e       	mov	r13, r25
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    36b2:	81 e0       	ldi	r24, 0x01	; 1
    36b4:	e8 2e       	mov	r14, r24
    36b6:	f1 2c       	mov	r15, r1
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    36b8:	fe 01       	movw	r30, r28
    36ba:	21 96       	adiw	r28, 0x01	; 1
    36bc:	94 91       	lpm	r25, Z+
    36be:	94 37       	cpi	r25, 0x74	; 116
    36c0:	48 f4       	brcc	.+18     	; 0x36d4 <action_macro_play+0x42>
    36c2:	94 30       	cpi	r25, 0x04	; 4
    36c4:	08 f0       	brcs	.+2      	; 0x36c8 <action_macro_play+0x36>
    36c6:	44 c0       	rjmp	.+136    	; 0x3750 <action_macro_play+0xbe>
    36c8:	91 30       	cpi	r25, 0x01	; 1
    36ca:	79 f0       	breq	.+30     	; 0x36ea <action_macro_play+0x58>
    36cc:	92 30       	cpi	r25, 0x02	; 2
    36ce:	09 f0       	breq	.+2      	; 0x36d2 <action_macro_play+0x40>
    36d0:	51 c0       	rjmp	.+162    	; 0x3774 <action_macro_play+0xe2>
    36d2:	1b c0       	rjmp	.+54     	; 0x370a <action_macro_play+0x78>
    36d4:	95 37       	cpi	r25, 0x75	; 117
    36d6:	09 f4       	brne	.+2      	; 0x36da <action_macro_play+0x48>
    36d8:	37 c0       	rjmp	.+110    	; 0x3748 <action_macro_play+0xb6>
    36da:	95 37       	cpi	r25, 0x75	; 117
    36dc:	50 f1       	brcs	.+84     	; 0x3732 <action_macro_play+0xa0>
    36de:	89 2f       	mov	r24, r25
    36e0:	84 58       	subi	r24, 0x84	; 132
    36e2:	80 37       	cpi	r24, 0x70	; 112
    36e4:	08 f0       	brcs	.+2      	; 0x36e8 <action_macro_play+0x56>
    36e6:	46 c0       	rjmp	.+140    	; 0x3774 <action_macro_play+0xe2>
    36e8:	37 c0       	rjmp	.+110    	; 0x3758 <action_macro_play+0xc6>
            case KEY_DOWN:
                MACRO_READ();
    36ea:	fe 01       	movw	r30, r28
    36ec:	21 96       	adiw	r28, 0x01	; 1
    36ee:	94 91       	lpm	r25, Z+
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    36f0:	89 2f       	mov	r24, r25
    36f2:	80 5e       	subi	r24, 0xE0	; 224
    36f4:	88 30       	cpi	r24, 0x08	; 8
    36f6:	60 f5       	brcc	.+88     	; 0x3750 <action_macro_play+0xbe>
                    add_weak_mods(MOD_BIT(macro));
    36f8:	97 70       	andi	r25, 0x07	; 7
    36fa:	8e 2d       	mov	r24, r14
    36fc:	01 c0       	rjmp	.+2      	; 0x3700 <action_macro_play+0x6e>
    36fe:	88 0f       	add	r24, r24
    3700:	9a 95       	dec	r25
    3702:	ea f7       	brpl	.-6      	; 0x36fe <action_macro_play+0x6c>
    3704:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <add_weak_mods>
    3708:	0f c0       	rjmp	.+30     	; 0x3728 <action_macro_play+0x96>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    370a:	fe 01       	movw	r30, r28
    370c:	21 96       	adiw	r28, 0x01	; 1
    370e:	94 91       	lpm	r25, Z+
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3710:	89 2f       	mov	r24, r25
    3712:	80 5e       	subi	r24, 0xE0	; 224
    3714:	88 30       	cpi	r24, 0x08	; 8
    3716:	58 f4       	brcc	.+22     	; 0x372e <action_macro_play+0x9c>
                    del_weak_mods(MOD_BIT(macro));
    3718:	97 70       	andi	r25, 0x07	; 7
    371a:	8e 2d       	mov	r24, r14
    371c:	01 c0       	rjmp	.+2      	; 0x3720 <action_macro_play+0x8e>
    371e:	88 0f       	add	r24, r24
    3720:	9a 95       	dec	r25
    3722:	ea f7       	brpl	.-6      	; 0x371e <action_macro_play+0x8c>
    3724:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <del_weak_mods>
                    send_keyboard_report();
    3728:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <send_keyboard_report>
    372c:	19 c0       	rjmp	.+50     	; 0x3760 <action_macro_play+0xce>
                } else {
                    unregister_code(macro);
    372e:	89 2f       	mov	r24, r25
    3730:	15 c0       	rjmp	.+42     	; 0x375c <action_macro_play+0xca>
                }
                break;
            case WAIT:
                MACRO_READ();
    3732:	fe 01       	movw	r30, r28
    3734:	24 91       	lpm	r18, Z+
    3736:	04 c0       	rjmp	.+8      	; 0x3740 <action_macro_play+0xae>
    3738:	c6 01       	movw	r24, r12
    373a:	01 97       	sbiw	r24, 0x01	; 1
    373c:	f1 f7       	brne	.-4      	; 0x373a <action_macro_play+0xa8>
    373e:	21 50       	subi	r18, 0x01	; 1
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    3740:	22 23       	and	r18, r18
    3742:	d1 f7       	brne	.-12     	; 0x3738 <action_macro_play+0xa6>
                } else {
                    unregister_code(macro);
                }
                break;
            case WAIT:
                MACRO_READ();
    3744:	21 96       	adiw	r28, 0x01	; 1
    3746:	0c c0       	rjmp	.+24     	; 0x3760 <action_macro_play+0xce>
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
                break;
            case INTERVAL:
                interval = MACRO_READ();
    3748:	fe 01       	movw	r30, r28
    374a:	21 96       	adiw	r28, 0x01	; 1
    374c:	14 91       	lpm	r17, Z+
    374e:	08 c0       	rjmp	.+16     	; 0x3760 <action_macro_play+0xce>
                dprintf("INTERVAL(%u)\n", interval);
                break;
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    3750:	89 2f       	mov	r24, r25
    3752:	0e 94 3c 14 	call	0x2878	; 0x2878 <register_code>
    3756:	04 c0       	rjmp	.+8      	; 0x3760 <action_macro_play+0xce>
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    3758:	89 2f       	mov	r24, r25
    375a:	8f 77       	andi	r24, 0x7F	; 127
    375c:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <unregister_code>
    3760:	21 2f       	mov	r18, r17
    3762:	04 c0       	rjmp	.+8      	; 0x376c <action_macro_play+0xda>
    3764:	c6 01       	movw	r24, r12
    3766:	01 97       	sbiw	r24, 0x01	; 1
    3768:	f1 f7       	brne	.-4      	; 0x3766 <action_macro_play+0xd4>
    376a:	21 50       	subi	r18, 0x01	; 1
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    376c:	22 23       	and	r18, r18
    376e:	09 f4       	brne	.+2      	; 0x3772 <action_macro_play+0xe0>
    3770:	a3 cf       	rjmp	.-186    	; 0x36b8 <action_macro_play+0x26>
    3772:	f8 cf       	rjmp	.-16     	; 0x3764 <action_macro_play+0xd2>
    }
}
    3774:	df 91       	pop	r29
    3776:	cf 91       	pop	r28
    3778:	1f 91       	pop	r17
    377a:	ff 90       	pop	r15
    377c:	ef 90       	pop	r14
    377e:	df 90       	pop	r13
    3780:	cf 90       	pop	r12
    3782:	08 95       	ret

00003784 <default_layer_debug>:
}

void default_layer_debug(void)
{
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}
    3784:	08 95       	ret

00003786 <layer_debug>:
}

void layer_debug(void)
{
    dprintf("%08lX(%u)", layer_state, biton32(layer_state));
}
    3786:	08 95       	ret

00003788 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    3788:	cf 92       	push	r12
    378a:	df 92       	push	r13
    378c:	ef 92       	push	r14
    378e:	ff 92       	push	r15
    3790:	0f 93       	push	r16
    3792:	1f 93       	push	r17
    3794:	cf 93       	push	r28
    3796:	df 93       	push	r29
    3798:	6c 01       	movw	r12, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    379a:	e0 90 8a 01 	lds	r14, 0x018A
    379e:	f0 90 8b 01 	lds	r15, 0x018B
    37a2:	00 91 8c 01 	lds	r16, 0x018C
    37a6:	10 91 8d 01 	lds	r17, 0x018D
    37aa:	80 91 8e 01 	lds	r24, 0x018E
    37ae:	90 91 8f 01 	lds	r25, 0x018F
    37b2:	a0 91 90 01 	lds	r26, 0x0190
    37b6:	b0 91 91 01 	lds	r27, 0x0191
    37ba:	e8 2a       	or	r14, r24
    37bc:	f9 2a       	or	r15, r25
    37be:	0a 2b       	or	r16, r26
    37c0:	1b 2b       	or	r17, r27
    37c2:	cf e1       	ldi	r28, 0x1F	; 31
    37c4:	d0 e0       	ldi	r29, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    37c6:	d8 01       	movw	r26, r16
    37c8:	c7 01       	movw	r24, r14
    37ca:	0c 2e       	mov	r0, r28
    37cc:	04 c0       	rjmp	.+8      	; 0x37d6 <layer_switch_get_action+0x4e>
    37ce:	b6 95       	lsr	r27
    37d0:	a7 95       	ror	r26
    37d2:	97 95       	ror	r25
    37d4:	87 95       	ror	r24
    37d6:	0a 94       	dec	r0
    37d8:	d2 f7       	brpl	.-12     	; 0x37ce <layer_switch_get_action+0x46>
    37da:	81 70       	andi	r24, 0x01	; 1
    37dc:	90 70       	andi	r25, 0x00	; 0
    37de:	89 2b       	or	r24, r25
    37e0:	41 f0       	breq	.+16     	; 0x37f2 <layer_switch_get_action+0x6a>
            action = action_for_key(i, key);
    37e2:	8c 2f       	mov	r24, r28
    37e4:	b6 01       	movw	r22, r12
    37e6:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <action_for_key>
    37ea:	9c 01       	movw	r18, r24
            if (action.code != ACTION_TRANSPARENT) {
    37ec:	81 30       	cpi	r24, 0x01	; 1
    37ee:	91 05       	cpc	r25, r1
    37f0:	51 f4       	brne	.+20     	; 0x3806 <layer_switch_get_action+0x7e>
                return action;
    37f2:	21 97       	sbiw	r28, 0x01	; 1
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
    37f4:	8f ef       	ldi	r24, 0xFF	; 255
    37f6:	cf 3f       	cpi	r28, 0xFF	; 255
    37f8:	d8 07       	cpc	r29, r24
    37fa:	29 f7       	brne	.-54     	; 0x37c6 <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    37fc:	80 e0       	ldi	r24, 0x00	; 0
    37fe:	b6 01       	movw	r22, r12
    3800:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <action_for_key>
    3804:	9c 01       	movw	r18, r24
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    3806:	82 2f       	mov	r24, r18
    3808:	df 91       	pop	r29
    380a:	cf 91       	pop	r28
    380c:	1f 91       	pop	r17
    380e:	0f 91       	pop	r16
    3810:	ff 90       	pop	r15
    3812:	ef 90       	pop	r14
    3814:	df 90       	pop	r13
    3816:	cf 90       	pop	r12
    3818:	08 95       	ret

0000381a <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    381a:	60 93 8e 01 	sts	0x018E, r22
    381e:	70 93 8f 01 	sts	0x018F, r23
    3822:	80 93 90 01 	sts	0x0190, r24
    3826:	90 93 91 01 	sts	0x0191, r25
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    382a:	0e 94 c3 13 	call	0x2786	; 0x2786 <clear_keyboard_but_mods>
}
    382e:	08 95       	ret

00003830 <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    3830:	9b 01       	movw	r18, r22
    3832:	ac 01       	movw	r20, r24
    layer_state_set(layer_state ^ state);
    3834:	60 91 8e 01 	lds	r22, 0x018E
    3838:	70 91 8f 01 	lds	r23, 0x018F
    383c:	80 91 90 01 	lds	r24, 0x0190
    3840:	90 91 91 01 	lds	r25, 0x0191
    3844:	62 27       	eor	r22, r18
    3846:	73 27       	eor	r23, r19
    3848:	84 27       	eor	r24, r20
    384a:	95 27       	eor	r25, r21
    384c:	0e 94 0d 1c 	call	0x381a	; 0x381a <layer_state_set>
}
    3850:	08 95       	ret

00003852 <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    3852:	9b 01       	movw	r18, r22
    3854:	ac 01       	movw	r20, r24
    layer_state_set(layer_state & state);
    3856:	60 91 8e 01 	lds	r22, 0x018E
    385a:	70 91 8f 01 	lds	r23, 0x018F
    385e:	80 91 90 01 	lds	r24, 0x0190
    3862:	90 91 91 01 	lds	r25, 0x0191
    3866:	62 23       	and	r22, r18
    3868:	73 23       	and	r23, r19
    386a:	84 23       	and	r24, r20
    386c:	95 23       	and	r25, r21
    386e:	0e 94 0d 1c 	call	0x381a	; 0x381a <layer_state_set>
}
    3872:	08 95       	ret

00003874 <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    3874:	9b 01       	movw	r18, r22
    3876:	ac 01       	movw	r20, r24
    layer_state_set(layer_state | state);
    3878:	60 91 8e 01 	lds	r22, 0x018E
    387c:	70 91 8f 01 	lds	r23, 0x018F
    3880:	80 91 90 01 	lds	r24, 0x0190
    3884:	90 91 91 01 	lds	r25, 0x0191
    3888:	62 2b       	or	r22, r18
    388a:	73 2b       	or	r23, r19
    388c:	84 2b       	or	r24, r20
    388e:	95 2b       	or	r25, r21
    3890:	0e 94 0d 1c 	call	0x381a	; 0x381a <layer_state_set>
}
    3894:	08 95       	ret

00003896 <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    3896:	21 e0       	ldi	r18, 0x01	; 1
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	40 e0       	ldi	r20, 0x00	; 0
    389c:	50 e0       	ldi	r21, 0x00	; 0
    389e:	04 c0       	rjmp	.+8      	; 0x38a8 <layer_invert+0x12>
    38a0:	22 0f       	add	r18, r18
    38a2:	33 1f       	adc	r19, r19
    38a4:	44 1f       	adc	r20, r20
    38a6:	55 1f       	adc	r21, r21
    38a8:	8a 95       	dec	r24
    38aa:	d2 f7       	brpl	.-12     	; 0x38a0 <layer_invert+0xa>
    38ac:	80 91 8e 01 	lds	r24, 0x018E
    38b0:	90 91 8f 01 	lds	r25, 0x018F
    38b4:	a0 91 90 01 	lds	r26, 0x0190
    38b8:	b0 91 91 01 	lds	r27, 0x0191
    38bc:	28 27       	eor	r18, r24
    38be:	39 27       	eor	r19, r25
    38c0:	4a 27       	eor	r20, r26
    38c2:	5b 27       	eor	r21, r27
    38c4:	ca 01       	movw	r24, r20
    38c6:	b9 01       	movw	r22, r18
    38c8:	0e 94 0d 1c 	call	0x381a	; 0x381a <layer_state_set>
}
    38cc:	08 95       	ret

000038ce <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    38ce:	21 e0       	ldi	r18, 0x01	; 1
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	40 e0       	ldi	r20, 0x00	; 0
    38d4:	50 e0       	ldi	r21, 0x00	; 0
    38d6:	04 c0       	rjmp	.+8      	; 0x38e0 <layer_off+0x12>
    38d8:	22 0f       	add	r18, r18
    38da:	33 1f       	adc	r19, r19
    38dc:	44 1f       	adc	r20, r20
    38de:	55 1f       	adc	r21, r21
    38e0:	8a 95       	dec	r24
    38e2:	d2 f7       	brpl	.-12     	; 0x38d8 <layer_off+0xa>
    38e4:	20 95       	com	r18
    38e6:	30 95       	com	r19
    38e8:	40 95       	com	r20
    38ea:	50 95       	com	r21
    38ec:	80 91 8e 01 	lds	r24, 0x018E
    38f0:	90 91 8f 01 	lds	r25, 0x018F
    38f4:	a0 91 90 01 	lds	r26, 0x0190
    38f8:	b0 91 91 01 	lds	r27, 0x0191
    38fc:	28 23       	and	r18, r24
    38fe:	39 23       	and	r19, r25
    3900:	4a 23       	and	r20, r26
    3902:	5b 23       	and	r21, r27
    3904:	ca 01       	movw	r24, r20
    3906:	b9 01       	movw	r22, r18
    3908:	0e 94 0d 1c 	call	0x381a	; 0x381a <layer_state_set>
}
    390c:	08 95       	ret

0000390e <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    390e:	21 e0       	ldi	r18, 0x01	; 1
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	40 e0       	ldi	r20, 0x00	; 0
    3914:	50 e0       	ldi	r21, 0x00	; 0
    3916:	04 c0       	rjmp	.+8      	; 0x3920 <layer_on+0x12>
    3918:	22 0f       	add	r18, r18
    391a:	33 1f       	adc	r19, r19
    391c:	44 1f       	adc	r20, r20
    391e:	55 1f       	adc	r21, r21
    3920:	8a 95       	dec	r24
    3922:	d2 f7       	brpl	.-12     	; 0x3918 <layer_on+0xa>
    3924:	80 91 8e 01 	lds	r24, 0x018E
    3928:	90 91 8f 01 	lds	r25, 0x018F
    392c:	a0 91 90 01 	lds	r26, 0x0190
    3930:	b0 91 91 01 	lds	r27, 0x0191
    3934:	28 2b       	or	r18, r24
    3936:	39 2b       	or	r19, r25
    3938:	4a 2b       	or	r20, r26
    393a:	5b 2b       	or	r21, r27
    393c:	ca 01       	movw	r24, r20
    393e:	b9 01       	movw	r22, r18
    3940:	0e 94 0d 1c 	call	0x381a	; 0x381a <layer_state_set>
}
    3944:	08 95       	ret

00003946 <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    3946:	21 e0       	ldi	r18, 0x01	; 1
    3948:	30 e0       	ldi	r19, 0x00	; 0
    394a:	40 e0       	ldi	r20, 0x00	; 0
    394c:	50 e0       	ldi	r21, 0x00	; 0
    394e:	04 c0       	rjmp	.+8      	; 0x3958 <layer_move+0x12>
    3950:	22 0f       	add	r18, r18
    3952:	33 1f       	adc	r19, r19
    3954:	44 1f       	adc	r20, r20
    3956:	55 1f       	adc	r21, r21
    3958:	8a 95       	dec	r24
    395a:	d2 f7       	brpl	.-12     	; 0x3950 <layer_move+0xa>
    395c:	ca 01       	movw	r24, r20
    395e:	b9 01       	movw	r22, r18
    3960:	0e 94 0d 1c 	call	0x381a	; 0x381a <layer_state_set>
}
    3964:	08 95       	ret

00003966 <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    3966:	60 e0       	ldi	r22, 0x00	; 0
    3968:	70 e0       	ldi	r23, 0x00	; 0
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	0e 94 0d 1c 	call	0x381a	; 0x381a <layer_state_set>
}
    3972:	08 95       	ret

00003974 <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3974:	60 93 8a 01 	sts	0x018A, r22
    3978:	70 93 8b 01 	sts	0x018B, r23
    397c:	80 93 8c 01 	sts	0x018C, r24
    3980:	90 93 8d 01 	sts	0x018D, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3984:	0e 94 c3 13 	call	0x2786	; 0x2786 <clear_keyboard_but_mods>
}
    3988:	08 95       	ret

0000398a <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    398a:	9b 01       	movw	r18, r22
    398c:	ac 01       	movw	r20, r24
    default_layer_state_set(default_layer_state ^ state);
    398e:	60 91 8a 01 	lds	r22, 0x018A
    3992:	70 91 8b 01 	lds	r23, 0x018B
    3996:	80 91 8c 01 	lds	r24, 0x018C
    399a:	90 91 8d 01 	lds	r25, 0x018D
    399e:	62 27       	eor	r22, r18
    39a0:	73 27       	eor	r23, r19
    39a2:	84 27       	eor	r24, r20
    39a4:	95 27       	eor	r25, r21
    39a6:	0e 94 ba 1c 	call	0x3974	; 0x3974 <default_layer_state_set>
}
    39aa:	08 95       	ret

000039ac <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    39ac:	9b 01       	movw	r18, r22
    39ae:	ac 01       	movw	r20, r24
    default_layer_state_set(default_layer_state & state);
    39b0:	60 91 8a 01 	lds	r22, 0x018A
    39b4:	70 91 8b 01 	lds	r23, 0x018B
    39b8:	80 91 8c 01 	lds	r24, 0x018C
    39bc:	90 91 8d 01 	lds	r25, 0x018D
    39c0:	62 23       	and	r22, r18
    39c2:	73 23       	and	r23, r19
    39c4:	84 23       	and	r24, r20
    39c6:	95 23       	and	r25, r21
    39c8:	0e 94 ba 1c 	call	0x3974	; 0x3974 <default_layer_state_set>
}
    39cc:	08 95       	ret

000039ce <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    39ce:	9b 01       	movw	r18, r22
    39d0:	ac 01       	movw	r20, r24
    default_layer_state_set(default_layer_state | state);
    39d2:	60 91 8a 01 	lds	r22, 0x018A
    39d6:	70 91 8b 01 	lds	r23, 0x018B
    39da:	80 91 8c 01 	lds	r24, 0x018C
    39de:	90 91 8d 01 	lds	r25, 0x018D
    39e2:	62 2b       	or	r22, r18
    39e4:	73 2b       	or	r23, r19
    39e6:	84 2b       	or	r24, r20
    39e8:	95 2b       	or	r25, r21
    39ea:	0e 94 ba 1c 	call	0x3974	; 0x3974 <default_layer_state_set>
}
    39ee:	08 95       	ret

000039f0 <default_layer_set>:
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
    default_layer_state_set(state);
    39f0:	0e 94 ba 1c 	call	0x3974	; 0x3974 <default_layer_state_set>
}
    39f4:	08 95       	ret

000039f6 <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    39f6:	81 e0       	ldi	r24, 0x01	; 1
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    39fa:	e0 91 0d 01 	lds	r30, 0x010D
    39fe:	f0 91 0e 01 	lds	r31, 0x010E
    3a02:	e8 0f       	add	r30, r24
    3a04:	f9 1f       	adc	r31, r25
    3a06:	10 82       	st	Z, r1
    3a08:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3a0a:	80 31       	cpi	r24, 0x10	; 16
    3a0c:	91 05       	cpc	r25, r1
    3a0e:	a9 f7       	brne	.-22     	; 0x39fa <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3a10:	08 95       	ret

00003a12 <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    3a12:	80 91 a2 01 	lds	r24, 0x01A2
    3a16:	08 95       	ret

00003a18 <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    3a18:	90 91 a2 01 	lds	r25, 0x01A2
    3a1c:	98 2b       	or	r25, r24
    3a1e:	90 93 a2 01 	sts	0x01A2, r25
    3a22:	08 95       	ret

00003a24 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3a24:	80 95       	com	r24
    3a26:	90 91 a2 01 	lds	r25, 0x01A2
    3a2a:	98 23       	and	r25, r24
    3a2c:	90 93 a2 01 	sts	0x01A2, r25
    3a30:	08 95       	ret

00003a32 <clear_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
    3a32:	10 92 a2 01 	sts	0x01A2, r1
    3a36:	08 95       	ret

00003a38 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3a38:	90 91 a4 01 	lds	r25, 0x01A4
    3a3c:	98 2b       	or	r25, r24
    3a3e:	90 93 a4 01 	sts	0x01A4, r25
    3a42:	08 95       	ret

00003a44 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3a44:	80 95       	com	r24
    3a46:	90 91 a4 01 	lds	r25, 0x01A4
    3a4a:	98 23       	and	r25, r24
    3a4c:	90 93 a4 01 	sts	0x01A4, r25
    3a50:	08 95       	ret

00003a52 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    3a52:	10 92 a4 01 	sts	0x01A4, r1
    3a56:	08 95       	ret

00003a58 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3a58:	80 93 a3 01 	sts	0x01A3, r24
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = timer_read();
#endif
}
    3a5c:	08 95       	ret

00003a5e <clear_oneshot_mods>:
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3a5e:	10 92 a3 01 	sts	0x01A3, r1
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = 0;
#endif
}
    3a62:	08 95       	ret

00003a64 <has_anykey>:

/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    3a64:	e0 91 0d 01 	lds	r30, 0x010D
    3a68:	f0 91 0e 01 	lds	r31, 0x010E
    3a6c:	20 e0       	ldi	r18, 0x00	; 0
    3a6e:	91 e0       	ldi	r25, 0x01	; 1
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3a70:	81 81       	ldd	r24, Z+1	; 0x01
    3a72:	81 11       	cpse	r24, r1
            cnt++;
    3a74:	2f 5f       	subi	r18, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3a76:	9f 5f       	subi	r25, 0xFF	; 255
    3a78:	31 96       	adiw	r30, 0x01	; 1
    3a7a:	90 31       	cpi	r25, 0x10	; 16
    3a7c:	c9 f7       	brne	.-14     	; 0x3a70 <has_anykey+0xc>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    3a7e:	82 2f       	mov	r24, r18
    3a80:	08 95       	ret

00003a82 <del_key>:
#endif
    add_key_byte(key);
}

void del_key(uint8_t key)
{
    3a82:	48 2f       	mov	r20, r24
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    3a84:	80 91 01 01 	lds	r24, 0x0101
    3a88:	88 23       	and	r24, r24
    3a8a:	b9 f1       	breq	.+110    	; 0x3afa <del_key+0x78>
    3a8c:	80 91 0c 01 	lds	r24, 0x010C
    3a90:	88 23       	and	r24, r24
    3a92:	99 f1       	breq	.+102    	; 0x3afa <del_key+0x78>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3a94:	84 2f       	mov	r24, r20
    3a96:	86 95       	lsr	r24
    3a98:	86 95       	lsr	r24
    3a9a:	86 95       	lsr	r24
    3a9c:	8f 30       	cpi	r24, 0x0F	; 15
    3a9e:	98 f4       	brcc	.+38     	; 0x3ac6 <del_key+0x44>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    3aa0:	e0 91 0d 01 	lds	r30, 0x010D
    3aa4:	f0 91 0e 01 	lds	r31, 0x010E
    3aa8:	e8 0f       	add	r30, r24
    3aaa:	f1 1d       	adc	r31, r1
    3aac:	47 70       	andi	r20, 0x07	; 7
    3aae:	81 e0       	ldi	r24, 0x01	; 1
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	02 c0       	rjmp	.+4      	; 0x3ab8 <del_key+0x36>
    3ab4:	88 0f       	add	r24, r24
    3ab6:	99 1f       	adc	r25, r25
    3ab8:	4a 95       	dec	r20
    3aba:	e2 f7       	brpl	.-8      	; 0x3ab4 <del_key+0x32>
    3abc:	80 95       	com	r24
    3abe:	21 81       	ldd	r18, Z+1	; 0x01
    3ac0:	82 23       	and	r24, r18
    3ac2:	81 83       	std	Z+1, r24	; 0x01
    3ac4:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    3ac6:	80 91 a5 01 	lds	r24, 0x01A5
    3aca:	80 ff       	sbrs	r24, 0
    3acc:	27 c0       	rjmp	.+78     	; 0x3b1c <del_key+0x9a>
    3ace:	00 d0       	rcall	.+0      	; 0x3ad0 <del_key+0x4e>
    3ad0:	00 d0       	rcall	.+0      	; 0x3ad2 <del_key+0x50>
    3ad2:	ed b7       	in	r30, 0x3d	; 61
    3ad4:	fe b7       	in	r31, 0x3e	; 62
    3ad6:	31 96       	adiw	r30, 0x01	; 1
    3ad8:	82 e7       	ldi	r24, 0x72	; 114
    3ada:	95 e0       	ldi	r25, 0x05	; 5
    3adc:	ad b7       	in	r26, 0x3d	; 61
    3ade:	be b7       	in	r27, 0x3e	; 62
    3ae0:	12 96       	adiw	r26, 0x02	; 2
    3ae2:	9c 93       	st	X, r25
    3ae4:	8e 93       	st	-X, r24
    3ae6:	11 97       	sbiw	r26, 0x01	; 1
    3ae8:	42 83       	std	Z+2, r20	; 0x02
    3aea:	13 82       	std	Z+3, r1	; 0x03
    3aec:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    3af0:	0f 90       	pop	r0
    3af2:	0f 90       	pop	r0
    3af4:	0f 90       	pop	r0
    3af6:	0f 90       	pop	r0
    3af8:	08 95       	ret
    3afa:	20 e0       	ldi	r18, 0x00	; 0
    3afc:	30 e0       	ldi	r19, 0x00	; 0
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3afe:	e0 91 0d 01 	lds	r30, 0x010D
    3b02:	f0 91 0e 01 	lds	r31, 0x010E
    3b06:	e2 0f       	add	r30, r18
    3b08:	f3 1f       	adc	r31, r19
    3b0a:	82 81       	ldd	r24, Z+2	; 0x02
    3b0c:	84 17       	cp	r24, r20
    3b0e:	09 f4       	brne	.+2      	; 0x3b12 <del_key+0x90>
            keyboard_report->keys[i] = 0;
    3b10:	12 82       	std	Z+2, r1	; 0x02
    3b12:	2f 5f       	subi	r18, 0xFF	; 255
    3b14:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3b16:	2e 30       	cpi	r18, 0x0E	; 14
    3b18:	31 05       	cpc	r19, r1
    3b1a:	89 f7       	brne	.-30     	; 0x3afe <del_key+0x7c>
    3b1c:	08 95       	ret

00003b1e <add_key>:
    host_keyboard_send(keyboard_report);
}

/* key */
void add_key(uint8_t key)
{
    3b1e:	38 2f       	mov	r19, r24
#ifdef NKRO_ENABLE
    if (keyboard_protocol && keyboard_nkro) {
    3b20:	80 91 01 01 	lds	r24, 0x0101
    3b24:	88 23       	and	r24, r24
    3b26:	b1 f1       	breq	.+108    	; 0x3b94 <add_key+0x76>
    3b28:	80 91 0c 01 	lds	r24, 0x010C
    3b2c:	88 23       	and	r24, r24
    3b2e:	91 f1       	breq	.+100    	; 0x3b94 <add_key+0x76>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3b30:	83 2f       	mov	r24, r19
    3b32:	86 95       	lsr	r24
    3b34:	86 95       	lsr	r24
    3b36:	86 95       	lsr	r24
    3b38:	8f 30       	cpi	r24, 0x0F	; 15
    3b3a:	90 f4       	brcc	.+36     	; 0x3b60 <add_key+0x42>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    3b3c:	e0 91 0d 01 	lds	r30, 0x010D
    3b40:	f0 91 0e 01 	lds	r31, 0x010E
    3b44:	e8 0f       	add	r30, r24
    3b46:	f1 1d       	adc	r31, r1
    3b48:	37 70       	andi	r19, 0x07	; 7
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	02 c0       	rjmp	.+4      	; 0x3b54 <add_key+0x36>
    3b50:	88 0f       	add	r24, r24
    3b52:	99 1f       	adc	r25, r25
    3b54:	3a 95       	dec	r19
    3b56:	e2 f7       	brpl	.-8      	; 0x3b50 <add_key+0x32>
    3b58:	21 81       	ldd	r18, Z+1	; 0x01
    3b5a:	28 2b       	or	r18, r24
    3b5c:	21 83       	std	Z+1, r18	; 0x01
    3b5e:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    3b60:	80 91 a5 01 	lds	r24, 0x01A5
    3b64:	80 ff       	sbrs	r24, 0
    3b66:	32 c0       	rjmp	.+100    	; 0x3bcc <add_key+0xae>
    3b68:	00 d0       	rcall	.+0      	; 0x3b6a <add_key+0x4c>
    3b6a:	00 d0       	rcall	.+0      	; 0x3b6c <add_key+0x4e>
    3b6c:	ed b7       	in	r30, 0x3d	; 61
    3b6e:	fe b7       	in	r31, 0x3e	; 62
    3b70:	31 96       	adiw	r30, 0x01	; 1
    3b72:	80 e9       	ldi	r24, 0x90	; 144
    3b74:	95 e0       	ldi	r25, 0x05	; 5
    3b76:	ad b7       	in	r26, 0x3d	; 61
    3b78:	be b7       	in	r27, 0x3e	; 62
    3b7a:	12 96       	adiw	r26, 0x02	; 2
    3b7c:	9c 93       	st	X, r25
    3b7e:	8e 93       	st	-X, r24
    3b80:	11 97       	sbiw	r26, 0x01	; 1
    3b82:	32 83       	std	Z+2, r19	; 0x02
    3b84:	13 82       	std	Z+3, r1	; 0x03
    3b86:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    3b8a:	0f 90       	pop	r0
    3b8c:	0f 90       	pop	r0
    3b8e:	0f 90       	pop	r0
    3b90:	0f 90       	pop	r0
    3b92:	08 95       	ret
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3b94:	a0 91 0d 01 	lds	r26, 0x010D
    3b98:	b0 91 0e 01 	lds	r27, 0x010E
    3b9c:	fd 01       	movw	r30, r26
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	8f ef       	ldi	r24, 0xFF	; 255
    3ba2:	92 81       	ldd	r25, Z+2	; 0x02
    3ba4:	93 17       	cp	r25, r19
    3ba6:	91 f0       	breq	.+36     	; 0x3bcc <add_key+0xae>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    3ba8:	8f 3f       	cpi	r24, 0xFF	; 255
    3baa:	19 f4       	brne	.+6      	; 0x3bb2 <add_key+0x94>
    3bac:	99 23       	and	r25, r25
    3bae:	09 f4       	brne	.+2      	; 0x3bb2 <add_key+0x94>
    3bb0:	82 2f       	mov	r24, r18
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    3bb2:	2f 5f       	subi	r18, 0xFF	; 255
    3bb4:	31 96       	adiw	r30, 0x01	; 1
    3bb6:	2e 30       	cpi	r18, 0x0E	; 14
    3bb8:	a1 f7       	brne	.-24     	; 0x3ba2 <add_key+0x84>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    3bba:	8f 3f       	cpi	r24, 0xFF	; 255
    3bbc:	39 f0       	breq	.+14     	; 0x3bcc <add_key+0xae>
            keyboard_report->keys[empty] = code;
    3bbe:	99 27       	eor	r25, r25
    3bc0:	87 fd       	sbrc	r24, 7
    3bc2:	90 95       	com	r25
    3bc4:	a8 0f       	add	r26, r24
    3bc6:	b9 1f       	adc	r27, r25
    3bc8:	12 96       	adiw	r26, 0x02	; 2
    3bca:	3c 93       	st	X, r19
    3bcc:	08 95       	ret

00003bce <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3bce:	e0 91 0d 01 	lds	r30, 0x010D
    3bd2:	f0 91 0e 01 	lds	r31, 0x010E
    3bd6:	80 91 a2 01 	lds	r24, 0x01A2
    3bda:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3bdc:	e0 91 0d 01 	lds	r30, 0x010D
    3be0:	f0 91 0e 01 	lds	r31, 0x010E
    3be4:	80 81       	ld	r24, Z
    3be6:	90 91 a4 01 	lds	r25, 0x01A4
    3bea:	89 2b       	or	r24, r25
    3bec:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3bee:	90 91 a3 01 	lds	r25, 0x01A3
    3bf2:	99 23       	and	r25, r25
    3bf4:	69 f0       	breq	.+26     	; 0x3c10 <send_keyboard_report+0x42>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3bf6:	e0 91 0d 01 	lds	r30, 0x010D
    3bfa:	f0 91 0e 01 	lds	r31, 0x010E
    3bfe:	80 81       	ld	r24, Z
    3c00:	89 2b       	or	r24, r25
    3c02:	80 83       	st	Z, r24
        if (has_anykey()) {
    3c04:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <has_anykey>
    3c08:	88 23       	and	r24, r24
    3c0a:	11 f0       	breq	.+4      	; 0x3c10 <send_keyboard_report+0x42>
            clear_oneshot_mods();
    3c0c:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <clear_oneshot_mods>
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    3c10:	80 91 0d 01 	lds	r24, 0x010D
    3c14:	90 91 0e 01 	lds	r25, 0x010E
    3c18:	0e 94 3b 12 	call	0x2476	; 0x2476 <host_keyboard_send>
}
    3c1c:	08 95       	ret

00003c1e <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    3c1e:	80 e0       	ldi	r24, 0x00	; 0
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	08 95       	ret

00003c24 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
}
    3c24:	08 95       	ret

00003c26 <keycode_to_action>:



/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    3c26:	28 2f       	mov	r18, r24
    action_t action;
    switch (keycode) {
    3c28:	8d 3b       	cpi	r24, 0xBD	; 189
    3c2a:	50 f4       	brcc	.+20     	; 0x3c40 <keycode_to_action+0x1a>
    3c2c:	88 3a       	cpi	r24, 0xA8	; 168
    3c2e:	28 f5       	brcc	.+74     	; 0x3c7a <keycode_to_action+0x54>
    3c30:	85 3a       	cpi	r24, 0xA5	; 165
    3c32:	b0 f4       	brcc	.+44     	; 0x3c60 <keycode_to_action+0x3a>
    3c34:	84 30       	cpi	r24, 0x04	; 4
    3c36:	80 f4       	brcc	.+32     	; 0x3c58 <keycode_to_action+0x32>
    3c38:	81 30       	cpi	r24, 0x01	; 1
    3c3a:	09 f0       	breq	.+2      	; 0x3c3e <keycode_to_action+0x18>
    3c3c:	9e c0       	rjmp	.+316    	; 0x3d7a <keycode_to_action+0x154>
    3c3e:	8c c0       	rjmp	.+280    	; 0x3d58 <keycode_to_action+0x132>
    3c40:	88 3e       	cpi	r24, 0xE8	; 232
    3c42:	30 f4       	brcc	.+12     	; 0x3c50 <keycode_to_action+0x2a>
    3c44:	80 3e       	cpi	r24, 0xE0	; 224
    3c46:	40 f4       	brcc	.+16     	; 0x3c58 <keycode_to_action+0x32>
    3c48:	8f 3b       	cpi	r24, 0xBF	; 191
    3c4a:	09 f0       	breq	.+2      	; 0x3c4e <keycode_to_action+0x28>
    3c4c:	96 c0       	rjmp	.+300    	; 0x3d7a <keycode_to_action+0x154>
    3c4e:	87 c0       	rjmp	.+270    	; 0x3d5e <keycode_to_action+0x138>
    3c50:	80 3f       	cpi	r24, 0xF0	; 240
    3c52:	08 f4       	brcc	.+2      	; 0x3c56 <keycode_to_action+0x30>
    3c54:	92 c0       	rjmp	.+292    	; 0x3d7a <keycode_to_action+0x154>
    3c56:	7d c0       	rjmp	.+250    	; 0x3d52 <keycode_to_action+0x12c>
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    3c58:	82 2f       	mov	r24, r18
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	9c 01       	movw	r18, r24
    3c5e:	8f c0       	rjmp	.+286    	; 0x3d7e <keycode_to_action+0x158>
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3c60:	85 3a       	cpi	r24, 0xA5	; 165
    3c62:	19 f4       	brne	.+6      	; 0x3c6a <keycode_to_action+0x44>
    3c64:	21 e8       	ldi	r18, 0x81	; 129
    3c66:	30 e4       	ldi	r19, 0x40	; 64
    3c68:	8a c0       	rjmp	.+276    	; 0x3d7e <keycode_to_action+0x158>
    3c6a:	86 3a       	cpi	r24, 0xA6	; 166
    3c6c:	19 f0       	breq	.+6      	; 0x3c74 <keycode_to_action+0x4e>
    3c6e:	23 e8       	ldi	r18, 0x83	; 131
    3c70:	30 e4       	ldi	r19, 0x40	; 64
    3c72:	85 c0       	rjmp	.+266    	; 0x3d7e <keycode_to_action+0x158>
    3c74:	22 e8       	ldi	r18, 0x82	; 130
    3c76:	30 e4       	ldi	r19, 0x40	; 64
    3c78:	82 c0       	rjmp	.+260    	; 0x3d7e <keycode_to_action+0x158>
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3c7a:	88 3a       	cpi	r24, 0xA8	; 168
    3c7c:	19 f4       	brne	.+6      	; 0x3c84 <keycode_to_action+0x5e>
    3c7e:	22 ee       	ldi	r18, 0xE2	; 226
    3c80:	34 e4       	ldi	r19, 0x44	; 68
    3c82:	7d c0       	rjmp	.+250    	; 0x3d7e <keycode_to_action+0x158>
    3c84:	89 3a       	cpi	r24, 0xA9	; 169
    3c86:	19 f4       	brne	.+6      	; 0x3c8e <keycode_to_action+0x68>
    3c88:	29 ee       	ldi	r18, 0xE9	; 233
    3c8a:	34 e4       	ldi	r19, 0x44	; 68
    3c8c:	78 c0       	rjmp	.+240    	; 0x3d7e <keycode_to_action+0x158>
    3c8e:	8a 3a       	cpi	r24, 0xAA	; 170
    3c90:	19 f4       	brne	.+6      	; 0x3c98 <keycode_to_action+0x72>
    3c92:	2a ee       	ldi	r18, 0xEA	; 234
    3c94:	34 e4       	ldi	r19, 0x44	; 68
    3c96:	73 c0       	rjmp	.+230    	; 0x3d7e <keycode_to_action+0x158>
    3c98:	8b 3a       	cpi	r24, 0xAB	; 171
    3c9a:	19 f4       	brne	.+6      	; 0x3ca2 <keycode_to_action+0x7c>
    3c9c:	25 eb       	ldi	r18, 0xB5	; 181
    3c9e:	34 e4       	ldi	r19, 0x44	; 68
    3ca0:	6e c0       	rjmp	.+220    	; 0x3d7e <keycode_to_action+0x158>
    3ca2:	8c 3a       	cpi	r24, 0xAC	; 172
    3ca4:	19 f4       	brne	.+6      	; 0x3cac <keycode_to_action+0x86>
    3ca6:	26 eb       	ldi	r18, 0xB6	; 182
    3ca8:	34 e4       	ldi	r19, 0x44	; 68
    3caa:	69 c0       	rjmp	.+210    	; 0x3d7e <keycode_to_action+0x158>
    3cac:	8b 3b       	cpi	r24, 0xBB	; 187
    3cae:	19 f4       	brne	.+6      	; 0x3cb6 <keycode_to_action+0x90>
    3cb0:	23 eb       	ldi	r18, 0xB3	; 179
    3cb2:	34 e4       	ldi	r19, 0x44	; 68
    3cb4:	64 c0       	rjmp	.+200    	; 0x3d7e <keycode_to_action+0x158>
    3cb6:	8c 3b       	cpi	r24, 0xBC	; 188
    3cb8:	19 f4       	brne	.+6      	; 0x3cc0 <keycode_to_action+0x9a>
    3cba:	24 eb       	ldi	r18, 0xB4	; 180
    3cbc:	34 e4       	ldi	r19, 0x44	; 68
    3cbe:	5f c0       	rjmp	.+190    	; 0x3d7e <keycode_to_action+0x158>
    3cc0:	8d 3a       	cpi	r24, 0xAD	; 173
    3cc2:	19 f4       	brne	.+6      	; 0x3cca <keycode_to_action+0xa4>
    3cc4:	27 eb       	ldi	r18, 0xB7	; 183
    3cc6:	34 e4       	ldi	r19, 0x44	; 68
    3cc8:	5a c0       	rjmp	.+180    	; 0x3d7e <keycode_to_action+0x158>
    3cca:	80 3b       	cpi	r24, 0xB0	; 176
    3ccc:	19 f4       	brne	.+6      	; 0x3cd4 <keycode_to_action+0xae>
    3cce:	2c ec       	ldi	r18, 0xCC	; 204
    3cd0:	34 e4       	ldi	r19, 0x44	; 68
    3cd2:	55 c0       	rjmp	.+170    	; 0x3d7e <keycode_to_action+0x158>
    3cd4:	8e 3a       	cpi	r24, 0xAE	; 174
    3cd6:	19 f4       	brne	.+6      	; 0x3cde <keycode_to_action+0xb8>
    3cd8:	2d ec       	ldi	r18, 0xCD	; 205
    3cda:	34 e4       	ldi	r19, 0x44	; 68
    3cdc:	50 c0       	rjmp	.+160    	; 0x3d7e <keycode_to_action+0x158>
    3cde:	8f 3a       	cpi	r24, 0xAF	; 175
    3ce0:	19 f4       	brne	.+6      	; 0x3ce8 <keycode_to_action+0xc2>
    3ce2:	23 e8       	ldi	r18, 0x83	; 131
    3ce4:	35 e4       	ldi	r19, 0x45	; 69
    3ce6:	4b c0       	rjmp	.+150    	; 0x3d7e <keycode_to_action+0x158>
    3ce8:	81 3b       	cpi	r24, 0xB1	; 177
    3cea:	19 f4       	brne	.+6      	; 0x3cf2 <keycode_to_action+0xcc>
    3cec:	2a e8       	ldi	r18, 0x8A	; 138
    3cee:	35 e4       	ldi	r19, 0x45	; 69
    3cf0:	46 c0       	rjmp	.+140    	; 0x3d7e <keycode_to_action+0x158>
    3cf2:	82 3b       	cpi	r24, 0xB2	; 178
    3cf4:	19 f4       	brne	.+6      	; 0x3cfc <keycode_to_action+0xd6>
    3cf6:	22 e9       	ldi	r18, 0x92	; 146
    3cf8:	35 e4       	ldi	r19, 0x45	; 69
    3cfa:	41 c0       	rjmp	.+130    	; 0x3d7e <keycode_to_action+0x158>
    3cfc:	83 3b       	cpi	r24, 0xB3	; 179
    3cfe:	19 f4       	brne	.+6      	; 0x3d06 <keycode_to_action+0xe0>
    3d00:	24 e9       	ldi	r18, 0x94	; 148
    3d02:	35 e4       	ldi	r19, 0x45	; 69
    3d04:	3c c0       	rjmp	.+120    	; 0x3d7e <keycode_to_action+0x158>
    3d06:	84 3b       	cpi	r24, 0xB4	; 180
    3d08:	19 f4       	brne	.+6      	; 0x3d10 <keycode_to_action+0xea>
    3d0a:	21 e2       	ldi	r18, 0x21	; 33
    3d0c:	36 e4       	ldi	r19, 0x46	; 70
    3d0e:	37 c0       	rjmp	.+110    	; 0x3d7e <keycode_to_action+0x158>
    3d10:	85 3b       	cpi	r24, 0xB5	; 181
    3d12:	19 f4       	brne	.+6      	; 0x3d1a <keycode_to_action+0xf4>
    3d14:	23 e2       	ldi	r18, 0x23	; 35
    3d16:	36 e4       	ldi	r19, 0x46	; 70
    3d18:	32 c0       	rjmp	.+100    	; 0x3d7e <keycode_to_action+0x158>
    3d1a:	86 3b       	cpi	r24, 0xB6	; 182
    3d1c:	19 f4       	brne	.+6      	; 0x3d24 <keycode_to_action+0xfe>
    3d1e:	24 e2       	ldi	r18, 0x24	; 36
    3d20:	36 e4       	ldi	r19, 0x46	; 70
    3d22:	2d c0       	rjmp	.+90     	; 0x3d7e <keycode_to_action+0x158>
    3d24:	87 3b       	cpi	r24, 0xB7	; 183
    3d26:	19 f4       	brne	.+6      	; 0x3d2e <keycode_to_action+0x108>
    3d28:	25 e2       	ldi	r18, 0x25	; 37
    3d2a:	36 e4       	ldi	r19, 0x46	; 70
    3d2c:	28 c0       	rjmp	.+80     	; 0x3d7e <keycode_to_action+0x158>
    3d2e:	88 3b       	cpi	r24, 0xB8	; 184
    3d30:	19 f4       	brne	.+6      	; 0x3d38 <keycode_to_action+0x112>
    3d32:	26 e2       	ldi	r18, 0x26	; 38
    3d34:	36 e4       	ldi	r19, 0x46	; 70
    3d36:	23 c0       	rjmp	.+70     	; 0x3d7e <keycode_to_action+0x158>
    3d38:	89 3b       	cpi	r24, 0xB9	; 185
    3d3a:	19 f4       	brne	.+6      	; 0x3d42 <keycode_to_action+0x11c>
    3d3c:	27 e2       	ldi	r18, 0x27	; 39
    3d3e:	36 e4       	ldi	r19, 0x46	; 70
    3d40:	1e c0       	rjmp	.+60     	; 0x3d7e <keycode_to_action+0x158>
    3d42:	8a 3b       	cpi	r24, 0xBA	; 186
    3d44:	19 f0       	breq	.+6      	; 0x3d4c <keycode_to_action+0x126>
    3d46:	20 e0       	ldi	r18, 0x00	; 0
    3d48:	34 e4       	ldi	r19, 0x44	; 68
    3d4a:	19 c0       	rjmp	.+50     	; 0x3d7e <keycode_to_action+0x158>
    3d4c:	2a e2       	ldi	r18, 0x2A	; 42
    3d4e:	36 e4       	ldi	r19, 0x46	; 70
    3d50:	16 c0       	rjmp	.+44     	; 0x3d7e <keycode_to_action+0x158>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	30 65       	ori	r19, 0x50	; 80
    3d56:	13 c0       	rjmp	.+38     	; 0x3d7e <keycode_to_action+0x158>
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    3d58:	21 e0       	ldi	r18, 0x01	; 1
    3d5a:	30 e0       	ldi	r19, 0x00	; 0
    3d5c:	10 c0       	rjmp	.+32     	; 0x3d7e <keycode_to_action+0x158>
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    3d5e:	0e 94 d6 13 	call	0x27ac	; 0x27ac <clear_keyboard>
    3d62:	84 ef       	ldi	r24, 0xF4	; 244
    3d64:	91 e0       	ldi	r25, 0x01	; 1
    3d66:	20 e9       	ldi	r18, 0x90	; 144
    3d68:	31 e0       	ldi	r19, 0x01	; 1
    3d6a:	f9 01       	movw	r30, r18
    3d6c:	31 97       	sbiw	r30, 0x01	; 1
    3d6e:	f1 f7       	brne	.-4      	; 0x3d6c <keycode_to_action+0x146>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d70:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d72:	d9 f7       	brne	.-10     	; 0x3d6a <keycode_to_action+0x144>
            wait_ms(50);
            bootloader_jump(); // not return
    3d74:	0e 94 45 20 	call	0x408a	; 0x408a <bootloader_jump>
    3d78:	02 c0       	rjmp	.+4      	; 0x3d7e <keycode_to_action+0x158>
            break;
        default:
            action.code = ACTION_NO;
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
            break;
    }
    return action;
}
    3d7e:	c9 01       	movw	r24, r18
    3d80:	08 95       	ret

00003d82 <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3d82:	0e 94 9b 07 	call	0xf36	; 0xf36 <keymap_key_to_keycode>
    switch (keycode) {
    3d86:	80 3e       	cpi	r24, 0xE0	; 224
    3d88:	b0 f4       	brcc	.+44     	; 0x3db6 <action_for_key+0x34>
    3d8a:	80 3c       	cpi	r24, 0xC0	; 192
    3d8c:	20 f5       	brcc	.+72     	; 0x3dd6 <action_for_key+0x54>
    3d8e:	81 33       	cpi	r24, 0x31	; 49
    3d90:	09 f4       	brne	.+2      	; 0x3d94 <action_for_key+0x12>
    3d92:	60 c0       	rjmp	.+192    	; 0x3e54 <action_for_key+0xd2>
    3d94:	82 33       	cpi	r24, 0x32	; 50
    3d96:	38 f4       	brcc	.+14     	; 0x3da6 <action_for_key+0x24>
    3d98:	89 32       	cpi	r24, 0x29	; 41
    3d9a:	09 f4       	brne	.+2      	; 0x3d9e <action_for_key+0x1c>
    3d9c:	53 c0       	rjmp	.+166    	; 0x3e44 <action_for_key+0xc2>
    3d9e:	8a 32       	cpi	r24, 0x2A	; 42
    3da0:	09 f0       	breq	.+2      	; 0x3da4 <action_for_key+0x22>
    3da2:	67 c0       	rjmp	.+206    	; 0x3e72 <action_for_key+0xf0>
    3da4:	5c c0       	rjmp	.+184    	; 0x3e5e <action_for_key+0xdc>
    3da6:	89 33       	cpi	r24, 0x39	; 57
    3da8:	c9 f0       	breq	.+50     	; 0x3ddc <action_for_key+0x5a>
    3daa:	82 38       	cpi	r24, 0x82	; 130
    3dac:	b9 f0       	breq	.+46     	; 0x3ddc <action_for_key+0x5a>
    3dae:	85 33       	cpi	r24, 0x35	; 53
    3db0:	09 f0       	breq	.+2      	; 0x3db4 <action_for_key+0x32>
    3db2:	5f c0       	rjmp	.+190    	; 0x3e72 <action_for_key+0xf0>
    3db4:	42 c0       	rjmp	.+132    	; 0x3e3a <action_for_key+0xb8>
    3db6:	83 3e       	cpi	r24, 0xE3	; 227
    3db8:	29 f1       	breq	.+74     	; 0x3e04 <action_for_key+0x82>
    3dba:	84 3e       	cpi	r24, 0xE4	; 228
    3dbc:	30 f4       	brcc	.+12     	; 0x3dca <action_for_key+0x48>
    3dbe:	80 3e       	cpi	r24, 0xE0	; 224
    3dc0:	a1 f0       	breq	.+40     	; 0x3dea <action_for_key+0x68>
    3dc2:	82 3e       	cpi	r24, 0xE2	; 226
    3dc4:	09 f0       	breq	.+2      	; 0x3dc8 <action_for_key+0x46>
    3dc6:	55 c0       	rjmp	.+170    	; 0x3e72 <action_for_key+0xf0>
    3dc8:	18 c0       	rjmp	.+48     	; 0x3dfa <action_for_key+0x78>
    3dca:	86 3e       	cpi	r24, 0xE6	; 230
    3dcc:	29 f1       	breq	.+74     	; 0x3e18 <action_for_key+0x96>
    3dce:	87 3e       	cpi	r24, 0xE7	; 231
    3dd0:	09 f0       	breq	.+2      	; 0x3dd4 <action_for_key+0x52>
    3dd2:	4f c0       	rjmp	.+158    	; 0x3e72 <action_for_key+0xf0>
    3dd4:	26 c0       	rjmp	.+76     	; 0x3e22 <action_for_key+0xa0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3dd6:	0e 94 ac 07 	call	0xf58	; 0xf58 <keymap_fn_to_action>
    3dda:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3ddc:	90 91 b6 01 	lds	r25, 0x01B6
    3de0:	90 fd       	sbrc	r25, 0
    3de2:	09 c0       	rjmp	.+18     	; 0x3df6 <action_for_key+0x74>
    3de4:	91 fd       	sbrc	r25, 1
    3de6:	07 c0       	rjmp	.+14     	; 0x3df6 <action_for_key+0x74>
    3de8:	41 c0       	rjmp	.+130    	; 0x3e6c <action_for_key+0xea>
                return keycode_to_action(KC_LCTL);
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3dea:	80 91 b6 01 	lds	r24, 0x01B6
    3dee:	80 ff       	sbrs	r24, 0
    3df0:	02 c0       	rjmp	.+4      	; 0x3df6 <action_for_key+0x74>
                return keycode_to_action(KC_CAPSLOCK);
    3df2:	89 e3       	ldi	r24, 0x39	; 57
    3df4:	3b c0       	rjmp	.+118    	; 0x3e6c <action_for_key+0xea>
            }
            return keycode_to_action(KC_LCTL);
    3df6:	80 ee       	ldi	r24, 0xE0	; 224
    3df8:	39 c0       	rjmp	.+114    	; 0x3e6c <action_for_key+0xea>
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3dfa:	80 91 b6 01 	lds	r24, 0x01B6
    3dfe:	82 fd       	sbrc	r24, 2
    3e00:	07 c0       	rjmp	.+14     	; 0x3e10 <action_for_key+0x8e>
    3e02:	04 c0       	rjmp	.+8      	; 0x3e0c <action_for_key+0x8a>
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3e04:	80 91 b6 01 	lds	r24, 0x01B6
    3e08:	82 ff       	sbrs	r24, 2
    3e0a:	02 c0       	rjmp	.+4      	; 0x3e10 <action_for_key+0x8e>
                return keycode_to_action(KC_LALT);
    3e0c:	82 ee       	ldi	r24, 0xE2	; 226
    3e0e:	2e c0       	rjmp	.+92     	; 0x3e6c <action_for_key+0xea>
            }
            if (keymap_config.no_gui) {
    3e10:	84 fd       	sbrc	r24, 4
    3e12:	0f c0       	rjmp	.+30     	; 0x3e32 <action_for_key+0xb0>
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
    3e14:	83 ee       	ldi	r24, 0xE3	; 227
    3e16:	2a c0       	rjmp	.+84     	; 0x3e6c <action_for_key+0xea>
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3e18:	80 91 b6 01 	lds	r24, 0x01B6
    3e1c:	83 fd       	sbrc	r24, 3
    3e1e:	07 c0       	rjmp	.+14     	; 0x3e2e <action_for_key+0xac>
    3e20:	04 c0       	rjmp	.+8      	; 0x3e2a <action_for_key+0xa8>
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3e22:	80 91 b6 01 	lds	r24, 0x01B6
    3e26:	83 ff       	sbrs	r24, 3
    3e28:	02 c0       	rjmp	.+4      	; 0x3e2e <action_for_key+0xac>
                return keycode_to_action(KC_RALT);
    3e2a:	86 ee       	ldi	r24, 0xE6	; 230
    3e2c:	1f c0       	rjmp	.+62     	; 0x3e6c <action_for_key+0xea>
            }
            if (keymap_config.no_gui) {
    3e2e:	84 ff       	sbrs	r24, 4
    3e30:	02 c0       	rjmp	.+4      	; 0x3e36 <action_for_key+0xb4>
                return keycode_to_action(ACTION_NO);
    3e32:	80 e0       	ldi	r24, 0x00	; 0
    3e34:	1b c0       	rjmp	.+54     	; 0x3e6c <action_for_key+0xea>
            }
            return keycode_to_action(KC_RGUI);
    3e36:	87 ee       	ldi	r24, 0xE7	; 231
    3e38:	19 c0       	rjmp	.+50     	; 0x3e6c <action_for_key+0xea>
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3e3a:	80 91 b6 01 	lds	r24, 0x01B6
    3e3e:	85 ff       	sbrs	r24, 5
    3e40:	05 c0       	rjmp	.+10     	; 0x3e4c <action_for_key+0xca>
    3e42:	06 c0       	rjmp	.+12     	; 0x3e50 <action_for_key+0xce>
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3e44:	80 91 b6 01 	lds	r24, 0x01B6
    3e48:	85 ff       	sbrs	r24, 5
    3e4a:	02 c0       	rjmp	.+4      	; 0x3e50 <action_for_key+0xce>
                return keycode_to_action(KC_GRAVE);
    3e4c:	85 e3       	ldi	r24, 0x35	; 53
    3e4e:	0e c0       	rjmp	.+28     	; 0x3e6c <action_for_key+0xea>
            }
            return keycode_to_action(KC_ESC);
    3e50:	89 e2       	ldi	r24, 0x29	; 41
    3e52:	0c c0       	rjmp	.+24     	; 0x3e6c <action_for_key+0xea>
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3e54:	80 91 b6 01 	lds	r24, 0x01B6
    3e58:	86 ff       	sbrs	r24, 6
    3e5a:	05 c0       	rjmp	.+10     	; 0x3e66 <action_for_key+0xe4>
    3e5c:	06 c0       	rjmp	.+12     	; 0x3e6a <action_for_key+0xe8>
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3e5e:	80 91 b6 01 	lds	r24, 0x01B6
    3e62:	86 ff       	sbrs	r24, 6
    3e64:	02 c0       	rjmp	.+4      	; 0x3e6a <action_for_key+0xe8>
                return keycode_to_action(KC_BSLASH);
    3e66:	81 e3       	ldi	r24, 0x31	; 49
    3e68:	01 c0       	rjmp	.+2      	; 0x3e6c <action_for_key+0xea>
            }
            return keycode_to_action(KC_BSPACE);
    3e6a:	8a e2       	ldi	r24, 0x2A	; 42
    3e6c:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <keycode_to_action>
    3e70:	08 95       	ret
#endif
        default:
            return keycode_to_action(keycode);
    3e72:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <keycode_to_action>
    }
}
    3e76:	08 95       	ret

00003e78 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3e78:	90 93 17 01 	sts	0x0117, r25
    3e7c:	80 93 16 01 	sts	0x0116, r24
}
    3e80:	08 95       	ret

00003e82 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3e82:	28 2f       	mov	r18, r24
    3e84:	22 95       	swap	r18
    3e86:	2f 70       	andi	r18, 0x0F	; 15
    3e88:	82 95       	swap	r24
    3e8a:	80 7f       	andi	r24, 0xF0	; 240
    3e8c:	28 2b       	or	r18, r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	c9 01       	movw	r24, r18
    3e92:	8c 7c       	andi	r24, 0xCC	; 204
    3e94:	90 70       	andi	r25, 0x00	; 0
    3e96:	95 95       	asr	r25
    3e98:	87 95       	ror	r24
    3e9a:	95 95       	asr	r25
    3e9c:	87 95       	ror	r24
    3e9e:	23 73       	andi	r18, 0x33	; 51
    3ea0:	30 70       	andi	r19, 0x00	; 0
    3ea2:	22 0f       	add	r18, r18
    3ea4:	33 1f       	adc	r19, r19
    3ea6:	22 0f       	add	r18, r18
    3ea8:	33 1f       	adc	r19, r19
    3eaa:	82 2b       	or	r24, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3eac:	28 2f       	mov	r18, r24
    3eae:	30 e0       	ldi	r19, 0x00	; 0
    3eb0:	c9 01       	movw	r24, r18
    3eb2:	8a 7a       	andi	r24, 0xAA	; 170
    3eb4:	90 70       	andi	r25, 0x00	; 0
    3eb6:	95 95       	asr	r25
    3eb8:	87 95       	ror	r24
    3eba:	25 75       	andi	r18, 0x55	; 85
    3ebc:	30 70       	andi	r19, 0x00	; 0
    3ebe:	22 0f       	add	r18, r18
    3ec0:	33 1f       	adc	r19, r19
    return bits;
}
    3ec2:	82 2b       	or	r24, r18
    3ec4:	08 95       	ret

00003ec6 <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3ec6:	0f 93       	push	r16
    3ec8:	1f 93       	push	r17
    3eca:	19 2f       	mov	r17, r25
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3ecc:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bitrev>
    3ed0:	08 2f       	mov	r16, r24
    3ed2:	81 2f       	mov	r24, r17
    3ed4:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <bitrev>
    3ed8:	50 2f       	mov	r21, r16
    3eda:	40 e0       	ldi	r20, 0x00	; 0
    3edc:	28 2f       	mov	r18, r24
    3ede:	30 e0       	ldi	r19, 0x00	; 0
    3ee0:	24 2b       	or	r18, r20
    3ee2:	35 2b       	or	r19, r21
    return bits;
}
    3ee4:	c9 01       	movw	r24, r18
    3ee6:	1f 91       	pop	r17
    3ee8:	0f 91       	pop	r16
    3eea:	08 95       	ret

00003eec <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3eec:	80 91 bb 01 	lds	r24, 0x01BB
    3ef0:	84 30       	cpi	r24, 0x04	; 4
    3ef2:	09 f1       	breq	.+66     	; 0x3f36 <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    3ef4:	10 92 a6 01 	sts	0x01A6, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3ef8:	20 e4       	ldi	r18, 0x40	; 64
    3efa:	88 e1       	ldi	r24, 0x18	; 24
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	0f b6       	in	r0, 0x3f	; 63
    3f00:	f8 94       	cli
    3f02:	a8 95       	wdr
    3f04:	80 93 60 00 	sts	0x0060, r24
    3f08:	0f be       	out	0x3f, r0	; 63
    3f0a:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3f0e:	83 b7       	in	r24, 0x33	; 51
    3f10:	81 7f       	andi	r24, 0xF1	; 241
    3f12:	84 60       	ori	r24, 0x04	; 4
    3f14:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3f16:	83 b7       	in	r24, 0x33	; 51
    3f18:	81 60       	ori	r24, 0x01	; 1
    3f1a:	83 bf       	out	0x33, r24	; 51
    sei();
    3f1c:	78 94       	sei
    sleep_cpu();
    3f1e:	88 95       	sleep
    sleep_disable();
    3f20:	83 b7       	in	r24, 0x33	; 51
    3f22:	8e 7f       	andi	r24, 0xFE	; 254
    3f24:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    3f26:	88 e1       	ldi	r24, 0x18	; 24
    3f28:	0f b6       	in	r0, 0x3f	; 63
    3f2a:	f8 94       	cli
    3f2c:	80 93 60 00 	sts	0x0060, r24
    3f30:	10 92 60 00 	sts	0x0060, r1
    3f34:	0f be       	out	0x3f, r0	; 63
    3f36:	08 95       	ret

00003f38 <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    3f38:	08 95       	ret

00003f3a <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    3f3a:	08 95       	ret

00003f3c <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3f3c:	1f 92       	push	r1
    3f3e:	0f 92       	push	r0
    3f40:	0f b6       	in	r0, 0x3f	; 63
    3f42:	0f 92       	push	r0
    3f44:	11 24       	eor	r1, r1
    3f46:	8f 93       	push	r24
    3f48:	9f 93       	push	r25
    3f4a:	af 93       	push	r26
    3f4c:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3f4e:	80 91 a6 01 	lds	r24, 0x01A6
    3f52:	88 23       	and	r24, r24
    3f54:	99 f4       	brne	.+38     	; 0x3f7c <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3f56:	80 91 a7 01 	lds	r24, 0x01A7
    3f5a:	90 91 a8 01 	lds	r25, 0x01A8
    3f5e:	a0 91 a9 01 	lds	r26, 0x01A9
    3f62:	b0 91 aa 01 	lds	r27, 0x01AA
    3f66:	41 96       	adiw	r24, 0x11	; 17
    3f68:	a1 1d       	adc	r26, r1
    3f6a:	b1 1d       	adc	r27, r1
    3f6c:	80 93 a7 01 	sts	0x01A7, r24
    3f70:	90 93 a8 01 	sts	0x01A8, r25
    3f74:	a0 93 a9 01 	sts	0x01A9, r26
    3f78:	b0 93 aa 01 	sts	0x01AA, r27
            break;
        default:
            ;
    }
}
    3f7c:	bf 91       	pop	r27
    3f7e:	af 91       	pop	r26
    3f80:	9f 91       	pop	r25
    3f82:	8f 91       	pop	r24
    3f84:	0f 90       	pop	r0
    3f86:	0f be       	out	0x3f, r0	; 63
    3f88:	0f 90       	pop	r0
    3f8a:	1f 90       	pop	r1
    3f8c:	18 95       	reti

00003f8e <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3f8e:	0e 94 d6 13 	call	0x27ac	; 0x27ac <clear_keyboard>
#ifdef BACKLIGHT_ENABLE
    backlight_init();
#endif
}
    3f92:	08 95       	ret

00003f94 <suspend_wakeup_condition>:
}

__attribute__ ((weak)) void matrix_power_up(void) {}
__attribute__ ((weak)) void matrix_power_down(void) {}
bool suspend_wakeup_condition(void)
{
    3f94:	1f 93       	push	r17
    matrix_power_up();
    3f96:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <matrix_power_up>
    matrix_scan();
    3f9a:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <matrix_scan>
    matrix_power_down();
    3f9e:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <matrix_power_down>
    3fa2:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3fa4:	81 2f       	mov	r24, r17
    3fa6:	0e 94 b6 07 	call	0xf6c	; 0xf6c <matrix_get_row>
    3faa:	89 2b       	or	r24, r25
    3fac:	11 f0       	breq	.+4      	; 0x3fb2 <suspend_wakeup_condition+0x1e>
    3fae:	81 e0       	ldi	r24, 0x01	; 1
    3fb0:	04 c0       	rjmp	.+8      	; 0x3fba <suspend_wakeup_condition+0x26>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3fb2:	1f 5f       	subi	r17, 0xFF	; 255
    3fb4:	15 30       	cpi	r17, 0x05	; 5
    3fb6:	b1 f7       	brne	.-20     	; 0x3fa4 <suspend_wakeup_condition+0x10>
    3fb8:	80 e0       	ldi	r24, 0x00	; 0
        if (matrix_get_row(r)) return true;
    }
    return false;
}
    3fba:	1f 91       	pop	r17
    3fbc:	08 95       	ret

00003fbe <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3fbe:	82 e0       	ldi	r24, 0x02	; 2
    3fc0:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3fc2:	93 e0       	ldi	r25, 0x03	; 3
    3fc4:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3fc6:	9a ef       	ldi	r25, 0xFA	; 250
    3fc8:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    3fca:	80 93 6e 00 	sts	0x006E, r24
}
    3fce:	08 95       	ret

00003fd0 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3fd0:	8f b7       	in	r24, 0x3f	; 63
    cli();
    3fd2:	f8 94       	cli
    t = timer_count;
    3fd4:	20 91 a7 01 	lds	r18, 0x01A7
    3fd8:	30 91 a8 01 	lds	r19, 0x01A8
    3fdc:	40 91 a9 01 	lds	r20, 0x01A9
    3fe0:	50 91 aa 01 	lds	r21, 0x01AA
    SREG = sreg;
    3fe4:	8f bf       	out	0x3f, r24	; 63

    return (t & 0xFFFF);
}
    3fe6:	c9 01       	movw	r24, r18
    3fe8:	08 95       	ret

00003fea <timer_elapsed>:
    return t;
}

inline
uint16_t timer_elapsed(uint16_t last)
{
    3fea:	ef 92       	push	r14
    3fec:	ff 92       	push	r15
    3fee:	0f 93       	push	r16
    3ff0:	1f 93       	push	r17
    3ff2:	bc 01       	movw	r22, r24
    uint32_t t;

    uint8_t sreg = SREG;
    3ff4:	8f b7       	in	r24, 0x3f	; 63
    cli();
    3ff6:	f8 94       	cli
    t = timer_count;
    3ff8:	e0 90 a7 01 	lds	r14, 0x01A7
    3ffc:	f0 90 a8 01 	lds	r15, 0x01A8
    4000:	00 91 a9 01 	lds	r16, 0x01A9
    4004:	10 91 aa 01 	lds	r17, 0x01AA
    SREG = sreg;
    4008:	8f bf       	out	0x3f, r24	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    400a:	a8 01       	movw	r20, r16
    400c:	97 01       	movw	r18, r14
    400e:	40 70       	andi	r20, 0x00	; 0
    4010:	50 70       	andi	r21, 0x00	; 0
    4012:	cb 01       	movw	r24, r22
    4014:	a0 e0       	ldi	r26, 0x00	; 0
    4016:	b0 e0       	ldi	r27, 0x00	; 0
    4018:	28 17       	cp	r18, r24
    401a:	39 07       	cpc	r19, r25
    401c:	4a 07       	cpc	r20, r26
    401e:	5b 07       	cpc	r21, r27
    4020:	20 f0       	brcs	.+8      	; 0x402a <timer_elapsed+0x40>
    4022:	97 01       	movw	r18, r14
    4024:	26 1b       	sub	r18, r22
    4026:	37 0b       	sbc	r19, r23
    4028:	05 c0       	rjmp	.+10     	; 0x4034 <timer_elapsed+0x4a>
    402a:	9b 01       	movw	r18, r22
    402c:	20 95       	com	r18
    402e:	30 95       	com	r19
    4030:	2e 0d       	add	r18, r14
    4032:	3f 1d       	adc	r19, r15
}
    4034:	c9 01       	movw	r24, r18
    4036:	1f 91       	pop	r17
    4038:	0f 91       	pop	r16
    403a:	ff 90       	pop	r15
    403c:	ef 90       	pop	r14
    403e:	08 95       	ret

00004040 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    4040:	1f 92       	push	r1
    4042:	0f 92       	push	r0
    4044:	0f b6       	in	r0, 0x3f	; 63
    4046:	0f 92       	push	r0
    4048:	11 24       	eor	r1, r1
    404a:	8f 93       	push	r24
    404c:	9f 93       	push	r25
    404e:	af 93       	push	r26
    4050:	bf 93       	push	r27
    timer_count++;
    4052:	80 91 a7 01 	lds	r24, 0x01A7
    4056:	90 91 a8 01 	lds	r25, 0x01A8
    405a:	a0 91 a9 01 	lds	r26, 0x01A9
    405e:	b0 91 aa 01 	lds	r27, 0x01AA
    4062:	01 96       	adiw	r24, 0x01	; 1
    4064:	a1 1d       	adc	r26, r1
    4066:	b1 1d       	adc	r27, r1
    4068:	80 93 a7 01 	sts	0x01A7, r24
    406c:	90 93 a8 01 	sts	0x01A8, r25
    4070:	a0 93 a9 01 	sts	0x01A9, r26
    4074:	b0 93 aa 01 	sts	0x01AA, r27
}
    4078:	bf 91       	pop	r27
    407a:	af 91       	pop	r26
    407c:	9f 91       	pop	r25
    407e:	8f 91       	pop	r24
    4080:	0f 90       	pop	r0
    4082:	0f be       	out	0x3f, r0	; 63
    4084:	0f 90       	pop	r0
    4086:	1f 90       	pop	r1
    4088:	18 95       	reti

0000408a <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    408a:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <USB_Disable>
    cli();
    408e:	f8 94       	cli
    4090:	80 e2       	ldi	r24, 0x20	; 32
    4092:	9e e4       	ldi	r25, 0x4E	; 78
    4094:	20 e9       	ldi	r18, 0x90	; 144
    4096:	31 e0       	ldi	r19, 0x01	; 1
    4098:	f9 01       	movw	r30, r18
    409a:	31 97       	sbiw	r30, 0x01	; 1
    409c:	f1 f7       	brne	.-4      	; 0x409a <bootloader_jump+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    409e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40a0:	d9 f7       	brne	.-10     	; 0x4098 <bootloader_jump+0xe>
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    40a2:	87 e0       	ldi	r24, 0x07	; 7
    40a4:	90 eb       	ldi	r25, 0xB0	; 176
    40a6:	a7 e0       	ldi	r26, 0x07	; 7
    40a8:	b0 eb       	ldi	r27, 0xB0	; 176
    40aa:	80 93 c4 01 	sts	0x01C4, r24
    40ae:	90 93 c5 01 	sts	0x01C5, r25
    40b2:	a0 93 c6 01 	sts	0x01C6, r26
    40b6:	b0 93 c7 01 	sts	0x01C7, r27
    wdt_enable(WDTO_250MS);
    40ba:	2c e0       	ldi	r18, 0x0C	; 12
    40bc:	88 e1       	ldi	r24, 0x18	; 24
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	0f b6       	in	r0, 0x3f	; 63
    40c2:	f8 94       	cli
    40c4:	a8 95       	wdr
    40c6:	80 93 60 00 	sts	0x0060, r24
    40ca:	0f be       	out	0x3f, r0	; 63
    40cc:	20 93 60 00 	sts	0x0060, r18
    40d0:	ff cf       	rjmp	.-2      	; 0x40d0 <bootloader_jump+0x46>

000040d2 <scan_keycode>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_keycode(uint8_t keycode)
{
    40d2:	cf 92       	push	r12
    40d4:	df 92       	push	r13
    40d6:	ef 92       	push	r14
    40d8:	ff 92       	push	r15
    40da:	0f 93       	push	r16
    40dc:	1f 93       	push	r17
    40de:	cf 93       	push	r28
    40e0:	df 93       	push	r29
    40e2:	08 2f       	mov	r16, r24
    40e4:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    40e6:	81 e0       	ldi	r24, 0x01	; 1
    40e8:	c8 2e       	mov	r12, r24
    40ea:	d1 2c       	mov	r13, r1
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
    40ec:	81 2f       	mov	r24, r17
    40ee:	0e 94 b6 07 	call	0xf6c	; 0xf6c <matrix_get_row>
    40f2:	7c 01       	movw	r14, r24
    40f4:	c0 e0       	ldi	r28, 0x00	; 0
    40f6:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    40f8:	c6 01       	movw	r24, r12
    40fa:	0c 2e       	mov	r0, r28
    40fc:	02 c0       	rjmp	.+4      	; 0x4102 <scan_keycode+0x30>
    40fe:	88 0f       	add	r24, r24
    4100:	99 1f       	adc	r25, r25
    4102:	0a 94       	dec	r0
    4104:	e2 f7       	brpl	.-8      	; 0x40fe <scan_keycode+0x2c>
    4106:	8e 21       	and	r24, r14
    4108:	9f 21       	and	r25, r15
    410a:	89 2b       	or	r24, r25
    410c:	49 f0       	breq	.+18     	; 0x4120 <scan_keycode+0x4e>
                if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
    410e:	80 e0       	ldi	r24, 0x00	; 0
    4110:	6c 2f       	mov	r22, r28
    4112:	71 2f       	mov	r23, r17
    4114:	0e 94 9b 07 	call	0xf36	; 0xf36 <keymap_key_to_keycode>
    4118:	08 17       	cp	r16, r24
    411a:	11 f4       	brne	.+4      	; 0x4120 <scan_keycode+0x4e>
    411c:	81 e0       	ldi	r24, 0x01	; 1
    411e:	08 c0       	rjmp	.+16     	; 0x4130 <scan_keycode+0x5e>
    4120:	21 96       	adiw	r28, 0x01	; 1

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    4122:	ce 30       	cpi	r28, 0x0E	; 14
    4124:	d1 05       	cpc	r29, r1
    4126:	41 f7       	brne	.-48     	; 0x40f8 <scan_keycode+0x26>
    }
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4128:	1f 5f       	subi	r17, 0xFF	; 255
    412a:	15 30       	cpi	r17, 0x05	; 5
    412c:	f9 f6       	brne	.-66     	; 0x40ec <scan_keycode+0x1a>
    412e:	80 e0       	ldi	r24, 0x00	; 0
                }
            }
        }
    }
    return false;
}
    4130:	df 91       	pop	r29
    4132:	cf 91       	pop	r28
    4134:	1f 91       	pop	r17
    4136:	0f 91       	pop	r16
    4138:	ff 90       	pop	r15
    413a:	ef 90       	pop	r14
    413c:	df 90       	pop	r13
    413e:	cf 90       	pop	r12
    4140:	08 95       	ret

00004142 <bootmagic_scan_keycode>:

bool bootmagic_scan_keycode(uint8_t keycode)
{
    4142:	1f 93       	push	r17
    4144:	18 2f       	mov	r17, r24
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
    4146:	8c e2       	ldi	r24, 0x2C	; 44
    4148:	0e 94 69 20 	call	0x40d2	; 0x40d2 <scan_keycode>
    414c:	88 23       	and	r24, r24
    414e:	19 f0       	breq	.+6      	; 0x4156 <bootmagic_scan_keycode+0x14>

    return scan_keycode(keycode);
    4150:	81 2f       	mov	r24, r17
    4152:	0e 94 69 20 	call	0x40d2	; 0x40d2 <scan_keycode>
}
    4156:	1f 91       	pop	r17
    4158:	08 95       	ret

0000415a <bootmagic>:
#include "eeconfig.h"
#include "bootmagic.h"


void bootmagic(void)
{
    415a:	1f 93       	push	r17
    415c:	cf 93       	push	r28
    415e:	df 93       	push	r29
    /* check signature */
    if (!eeconfig_is_enabled()) {
    4160:	0e 94 23 22 	call	0x4446	; 0x4446 <eeconfig_is_enabled>
    4164:	88 23       	and	r24, r24
    4166:	11 f4       	brne	.+4      	; 0x416c <bootmagic+0x12>
        eeconfig_init();
    4168:	0e 94 2e 22 	call	0x445c	; 0x445c <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("boogmagic scan: ... ");
    416c:	85 eb       	ldi	r24, 0xB5	; 181
    416e:	95 e0       	ldi	r25, 0x05	; 5
    4170:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    4174:	14 e6       	ldi	r17, 0x64	; 100
    4176:	c0 e4       	ldi	r28, 0x40	; 64
    4178:	dc e9       	ldi	r29, 0x9C	; 156
    417a:	05 c0       	rjmp	.+10     	; 0x4186 <bootmagic+0x2c>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); _delay_ms(10); }
    417c:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <matrix_scan>
    4180:	ce 01       	movw	r24, r28
    4182:	01 97       	sbiw	r24, 0x01	; 1
    4184:	f1 f7       	brne	.-4      	; 0x4182 <bootmagic+0x28>
    4186:	11 50       	subi	r17, 0x01	; 1
    4188:	c8 f7       	brcc	.-14     	; 0x417c <bootmagic+0x22>
    print("done.\n");
    418a:	8e ea       	ldi	r24, 0xAE	; 174
    418c:	95 e0       	ldi	r25, 0x05	; 5
    418e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
    4192:	89 e2       	ldi	r24, 0x29	; 41
    4194:	0e 94 a1 20 	call	0x4142	; 0x4142 <bootmagic_scan_keycode>
    4198:	88 23       	and	r24, r24
    419a:	09 f0       	breq	.+2      	; 0x419e <bootmagic+0x44>
    419c:	2f c1       	rjmp	.+606    	; 0x43fc <bootmagic+0x2a2>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    419e:	8a e2       	ldi	r24, 0x2A	; 42
    41a0:	0e 94 a1 20 	call	0x4142	; 0x4142 <bootmagic_scan_keycode>
    41a4:	88 23       	and	r24, r24
    41a6:	11 f0       	breq	.+4      	; 0x41ac <bootmagic+0x52>
        eeconfig_init();
    41a8:	0e 94 2e 22 	call	0x445c	; 0x445c <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
    41ac:	85 e0       	ldi	r24, 0x05	; 5
    41ae:	0e 94 a1 20 	call	0x4142	; 0x4142 <bootmagic_scan_keycode>
    41b2:	88 23       	and	r24, r24
    41b4:	11 f0       	breq	.+4      	; 0x41ba <bootmagic+0x60>
        bootloader_jump();
    41b6:	0e 94 45 20 	call	0x408a	; 0x408a <bootloader_jump>
    }

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    41ba:	0e 94 1e 22 	call	0x443c	; 0x443c <eeconfig_read_debug>
    41be:	80 93 a5 01 	sts	0x01A5, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    41c2:	87 e0       	ldi	r24, 0x07	; 7
    41c4:	0e 94 a1 20 	call	0x4142	; 0x4142 <bootmagic_scan_keycode>
    41c8:	88 23       	and	r24, r24
    41ca:	b9 f1       	breq	.+110    	; 0x423a <bootmagic+0xe0>
        if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    41cc:	8b e1       	ldi	r24, 0x1B	; 27
    41ce:	0e 94 a1 20 	call	0x4142	; 0x4142 <bootmagic_scan_keycode>
    41d2:	88 23       	and	r24, r24
    41d4:	49 f0       	breq	.+18     	; 0x41e8 <bootmagic+0x8e>
            debug_config.matrix = !debug_config.matrix;
    41d6:	90 91 a5 01 	lds	r25, 0x01A5
    41da:	89 2f       	mov	r24, r25
    41dc:	86 95       	lsr	r24
    41de:	80 95       	com	r24
    41e0:	81 70       	andi	r24, 0x01	; 1
    41e2:	88 0f       	add	r24, r24
    41e4:	9d 7f       	andi	r25, 0xFD	; 253
    41e6:	26 c0       	rjmp	.+76     	; 0x4234 <bootmagic+0xda>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    41e8:	8e e0       	ldi	r24, 0x0E	; 14
    41ea:	0e 94 a1 20 	call	0x4142	; 0x4142 <bootmagic_scan_keycode>
    41ee:	88 23       	and	r24, r24
    41f0:	59 f0       	breq	.+22     	; 0x4208 <bootmagic+0xae>
            debug_config.keyboard = !debug_config.keyboard;
    41f2:	90 91 a5 01 	lds	r25, 0x01A5
    41f6:	89 2f       	mov	r24, r25
    41f8:	86 95       	lsr	r24
    41fa:	86 95       	lsr	r24
    41fc:	80 95       	com	r24
    41fe:	81 70       	andi	r24, 0x01	; 1
    4200:	88 0f       	add	r24, r24
    4202:	88 0f       	add	r24, r24
    4204:	9b 7f       	andi	r25, 0xFB	; 251
    4206:	16 c0       	rjmp	.+44     	; 0x4234 <bootmagic+0xda>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    4208:	80 e1       	ldi	r24, 0x10	; 16
    420a:	0e 94 a1 20 	call	0x4142	; 0x4142 <bootmagic_scan_keycode>
    420e:	90 91 a5 01 	lds	r25, 0x01A5
    4212:	88 23       	and	r24, r24
    4214:	59 f0       	breq	.+22     	; 0x422c <bootmagic+0xd2>
            debug_config.mouse = !debug_config.mouse;
    4216:	89 2f       	mov	r24, r25
    4218:	86 95       	lsr	r24
    421a:	86 95       	lsr	r24
    421c:	86 95       	lsr	r24
    421e:	80 95       	com	r24
    4220:	81 70       	andi	r24, 0x01	; 1
    4222:	88 0f       	add	r24, r24
    4224:	88 0f       	add	r24, r24
    4226:	88 0f       	add	r24, r24
    4228:	97 7f       	andi	r25, 0xF7	; 247
    422a:	04 c0       	rjmp	.+8      	; 0x4234 <bootmagic+0xda>
        } else {
            debug_config.enable = !debug_config.enable;
    422c:	89 2f       	mov	r24, r25
    422e:	80 95       	com	r24
    4230:	81 70       	andi	r24, 0x01	; 1
    4232:	9e 7f       	andi	r25, 0xFE	; 254
    4234:	98 2b       	or	r25, r24
    4236:	90 93 a5 01 	sts	0x01A5, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    423a:	80 91 a5 01 	lds	r24, 0x01A5
    423e:	0e 94 0e 22 	call	0x441c	; 0x441c <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    4242:	0e 94 14 22 	call	0x4428	; 0x4428 <eeconfig_read_keymap>
    4246:	80 93 b6 01 	sts	0x01B6, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    424a:	80 ee       	ldi	r24, 0xE0	; 224
    424c:	0e 94 a1 20 	call	0x4142	; 0x4142 <bootmagic_scan_keycode>
    4250:	88 23       	and	r24, r24
    4252:	49 f0       	breq	.+18     	; 0x4266 <bootmagic+0x10c>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    4254:	80 91 b6 01 	lds	r24, 0x01B6
    4258:	98 2f       	mov	r25, r24
    425a:	90 95       	com	r25
    425c:	91 70       	andi	r25, 0x01	; 1
    425e:	8e 7f       	andi	r24, 0xFE	; 254
    4260:	89 2b       	or	r24, r25
    4262:	80 93 b6 01 	sts	0x01B6, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    4266:	89 e3       	ldi	r24, 0x39	; 57
    4268:	0e 94 a1 20 	call	0x4142	; 0x4142 <bootmagic_scan_keycode>
    426c:	88 23       	and	r24, r24
    426e:	59 f0       	breq	.+22     	; 0x4286 <bootmagic+0x12c>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    4270:	90 91 b6 01 	lds	r25, 0x01B6
    4274:	89 2f       	mov	r24, r25
    4276:	86 95       	lsr	r24
    4278:	80 95       	com	r24
    427a:	81 70       	andi	r24, 0x01	; 1
    427c:	88 0f       	add	r24, r24
    427e:	9d 7f       	andi	r25, 0xFD	; 253
    4280:	98 2b       	or	r25, r24
    4282:	90 93 b6 01 	sts	0x01B6, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    4286:	82 ee       	ldi	r24, 0xE2	; 226
    4288:	0e 94 a1 20 	call	0x4142	; 0x4142 <bootmagic_scan_keycode>
    428c:	88 23       	and	r24, r24
    428e:	69 f0       	breq	.+26     	; 0x42aa <bootmagic+0x150>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    4290:	90 91 b6 01 	lds	r25, 0x01B6
    4294:	89 2f       	mov	r24, r25
    4296:	86 95       	lsr	r24
    4298:	86 95       	lsr	r24
    429a:	80 95       	com	r24
    429c:	81 70       	andi	r24, 0x01	; 1
    429e:	88 0f       	add	r24, r24
    42a0:	88 0f       	add	r24, r24
    42a2:	9b 7f       	andi	r25, 0xFB	; 251
    42a4:	98 2b       	or	r25, r24
    42a6:	90 93 b6 01 	sts	0x01B6, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    42aa:	86 ee       	ldi	r24, 0xE6	; 230
    42ac:	0e 94 a1 20 	call	0x4142	; 0x4142 <bootmagic_scan_keycode>
    42b0:	88 23       	and	r24, r24
    42b2:	79 f0       	breq	.+30     	; 0x42d2 <bootmagic+0x178>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    42b4:	90 91 b6 01 	lds	r25, 0x01B6
    42b8:	89 2f       	mov	r24, r25
    42ba:	86 95       	lsr	r24
    42bc:	86 95       	lsr	r24
    42be:	86 95       	lsr	r24
    42c0:	80 95       	com	r24
    42c2:	81 70       	andi	r24, 0x01	; 1
    42c4:	88 0f       	add	r24, r24
    42c6:	88 0f       	add	r24, r24
    42c8:	88 0f       	add	r24, r24
    42ca:	97 7f       	andi	r25, 0xF7	; 247
    42cc:	98 2b       	or	r25, r24
    42ce:	90 93 b6 01 	sts	0x01B6, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
    42d2:	83 ee       	ldi	r24, 0xE3	; 227
    42d4:	0e 94 a1 20 	call	0x4142	; 0x4142 <bootmagic_scan_keycode>
    42d8:	88 23       	and	r24, r24
    42da:	69 f0       	breq	.+26     	; 0x42f6 <bootmagic+0x19c>
        keymap_config.no_gui = !keymap_config.no_gui;
    42dc:	90 91 b6 01 	lds	r25, 0x01B6
    42e0:	89 2f       	mov	r24, r25
    42e2:	82 95       	swap	r24
    42e4:	8f 70       	andi	r24, 0x0F	; 15
    42e6:	80 95       	com	r24
    42e8:	81 70       	andi	r24, 0x01	; 1
    42ea:	82 95       	swap	r24
    42ec:	80 7f       	andi	r24, 0xF0	; 240
    42ee:	9f 7e       	andi	r25, 0xEF	; 239
    42f0:	98 2b       	or	r25, r24
    42f2:	90 93 b6 01 	sts	0x01B6, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    42f6:	85 e3       	ldi	r24, 0x35	; 53
    42f8:	0e 94 a1 20 	call	0x4142	; 0x4142 <bootmagic_scan_keycode>
    42fc:	88 23       	and	r24, r24
    42fe:	79 f0       	breq	.+30     	; 0x431e <bootmagic+0x1c4>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    4300:	90 91 b6 01 	lds	r25, 0x01B6
    4304:	89 2f       	mov	r24, r25
    4306:	82 95       	swap	r24
    4308:	86 95       	lsr	r24
    430a:	87 70       	andi	r24, 0x07	; 7
    430c:	80 95       	com	r24
    430e:	81 70       	andi	r24, 0x01	; 1
    4310:	82 95       	swap	r24
    4312:	88 0f       	add	r24, r24
    4314:	80 7e       	andi	r24, 0xE0	; 224
    4316:	9f 7d       	andi	r25, 0xDF	; 223
    4318:	98 2b       	or	r25, r24
    431a:	90 93 b6 01 	sts	0x01B6, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    431e:	81 e3       	ldi	r24, 0x31	; 49
    4320:	0e 94 a1 20 	call	0x4142	; 0x4142 <bootmagic_scan_keycode>
    4324:	88 23       	and	r24, r24
    4326:	89 f0       	breq	.+34     	; 0x434a <bootmagic+0x1f0>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    4328:	90 91 b6 01 	lds	r25, 0x01B6
    432c:	89 2f       	mov	r24, r25
    432e:	82 95       	swap	r24
    4330:	86 95       	lsr	r24
    4332:	86 95       	lsr	r24
    4334:	83 70       	andi	r24, 0x03	; 3
    4336:	80 95       	com	r24
    4338:	81 70       	andi	r24, 0x01	; 1
    433a:	82 95       	swap	r24
    433c:	88 0f       	add	r24, r24
    433e:	88 0f       	add	r24, r24
    4340:	80 7c       	andi	r24, 0xC0	; 192
    4342:	9f 7b       	andi	r25, 0xBF	; 191
    4344:	98 2b       	or	r25, r24
    4346:	90 93 b6 01 	sts	0x01B6, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
    434a:	81 e1       	ldi	r24, 0x11	; 17
    434c:	0e 94 a1 20 	call	0x4142	; 0x4142 <bootmagic_scan_keycode>
    4350:	88 23       	and	r24, r24
    4352:	79 f0       	breq	.+30     	; 0x4372 <bootmagic+0x218>
        keymap_config.nkro = !keymap_config.nkro;
    4354:	80 91 b6 01 	lds	r24, 0x01B6
    4358:	98 2f       	mov	r25, r24
    435a:	99 1f       	adc	r25, r25
    435c:	99 27       	eor	r25, r25
    435e:	99 1f       	adc	r25, r25
    4360:	21 e0       	ldi	r18, 0x01	; 1
    4362:	92 27       	eor	r25, r18
    4364:	97 95       	ror	r25
    4366:	99 27       	eor	r25, r25
    4368:	97 95       	ror	r25
    436a:	8f 77       	andi	r24, 0x7F	; 127
    436c:	89 2b       	or	r24, r25
    436e:	80 93 b6 01 	sts	0x01B6, r24
    }
    eeconfig_write_keymap(keymap_config.raw);
    4372:	80 91 b6 01 	lds	r24, 0x01B6
    4376:	0e 94 02 22 	call	0x4404	; 0x4404 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    437a:	80 91 b6 01 	lds	r24, 0x01B6
    437e:	88 1f       	adc	r24, r24
    4380:	88 27       	eor	r24, r24
    4382:	88 1f       	adc	r24, r24
    4384:	80 93 0c 01 	sts	0x010C, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    4388:	87 e2       	ldi	r24, 0x27	; 39
    438a:	0e 94 a1 20 	call	0x4142	; 0x4142 <bootmagic_scan_keycode>
    438e:	18 2f       	mov	r17, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    4390:	8e e1       	ldi	r24, 0x1E	; 30
    4392:	0e 94 a1 20 	call	0x4142	; 0x4142 <bootmagic_scan_keycode>
    4396:	81 11       	cpse	r24, r1
    4398:	12 60       	ori	r17, 0x02	; 2
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    439a:	8f e1       	ldi	r24, 0x1F	; 31
    439c:	0e 94 a1 20 	call	0x4142	; 0x4142 <bootmagic_scan_keycode>
    43a0:	81 11       	cpse	r24, r1
    43a2:	14 60       	ori	r17, 0x04	; 4
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    43a4:	80 e2       	ldi	r24, 0x20	; 32
    43a6:	0e 94 a1 20 	call	0x4142	; 0x4142 <bootmagic_scan_keycode>
    43aa:	81 11       	cpse	r24, r1
    43ac:	18 60       	ori	r17, 0x08	; 8
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    43ae:	81 e2       	ldi	r24, 0x21	; 33
    43b0:	0e 94 a1 20 	call	0x4142	; 0x4142 <bootmagic_scan_keycode>
    43b4:	81 11       	cpse	r24, r1
    43b6:	10 61       	ori	r17, 0x10	; 16
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    43b8:	82 e2       	ldi	r24, 0x22	; 34
    43ba:	0e 94 a1 20 	call	0x4142	; 0x4142 <bootmagic_scan_keycode>
    43be:	81 11       	cpse	r24, r1
    43c0:	10 62       	ori	r17, 0x20	; 32
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    43c2:	83 e2       	ldi	r24, 0x23	; 35
    43c4:	0e 94 a1 20 	call	0x4142	; 0x4142 <bootmagic_scan_keycode>
    43c8:	81 11       	cpse	r24, r1
    43ca:	10 64       	ori	r17, 0x40	; 64
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    43cc:	84 e2       	ldi	r24, 0x24	; 36
    43ce:	0e 94 a1 20 	call	0x4142	; 0x4142 <bootmagic_scan_keycode>
    43d2:	81 11       	cpse	r24, r1
    43d4:	10 68       	ori	r17, 0x80	; 128
    if (default_layer) {
    43d6:	11 23       	and	r17, r17
    43d8:	41 f0       	breq	.+16     	; 0x43ea <bootmagic+0x290>
        eeconfig_write_default_layer(default_layer);
    43da:	81 2f       	mov	r24, r17
    43dc:	0e 94 08 22 	call	0x4410	; 0x4410 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    43e0:	61 2f       	mov	r22, r17
    43e2:	70 e0       	ldi	r23, 0x00	; 0
    43e4:	80 e0       	ldi	r24, 0x00	; 0
    43e6:	90 e0       	ldi	r25, 0x00	; 0
    43e8:	07 c0       	rjmp	.+14     	; 0x43f8 <bootmagic+0x29e>
    } else {
        default_layer = eeconfig_read_default_layer();
    43ea:	0e 94 19 22 	call	0x4432	; 0x4432 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    43ee:	90 e0       	ldi	r25, 0x00	; 0
    43f0:	a0 e0       	ldi	r26, 0x00	; 0
    43f2:	b0 e0       	ldi	r27, 0x00	; 0
    43f4:	bc 01       	movw	r22, r24
    43f6:	cd 01       	movw	r24, r26
    43f8:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <default_layer_set>
    }
}
    43fc:	df 91       	pop	r29
    43fe:	cf 91       	pop	r28
    4400:	1f 91       	pop	r17
    4402:	08 95       	ret

00004404 <eeconfig_write_keymap>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    4404:	68 2f       	mov	r22, r24
    4406:	84 e0       	ldi	r24, 0x04	; 4
    4408:	90 e0       	ldi	r25, 0x00	; 0
    440a:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__eewr_byte_m32u4>
    440e:	08 95       	ret

00004410 <eeconfig_write_default_layer>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    4410:	68 2f       	mov	r22, r24
    4412:	83 e0       	ldi	r24, 0x03	; 3
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__eewr_byte_m32u4>
    441a:	08 95       	ret

0000441c <eeconfig_write_debug>:
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
}

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    441c:	68 2f       	mov	r22, r24
    441e:	82 e0       	ldi	r24, 0x02	; 2
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__eewr_byte_m32u4>
    4426:	08 95       	ret

00004428 <eeconfig_read_keymap>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    4428:	84 e0       	ldi	r24, 0x04	; 4
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <__eerd_byte_m32u4>
    4430:	08 95       	ret

00004432 <eeconfig_read_default_layer>:
}

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    4432:	83 e0       	ldi	r24, 0x03	; 3
    4434:	90 e0       	ldi	r25, 0x00	; 0
    4436:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <__eerd_byte_m32u4>
    443a:	08 95       	ret

0000443c <eeconfig_read_debug>:
bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
}

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    443c:	82 e0       	ldi	r24, 0x02	; 2
    443e:	90 e0       	ldi	r25, 0x00	; 0
    4440:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <__eerd_byte_m32u4>
    4444:	08 95       	ret

00004446 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    4446:	80 e0       	ldi	r24, 0x00	; 0
    4448:	90 e0       	ldi	r25, 0x00	; 0
    444a:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__eerd_word_m32u4>
    444e:	20 e0       	ldi	r18, 0x00	; 0
    4450:	8d 5e       	subi	r24, 0xED	; 237
    4452:	9e 4f       	sbci	r25, 0xFE	; 254
    4454:	09 f4       	brne	.+2      	; 0x4458 <eeconfig_is_enabled+0x12>
    4456:	21 e0       	ldi	r18, 0x01	; 1
}
    4458:	82 2f       	mov	r24, r18
    445a:	08 95       	ret

0000445c <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    445c:	80 e0       	ldi	r24, 0x00	; 0
    445e:	90 e0       	ldi	r25, 0x00	; 0
    4460:	6d ee       	ldi	r22, 0xED	; 237
    4462:	7e ef       	ldi	r23, 0xFE	; 254
    4464:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    4468:	82 e0       	ldi	r24, 0x02	; 2
    446a:	90 e0       	ldi	r25, 0x00	; 0
    446c:	60 e0       	ldi	r22, 0x00	; 0
    446e:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    4472:	83 e0       	ldi	r24, 0x03	; 3
    4474:	90 e0       	ldi	r25, 0x00	; 0
    4476:	60 e0       	ldi	r22, 0x00	; 0
    4478:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    447c:	84 e0       	ldi	r24, 0x04	; 4
    447e:	90 e0       	ldi	r25, 0x00	; 0
    4480:	60 e0       	ldi	r22, 0x00	; 0
    4482:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    4486:	85 e0       	ldi	r24, 0x05	; 5
    4488:	90 e0       	ldi	r25, 0x00	; 0
    448a:	60 e0       	ldi	r22, 0x00	; 0
    448c:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__eewr_byte_m32u4>
#ifdef BACKLIGHT_ENABLE
    eeprom_write_byte(EECONFIG_BACKLIGHT,      0);
#endif
}
    4490:	08 95       	ret

00004492 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4492:	80 91 b1 01 	lds	r24, 0x01B1
    4496:	80 ff       	sbrs	r24, 0
    4498:	0b c0       	rjmp	.+22     	; 0x44b0 <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    449a:	90 91 11 01 	lds	r25, 0x0111
    449e:	85 e0       	ldi	r24, 0x05	; 5
    44a0:	98 9f       	mul	r25, r24
    44a2:	c0 01       	movw	r24, r0
    44a4:	11 24       	eor	r1, r1
    44a6:	95 95       	asr	r25
    44a8:	87 95       	ror	r24
    44aa:	95 95       	asr	r25
    44ac:	87 95       	ror	r24
    44ae:	30 c0       	rjmp	.+96     	; 0x4510 <move_unit+0x7e>
    } else if (mousekey_accel & (1<<1)) {
    44b0:	81 ff       	sbrs	r24, 1
    44b2:	09 c0       	rjmp	.+18     	; 0x44c6 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    44b4:	90 91 11 01 	lds	r25, 0x0111
    44b8:	85 e0       	ldi	r24, 0x05	; 5
    44ba:	98 9f       	mul	r25, r24
    44bc:	c0 01       	movw	r24, r0
    44be:	11 24       	eor	r1, r1
    44c0:	95 95       	asr	r25
    44c2:	87 95       	ror	r24
    44c4:	25 c0       	rjmp	.+74     	; 0x4510 <move_unit+0x7e>
    } else if (mousekey_accel & (1<<2)) {
    44c6:	82 ff       	sbrs	r24, 2
    44c8:	03 c0       	rjmp	.+6      	; 0x44d0 <move_unit+0x3e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    44ca:	90 91 11 01 	lds	r25, 0x0111
    44ce:	0d c0       	rjmp	.+26     	; 0x44ea <move_unit+0x58>
    } else if (mousekey_repeat == 0) {
    44d0:	80 91 b0 01 	lds	r24, 0x01B0
    44d4:	88 23       	and	r24, r24
    44d6:	19 f4       	brne	.+6      	; 0x44de <move_unit+0x4c>
    44d8:	85 e0       	ldi	r24, 0x05	; 5
    44da:	90 e0       	ldi	r25, 0x00	; 0
    44dc:	08 95       	ret
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    44de:	60 91 12 01 	lds	r22, 0x0112
    44e2:	90 91 11 01 	lds	r25, 0x0111
    44e6:	86 17       	cp	r24, r22
    44e8:	28 f0       	brcs	.+10     	; 0x44f4 <move_unit+0x62>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    44ea:	85 e0       	ldi	r24, 0x05	; 5
    44ec:	98 9f       	mul	r25, r24
    44ee:	c0 01       	movw	r24, r0
    44f0:	11 24       	eor	r1, r1
    44f2:	0e c0       	rjmp	.+28     	; 0x4510 <move_unit+0x7e>
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    44f4:	89 9f       	mul	r24, r25
    44f6:	90 01       	movw	r18, r0
    44f8:	11 24       	eor	r1, r1
    44fa:	c9 01       	movw	r24, r18
    44fc:	88 0f       	add	r24, r24
    44fe:	99 1f       	adc	r25, r25
    4500:	88 0f       	add	r24, r24
    4502:	99 1f       	adc	r25, r25
    4504:	82 0f       	add	r24, r18
    4506:	93 1f       	adc	r25, r19
    4508:	70 e0       	ldi	r23, 0x00	; 0
    450a:	0e 94 7e 2d 	call	0x5afc	; 0x5afc <__divmodhi4>
    450e:	cb 01       	movw	r24, r22
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4510:	80 38       	cpi	r24, 0x80	; 128
    4512:	91 05       	cpc	r25, r1
    4514:	10 f0       	brcs	.+4      	; 0x451a <move_unit+0x88>
    4516:	8f e7       	ldi	r24, 0x7F	; 127
    4518:	08 95       	ret
    451a:	00 97       	sbiw	r24, 0x00	; 0
    451c:	09 f4       	brne	.+2      	; 0x4520 <move_unit+0x8e>
    451e:	81 e0       	ldi	r24, 0x01	; 1
}
    4520:	08 95       	ret

00004522 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4522:	80 91 b1 01 	lds	r24, 0x01B1
    4526:	80 ff       	sbrs	r24, 0
    4528:	05 c0       	rjmp	.+10     	; 0x4534 <wheel_unit+0x12>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    452a:	80 91 13 01 	lds	r24, 0x0113
    452e:	86 95       	lsr	r24
    4530:	86 95       	lsr	r24
    4532:	18 c0       	rjmp	.+48     	; 0x4564 <wheel_unit+0x42>
    } else if (mousekey_accel & (1<<1)) {
    4534:	81 ff       	sbrs	r24, 1
    4536:	04 c0       	rjmp	.+8      	; 0x4540 <wheel_unit+0x1e>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    4538:	80 91 13 01 	lds	r24, 0x0113
    453c:	86 95       	lsr	r24
    453e:	12 c0       	rjmp	.+36     	; 0x4564 <wheel_unit+0x42>
    } else if (mousekey_accel & (1<<2)) {
    4540:	82 ff       	sbrs	r24, 2
    4542:	03 c0       	rjmp	.+6      	; 0x454a <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4544:	80 91 13 01 	lds	r24, 0x0113
    4548:	0d c0       	rjmp	.+26     	; 0x4564 <wheel_unit+0x42>
    } else if (mousekey_repeat == 0) {
    454a:	20 91 b0 01 	lds	r18, 0x01B0
    454e:	22 23       	and	r18, r18
    4550:	19 f4       	brne	.+6      	; 0x4558 <wheel_unit+0x36>
    4552:	81 e0       	ldi	r24, 0x01	; 1
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	08 95       	ret
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    4558:	60 91 14 01 	lds	r22, 0x0114
    455c:	80 91 13 01 	lds	r24, 0x0113
    4560:	26 17       	cp	r18, r22
    4562:	10 f0       	brcs	.+4      	; 0x4568 <wheel_unit+0x46>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    4564:	90 e0       	ldi	r25, 0x00	; 0
    4566:	07 c0       	rjmp	.+14     	; 0x4576 <wheel_unit+0x54>
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    4568:	28 9f       	mul	r18, r24
    456a:	c0 01       	movw	r24, r0
    456c:	11 24       	eor	r1, r1
    456e:	70 e0       	ldi	r23, 0x00	; 0
    4570:	0e 94 7e 2d 	call	0x5afc	; 0x5afc <__divmodhi4>
    4574:	cb 01       	movw	r24, r22
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4576:	80 38       	cpi	r24, 0x80	; 128
    4578:	91 05       	cpc	r25, r1
    457a:	10 f0       	brcs	.+4      	; 0x4580 <wheel_unit+0x5e>
    457c:	8f e7       	ldi	r24, 0x7F	; 127
    457e:	08 95       	ret
    4580:	00 97       	sbiw	r24, 0x00	; 0
    4582:	09 f4       	brne	.+2      	; 0x4586 <wheel_unit+0x64>
    4584:	81 e0       	ldi	r24, 0x01	; 1
}
    4586:	08 95       	ret

00004588 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    4588:	80 3f       	cpi	r24, 0xF0	; 240
    458a:	21 f4       	brne	.+8      	; 0x4594 <mousekey_on+0xc>
    458c:	0e 94 49 22 	call	0x4492	; 0x4492 <move_unit>
    4590:	81 95       	neg	r24
    4592:	04 c0       	rjmp	.+8      	; 0x459c <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    4594:	81 3f       	cpi	r24, 0xF1	; 241
    4596:	29 f4       	brne	.+10     	; 0x45a2 <mousekey_on+0x1a>
    4598:	0e 94 49 22 	call	0x4492	; 0x4492 <move_unit>
    459c:	80 93 ad 01 	sts	0x01AD, r24
    45a0:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    45a2:	82 3f       	cpi	r24, 0xF2	; 242
    45a4:	21 f4       	brne	.+8      	; 0x45ae <mousekey_on+0x26>
    45a6:	0e 94 49 22 	call	0x4492	; 0x4492 <move_unit>
    45aa:	81 95       	neg	r24
    45ac:	04 c0       	rjmp	.+8      	; 0x45b6 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    45ae:	83 3f       	cpi	r24, 0xF3	; 243
    45b0:	29 f4       	brne	.+10     	; 0x45bc <mousekey_on+0x34>
    45b2:	0e 94 49 22 	call	0x4492	; 0x4492 <move_unit>
    45b6:	80 93 ac 01 	sts	0x01AC, r24
    45ba:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    45bc:	89 3f       	cpi	r24, 0xF9	; 249
    45be:	19 f4       	brne	.+6      	; 0x45c6 <mousekey_on+0x3e>
    45c0:	0e 94 91 22 	call	0x4522	; 0x4522 <wheel_unit>
    45c4:	05 c0       	rjmp	.+10     	; 0x45d0 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    45c6:	8a 3f       	cpi	r24, 0xFA	; 250
    45c8:	31 f4       	brne	.+12     	; 0x45d6 <mousekey_on+0x4e>
    45ca:	0e 94 91 22 	call	0x4522	; 0x4522 <wheel_unit>
    45ce:	81 95       	neg	r24
    45d0:	80 93 ae 01 	sts	0x01AE, r24
    45d4:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    45d6:	8b 3f       	cpi	r24, 0xFB	; 251
    45d8:	21 f4       	brne	.+8      	; 0x45e2 <mousekey_on+0x5a>
    45da:	0e 94 91 22 	call	0x4522	; 0x4522 <wheel_unit>
    45de:	81 95       	neg	r24
    45e0:	04 c0       	rjmp	.+8      	; 0x45ea <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    45e2:	8c 3f       	cpi	r24, 0xFC	; 252
    45e4:	29 f4       	brne	.+10     	; 0x45f0 <mousekey_on+0x68>
    45e6:	0e 94 91 22 	call	0x4522	; 0x4522 <wheel_unit>
    45ea:	80 93 af 01 	sts	0x01AF, r24
    45ee:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    45f0:	84 3f       	cpi	r24, 0xF4	; 244
    45f2:	21 f4       	brne	.+8      	; 0x45fc <mousekey_on+0x74>
    45f4:	80 91 ab 01 	lds	r24, 0x01AB
    45f8:	81 60       	ori	r24, 0x01	; 1
    45fa:	17 c0       	rjmp	.+46     	; 0x462a <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    45fc:	85 3f       	cpi	r24, 0xF5	; 245
    45fe:	21 f4       	brne	.+8      	; 0x4608 <mousekey_on+0x80>
    4600:	80 91 ab 01 	lds	r24, 0x01AB
    4604:	82 60       	ori	r24, 0x02	; 2
    4606:	11 c0       	rjmp	.+34     	; 0x462a <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    4608:	86 3f       	cpi	r24, 0xF6	; 246
    460a:	21 f4       	brne	.+8      	; 0x4614 <mousekey_on+0x8c>
    460c:	80 91 ab 01 	lds	r24, 0x01AB
    4610:	84 60       	ori	r24, 0x04	; 4
    4612:	0b c0       	rjmp	.+22     	; 0x462a <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    4614:	87 3f       	cpi	r24, 0xF7	; 247
    4616:	21 f4       	brne	.+8      	; 0x4620 <mousekey_on+0x98>
    4618:	80 91 ab 01 	lds	r24, 0x01AB
    461c:	88 60       	ori	r24, 0x08	; 8
    461e:	05 c0       	rjmp	.+10     	; 0x462a <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4620:	88 3f       	cpi	r24, 0xF8	; 248
    4622:	31 f4       	brne	.+12     	; 0x4630 <mousekey_on+0xa8>
    4624:	80 91 ab 01 	lds	r24, 0x01AB
    4628:	80 61       	ori	r24, 0x10	; 16
    462a:	80 93 ab 01 	sts	0x01AB, r24
    462e:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    4630:	8d 3f       	cpi	r24, 0xFD	; 253
    4632:	21 f4       	brne	.+8      	; 0x463c <mousekey_on+0xb4>
    4634:	80 91 b1 01 	lds	r24, 0x01B1
    4638:	81 60       	ori	r24, 0x01	; 1
    463a:	05 c0       	rjmp	.+10     	; 0x4646 <mousekey_on+0xbe>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    463c:	8e 3f       	cpi	r24, 0xFE	; 254
    463e:	31 f4       	brne	.+12     	; 0x464c <mousekey_on+0xc4>
    4640:	80 91 b1 01 	lds	r24, 0x01B1
    4644:	82 60       	ori	r24, 0x02	; 2
    4646:	80 93 b1 01 	sts	0x01B1, r24
    464a:	08 95       	ret
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    464c:	8f 3f       	cpi	r24, 0xFF	; 255
    464e:	29 f4       	brne	.+10     	; 0x465a <mousekey_on+0xd2>
    4650:	80 91 b1 01 	lds	r24, 0x01B1
    4654:	84 60       	ori	r24, 0x04	; 4
    4656:	80 93 b1 01 	sts	0x01B1, r24
    465a:	08 95       	ret

0000465c <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    465c:	80 3f       	cpi	r24, 0xF0	; 240
    465e:	29 f4       	brne	.+10     	; 0x466a <mousekey_off+0xe>
    4660:	80 91 ad 01 	lds	r24, 0x01AD
    4664:	87 ff       	sbrs	r24, 7
    4666:	6f c0       	rjmp	.+222    	; 0x4746 <mousekey_off+0xea>
    4668:	07 c0       	rjmp	.+14     	; 0x4678 <mousekey_off+0x1c>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    466a:	81 3f       	cpi	r24, 0xF1	; 241
    466c:	41 f4       	brne	.+16     	; 0x467e <mousekey_off+0x22>
    466e:	80 91 ad 01 	lds	r24, 0x01AD
    4672:	18 16       	cp	r1, r24
    4674:	0c f0       	brlt	.+2      	; 0x4678 <mousekey_off+0x1c>
    4676:	67 c0       	rjmp	.+206    	; 0x4746 <mousekey_off+0xea>
    4678:	10 92 ad 01 	sts	0x01AD, r1
    467c:	64 c0       	rjmp	.+200    	; 0x4746 <mousekey_off+0xea>
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    467e:	82 3f       	cpi	r24, 0xF2	; 242
    4680:	29 f4       	brne	.+10     	; 0x468c <mousekey_off+0x30>
    4682:	80 91 ac 01 	lds	r24, 0x01AC
    4686:	87 ff       	sbrs	r24, 7
    4688:	5e c0       	rjmp	.+188    	; 0x4746 <mousekey_off+0xea>
    468a:	07 c0       	rjmp	.+14     	; 0x469a <mousekey_off+0x3e>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    468c:	83 3f       	cpi	r24, 0xF3	; 243
    468e:	41 f4       	brne	.+16     	; 0x46a0 <mousekey_off+0x44>
    4690:	80 91 ac 01 	lds	r24, 0x01AC
    4694:	18 16       	cp	r1, r24
    4696:	0c f0       	brlt	.+2      	; 0x469a <mousekey_off+0x3e>
    4698:	56 c0       	rjmp	.+172    	; 0x4746 <mousekey_off+0xea>
    469a:	10 92 ac 01 	sts	0x01AC, r1
    469e:	53 c0       	rjmp	.+166    	; 0x4746 <mousekey_off+0xea>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    46a0:	89 3f       	cpi	r24, 0xF9	; 249
    46a2:	29 f4       	brne	.+10     	; 0x46ae <mousekey_off+0x52>
    46a4:	80 91 ae 01 	lds	r24, 0x01AE
    46a8:	18 16       	cp	r1, r24
    46aa:	3c f0       	brlt	.+14     	; 0x46ba <mousekey_off+0x5e>
    46ac:	4c c0       	rjmp	.+152    	; 0x4746 <mousekey_off+0xea>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    46ae:	8a 3f       	cpi	r24, 0xFA	; 250
    46b0:	39 f4       	brne	.+14     	; 0x46c0 <mousekey_off+0x64>
    46b2:	80 91 ae 01 	lds	r24, 0x01AE
    46b6:	87 ff       	sbrs	r24, 7
    46b8:	46 c0       	rjmp	.+140    	; 0x4746 <mousekey_off+0xea>
    46ba:	10 92 ae 01 	sts	0x01AE, r1
    46be:	43 c0       	rjmp	.+134    	; 0x4746 <mousekey_off+0xea>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    46c0:	8b 3f       	cpi	r24, 0xFB	; 251
    46c2:	29 f4       	brne	.+10     	; 0x46ce <mousekey_off+0x72>
    46c4:	80 91 af 01 	lds	r24, 0x01AF
    46c8:	87 ff       	sbrs	r24, 7
    46ca:	3d c0       	rjmp	.+122    	; 0x4746 <mousekey_off+0xea>
    46cc:	06 c0       	rjmp	.+12     	; 0x46da <mousekey_off+0x7e>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    46ce:	8c 3f       	cpi	r24, 0xFC	; 252
    46d0:	39 f4       	brne	.+14     	; 0x46e0 <mousekey_off+0x84>
    46d2:	80 91 af 01 	lds	r24, 0x01AF
    46d6:	18 16       	cp	r1, r24
    46d8:	b4 f5       	brge	.+108    	; 0x4746 <mousekey_off+0xea>
    46da:	10 92 af 01 	sts	0x01AF, r1
    46de:	33 c0       	rjmp	.+102    	; 0x4746 <mousekey_off+0xea>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    46e0:	84 3f       	cpi	r24, 0xF4	; 244
    46e2:	21 f4       	brne	.+8      	; 0x46ec <mousekey_off+0x90>
    46e4:	80 91 ab 01 	lds	r24, 0x01AB
    46e8:	8e 7f       	andi	r24, 0xFE	; 254
    46ea:	05 c0       	rjmp	.+10     	; 0x46f6 <mousekey_off+0x9a>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    46ec:	85 3f       	cpi	r24, 0xF5	; 245
    46ee:	31 f4       	brne	.+12     	; 0x46fc <mousekey_off+0xa0>
    46f0:	80 91 ab 01 	lds	r24, 0x01AB
    46f4:	8d 7f       	andi	r24, 0xFD	; 253
    46f6:	80 93 ab 01 	sts	0x01AB, r24
    46fa:	25 c0       	rjmp	.+74     	; 0x4746 <mousekey_off+0xea>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    46fc:	86 3f       	cpi	r24, 0xF6	; 246
    46fe:	21 f4       	brne	.+8      	; 0x4708 <mousekey_off+0xac>
    4700:	80 91 ab 01 	lds	r24, 0x01AB
    4704:	8b 7f       	andi	r24, 0xFB	; 251
    4706:	f7 cf       	rjmp	.-18     	; 0x46f6 <mousekey_off+0x9a>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    4708:	87 3f       	cpi	r24, 0xF7	; 247
    470a:	21 f4       	brne	.+8      	; 0x4714 <mousekey_off+0xb8>
    470c:	80 91 ab 01 	lds	r24, 0x01AB
    4710:	87 7f       	andi	r24, 0xF7	; 247
    4712:	f1 cf       	rjmp	.-30     	; 0x46f6 <mousekey_off+0x9a>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4714:	88 3f       	cpi	r24, 0xF8	; 248
    4716:	21 f4       	brne	.+8      	; 0x4720 <mousekey_off+0xc4>
    4718:	80 91 ab 01 	lds	r24, 0x01AB
    471c:	8f 7e       	andi	r24, 0xEF	; 239
    471e:	eb cf       	rjmp	.-42     	; 0x46f6 <mousekey_off+0x9a>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4720:	8d 3f       	cpi	r24, 0xFD	; 253
    4722:	21 f4       	brne	.+8      	; 0x472c <mousekey_off+0xd0>
    4724:	80 91 b1 01 	lds	r24, 0x01B1
    4728:	8e 7f       	andi	r24, 0xFE	; 254
    472a:	0b c0       	rjmp	.+22     	; 0x4742 <mousekey_off+0xe6>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    472c:	8e 3f       	cpi	r24, 0xFE	; 254
    472e:	21 f4       	brne	.+8      	; 0x4738 <mousekey_off+0xdc>
    4730:	80 91 b1 01 	lds	r24, 0x01B1
    4734:	8d 7f       	andi	r24, 0xFD	; 253
    4736:	05 c0       	rjmp	.+10     	; 0x4742 <mousekey_off+0xe6>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4738:	8f 3f       	cpi	r24, 0xFF	; 255
    473a:	29 f4       	brne	.+10     	; 0x4746 <mousekey_off+0xea>
    473c:	80 91 b1 01 	lds	r24, 0x01B1
    4740:	8b 7f       	andi	r24, 0xFB	; 251
    4742:	80 93 b1 01 	sts	0x01B1, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4746:	80 91 ac 01 	lds	r24, 0x01AC
    474a:	88 23       	and	r24, r24
    474c:	71 f4       	brne	.+28     	; 0x476a <mousekey_off+0x10e>
    474e:	80 91 ad 01 	lds	r24, 0x01AD
    4752:	88 23       	and	r24, r24
    4754:	51 f4       	brne	.+20     	; 0x476a <mousekey_off+0x10e>
    4756:	80 91 ae 01 	lds	r24, 0x01AE
    475a:	88 23       	and	r24, r24
    475c:	31 f4       	brne	.+12     	; 0x476a <mousekey_off+0x10e>
    475e:	80 91 af 01 	lds	r24, 0x01AF
    4762:	88 23       	and	r24, r24
    4764:	11 f4       	brne	.+4      	; 0x476a <mousekey_off+0x10e>
        mousekey_repeat = 0;
    4766:	10 92 b0 01 	sts	0x01B0, r1
    476a:	08 95       	ret

0000476c <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    476c:	eb ea       	ldi	r30, 0xAB	; 171
    476e:	f1 e0       	ldi	r31, 0x01	; 1
    4770:	85 e0       	ldi	r24, 0x05	; 5
    4772:	df 01       	movw	r26, r30
    4774:	1d 92       	st	X+, r1
    4776:	8a 95       	dec	r24
    4778:	e9 f7       	brne	.-6      	; 0x4774 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    477a:	10 92 b0 01 	sts	0x01B0, r1
    mousekey_accel = 0;
    477e:	10 92 b1 01 	sts	0x01B1, r1
}
    4782:	08 95       	ret

00004784 <mousekey_send>:

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4784:	80 91 a5 01 	lds	r24, 0x01A5
    4788:	83 ff       	sbrs	r24, 3
    478a:	c1 c0       	rjmp	.+386    	; 0x490e <mousekey_send+0x18a>
    print("mousekey [btn|x y v h](rep/acl): [");
    478c:	81 ef       	ldi	r24, 0xF1	; 241
    478e:	95 e0       	ldi	r25, 0x05	; 5
    4790:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    phex(mouse_report.buttons); print("|");
    4794:	00 d0       	rcall	.+0      	; 0x4796 <mousekey_send+0x12>
    4796:	00 d0       	rcall	.+0      	; 0x4798 <mousekey_send+0x14>
    4798:	ed b7       	in	r30, 0x3d	; 61
    479a:	fe b7       	in	r31, 0x3e	; 62
    479c:	31 96       	adiw	r30, 0x01	; 1
    479e:	8c ee       	ldi	r24, 0xEC	; 236
    47a0:	95 e0       	ldi	r25, 0x05	; 5
    47a2:	ad b7       	in	r26, 0x3d	; 61
    47a4:	be b7       	in	r27, 0x3e	; 62
    47a6:	12 96       	adiw	r26, 0x02	; 2
    47a8:	9c 93       	st	X, r25
    47aa:	8e 93       	st	-X, r24
    47ac:	11 97       	sbiw	r26, 0x01	; 1
    47ae:	80 91 ab 01 	lds	r24, 0x01AB
    47b2:	82 83       	std	Z+2, r24	; 0x02
    47b4:	13 82       	std	Z+3, r1	; 0x03
    47b6:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    47ba:	0f 90       	pop	r0
    47bc:	0f 90       	pop	r0
    47be:	0f 90       	pop	r0
    47c0:	0f 90       	pop	r0
    47c2:	8a ee       	ldi	r24, 0xEA	; 234
    47c4:	95 e0       	ldi	r25, 0x05	; 5
    47c6:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print_decs(mouse_report.x); print(" ");
    47ca:	00 d0       	rcall	.+0      	; 0x47cc <mousekey_send+0x48>
    47cc:	00 d0       	rcall	.+0      	; 0x47ce <mousekey_send+0x4a>
    47ce:	87 ee       	ldi	r24, 0xE7	; 231
    47d0:	95 e0       	ldi	r25, 0x05	; 5
    47d2:	ed b7       	in	r30, 0x3d	; 61
    47d4:	fe b7       	in	r31, 0x3e	; 62
    47d6:	92 83       	std	Z+2, r25	; 0x02
    47d8:	81 83       	std	Z+1, r24	; 0x01
    47da:	80 91 ac 01 	lds	r24, 0x01AC
    47de:	99 27       	eor	r25, r25
    47e0:	87 fd       	sbrc	r24, 7
    47e2:	90 95       	com	r25
    47e4:	94 83       	std	Z+4, r25	; 0x04
    47e6:	83 83       	std	Z+3, r24	; 0x03
    47e8:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    47ec:	0f 90       	pop	r0
    47ee:	0f 90       	pop	r0
    47f0:	0f 90       	pop	r0
    47f2:	0f 90       	pop	r0
    47f4:	85 ee       	ldi	r24, 0xE5	; 229
    47f6:	95 e0       	ldi	r25, 0x05	; 5
    47f8:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print_decs(mouse_report.y); print(" ");
    47fc:	00 d0       	rcall	.+0      	; 0x47fe <mousekey_send+0x7a>
    47fe:	00 d0       	rcall	.+0      	; 0x4800 <mousekey_send+0x7c>
    4800:	82 ee       	ldi	r24, 0xE2	; 226
    4802:	95 e0       	ldi	r25, 0x05	; 5
    4804:	ad b7       	in	r26, 0x3d	; 61
    4806:	be b7       	in	r27, 0x3e	; 62
    4808:	12 96       	adiw	r26, 0x02	; 2
    480a:	9c 93       	st	X, r25
    480c:	8e 93       	st	-X, r24
    480e:	11 97       	sbiw	r26, 0x01	; 1
    4810:	80 91 ad 01 	lds	r24, 0x01AD
    4814:	99 27       	eor	r25, r25
    4816:	87 fd       	sbrc	r24, 7
    4818:	90 95       	com	r25
    481a:	14 96       	adiw	r26, 0x04	; 4
    481c:	9c 93       	st	X, r25
    481e:	8e 93       	st	-X, r24
    4820:	13 97       	sbiw	r26, 0x03	; 3
    4822:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    4826:	0f 90       	pop	r0
    4828:	0f 90       	pop	r0
    482a:	0f 90       	pop	r0
    482c:	0f 90       	pop	r0
    482e:	80 ee       	ldi	r24, 0xE0	; 224
    4830:	95 e0       	ldi	r25, 0x05	; 5
    4832:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print_decs(mouse_report.v); print(" ");
    4836:	00 d0       	rcall	.+0      	; 0x4838 <mousekey_send+0xb4>
    4838:	00 d0       	rcall	.+0      	; 0x483a <mousekey_send+0xb6>
    483a:	8d ed       	ldi	r24, 0xDD	; 221
    483c:	95 e0       	ldi	r25, 0x05	; 5
    483e:	ed b7       	in	r30, 0x3d	; 61
    4840:	fe b7       	in	r31, 0x3e	; 62
    4842:	92 83       	std	Z+2, r25	; 0x02
    4844:	81 83       	std	Z+1, r24	; 0x01
    4846:	80 91 ae 01 	lds	r24, 0x01AE
    484a:	99 27       	eor	r25, r25
    484c:	87 fd       	sbrc	r24, 7
    484e:	90 95       	com	r25
    4850:	94 83       	std	Z+4, r25	; 0x04
    4852:	83 83       	std	Z+3, r24	; 0x03
    4854:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    4858:	0f 90       	pop	r0
    485a:	0f 90       	pop	r0
    485c:	0f 90       	pop	r0
    485e:	0f 90       	pop	r0
    4860:	8b ed       	ldi	r24, 0xDB	; 219
    4862:	95 e0       	ldi	r25, 0x05	; 5
    4864:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print_decs(mouse_report.h); print("](");
    4868:	00 d0       	rcall	.+0      	; 0x486a <mousekey_send+0xe6>
    486a:	00 d0       	rcall	.+0      	; 0x486c <mousekey_send+0xe8>
    486c:	88 ed       	ldi	r24, 0xD8	; 216
    486e:	95 e0       	ldi	r25, 0x05	; 5
    4870:	ad b7       	in	r26, 0x3d	; 61
    4872:	be b7       	in	r27, 0x3e	; 62
    4874:	12 96       	adiw	r26, 0x02	; 2
    4876:	9c 93       	st	X, r25
    4878:	8e 93       	st	-X, r24
    487a:	11 97       	sbiw	r26, 0x01	; 1
    487c:	80 91 af 01 	lds	r24, 0x01AF
    4880:	99 27       	eor	r25, r25
    4882:	87 fd       	sbrc	r24, 7
    4884:	90 95       	com	r25
    4886:	14 96       	adiw	r26, 0x04	; 4
    4888:	9c 93       	st	X, r25
    488a:	8e 93       	st	-X, r24
    488c:	13 97       	sbiw	r26, 0x03	; 3
    488e:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    4892:	0f 90       	pop	r0
    4894:	0f 90       	pop	r0
    4896:	0f 90       	pop	r0
    4898:	0f 90       	pop	r0
    489a:	85 ed       	ldi	r24, 0xD5	; 213
    489c:	95 e0       	ldi	r25, 0x05	; 5
    489e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print_dec(mousekey_repeat); print("/");
    48a2:	00 d0       	rcall	.+0      	; 0x48a4 <mousekey_send+0x120>
    48a4:	00 d0       	rcall	.+0      	; 0x48a6 <mousekey_send+0x122>
    48a6:	ed b7       	in	r30, 0x3d	; 61
    48a8:	fe b7       	in	r31, 0x3e	; 62
    48aa:	31 96       	adiw	r30, 0x01	; 1
    48ac:	82 ed       	ldi	r24, 0xD2	; 210
    48ae:	95 e0       	ldi	r25, 0x05	; 5
    48b0:	ad b7       	in	r26, 0x3d	; 61
    48b2:	be b7       	in	r27, 0x3e	; 62
    48b4:	12 96       	adiw	r26, 0x02	; 2
    48b6:	9c 93       	st	X, r25
    48b8:	8e 93       	st	-X, r24
    48ba:	11 97       	sbiw	r26, 0x01	; 1
    48bc:	80 91 b0 01 	lds	r24, 0x01B0
    48c0:	82 83       	std	Z+2, r24	; 0x02
    48c2:	13 82       	std	Z+3, r1	; 0x03
    48c4:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    48c8:	0f 90       	pop	r0
    48ca:	0f 90       	pop	r0
    48cc:	0f 90       	pop	r0
    48ce:	0f 90       	pop	r0
    48d0:	80 ed       	ldi	r24, 0xD0	; 208
    48d2:	95 e0       	ldi	r25, 0x05	; 5
    48d4:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print_dec(mousekey_accel); print(")\n");
    48d8:	00 d0       	rcall	.+0      	; 0x48da <mousekey_send+0x156>
    48da:	00 d0       	rcall	.+0      	; 0x48dc <mousekey_send+0x158>
    48dc:	ed b7       	in	r30, 0x3d	; 61
    48de:	fe b7       	in	r31, 0x3e	; 62
    48e0:	31 96       	adiw	r30, 0x01	; 1
    48e2:	8d ec       	ldi	r24, 0xCD	; 205
    48e4:	95 e0       	ldi	r25, 0x05	; 5
    48e6:	ad b7       	in	r26, 0x3d	; 61
    48e8:	be b7       	in	r27, 0x3e	; 62
    48ea:	12 96       	adiw	r26, 0x02	; 2
    48ec:	9c 93       	st	X, r25
    48ee:	8e 93       	st	-X, r24
    48f0:	11 97       	sbiw	r26, 0x01	; 1
    48f2:	80 91 b1 01 	lds	r24, 0x01B1
    48f6:	82 83       	std	Z+2, r24	; 0x02
    48f8:	13 82       	std	Z+3, r1	; 0x03
    48fa:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    48fe:	0f 90       	pop	r0
    4900:	0f 90       	pop	r0
    4902:	0f 90       	pop	r0
    4904:	0f 90       	pop	r0
    4906:	8a ec       	ldi	r24, 0xCA	; 202
    4908:	95 e0       	ldi	r25, 0x05	; 5
    490a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    490e:	8b ea       	ldi	r24, 0xAB	; 171
    4910:	91 e0       	ldi	r25, 0x01	; 1
    4912:	0e 94 00 12 	call	0x2400	; 0x2400 <host_mouse_send>
    last_timer = timer_read();
    4916:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <timer_read>
    491a:	90 93 b3 01 	sts	0x01B3, r25
    491e:	80 93 b2 01 	sts	0x01B2, r24
}
    4922:	08 95       	ret

00004924 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    4924:	1f 93       	push	r17
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4926:	80 91 b2 01 	lds	r24, 0x01B2
    492a:	90 91 b3 01 	lds	r25, 0x01B3
    492e:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <timer_elapsed>
    4932:	ac 01       	movw	r20, r24
    4934:	20 91 b0 01 	lds	r18, 0x01B0
    4938:	22 23       	and	r18, r18
    493a:	21 f0       	breq	.+8      	; 0x4944 <mousekey_task+0x20>
    493c:	80 91 10 01 	lds	r24, 0x0110
    4940:	90 e0       	ldi	r25, 0x00	; 0
    4942:	06 c0       	rjmp	.+12     	; 0x4950 <mousekey_task+0x2c>
    4944:	90 91 0f 01 	lds	r25, 0x010F
    4948:	8a e0       	ldi	r24, 0x0A	; 10
    494a:	98 9f       	mul	r25, r24
    494c:	c0 01       	movw	r24, r0
    494e:	11 24       	eor	r1, r1
    4950:	48 17       	cp	r20, r24
    4952:	59 07       	cpc	r21, r25
    4954:	08 f4       	brcc	.+2      	; 0x4958 <mousekey_task+0x34>
    4956:	85 c0       	rjmp	.+266    	; 0x4a62 <mousekey_task+0x13e>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4958:	90 91 ac 01 	lds	r25, 0x01AC
    495c:	99 23       	and	r25, r25
    495e:	69 f4       	brne	.+26     	; 0x497a <mousekey_task+0x56>
    4960:	80 91 ad 01 	lds	r24, 0x01AD
    4964:	88 23       	and	r24, r24
    4966:	49 f4       	brne	.+18     	; 0x497a <mousekey_task+0x56>
    4968:	80 91 ae 01 	lds	r24, 0x01AE
    496c:	88 23       	and	r24, r24
    496e:	29 f4       	brne	.+10     	; 0x497a <mousekey_task+0x56>
    4970:	80 91 af 01 	lds	r24, 0x01AF
    4974:	88 23       	and	r24, r24
    4976:	09 f4       	brne	.+2      	; 0x497a <mousekey_task+0x56>
    4978:	74 c0       	rjmp	.+232    	; 0x4a62 <mousekey_task+0x13e>
        return;

    if (mousekey_repeat != UINT8_MAX)
    497a:	2f 3f       	cpi	r18, 0xFF	; 255
    497c:	19 f0       	breq	.+6      	; 0x4984 <mousekey_task+0x60>
        mousekey_repeat++;
    497e:	2f 5f       	subi	r18, 0xFF	; 255
    4980:	20 93 b0 01 	sts	0x01B0, r18


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    4984:	19 16       	cp	r1, r25
    4986:	24 f4       	brge	.+8      	; 0x4990 <mousekey_task+0x6c>
    4988:	0e 94 49 22 	call	0x4492	; 0x4492 <move_unit>
    498c:	80 93 ac 01 	sts	0x01AC, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    4990:	80 91 ac 01 	lds	r24, 0x01AC
    4994:	87 ff       	sbrs	r24, 7
    4996:	05 c0       	rjmp	.+10     	; 0x49a2 <mousekey_task+0x7e>
    4998:	0e 94 49 22 	call	0x4492	; 0x4492 <move_unit>
    499c:	81 95       	neg	r24
    499e:	80 93 ac 01 	sts	0x01AC, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    49a2:	80 91 ad 01 	lds	r24, 0x01AD
    49a6:	18 16       	cp	r1, r24
    49a8:	24 f4       	brge	.+8      	; 0x49b2 <mousekey_task+0x8e>
    49aa:	0e 94 49 22 	call	0x4492	; 0x4492 <move_unit>
    49ae:	80 93 ad 01 	sts	0x01AD, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    49b2:	80 91 ad 01 	lds	r24, 0x01AD
    49b6:	87 ff       	sbrs	r24, 7
    49b8:	05 c0       	rjmp	.+10     	; 0x49c4 <mousekey_task+0xa0>
    49ba:	0e 94 49 22 	call	0x4492	; 0x4492 <move_unit>
    49be:	81 95       	neg	r24
    49c0:	80 93 ad 01 	sts	0x01AD, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    49c4:	60 91 ac 01 	lds	r22, 0x01AC
    49c8:	66 23       	and	r22, r22
    49ca:	39 f1       	breq	.+78     	; 0x4a1a <mousekey_task+0xf6>
    49cc:	10 91 ad 01 	lds	r17, 0x01AD
    49d0:	11 23       	and	r17, r17
    49d2:	19 f1       	breq	.+70     	; 0x4a1a <mousekey_task+0xf6>
        mouse_report.x *= 0.7;
    49d4:	77 27       	eor	r23, r23
    49d6:	67 fd       	sbrc	r22, 7
    49d8:	70 95       	com	r23
    49da:	87 2f       	mov	r24, r23
    49dc:	97 2f       	mov	r25, r23
    49de:	0e 94 83 2c 	call	0x5906	; 0x5906 <__floatsisf>
    49e2:	23 e3       	ldi	r18, 0x33	; 51
    49e4:	33 e3       	ldi	r19, 0x33	; 51
    49e6:	43 e3       	ldi	r20, 0x33	; 51
    49e8:	5f e3       	ldi	r21, 0x3F	; 63
    49ea:	0e 94 e7 2c 	call	0x59ce	; 0x59ce <__mulsf3>
    49ee:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <__fixsfsi>
    49f2:	60 93 ac 01 	sts	0x01AC, r22
        mouse_report.y *= 0.7;
    49f6:	61 2f       	mov	r22, r17
    49f8:	77 27       	eor	r23, r23
    49fa:	67 fd       	sbrc	r22, 7
    49fc:	70 95       	com	r23
    49fe:	87 2f       	mov	r24, r23
    4a00:	97 2f       	mov	r25, r23
    4a02:	0e 94 83 2c 	call	0x5906	; 0x5906 <__floatsisf>
    4a06:	23 e3       	ldi	r18, 0x33	; 51
    4a08:	33 e3       	ldi	r19, 0x33	; 51
    4a0a:	43 e3       	ldi	r20, 0x33	; 51
    4a0c:	5f e3       	ldi	r21, 0x3F	; 63
    4a0e:	0e 94 e7 2c 	call	0x59ce	; 0x59ce <__mulsf3>
    4a12:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <__fixsfsi>
    4a16:	60 93 ad 01 	sts	0x01AD, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4a1a:	80 91 ae 01 	lds	r24, 0x01AE
    4a1e:	18 16       	cp	r1, r24
    4a20:	24 f4       	brge	.+8      	; 0x4a2a <mousekey_task+0x106>
    4a22:	0e 94 91 22 	call	0x4522	; 0x4522 <wheel_unit>
    4a26:	80 93 ae 01 	sts	0x01AE, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    4a2a:	80 91 ae 01 	lds	r24, 0x01AE
    4a2e:	87 ff       	sbrs	r24, 7
    4a30:	05 c0       	rjmp	.+10     	; 0x4a3c <mousekey_task+0x118>
    4a32:	0e 94 91 22 	call	0x4522	; 0x4522 <wheel_unit>
    4a36:	81 95       	neg	r24
    4a38:	80 93 ae 01 	sts	0x01AE, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    4a3c:	80 91 af 01 	lds	r24, 0x01AF
    4a40:	18 16       	cp	r1, r24
    4a42:	24 f4       	brge	.+8      	; 0x4a4c <mousekey_task+0x128>
    4a44:	0e 94 91 22 	call	0x4522	; 0x4522 <wheel_unit>
    4a48:	80 93 af 01 	sts	0x01AF, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4a4c:	80 91 af 01 	lds	r24, 0x01AF
    4a50:	87 ff       	sbrs	r24, 7
    4a52:	05 c0       	rjmp	.+10     	; 0x4a5e <mousekey_task+0x13a>
    4a54:	0e 94 91 22 	call	0x4522	; 0x4522 <wheel_unit>
    4a58:	81 95       	neg	r24
    4a5a:	80 93 af 01 	sts	0x01AF, r24

    mousekey_send();
    4a5e:	0e 94 c2 23 	call	0x4784	; 0x4784 <mousekey_send>
}
    4a62:	1f 91       	pop	r17
    4a64:	08 95       	ret

00004a66 <command_extra>:
/* This allows to define extra commands. return false when not processed. */
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    return false;
}
    4a66:	80 e0       	ldi	r24, 0x00	; 0
    4a68:	08 95       	ret

00004a6a <command_console_extra>:

bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    return false;
}
    4a6a:	80 e0       	ldi	r24, 0x00	; 0
    4a6c:	08 95       	ret

00004a6e <command_console_help>:
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4a6e:	8c e1       	ldi	r24, 0x1C	; 28
    4a70:	9a e0       	ldi	r25, 0x0A	; 10
    4a72:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
          "ESC/q:	quit\n"
#ifdef MOUSEKEY_ENABLE
          "m:	mousekey\n"
#endif
    );
}
    4a76:	08 95       	ret

00004a78 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    4a78:	80 ea       	ldi	r24, 0xA0	; 160
    4a7a:	9a e0       	ldi	r25, 0x0A	; 10
    4a7c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    4a80:	00 d0       	rcall	.+0      	; 0x4a82 <mousekey_console_help+0xa>
    4a82:	00 d0       	rcall	.+0      	; 0x4a84 <mousekey_console_help+0xc>
    4a84:	00 d0       	rcall	.+0      	; 0x4a86 <mousekey_console_help+0xe>
    4a86:	ed b7       	in	r30, 0x3d	; 61
    4a88:	fe b7       	in	r31, 0x3e	; 62
    4a8a:	31 96       	adiw	r30, 0x01	; 1
    4a8c:	82 e5       	ldi	r24, 0x52	; 82
    4a8e:	9a e0       	ldi	r25, 0x0A	; 10
    4a90:	ad b7       	in	r26, 0x3d	; 61
    4a92:	be b7       	in	r27, 0x3e	; 62
    4a94:	12 96       	adiw	r26, 0x02	; 2
    4a96:	9c 93       	st	X, r25
    4a98:	8e 93       	st	-X, r24
    4a9a:	11 97       	sbiw	r26, 0x01	; 1
    4a9c:	85 e0       	ldi	r24, 0x05	; 5
    4a9e:	90 e0       	ldi	r25, 0x00	; 0
    4aa0:	93 83       	std	Z+3, r25	; 0x03
    4aa2:	82 83       	std	Z+2, r24	; 0x02
    4aa4:	81 e0       	ldi	r24, 0x01	; 1
    4aa6:	90 e0       	ldi	r25, 0x00	; 0
    4aa8:	95 83       	std	Z+5, r25	; 0x05
    4aaa:	84 83       	std	Z+4, r24	; 0x04
    4aac:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    4ab0:	8d b7       	in	r24, 0x3d	; 61
    4ab2:	9e b7       	in	r25, 0x3e	; 62
    4ab4:	06 96       	adiw	r24, 0x06	; 6
    4ab6:	0f b6       	in	r0, 0x3f	; 63
    4ab8:	f8 94       	cli
    4aba:	9e bf       	out	0x3e, r25	; 62
    4abc:	0f be       	out	0x3f, r0	; 63
    4abe:	8d bf       	out	0x3d, r24	; 61
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}
    4ac0:	08 95       	ret

00004ac2 <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    4ac2:	83 30       	cpi	r24, 0x03	; 3
    4ac4:	09 f4       	brne	.+2      	; 0x4ac8 <mousekey_param_inc+0x6>
    4ac6:	52 c0       	rjmp	.+164    	; 0x4b6c <mousekey_param_inc+0xaa>
    4ac8:	84 30       	cpi	r24, 0x04	; 4
    4aca:	30 f4       	brcc	.+12     	; 0x4ad8 <mousekey_param_inc+0x16>
    4acc:	81 30       	cpi	r24, 0x01	; 1
    4ace:	71 f0       	breq	.+28     	; 0x4aec <mousekey_param_inc+0x2a>
    4ad0:	82 30       	cpi	r24, 0x02	; 2
    4ad2:	09 f0       	breq	.+2      	; 0x4ad6 <mousekey_param_inc+0x14>
    4ad4:	da c0       	rjmp	.+436    	; 0x4c8a <mousekey_param_inc+0x1c8>
    4ad6:	2a c0       	rjmp	.+84     	; 0x4b2c <mousekey_param_inc+0x6a>
    4ad8:	85 30       	cpi	r24, 0x05	; 5
    4ada:	09 f4       	brne	.+2      	; 0x4ade <mousekey_param_inc+0x1c>
    4adc:	87 c0       	rjmp	.+270    	; 0x4bec <mousekey_param_inc+0x12a>
    4ade:	85 30       	cpi	r24, 0x05	; 5
    4ae0:	08 f4       	brcc	.+2      	; 0x4ae4 <mousekey_param_inc+0x22>
    4ae2:	64 c0       	rjmp	.+200    	; 0x4bac <mousekey_param_inc+0xea>
    4ae4:	86 30       	cpi	r24, 0x06	; 6
    4ae6:	09 f0       	breq	.+2      	; 0x4aea <mousekey_param_inc+0x28>
    4ae8:	d0 c0       	rjmp	.+416    	; 0x4c8a <mousekey_param_inc+0x1c8>
    4aea:	a8 c0       	rjmp	.+336    	; 0x4c3c <mousekey_param_inc+0x17a>
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    4aec:	20 91 0f 01 	lds	r18, 0x010F
    4af0:	82 2f       	mov	r24, r18
    4af2:	90 e0       	ldi	r25, 0x00	; 0
    4af4:	86 0f       	add	r24, r22
    4af6:	91 1d       	adc	r25, r1
    4af8:	8f 3f       	cpi	r24, 0xFF	; 255
    4afa:	91 05       	cpc	r25, r1
    4afc:	20 f4       	brcc	.+8      	; 0x4b06 <mousekey_param_inc+0x44>
                mk_delay += inc;
    4afe:	26 0f       	add	r18, r22
    4b00:	20 93 0f 01 	sts	0x010F, r18
    4b04:	03 c0       	rjmp	.+6      	; 0x4b0c <mousekey_param_inc+0x4a>
            else
                mk_delay = UINT8_MAX;
    4b06:	8f ef       	ldi	r24, 0xFF	; 255
    4b08:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_delay);
    4b0c:	00 d0       	rcall	.+0      	; 0x4b0e <mousekey_param_inc+0x4c>
    4b0e:	00 d0       	rcall	.+0      	; 0x4b10 <mousekey_param_inc+0x4e>
    4b10:	ed b7       	in	r30, 0x3d	; 61
    4b12:	fe b7       	in	r31, 0x3e	; 62
    4b14:	31 96       	adiw	r30, 0x01	; 1
    4b16:	81 ec       	ldi	r24, 0xC1	; 193
    4b18:	9c e0       	ldi	r25, 0x0C	; 12
    4b1a:	ad b7       	in	r26, 0x3d	; 61
    4b1c:	be b7       	in	r27, 0x3e	; 62
    4b1e:	12 96       	adiw	r26, 0x02	; 2
    4b20:	9c 93       	st	X, r25
    4b22:	8e 93       	st	-X, r24
    4b24:	11 97       	sbiw	r26, 0x01	; 1
    4b26:	80 91 0f 01 	lds	r24, 0x010F
    4b2a:	7f c0       	rjmp	.+254    	; 0x4c2a <mousekey_param_inc+0x168>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    4b2c:	20 91 10 01 	lds	r18, 0x0110
    4b30:	82 2f       	mov	r24, r18
    4b32:	90 e0       	ldi	r25, 0x00	; 0
    4b34:	86 0f       	add	r24, r22
    4b36:	91 1d       	adc	r25, r1
    4b38:	8f 3f       	cpi	r24, 0xFF	; 255
    4b3a:	91 05       	cpc	r25, r1
    4b3c:	20 f4       	brcc	.+8      	; 0x4b46 <mousekey_param_inc+0x84>
                mk_interval += inc;
    4b3e:	26 0f       	add	r18, r22
    4b40:	20 93 10 01 	sts	0x0110, r18
    4b44:	03 c0       	rjmp	.+6      	; 0x4b4c <mousekey_param_inc+0x8a>
            else
                mk_interval = UINT8_MAX;
    4b46:	8f ef       	ldi	r24, 0xFF	; 255
    4b48:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_interval);
    4b4c:	00 d0       	rcall	.+0      	; 0x4b4e <mousekey_param_inc+0x8c>
    4b4e:	00 d0       	rcall	.+0      	; 0x4b50 <mousekey_param_inc+0x8e>
    4b50:	ed b7       	in	r30, 0x3d	; 61
    4b52:	fe b7       	in	r31, 0x3e	; 62
    4b54:	31 96       	adiw	r30, 0x01	; 1
    4b56:	8f ea       	ldi	r24, 0xAF	; 175
    4b58:	9c e0       	ldi	r25, 0x0C	; 12
    4b5a:	ad b7       	in	r26, 0x3d	; 61
    4b5c:	be b7       	in	r27, 0x3e	; 62
    4b5e:	12 96       	adiw	r26, 0x02	; 2
    4b60:	9c 93       	st	X, r25
    4b62:	8e 93       	st	-X, r24
    4b64:	11 97       	sbiw	r26, 0x01	; 1
    4b66:	80 91 10 01 	lds	r24, 0x0110
    4b6a:	5f c0       	rjmp	.+190    	; 0x4c2a <mousekey_param_inc+0x168>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4b6c:	20 91 11 01 	lds	r18, 0x0111
    4b70:	82 2f       	mov	r24, r18
    4b72:	90 e0       	ldi	r25, 0x00	; 0
    4b74:	86 0f       	add	r24, r22
    4b76:	91 1d       	adc	r25, r1
    4b78:	8f 3f       	cpi	r24, 0xFF	; 255
    4b7a:	91 05       	cpc	r25, r1
    4b7c:	20 f4       	brcc	.+8      	; 0x4b86 <mousekey_param_inc+0xc4>
                mk_max_speed += inc;
    4b7e:	26 0f       	add	r18, r22
    4b80:	20 93 11 01 	sts	0x0111, r18
    4b84:	03 c0       	rjmp	.+6      	; 0x4b8c <mousekey_param_inc+0xca>
            else
                mk_max_speed = UINT8_MAX;
    4b86:	8f ef       	ldi	r24, 0xFF	; 255
    4b88:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_max_speed);
    4b8c:	00 d0       	rcall	.+0      	; 0x4b8e <mousekey_param_inc+0xcc>
    4b8e:	00 d0       	rcall	.+0      	; 0x4b90 <mousekey_param_inc+0xce>
    4b90:	ed b7       	in	r30, 0x3d	; 61
    4b92:	fe b7       	in	r31, 0x3e	; 62
    4b94:	31 96       	adiw	r30, 0x01	; 1
    4b96:	8c e9       	ldi	r24, 0x9C	; 156
    4b98:	9c e0       	ldi	r25, 0x0C	; 12
    4b9a:	ad b7       	in	r26, 0x3d	; 61
    4b9c:	be b7       	in	r27, 0x3e	; 62
    4b9e:	12 96       	adiw	r26, 0x02	; 2
    4ba0:	9c 93       	st	X, r25
    4ba2:	8e 93       	st	-X, r24
    4ba4:	11 97       	sbiw	r26, 0x01	; 1
    4ba6:	80 91 11 01 	lds	r24, 0x0111
    4baa:	3f c0       	rjmp	.+126    	; 0x4c2a <mousekey_param_inc+0x168>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    4bac:	20 91 12 01 	lds	r18, 0x0112
    4bb0:	82 2f       	mov	r24, r18
    4bb2:	90 e0       	ldi	r25, 0x00	; 0
    4bb4:	86 0f       	add	r24, r22
    4bb6:	91 1d       	adc	r25, r1
    4bb8:	8f 3f       	cpi	r24, 0xFF	; 255
    4bba:	91 05       	cpc	r25, r1
    4bbc:	20 f4       	brcc	.+8      	; 0x4bc6 <mousekey_param_inc+0x104>
                mk_time_to_max += inc;
    4bbe:	26 0f       	add	r18, r22
    4bc0:	20 93 12 01 	sts	0x0112, r18
    4bc4:	03 c0       	rjmp	.+6      	; 0x4bcc <mousekey_param_inc+0x10a>
            else
                mk_time_to_max = UINT8_MAX;
    4bc6:	8f ef       	ldi	r24, 0xFF	; 255
    4bc8:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_time_to_max);
    4bcc:	00 d0       	rcall	.+0      	; 0x4bce <mousekey_param_inc+0x10c>
    4bce:	00 d0       	rcall	.+0      	; 0x4bd0 <mousekey_param_inc+0x10e>
    4bd0:	ed b7       	in	r30, 0x3d	; 61
    4bd2:	fe b7       	in	r31, 0x3e	; 62
    4bd4:	31 96       	adiw	r30, 0x01	; 1
    4bd6:	87 e8       	ldi	r24, 0x87	; 135
    4bd8:	9c e0       	ldi	r25, 0x0C	; 12
    4bda:	ad b7       	in	r26, 0x3d	; 61
    4bdc:	be b7       	in	r27, 0x3e	; 62
    4bde:	12 96       	adiw	r26, 0x02	; 2
    4be0:	9c 93       	st	X, r25
    4be2:	8e 93       	st	-X, r24
    4be4:	11 97       	sbiw	r26, 0x01	; 1
    4be6:	80 91 12 01 	lds	r24, 0x0112
    4bea:	1f c0       	rjmp	.+62     	; 0x4c2a <mousekey_param_inc+0x168>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4bec:	20 91 13 01 	lds	r18, 0x0113
    4bf0:	82 2f       	mov	r24, r18
    4bf2:	90 e0       	ldi	r25, 0x00	; 0
    4bf4:	86 0f       	add	r24, r22
    4bf6:	91 1d       	adc	r25, r1
    4bf8:	8f 3f       	cpi	r24, 0xFF	; 255
    4bfa:	91 05       	cpc	r25, r1
    4bfc:	20 f4       	brcc	.+8      	; 0x4c06 <mousekey_param_inc+0x144>
                mk_wheel_max_speed += inc;
    4bfe:	26 0f       	add	r18, r22
    4c00:	20 93 13 01 	sts	0x0113, r18
    4c04:	03 c0       	rjmp	.+6      	; 0x4c0c <mousekey_param_inc+0x14a>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4c06:	8f ef       	ldi	r24, 0xFF	; 255
    4c08:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4c0c:	00 d0       	rcall	.+0      	; 0x4c0e <mousekey_param_inc+0x14c>
    4c0e:	00 d0       	rcall	.+0      	; 0x4c10 <mousekey_param_inc+0x14e>
    4c10:	ed b7       	in	r30, 0x3d	; 61
    4c12:	fe b7       	in	r31, 0x3e	; 62
    4c14:	31 96       	adiw	r30, 0x01	; 1
    4c16:	8e e6       	ldi	r24, 0x6E	; 110
    4c18:	9c e0       	ldi	r25, 0x0C	; 12
    4c1a:	ad b7       	in	r26, 0x3d	; 61
    4c1c:	be b7       	in	r27, 0x3e	; 62
    4c1e:	12 96       	adiw	r26, 0x02	; 2
    4c20:	9c 93       	st	X, r25
    4c22:	8e 93       	st	-X, r24
    4c24:	11 97       	sbiw	r26, 0x01	; 1
    4c26:	80 91 13 01 	lds	r24, 0x0113
    4c2a:	82 83       	std	Z+2, r24	; 0x02
    4c2c:	13 82       	std	Z+3, r1	; 0x03
    4c2e:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    4c32:	0f 90       	pop	r0
    4c34:	0f 90       	pop	r0
    4c36:	0f 90       	pop	r0
    4c38:	0f 90       	pop	r0
    4c3a:	08 95       	ret
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4c3c:	20 91 14 01 	lds	r18, 0x0114
    4c40:	82 2f       	mov	r24, r18
    4c42:	90 e0       	ldi	r25, 0x00	; 0
    4c44:	86 0f       	add	r24, r22
    4c46:	91 1d       	adc	r25, r1
    4c48:	8f 3f       	cpi	r24, 0xFF	; 255
    4c4a:	91 05       	cpc	r25, r1
    4c4c:	20 f4       	brcc	.+8      	; 0x4c56 <mousekey_param_inc+0x194>
                mk_wheel_time_to_max += inc;
    4c4e:	26 0f       	add	r18, r22
    4c50:	20 93 14 01 	sts	0x0114, r18
    4c54:	03 c0       	rjmp	.+6      	; 0x4c5c <mousekey_param_inc+0x19a>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4c56:	8f ef       	ldi	r24, 0xFF	; 255
    4c58:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4c5c:	00 d0       	rcall	.+0      	; 0x4c5e <mousekey_param_inc+0x19c>
    4c5e:	00 d0       	rcall	.+0      	; 0x4c60 <mousekey_param_inc+0x19e>
    4c60:	ed b7       	in	r30, 0x3d	; 61
    4c62:	fe b7       	in	r31, 0x3e	; 62
    4c64:	31 96       	adiw	r30, 0x01	; 1
    4c66:	83 e5       	ldi	r24, 0x53	; 83
    4c68:	9c e0       	ldi	r25, 0x0C	; 12
    4c6a:	ad b7       	in	r26, 0x3d	; 61
    4c6c:	be b7       	in	r27, 0x3e	; 62
    4c6e:	12 96       	adiw	r26, 0x02	; 2
    4c70:	9c 93       	st	X, r25
    4c72:	8e 93       	st	-X, r24
    4c74:	11 97       	sbiw	r26, 0x01	; 1
    4c76:	80 91 14 01 	lds	r24, 0x0114
    4c7a:	82 83       	std	Z+2, r24	; 0x02
    4c7c:	13 82       	std	Z+3, r1	; 0x03
    4c7e:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    4c82:	0f 90       	pop	r0
    4c84:	0f 90       	pop	r0
    4c86:	0f 90       	pop	r0
    4c88:	0f 90       	pop	r0
    4c8a:	08 95       	ret

00004c8c <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4c8c:	83 30       	cpi	r24, 0x03	; 3
    4c8e:	09 f4       	brne	.+2      	; 0x4c92 <mousekey_param_dec+0x6>
    4c90:	46 c0       	rjmp	.+140    	; 0x4d1e <mousekey_param_dec+0x92>
    4c92:	84 30       	cpi	r24, 0x04	; 4
    4c94:	30 f4       	brcc	.+12     	; 0x4ca2 <mousekey_param_dec+0x16>
    4c96:	81 30       	cpi	r24, 0x01	; 1
    4c98:	71 f0       	breq	.+28     	; 0x4cb6 <mousekey_param_dec+0x2a>
    4c9a:	82 30       	cpi	r24, 0x02	; 2
    4c9c:	09 f0       	breq	.+2      	; 0x4ca0 <mousekey_param_dec+0x14>
    4c9e:	b6 c0       	rjmp	.+364    	; 0x4e0c <mousekey_param_dec+0x180>
    4ca0:	24 c0       	rjmp	.+72     	; 0x4cea <mousekey_param_dec+0x5e>
    4ca2:	85 30       	cpi	r24, 0x05	; 5
    4ca4:	09 f4       	brne	.+2      	; 0x4ca8 <mousekey_param_dec+0x1c>
    4ca6:	6f c0       	rjmp	.+222    	; 0x4d86 <mousekey_param_dec+0xfa>
    4ca8:	85 30       	cpi	r24, 0x05	; 5
    4caa:	08 f4       	brcc	.+2      	; 0x4cae <mousekey_param_dec+0x22>
    4cac:	52 c0       	rjmp	.+164    	; 0x4d52 <mousekey_param_dec+0xc6>
    4cae:	86 30       	cpi	r24, 0x06	; 6
    4cb0:	09 f0       	breq	.+2      	; 0x4cb4 <mousekey_param_dec+0x28>
    4cb2:	ac c0       	rjmp	.+344    	; 0x4e0c <mousekey_param_dec+0x180>
    4cb4:	8a c0       	rjmp	.+276    	; 0x4dca <mousekey_param_dec+0x13e>
        case 1:
            if (mk_delay > dec)
    4cb6:	80 91 0f 01 	lds	r24, 0x010F
    4cba:	68 17       	cp	r22, r24
    4cbc:	20 f4       	brcc	.+8      	; 0x4cc6 <mousekey_param_dec+0x3a>
                mk_delay -= dec;
    4cbe:	86 1b       	sub	r24, r22
    4cc0:	80 93 0f 01 	sts	0x010F, r24
    4cc4:	02 c0       	rjmp	.+4      	; 0x4cca <mousekey_param_dec+0x3e>
            else
                mk_delay = 0;
    4cc6:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_delay);
    4cca:	00 d0       	rcall	.+0      	; 0x4ccc <mousekey_param_dec+0x40>
    4ccc:	00 d0       	rcall	.+0      	; 0x4cce <mousekey_param_dec+0x42>
    4cce:	ed b7       	in	r30, 0x3d	; 61
    4cd0:	fe b7       	in	r31, 0x3e	; 62
    4cd2:	31 96       	adiw	r30, 0x01	; 1
    4cd4:	8e e3       	ldi	r24, 0x3E	; 62
    4cd6:	9d e0       	ldi	r25, 0x0D	; 13
    4cd8:	ad b7       	in	r26, 0x3d	; 61
    4cda:	be b7       	in	r27, 0x3e	; 62
    4cdc:	12 96       	adiw	r26, 0x02	; 2
    4cde:	9c 93       	st	X, r25
    4ce0:	8e 93       	st	-X, r24
    4ce2:	11 97       	sbiw	r26, 0x01	; 1
    4ce4:	80 91 0f 01 	lds	r24, 0x010F
    4ce8:	67 c0       	rjmp	.+206    	; 0x4db8 <mousekey_param_dec+0x12c>
            break;
        case 2:
            if (mk_interval > dec)
    4cea:	80 91 10 01 	lds	r24, 0x0110
    4cee:	68 17       	cp	r22, r24
    4cf0:	20 f4       	brcc	.+8      	; 0x4cfa <mousekey_param_dec+0x6e>
                mk_interval -= dec;
    4cf2:	86 1b       	sub	r24, r22
    4cf4:	80 93 10 01 	sts	0x0110, r24
    4cf8:	02 c0       	rjmp	.+4      	; 0x4cfe <mousekey_param_dec+0x72>
            else
                mk_interval = 0;
    4cfa:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_interval);
    4cfe:	00 d0       	rcall	.+0      	; 0x4d00 <mousekey_param_dec+0x74>
    4d00:	00 d0       	rcall	.+0      	; 0x4d02 <mousekey_param_dec+0x76>
    4d02:	ed b7       	in	r30, 0x3d	; 61
    4d04:	fe b7       	in	r31, 0x3e	; 62
    4d06:	31 96       	adiw	r30, 0x01	; 1
    4d08:	8c e2       	ldi	r24, 0x2C	; 44
    4d0a:	9d e0       	ldi	r25, 0x0D	; 13
    4d0c:	ad b7       	in	r26, 0x3d	; 61
    4d0e:	be b7       	in	r27, 0x3e	; 62
    4d10:	12 96       	adiw	r26, 0x02	; 2
    4d12:	9c 93       	st	X, r25
    4d14:	8e 93       	st	-X, r24
    4d16:	11 97       	sbiw	r26, 0x01	; 1
    4d18:	80 91 10 01 	lds	r24, 0x0110
    4d1c:	4d c0       	rjmp	.+154    	; 0x4db8 <mousekey_param_dec+0x12c>
            break;
        case 3:
            if (mk_max_speed > dec)
    4d1e:	80 91 11 01 	lds	r24, 0x0111
    4d22:	68 17       	cp	r22, r24
    4d24:	20 f4       	brcc	.+8      	; 0x4d2e <mousekey_param_dec+0xa2>
                mk_max_speed -= dec;
    4d26:	86 1b       	sub	r24, r22
    4d28:	80 93 11 01 	sts	0x0111, r24
    4d2c:	02 c0       	rjmp	.+4      	; 0x4d32 <mousekey_param_dec+0xa6>
            else
                mk_max_speed = 0;
    4d2e:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_max_speed);
    4d32:	00 d0       	rcall	.+0      	; 0x4d34 <mousekey_param_dec+0xa8>
    4d34:	00 d0       	rcall	.+0      	; 0x4d36 <mousekey_param_dec+0xaa>
    4d36:	ed b7       	in	r30, 0x3d	; 61
    4d38:	fe b7       	in	r31, 0x3e	; 62
    4d3a:	31 96       	adiw	r30, 0x01	; 1
    4d3c:	89 e1       	ldi	r24, 0x19	; 25
    4d3e:	9d e0       	ldi	r25, 0x0D	; 13
    4d40:	ad b7       	in	r26, 0x3d	; 61
    4d42:	be b7       	in	r27, 0x3e	; 62
    4d44:	12 96       	adiw	r26, 0x02	; 2
    4d46:	9c 93       	st	X, r25
    4d48:	8e 93       	st	-X, r24
    4d4a:	11 97       	sbiw	r26, 0x01	; 1
    4d4c:	80 91 11 01 	lds	r24, 0x0111
    4d50:	33 c0       	rjmp	.+102    	; 0x4db8 <mousekey_param_dec+0x12c>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4d52:	80 91 12 01 	lds	r24, 0x0112
    4d56:	68 17       	cp	r22, r24
    4d58:	20 f4       	brcc	.+8      	; 0x4d62 <mousekey_param_dec+0xd6>
                mk_time_to_max -= dec;
    4d5a:	86 1b       	sub	r24, r22
    4d5c:	80 93 12 01 	sts	0x0112, r24
    4d60:	02 c0       	rjmp	.+4      	; 0x4d66 <mousekey_param_dec+0xda>
            else
                mk_time_to_max = 0;
    4d62:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_time_to_max);
    4d66:	00 d0       	rcall	.+0      	; 0x4d68 <mousekey_param_dec+0xdc>
    4d68:	00 d0       	rcall	.+0      	; 0x4d6a <mousekey_param_dec+0xde>
    4d6a:	ed b7       	in	r30, 0x3d	; 61
    4d6c:	fe b7       	in	r31, 0x3e	; 62
    4d6e:	31 96       	adiw	r30, 0x01	; 1
    4d70:	84 e0       	ldi	r24, 0x04	; 4
    4d72:	9d e0       	ldi	r25, 0x0D	; 13
    4d74:	ad b7       	in	r26, 0x3d	; 61
    4d76:	be b7       	in	r27, 0x3e	; 62
    4d78:	12 96       	adiw	r26, 0x02	; 2
    4d7a:	9c 93       	st	X, r25
    4d7c:	8e 93       	st	-X, r24
    4d7e:	11 97       	sbiw	r26, 0x01	; 1
    4d80:	80 91 12 01 	lds	r24, 0x0112
    4d84:	19 c0       	rjmp	.+50     	; 0x4db8 <mousekey_param_dec+0x12c>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4d86:	80 91 13 01 	lds	r24, 0x0113
    4d8a:	68 17       	cp	r22, r24
    4d8c:	20 f4       	brcc	.+8      	; 0x4d96 <mousekey_param_dec+0x10a>
                mk_wheel_max_speed -= dec;
    4d8e:	86 1b       	sub	r24, r22
    4d90:	80 93 13 01 	sts	0x0113, r24
    4d94:	02 c0       	rjmp	.+4      	; 0x4d9a <mousekey_param_dec+0x10e>
            else
                mk_wheel_max_speed = 0;
    4d96:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    4d9a:	00 d0       	rcall	.+0      	; 0x4d9c <mousekey_param_dec+0x110>
    4d9c:	00 d0       	rcall	.+0      	; 0x4d9e <mousekey_param_dec+0x112>
    4d9e:	ed b7       	in	r30, 0x3d	; 61
    4da0:	fe b7       	in	r31, 0x3e	; 62
    4da2:	31 96       	adiw	r30, 0x01	; 1
    4da4:	8b ee       	ldi	r24, 0xEB	; 235
    4da6:	9c e0       	ldi	r25, 0x0C	; 12
    4da8:	ad b7       	in	r26, 0x3d	; 61
    4daa:	be b7       	in	r27, 0x3e	; 62
    4dac:	12 96       	adiw	r26, 0x02	; 2
    4dae:	9c 93       	st	X, r25
    4db0:	8e 93       	st	-X, r24
    4db2:	11 97       	sbiw	r26, 0x01	; 1
    4db4:	80 91 13 01 	lds	r24, 0x0113
    4db8:	82 83       	std	Z+2, r24	; 0x02
    4dba:	13 82       	std	Z+3, r1	; 0x03
    4dbc:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    4dc0:	0f 90       	pop	r0
    4dc2:	0f 90       	pop	r0
    4dc4:	0f 90       	pop	r0
    4dc6:	0f 90       	pop	r0
    4dc8:	08 95       	ret
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    4dca:	80 91 14 01 	lds	r24, 0x0114
    4dce:	68 17       	cp	r22, r24
    4dd0:	20 f4       	brcc	.+8      	; 0x4dda <mousekey_param_dec+0x14e>
                mk_wheel_time_to_max -= dec;
    4dd2:	86 1b       	sub	r24, r22
    4dd4:	80 93 14 01 	sts	0x0114, r24
    4dd8:	02 c0       	rjmp	.+4      	; 0x4dde <mousekey_param_dec+0x152>
            else
                mk_wheel_time_to_max = 0;
    4dda:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4dde:	00 d0       	rcall	.+0      	; 0x4de0 <mousekey_param_dec+0x154>
    4de0:	00 d0       	rcall	.+0      	; 0x4de2 <mousekey_param_dec+0x156>
    4de2:	ed b7       	in	r30, 0x3d	; 61
    4de4:	fe b7       	in	r31, 0x3e	; 62
    4de6:	31 96       	adiw	r30, 0x01	; 1
    4de8:	80 ed       	ldi	r24, 0xD0	; 208
    4dea:	9c e0       	ldi	r25, 0x0C	; 12
    4dec:	ad b7       	in	r26, 0x3d	; 61
    4dee:	be b7       	in	r27, 0x3e	; 62
    4df0:	12 96       	adiw	r26, 0x02	; 2
    4df2:	9c 93       	st	X, r25
    4df4:	8e 93       	st	-X, r24
    4df6:	11 97       	sbiw	r26, 0x01	; 1
    4df8:	80 91 14 01 	lds	r24, 0x0114
    4dfc:	82 83       	std	Z+2, r24	; 0x02
    4dfe:	13 82       	std	Z+3, r1	; 0x03
    4e00:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    4e04:	0f 90       	pop	r0
    4e06:	0f 90       	pop	r0
    4e08:	0f 90       	pop	r0
    4e0a:	0f 90       	pop	r0
    4e0c:	08 95       	ret

00004e0e <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4e0e:	1f 93       	push	r17
    4e10:	18 2f       	mov	r17, r24
    xprintf("L%d\n", layer);
    4e12:	00 d0       	rcall	.+0      	; 0x4e14 <switch_default_layer+0x6>
    4e14:	00 d0       	rcall	.+0      	; 0x4e16 <switch_default_layer+0x8>
    4e16:	ed b7       	in	r30, 0x3d	; 61
    4e18:	fe b7       	in	r31, 0x3e	; 62
    4e1a:	31 96       	adiw	r30, 0x01	; 1
    4e1c:	83 e4       	ldi	r24, 0x43	; 67
    4e1e:	9a e0       	ldi	r25, 0x0A	; 10
    4e20:	ad b7       	in	r26, 0x3d	; 61
    4e22:	be b7       	in	r27, 0x3e	; 62
    4e24:	12 96       	adiw	r26, 0x02	; 2
    4e26:	9c 93       	st	X, r25
    4e28:	8e 93       	st	-X, r24
    4e2a:	11 97       	sbiw	r26, 0x01	; 1
    4e2c:	12 83       	std	Z+2, r17	; 0x02
    4e2e:	13 82       	std	Z+3, r1	; 0x03
    4e30:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    default_layer_set(1UL<<layer);
    4e34:	0f 90       	pop	r0
    4e36:	0f 90       	pop	r0
    4e38:	0f 90       	pop	r0
    4e3a:	0f 90       	pop	r0
    4e3c:	61 e0       	ldi	r22, 0x01	; 1
    4e3e:	70 e0       	ldi	r23, 0x00	; 0
    4e40:	80 e0       	ldi	r24, 0x00	; 0
    4e42:	90 e0       	ldi	r25, 0x00	; 0
    4e44:	04 c0       	rjmp	.+8      	; 0x4e4e <switch_default_layer+0x40>
    4e46:	66 0f       	add	r22, r22
    4e48:	77 1f       	adc	r23, r23
    4e4a:	88 1f       	adc	r24, r24
    4e4c:	99 1f       	adc	r25, r25
    4e4e:	1a 95       	dec	r17
    4e50:	d2 f7       	brpl	.-12     	; 0x4e46 <switch_default_layer+0x38>
    4e52:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <default_layer_set>
    clear_keyboard();
    4e56:	0e 94 d6 13 	call	0x27ac	; 0x27ac <clear_keyboard>
}
    4e5a:	1f 91       	pop	r17
    4e5c:	08 95       	ret

00004e5e <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4e5e:	1f 93       	push	r17
    static host_driver_t *host_driver = 0;
    switch (code) {
    4e60:	8b 31       	cpi	r24, 0x1B	; 27
    4e62:	09 f4       	brne	.+2      	; 0x4e66 <command_common+0x8>
    4e64:	63 c2       	rjmp	.+1222   	; 0x532c <command_common+0x4ce>
    4e66:	8c 31       	cpi	r24, 0x1C	; 28
    4e68:	20 f5       	brcc	.+72     	; 0x4eb2 <command_common+0x54>
    4e6a:	8e 30       	cpi	r24, 0x0E	; 14
    4e6c:	09 f4       	brne	.+2      	; 0x4e70 <command_common+0x12>
    4e6e:	79 c2       	rjmp	.+1266   	; 0x5362 <command_common+0x504>
    4e70:	8f 30       	cpi	r24, 0x0F	; 15
    4e72:	78 f4       	brcc	.+30     	; 0x4e92 <command_common+0x34>
    4e74:	87 30       	cpi	r24, 0x07	; 7
    4e76:	09 f4       	brne	.+2      	; 0x4e7a <command_common+0x1c>
    4e78:	4a c2       	rjmp	.+1172   	; 0x530e <command_common+0x4b0>
    4e7a:	88 30       	cpi	r24, 0x08	; 8
    4e7c:	20 f4       	brcc	.+8      	; 0x4e86 <command_common+0x28>
    4e7e:	86 30       	cpi	r24, 0x06	; 6
    4e80:	09 f0       	breq	.+2      	; 0x4e84 <command_common+0x26>
    4e82:	39 c3       	rjmp	.+1650   	; 0x54f6 <command_common+0x698>
    4e84:	23 c2       	rjmp	.+1094   	; 0x52cc <command_common+0x46e>
    4e86:	88 30       	cpi	r24, 0x08	; 8
    4e88:	b1 f1       	breq	.+108    	; 0x4ef6 <command_common+0x98>
    4e8a:	8b 30       	cpi	r24, 0x0B	; 11
    4e8c:	09 f0       	breq	.+2      	; 0x4e90 <command_common+0x32>
    4e8e:	33 c3       	rjmp	.+1638   	; 0x54f6 <command_common+0x698>
    4e90:	17 c2       	rjmp	.+1070   	; 0x52c0 <command_common+0x462>
    4e92:	81 31       	cpi	r24, 0x11	; 17
    4e94:	09 f4       	brne	.+2      	; 0x4e98 <command_common+0x3a>
    4e96:	17 c3       	rjmp	.+1582   	; 0x54c6 <command_common+0x668>
    4e98:	82 31       	cpi	r24, 0x12	; 18
    4e9a:	20 f4       	brcc	.+8      	; 0x4ea4 <command_common+0x46>
    4e9c:	80 31       	cpi	r24, 0x10	; 16
    4e9e:	09 f0       	breq	.+2      	; 0x4ea2 <command_common+0x44>
    4ea0:	2a c3       	rjmp	.+1620   	; 0x54f6 <command_common+0x698>
    4ea2:	75 c2       	rjmp	.+1258   	; 0x538e <command_common+0x530>
    4ea4:	86 31       	cpi	r24, 0x16	; 22
    4ea6:	09 f4       	brne	.+2      	; 0x4eaa <command_common+0x4c>
    4ea8:	a1 c2       	rjmp	.+1346   	; 0x53ec <command_common+0x58e>
    4eaa:	89 31       	cpi	r24, 0x19	; 25
    4eac:	09 f0       	breq	.+2      	; 0x4eb0 <command_common+0x52>
    4eae:	23 c3       	rjmp	.+1606   	; 0x54f6 <command_common+0x698>
    4eb0:	86 c2       	rjmp	.+1292   	; 0x53be <command_common+0x560>
    4eb2:	85 33       	cpi	r24, 0x35	; 53
    4eb4:	09 f4       	brne	.+2      	; 0x4eb8 <command_common+0x5a>
    4eb6:	17 c3       	rjmp	.+1582   	; 0x54e6 <command_common+0x688>
    4eb8:	86 33       	cpi	r24, 0x36	; 54
    4eba:	68 f4       	brcc	.+26     	; 0x4ed6 <command_common+0x78>
    4ebc:	87 32       	cpi	r24, 0x27	; 39
    4ebe:	09 f4       	brne	.+2      	; 0x4ec2 <command_common+0x64>
    4ec0:	12 c3       	rjmp	.+1572   	; 0x54e6 <command_common+0x688>
    4ec2:	88 32       	cpi	r24, 0x28	; 40
    4ec4:	20 f4       	brcc	.+8      	; 0x4ece <command_common+0x70>
    4ec6:	8e 31       	cpi	r24, 0x1E	; 30
    4ec8:	08 f4       	brcc	.+2      	; 0x4ecc <command_common+0x6e>
    4eca:	15 c3       	rjmp	.+1578   	; 0x54f6 <command_common+0x698>
    4ecc:	0e c3       	rjmp	.+1564   	; 0x54ea <command_common+0x68c>
    4ece:	89 32       	cpi	r24, 0x29	; 41
    4ed0:	09 f0       	breq	.+2      	; 0x4ed4 <command_common+0x76>
    4ed2:	11 c3       	rjmp	.+1570   	; 0x54f6 <command_common+0x698>
    4ed4:	08 c3       	rjmp	.+1552   	; 0x54e6 <command_common+0x688>
    4ed6:	83 34       	cpi	r24, 0x43	; 67
    4ed8:	38 f4       	brcc	.+14     	; 0x4ee8 <command_common+0x8a>
    4eda:	8a 33       	cpi	r24, 0x3A	; 58
    4edc:	08 f0       	brcs	.+2      	; 0x4ee0 <command_common+0x82>
    4ede:	07 c3       	rjmp	.+1550   	; 0x54ee <command_common+0x690>
    4ee0:	88 33       	cpi	r24, 0x38	; 56
    4ee2:	09 f0       	breq	.+2      	; 0x4ee6 <command_common+0x88>
    4ee4:	08 c3       	rjmp	.+1552   	; 0x54f6 <command_common+0x698>
    4ee6:	ec c1       	rjmp	.+984    	; 0x52c0 <command_common+0x462>
    4ee8:	83 34       	cpi	r24, 0x43	; 67
    4eea:	09 f4       	brne	.+2      	; 0x4eee <command_common+0x90>
    4eec:	fc c2       	rjmp	.+1528   	; 0x54e6 <command_common+0x688>
    4eee:	88 34       	cpi	r24, 0x48	; 72
    4ef0:	09 f0       	breq	.+2      	; 0x4ef4 <command_common+0x96>
    4ef2:	01 c3       	rjmp	.+1538   	; 0x54f6 <command_common+0x698>
    4ef4:	fa c1       	rjmp	.+1012   	; 0x52ea <command_common+0x48c>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4ef6:	89 e2       	ldi	r24, 0x29	; 41
    4ef8:	98 e0       	ldi	r25, 0x08	; 8
    4efa:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4efe:	87 e6       	ldi	r24, 0x67	; 103
    4f00:	99 e0       	ldi	r25, 0x09	; 9
    4f02:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    4f06:	0e 94 19 22 	call	0x4432	; 0x4432 <eeconfig_read_default_layer>
    4f0a:	00 d0       	rcall	.+0      	; 0x4f0c <command_common+0xae>
    4f0c:	00 d0       	rcall	.+0      	; 0x4f0e <command_common+0xb0>
    4f0e:	ed b7       	in	r30, 0x3d	; 61
    4f10:	fe b7       	in	r31, 0x3e	; 62
    4f12:	31 96       	adiw	r30, 0x01	; 1
    4f14:	24 e6       	ldi	r18, 0x64	; 100
    4f16:	39 e0       	ldi	r19, 0x09	; 9
    4f18:	ad b7       	in	r26, 0x3d	; 61
    4f1a:	be b7       	in	r27, 0x3e	; 62
    4f1c:	12 96       	adiw	r26, 0x02	; 2
    4f1e:	3c 93       	st	X, r19
    4f20:	2e 93       	st	-X, r18
    4f22:	11 97       	sbiw	r26, 0x01	; 1
    4f24:	82 83       	std	Z+2, r24	; 0x02
    4f26:	13 82       	std	Z+3, r1	; 0x03
    4f28:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    4f2c:	0f 90       	pop	r0
    4f2e:	0f 90       	pop	r0
    4f30:	0f 90       	pop	r0
    4f32:	0f 90       	pop	r0
    4f34:	82 e6       	ldi	r24, 0x62	; 98
    4f36:	99 e0       	ldi	r25, 0x09	; 9
    4f38:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4f3c:	0e 94 1e 22 	call	0x443c	; 0x443c <eeconfig_read_debug>
    4f40:	18 2f       	mov	r17, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4f42:	8f e4       	ldi	r24, 0x4F	; 79
    4f44:	99 e0       	ldi	r25, 0x09	; 9
    4f46:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    4f4a:	00 d0       	rcall	.+0      	; 0x4f4c <command_common+0xee>
    4f4c:	00 d0       	rcall	.+0      	; 0x4f4e <command_common+0xf0>
    4f4e:	ed b7       	in	r30, 0x3d	; 61
    4f50:	fe b7       	in	r31, 0x3e	; 62
    4f52:	31 96       	adiw	r30, 0x01	; 1
    4f54:	8a e4       	ldi	r24, 0x4A	; 74
    4f56:	99 e0       	ldi	r25, 0x09	; 9
    4f58:	ad b7       	in	r26, 0x3d	; 61
    4f5a:	be b7       	in	r27, 0x3e	; 62
    4f5c:	12 96       	adiw	r26, 0x02	; 2
    4f5e:	9c 93       	st	X, r25
    4f60:	8e 93       	st	-X, r24
    4f62:	11 97       	sbiw	r26, 0x01	; 1
    4f64:	12 83       	std	Z+2, r17	; 0x02
    4f66:	13 82       	std	Z+3, r1	; 0x03
    4f68:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    4f6c:	0f 90       	pop	r0
    4f6e:	0f 90       	pop	r0
    4f70:	0f 90       	pop	r0
    4f72:	0f 90       	pop	r0
    4f74:	88 e4       	ldi	r24, 0x48	; 72
    4f76:	99 e0       	ldi	r25, 0x09	; 9
    4f78:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4f7c:	8e e3       	ldi	r24, 0x3E	; 62
    4f7e:	99 e0       	ldi	r25, 0x09	; 9
    4f80:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    4f84:	00 d0       	rcall	.+0      	; 0x4f86 <command_common+0x128>
    4f86:	00 d0       	rcall	.+0      	; 0x4f88 <command_common+0x12a>
    4f88:	ed b7       	in	r30, 0x3d	; 61
    4f8a:	fe b7       	in	r31, 0x3e	; 62
    4f8c:	31 96       	adiw	r30, 0x01	; 1
    4f8e:	8b e3       	ldi	r24, 0x3B	; 59
    4f90:	99 e0       	ldi	r25, 0x09	; 9
    4f92:	ad b7       	in	r26, 0x3d	; 61
    4f94:	be b7       	in	r27, 0x3e	; 62
    4f96:	12 96       	adiw	r26, 0x02	; 2
    4f98:	9c 93       	st	X, r25
    4f9a:	8e 93       	st	-X, r24
    4f9c:	11 97       	sbiw	r26, 0x01	; 1
    4f9e:	81 2f       	mov	r24, r17
    4fa0:	81 70       	andi	r24, 0x01	; 1
    4fa2:	82 83       	std	Z+2, r24	; 0x02
    4fa4:	13 82       	std	Z+3, r1	; 0x03
    4fa6:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    4faa:	0f 90       	pop	r0
    4fac:	0f 90       	pop	r0
    4fae:	0f 90       	pop	r0
    4fb0:	0f 90       	pop	r0
    4fb2:	89 e3       	ldi	r24, 0x39	; 57
    4fb4:	99 e0       	ldi	r25, 0x09	; 9
    4fb6:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4fba:	8f e2       	ldi	r24, 0x2F	; 47
    4fbc:	99 e0       	ldi	r25, 0x09	; 9
    4fbe:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    4fc2:	00 d0       	rcall	.+0      	; 0x4fc4 <command_common+0x166>
    4fc4:	00 d0       	rcall	.+0      	; 0x4fc6 <command_common+0x168>
    4fc6:	ed b7       	in	r30, 0x3d	; 61
    4fc8:	fe b7       	in	r31, 0x3e	; 62
    4fca:	31 96       	adiw	r30, 0x01	; 1
    4fcc:	8c e2       	ldi	r24, 0x2C	; 44
    4fce:	99 e0       	ldi	r25, 0x09	; 9
    4fd0:	ad b7       	in	r26, 0x3d	; 61
    4fd2:	be b7       	in	r27, 0x3e	; 62
    4fd4:	12 96       	adiw	r26, 0x02	; 2
    4fd6:	9c 93       	st	X, r25
    4fd8:	8e 93       	st	-X, r24
    4fda:	11 97       	sbiw	r26, 0x01	; 1
    4fdc:	81 2f       	mov	r24, r17
    4fde:	86 95       	lsr	r24
    4fe0:	81 70       	andi	r24, 0x01	; 1
    4fe2:	82 83       	std	Z+2, r24	; 0x02
    4fe4:	13 82       	std	Z+3, r1	; 0x03
    4fe6:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    4fea:	0f 90       	pop	r0
    4fec:	0f 90       	pop	r0
    4fee:	0f 90       	pop	r0
    4ff0:	0f 90       	pop	r0
    4ff2:	8a e2       	ldi	r24, 0x2A	; 42
    4ff4:	99 e0       	ldi	r25, 0x09	; 9
    4ff6:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4ffa:	8e e1       	ldi	r24, 0x1E	; 30
    4ffc:	99 e0       	ldi	r25, 0x09	; 9
    4ffe:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    5002:	00 d0       	rcall	.+0      	; 0x5004 <command_common+0x1a6>
    5004:	00 d0       	rcall	.+0      	; 0x5006 <command_common+0x1a8>
    5006:	ed b7       	in	r30, 0x3d	; 61
    5008:	fe b7       	in	r31, 0x3e	; 62
    500a:	31 96       	adiw	r30, 0x01	; 1
    500c:	8b e1       	ldi	r24, 0x1B	; 27
    500e:	99 e0       	ldi	r25, 0x09	; 9
    5010:	ad b7       	in	r26, 0x3d	; 61
    5012:	be b7       	in	r27, 0x3e	; 62
    5014:	12 96       	adiw	r26, 0x02	; 2
    5016:	9c 93       	st	X, r25
    5018:	8e 93       	st	-X, r24
    501a:	11 97       	sbiw	r26, 0x01	; 1
    501c:	16 95       	lsr	r17
    501e:	16 95       	lsr	r17
    5020:	81 2f       	mov	r24, r17
    5022:	81 70       	andi	r24, 0x01	; 1
    5024:	82 83       	std	Z+2, r24	; 0x02
    5026:	13 82       	std	Z+3, r1	; 0x03
    5028:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    502c:	0f 90       	pop	r0
    502e:	0f 90       	pop	r0
    5030:	0f 90       	pop	r0
    5032:	0f 90       	pop	r0
    5034:	89 e1       	ldi	r24, 0x19	; 25
    5036:	99 e0       	ldi	r25, 0x09	; 9
    5038:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    503c:	80 e1       	ldi	r24, 0x10	; 16
    503e:	99 e0       	ldi	r25, 0x09	; 9
    5040:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    5044:	00 d0       	rcall	.+0      	; 0x5046 <command_common+0x1e8>
    5046:	00 d0       	rcall	.+0      	; 0x5048 <command_common+0x1ea>
    5048:	ed b7       	in	r30, 0x3d	; 61
    504a:	fe b7       	in	r31, 0x3e	; 62
    504c:	31 96       	adiw	r30, 0x01	; 1
    504e:	8d e0       	ldi	r24, 0x0D	; 13
    5050:	99 e0       	ldi	r25, 0x09	; 9
    5052:	ad b7       	in	r26, 0x3d	; 61
    5054:	be b7       	in	r27, 0x3e	; 62
    5056:	12 96       	adiw	r26, 0x02	; 2
    5058:	9c 93       	st	X, r25
    505a:	8e 93       	st	-X, r24
    505c:	11 97       	sbiw	r26, 0x01	; 1
    505e:	16 95       	lsr	r17
    5060:	11 70       	andi	r17, 0x01	; 1
    5062:	12 83       	std	Z+2, r17	; 0x02
    5064:	13 82       	std	Z+3, r1	; 0x03
    5066:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    506a:	0f 90       	pop	r0
    506c:	0f 90       	pop	r0
    506e:	0f 90       	pop	r0
    5070:	0f 90       	pop	r0
    5072:	8b e0       	ldi	r24, 0x0B	; 11
    5074:	99 e0       	ldi	r25, 0x09	; 9
    5076:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    507a:	0e 94 14 22 	call	0x4428	; 0x4428 <eeconfig_read_keymap>
    507e:	18 2f       	mov	r17, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    5080:	87 ef       	ldi	r24, 0xF7	; 247
    5082:	98 e0       	ldi	r25, 0x08	; 8
    5084:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    5088:	00 d0       	rcall	.+0      	; 0x508a <command_common+0x22c>
    508a:	00 d0       	rcall	.+0      	; 0x508c <command_common+0x22e>
    508c:	ed b7       	in	r30, 0x3d	; 61
    508e:	fe b7       	in	r31, 0x3e	; 62
    5090:	31 96       	adiw	r30, 0x01	; 1
    5092:	82 ef       	ldi	r24, 0xF2	; 242
    5094:	98 e0       	ldi	r25, 0x08	; 8
    5096:	ad b7       	in	r26, 0x3d	; 61
    5098:	be b7       	in	r27, 0x3e	; 62
    509a:	12 96       	adiw	r26, 0x02	; 2
    509c:	9c 93       	st	X, r25
    509e:	8e 93       	st	-X, r24
    50a0:	11 97       	sbiw	r26, 0x01	; 1
    50a2:	12 83       	std	Z+2, r17	; 0x02
    50a4:	13 82       	std	Z+3, r1	; 0x03
    50a6:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    50aa:	0f 90       	pop	r0
    50ac:	0f 90       	pop	r0
    50ae:	0f 90       	pop	r0
    50b0:	0f 90       	pop	r0
    50b2:	80 ef       	ldi	r24, 0xF0	; 240
    50b4:	98 e0       	ldi	r25, 0x08	; 8
    50b6:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    50ba:	87 ed       	ldi	r24, 0xD7	; 215
    50bc:	98 e0       	ldi	r25, 0x08	; 8
    50be:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    50c2:	00 d0       	rcall	.+0      	; 0x50c4 <command_common+0x266>
    50c4:	00 d0       	rcall	.+0      	; 0x50c6 <command_common+0x268>
    50c6:	ed b7       	in	r30, 0x3d	; 61
    50c8:	fe b7       	in	r31, 0x3e	; 62
    50ca:	31 96       	adiw	r30, 0x01	; 1
    50cc:	84 ed       	ldi	r24, 0xD4	; 212
    50ce:	98 e0       	ldi	r25, 0x08	; 8
    50d0:	ad b7       	in	r26, 0x3d	; 61
    50d2:	be b7       	in	r27, 0x3e	; 62
    50d4:	12 96       	adiw	r26, 0x02	; 2
    50d6:	9c 93       	st	X, r25
    50d8:	8e 93       	st	-X, r24
    50da:	11 97       	sbiw	r26, 0x01	; 1
    50dc:	81 2f       	mov	r24, r17
    50de:	81 70       	andi	r24, 0x01	; 1
    50e0:	82 83       	std	Z+2, r24	; 0x02
    50e2:	13 82       	std	Z+3, r1	; 0x03
    50e4:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    50e8:	0f 90       	pop	r0
    50ea:	0f 90       	pop	r0
    50ec:	0f 90       	pop	r0
    50ee:	0f 90       	pop	r0
    50f0:	82 ed       	ldi	r24, 0xD2	; 210
    50f2:	98 e0       	ldi	r25, 0x08	; 8
    50f4:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    50f8:	8b eb       	ldi	r24, 0xBB	; 187
    50fa:	98 e0       	ldi	r25, 0x08	; 8
    50fc:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    5100:	00 d0       	rcall	.+0      	; 0x5102 <command_common+0x2a4>
    5102:	00 d0       	rcall	.+0      	; 0x5104 <command_common+0x2a6>
    5104:	ed b7       	in	r30, 0x3d	; 61
    5106:	fe b7       	in	r31, 0x3e	; 62
    5108:	31 96       	adiw	r30, 0x01	; 1
    510a:	88 eb       	ldi	r24, 0xB8	; 184
    510c:	98 e0       	ldi	r25, 0x08	; 8
    510e:	ad b7       	in	r26, 0x3d	; 61
    5110:	be b7       	in	r27, 0x3e	; 62
    5112:	12 96       	adiw	r26, 0x02	; 2
    5114:	9c 93       	st	X, r25
    5116:	8e 93       	st	-X, r24
    5118:	11 97       	sbiw	r26, 0x01	; 1
    511a:	81 2f       	mov	r24, r17
    511c:	86 95       	lsr	r24
    511e:	81 70       	andi	r24, 0x01	; 1
    5120:	82 83       	std	Z+2, r24	; 0x02
    5122:	13 82       	std	Z+3, r1	; 0x03
    5124:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    5128:	0f 90       	pop	r0
    512a:	0f 90       	pop	r0
    512c:	0f 90       	pop	r0
    512e:	0f 90       	pop	r0
    5130:	86 eb       	ldi	r24, 0xB6	; 182
    5132:	98 e0       	ldi	r25, 0x08	; 8
    5134:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    5138:	84 ea       	ldi	r24, 0xA4	; 164
    513a:	98 e0       	ldi	r25, 0x08	; 8
    513c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    5140:	00 d0       	rcall	.+0      	; 0x5142 <command_common+0x2e4>
    5142:	00 d0       	rcall	.+0      	; 0x5144 <command_common+0x2e6>
    5144:	ed b7       	in	r30, 0x3d	; 61
    5146:	fe b7       	in	r31, 0x3e	; 62
    5148:	31 96       	adiw	r30, 0x01	; 1
    514a:	81 ea       	ldi	r24, 0xA1	; 161
    514c:	98 e0       	ldi	r25, 0x08	; 8
    514e:	ad b7       	in	r26, 0x3d	; 61
    5150:	be b7       	in	r27, 0x3e	; 62
    5152:	12 96       	adiw	r26, 0x02	; 2
    5154:	9c 93       	st	X, r25
    5156:	8e 93       	st	-X, r24
    5158:	11 97       	sbiw	r26, 0x01	; 1
    515a:	81 2f       	mov	r24, r17
    515c:	86 95       	lsr	r24
    515e:	86 95       	lsr	r24
    5160:	81 70       	andi	r24, 0x01	; 1
    5162:	82 83       	std	Z+2, r24	; 0x02
    5164:	13 82       	std	Z+3, r1	; 0x03
    5166:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    516a:	0f 90       	pop	r0
    516c:	0f 90       	pop	r0
    516e:	0f 90       	pop	r0
    5170:	0f 90       	pop	r0
    5172:	8f e9       	ldi	r24, 0x9F	; 159
    5174:	98 e0       	ldi	r25, 0x08	; 8
    5176:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    517a:	8d e8       	ldi	r24, 0x8D	; 141
    517c:	98 e0       	ldi	r25, 0x08	; 8
    517e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    5182:	00 d0       	rcall	.+0      	; 0x5184 <command_common+0x326>
    5184:	00 d0       	rcall	.+0      	; 0x5186 <command_common+0x328>
    5186:	ed b7       	in	r30, 0x3d	; 61
    5188:	fe b7       	in	r31, 0x3e	; 62
    518a:	31 96       	adiw	r30, 0x01	; 1
    518c:	8a e8       	ldi	r24, 0x8A	; 138
    518e:	98 e0       	ldi	r25, 0x08	; 8
    5190:	ad b7       	in	r26, 0x3d	; 61
    5192:	be b7       	in	r27, 0x3e	; 62
    5194:	12 96       	adiw	r26, 0x02	; 2
    5196:	9c 93       	st	X, r25
    5198:	8e 93       	st	-X, r24
    519a:	11 97       	sbiw	r26, 0x01	; 1
    519c:	81 2f       	mov	r24, r17
    519e:	86 95       	lsr	r24
    51a0:	86 95       	lsr	r24
    51a2:	86 95       	lsr	r24
    51a4:	81 70       	andi	r24, 0x01	; 1
    51a6:	82 83       	std	Z+2, r24	; 0x02
    51a8:	13 82       	std	Z+3, r1	; 0x03
    51aa:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    51ae:	0f 90       	pop	r0
    51b0:	0f 90       	pop	r0
    51b2:	0f 90       	pop	r0
    51b4:	0f 90       	pop	r0
    51b6:	88 e8       	ldi	r24, 0x88	; 136
    51b8:	98 e0       	ldi	r25, 0x08	; 8
    51ba:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    51be:	8e e7       	ldi	r24, 0x7E	; 126
    51c0:	98 e0       	ldi	r25, 0x08	; 8
    51c2:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    51c6:	00 d0       	rcall	.+0      	; 0x51c8 <command_common+0x36a>
    51c8:	00 d0       	rcall	.+0      	; 0x51ca <command_common+0x36c>
    51ca:	ed b7       	in	r30, 0x3d	; 61
    51cc:	fe b7       	in	r31, 0x3e	; 62
    51ce:	31 96       	adiw	r30, 0x01	; 1
    51d0:	8b e7       	ldi	r24, 0x7B	; 123
    51d2:	98 e0       	ldi	r25, 0x08	; 8
    51d4:	ad b7       	in	r26, 0x3d	; 61
    51d6:	be b7       	in	r27, 0x3e	; 62
    51d8:	12 96       	adiw	r26, 0x02	; 2
    51da:	9c 93       	st	X, r25
    51dc:	8e 93       	st	-X, r24
    51de:	11 97       	sbiw	r26, 0x01	; 1
    51e0:	81 2f       	mov	r24, r17
    51e2:	82 95       	swap	r24
    51e4:	81 70       	andi	r24, 0x01	; 1
    51e6:	82 83       	std	Z+2, r24	; 0x02
    51e8:	13 82       	std	Z+3, r1	; 0x03
    51ea:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    51ee:	0f 90       	pop	r0
    51f0:	0f 90       	pop	r0
    51f2:	0f 90       	pop	r0
    51f4:	0f 90       	pop	r0
    51f6:	89 e7       	ldi	r24, 0x79	; 121
    51f8:	98 e0       	ldi	r25, 0x08	; 8
    51fa:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    51fe:	87 e6       	ldi	r24, 0x67	; 103
    5200:	98 e0       	ldi	r25, 0x08	; 8
    5202:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    5206:	00 d0       	rcall	.+0      	; 0x5208 <command_common+0x3aa>
    5208:	00 d0       	rcall	.+0      	; 0x520a <command_common+0x3ac>
    520a:	ed b7       	in	r30, 0x3d	; 61
    520c:	fe b7       	in	r31, 0x3e	; 62
    520e:	31 96       	adiw	r30, 0x01	; 1
    5210:	84 e6       	ldi	r24, 0x64	; 100
    5212:	98 e0       	ldi	r25, 0x08	; 8
    5214:	ad b7       	in	r26, 0x3d	; 61
    5216:	be b7       	in	r27, 0x3e	; 62
    5218:	12 96       	adiw	r26, 0x02	; 2
    521a:	9c 93       	st	X, r25
    521c:	8e 93       	st	-X, r24
    521e:	11 97       	sbiw	r26, 0x01	; 1
    5220:	81 2f       	mov	r24, r17
    5222:	82 95       	swap	r24
    5224:	86 95       	lsr	r24
    5226:	81 70       	andi	r24, 0x01	; 1
    5228:	82 83       	std	Z+2, r24	; 0x02
    522a:	13 82       	std	Z+3, r1	; 0x03
    522c:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    5230:	0f 90       	pop	r0
    5232:	0f 90       	pop	r0
    5234:	0f 90       	pop	r0
    5236:	0f 90       	pop	r0
    5238:	82 e6       	ldi	r24, 0x62	; 98
    523a:	98 e0       	ldi	r25, 0x08	; 8
    523c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    5240:	86 e4       	ldi	r24, 0x46	; 70
    5242:	98 e0       	ldi	r25, 0x08	; 8
    5244:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    5248:	00 d0       	rcall	.+0      	; 0x524a <command_common+0x3ec>
    524a:	00 d0       	rcall	.+0      	; 0x524c <command_common+0x3ee>
    524c:	ed b7       	in	r30, 0x3d	; 61
    524e:	fe b7       	in	r31, 0x3e	; 62
    5250:	31 96       	adiw	r30, 0x01	; 1
    5252:	83 e4       	ldi	r24, 0x43	; 67
    5254:	98 e0       	ldi	r25, 0x08	; 8
    5256:	ad b7       	in	r26, 0x3d	; 61
    5258:	be b7       	in	r27, 0x3e	; 62
    525a:	12 96       	adiw	r26, 0x02	; 2
    525c:	9c 93       	st	X, r25
    525e:	8e 93       	st	-X, r24
    5260:	11 97       	sbiw	r26, 0x01	; 1
    5262:	12 95       	swap	r17
    5264:	16 95       	lsr	r17
    5266:	16 95       	lsr	r17
    5268:	13 70       	andi	r17, 0x03	; 3
    526a:	81 2f       	mov	r24, r17
    526c:	81 70       	andi	r24, 0x01	; 1
    526e:	82 83       	std	Z+2, r24	; 0x02
    5270:	13 82       	std	Z+3, r1	; 0x03
    5272:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    5276:	0f 90       	pop	r0
    5278:	0f 90       	pop	r0
    527a:	0f 90       	pop	r0
    527c:	0f 90       	pop	r0
    527e:	81 e4       	ldi	r24, 0x41	; 65
    5280:	98 e0       	ldi	r25, 0x08	; 8
    5282:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    5286:	89 e3       	ldi	r24, 0x39	; 57
    5288:	98 e0       	ldi	r25, 0x08	; 8
    528a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    528e:	00 d0       	rcall	.+0      	; 0x5290 <command_common+0x432>
    5290:	00 d0       	rcall	.+0      	; 0x5292 <command_common+0x434>
    5292:	ed b7       	in	r30, 0x3d	; 61
    5294:	fe b7       	in	r31, 0x3e	; 62
    5296:	31 96       	adiw	r30, 0x01	; 1
    5298:	86 e3       	ldi	r24, 0x36	; 54
    529a:	98 e0       	ldi	r25, 0x08	; 8
    529c:	ad b7       	in	r26, 0x3d	; 61
    529e:	be b7       	in	r27, 0x3e	; 62
    52a0:	12 96       	adiw	r26, 0x02	; 2
    52a2:	9c 93       	st	X, r25
    52a4:	8e 93       	st	-X, r24
    52a6:	11 97       	sbiw	r26, 0x01	; 1
    52a8:	16 95       	lsr	r17
    52aa:	12 83       	std	Z+2, r17	; 0x02
    52ac:	13 82       	std	Z+3, r1	; 0x03
    52ae:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    52b2:	0f 90       	pop	r0
    52b4:	0f 90       	pop	r0
    52b6:	0f 90       	pop	r0
    52b8:	0f 90       	pop	r0
    52ba:	84 e3       	ldi	r24, 0x34	; 52
    52bc:	98 e0       	ldi	r25, 0x08	; 8
    52be:	02 c0       	rjmp	.+4      	; 0x52c4 <command_common+0x466>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    52c0:	87 e7       	ldi	r24, 0x77	; 119
    52c2:	99 e0       	ldi	r25, 0x09	; 9
    52c4:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    52c8:	81 e0       	ldi	r24, 0x01	; 1
    52ca:	1a c1       	rjmp	.+564    	; 0x5500 <command_common+0x6a2>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    52cc:	80 91 a5 01 	lds	r24, 0x01A5
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    52d0:	80 7f       	andi	r24, 0xF0	; 240
    52d2:	80 93 a5 01 	sts	0x01A5, r24
            command_console_help();
    52d6:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <command_console_help>
            print("C> ");
    52da:	85 e2       	ldi	r24, 0x25	; 37
    52dc:	98 e0       	ldi	r25, 0x08	; 8
    52de:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
            command_state = CONSOLE;
    52e2:	81 e0       	ldi	r24, 0x01	; 1
    52e4:	80 93 b4 01 	sts	0x01B4, r24
    52e8:	0b c1       	rjmp	.+534    	; 0x5500 <command_common+0x6a2>
            break;
        case KC_PAUSE:
            clear_keyboard();
    52ea:	0e 94 d6 13 	call	0x27ac	; 0x27ac <clear_keyboard>
            print("\n\nbootloader... ");
    52ee:	84 e1       	ldi	r24, 0x14	; 20
    52f0:	98 e0       	ldi	r25, 0x08	; 8
    52f2:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    52f6:	80 e1       	ldi	r24, 0x10	; 16
    52f8:	97 e2       	ldi	r25, 0x27	; 39
    52fa:	20 e9       	ldi	r18, 0x90	; 144
    52fc:	31 e0       	ldi	r19, 0x01	; 1
    52fe:	f9 01       	movw	r30, r18
    5300:	31 97       	sbiw	r30, 0x01	; 1
    5302:	f1 f7       	brne	.-4      	; 0x5300 <command_common+0x4a2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5304:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5306:	d9 f7       	brne	.-10     	; 0x52fe <command_common+0x4a0>
            _delay_ms(1000);
            bootloader_jump(); // not return
    5308:	0e 94 45 20 	call	0x408a	; 0x408a <bootloader_jump>
    530c:	dd cf       	rjmp	.-70     	; 0x52c8 <command_common+0x46a>
            break;
        case KC_D:
            if (debug_enable) {
    530e:	80 91 a5 01 	lds	r24, 0x01A5
    5312:	80 ff       	sbrs	r24, 0
    5314:	08 c0       	rjmp	.+16     	; 0x5326 <command_common+0x4c8>
                print("\ndebug: off\n");
    5316:	87 e0       	ldi	r24, 0x07	; 7
    5318:	98 e0       	ldi	r25, 0x08	; 8
    531a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
                debug_matrix   = false;
    531e:	80 91 a5 01 	lds	r24, 0x01A5
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    5322:	80 7f       	andi	r24, 0xF0	; 240
    5324:	18 c0       	rjmp	.+48     	; 0x5356 <command_common+0x4f8>
            } else {
                print("\ndebug: on\n");
    5326:	8b ef       	ldi	r24, 0xFB	; 251
    5328:	97 e0       	ldi	r25, 0x07	; 7
    532a:	10 c0       	rjmp	.+32     	; 0x534c <command_common+0x4ee>
                debug_enable   = true;
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    532c:	80 91 a5 01 	lds	r24, 0x01A5
    5330:	98 2f       	mov	r25, r24
    5332:	96 95       	lsr	r25
    5334:	90 95       	com	r25
    5336:	91 70       	andi	r25, 0x01	; 1
    5338:	29 2f       	mov	r18, r25
    533a:	22 0f       	add	r18, r18
    533c:	8d 7f       	andi	r24, 0xFD	; 253
    533e:	82 2b       	or	r24, r18
    5340:	80 93 a5 01 	sts	0x01A5, r24
            if (debug_matrix) {
    5344:	99 23       	and	r25, r25
    5346:	51 f0       	breq	.+20     	; 0x535c <command_common+0x4fe>
                print("\nmatrix: on\n");
    5348:	8e ee       	ldi	r24, 0xEE	; 238
    534a:	97 e0       	ldi	r25, 0x07	; 7
    534c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
                debug_enable = true;
    5350:	80 91 a5 01 	lds	r24, 0x01A5
    5354:	81 60       	ori	r24, 0x01	; 1
    5356:	80 93 a5 01 	sts	0x01A5, r24
    535a:	b6 cf       	rjmp	.-148    	; 0x52c8 <command_common+0x46a>
            } else {
                print("\nmatrix: off\n");
    535c:	80 ee       	ldi	r24, 0xE0	; 224
    535e:	97 e0       	ldi	r25, 0x07	; 7
    5360:	b1 cf       	rjmp	.-158    	; 0x52c4 <command_common+0x466>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    5362:	80 91 a5 01 	lds	r24, 0x01A5
    5366:	98 2f       	mov	r25, r24
    5368:	96 95       	lsr	r25
    536a:	96 95       	lsr	r25
    536c:	90 95       	com	r25
    536e:	91 70       	andi	r25, 0x01	; 1
    5370:	29 2f       	mov	r18, r25
    5372:	22 0f       	add	r18, r18
    5374:	22 0f       	add	r18, r18
    5376:	8b 7f       	andi	r24, 0xFB	; 251
    5378:	82 2b       	or	r24, r18
    537a:	80 93 a5 01 	sts	0x01A5, r24
            if (debug_keyboard) {
    537e:	99 23       	and	r25, r25
    5380:	19 f0       	breq	.+6      	; 0x5388 <command_common+0x52a>
                print("\nkeyboard: on\n");
    5382:	81 ed       	ldi	r24, 0xD1	; 209
    5384:	97 e0       	ldi	r25, 0x07	; 7
    5386:	e2 cf       	rjmp	.-60     	; 0x534c <command_common+0x4ee>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    5388:	81 ec       	ldi	r24, 0xC1	; 193
    538a:	97 e0       	ldi	r25, 0x07	; 7
    538c:	9b cf       	rjmp	.-202    	; 0x52c4 <command_common+0x466>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    538e:	80 91 a5 01 	lds	r24, 0x01A5
    5392:	98 2f       	mov	r25, r24
    5394:	96 95       	lsr	r25
    5396:	96 95       	lsr	r25
    5398:	96 95       	lsr	r25
    539a:	90 95       	com	r25
    539c:	91 70       	andi	r25, 0x01	; 1
    539e:	29 2f       	mov	r18, r25
    53a0:	22 0f       	add	r18, r18
    53a2:	22 0f       	add	r18, r18
    53a4:	22 0f       	add	r18, r18
    53a6:	87 7f       	andi	r24, 0xF7	; 247
    53a8:	82 2b       	or	r24, r18
    53aa:	80 93 a5 01 	sts	0x01A5, r24
            if (debug_mouse) {
    53ae:	99 23       	and	r25, r25
    53b0:	19 f0       	breq	.+6      	; 0x53b8 <command_common+0x55a>
                print("\nmouse: on\n");
    53b2:	85 eb       	ldi	r24, 0xB5	; 181
    53b4:	97 e0       	ldi	r25, 0x07	; 7
    53b6:	ca cf       	rjmp	.-108    	; 0x534c <command_common+0x4ee>
                debug_enable = true;
            } else {
                print("\nmouse: off\n");
    53b8:	88 ea       	ldi	r24, 0xA8	; 168
    53ba:	97 e0       	ldi	r25, 0x07	; 7
    53bc:	83 cf       	rjmp	.-250    	; 0x52c4 <command_common+0x466>
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    53be:	89 e9       	ldi	r24, 0x99	; 153
    53c0:	97 e0       	ldi	r25, 0x07	; 7
    53c2:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    53c6:	80 e7       	ldi	r24, 0x70	; 112
    53c8:	97 e0       	ldi	r25, 0x07	; 7
    53ca:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    53ce:	8b e3       	ldi	r24, 0x3B	; 59
    53d0:	97 e0       	ldi	r25, 0x07	; 7
    53d2:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    53d6:	84 e1       	ldi	r24, 0x14	; 20
    53d8:	97 e0       	ldi	r25, 0x07	; 7
    53da:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
            /* build options */
            print("OPTIONS:"
    53de:	8f ec       	ldi	r24, 0xCF	; 207
    53e0:	96 e0       	ldi	r25, 0x06	; 6
    53e2:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    53e6:	84 ea       	ldi	r24, 0xA4	; 164
    53e8:	96 e0       	ldi	r25, 0x06	; 6
    53ea:	6c cf       	rjmp	.-296    	; 0x52c4 <command_common+0x466>
                  " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
                  " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
            break;
        case KC_S:
            print("\n\t- Status -\n");
    53ec:	86 e9       	ldi	r24, 0x96	; 150
    53ee:	96 e0       	ldi	r25, 0x06	; 6
    53f0:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
            print_val_hex8(host_keyboard_leds());
    53f4:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <host_keyboard_leds>
    53f8:	00 d0       	rcall	.+0      	; 0x53fa <command_common+0x59c>
    53fa:	00 d0       	rcall	.+0      	; 0x53fc <command_common+0x59e>
    53fc:	ed b7       	in	r30, 0x3d	; 61
    53fe:	fe b7       	in	r31, 0x3e	; 62
    5400:	31 96       	adiw	r30, 0x01	; 1
    5402:	2c e7       	ldi	r18, 0x7C	; 124
    5404:	36 e0       	ldi	r19, 0x06	; 6
    5406:	ad b7       	in	r26, 0x3d	; 61
    5408:	be b7       	in	r27, 0x3e	; 62
    540a:	12 96       	adiw	r26, 0x02	; 2
    540c:	3c 93       	st	X, r19
    540e:	2e 93       	st	-X, r18
    5410:	11 97       	sbiw	r26, 0x01	; 1
    5412:	82 83       	std	Z+2, r24	; 0x02
    5414:	13 82       	std	Z+3, r1	; 0x03
    5416:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
            print_val_hex8(keyboard_protocol);
    541a:	ed b7       	in	r30, 0x3d	; 61
    541c:	fe b7       	in	r31, 0x3e	; 62
    541e:	31 96       	adiw	r30, 0x01	; 1
    5420:	85 e6       	ldi	r24, 0x65	; 101
    5422:	96 e0       	ldi	r25, 0x06	; 6
    5424:	ad b7       	in	r26, 0x3d	; 61
    5426:	be b7       	in	r27, 0x3e	; 62
    5428:	12 96       	adiw	r26, 0x02	; 2
    542a:	9c 93       	st	X, r25
    542c:	8e 93       	st	-X, r24
    542e:	11 97       	sbiw	r26, 0x01	; 1
    5430:	80 91 01 01 	lds	r24, 0x0101
    5434:	82 83       	std	Z+2, r24	; 0x02
    5436:	13 82       	std	Z+3, r1	; 0x03
    5438:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
            print_val_hex8(keyboard_idle);
    543c:	ed b7       	in	r30, 0x3d	; 61
    543e:	fe b7       	in	r31, 0x3e	; 62
    5440:	31 96       	adiw	r30, 0x01	; 1
    5442:	82 e5       	ldi	r24, 0x52	; 82
    5444:	96 e0       	ldi	r25, 0x06	; 6
    5446:	ad b7       	in	r26, 0x3d	; 61
    5448:	be b7       	in	r27, 0x3e	; 62
    544a:	12 96       	adiw	r26, 0x02	; 2
    544c:	9c 93       	st	X, r25
    544e:	8e 93       	st	-X, r24
    5450:	11 97       	sbiw	r26, 0x01	; 1
    5452:	80 91 2c 01 	lds	r24, 0x012C
    5456:	82 83       	std	Z+2, r24	; 0x02
    5458:	13 82       	std	Z+3, r1	; 0x03
    545a:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
    545e:	ed b7       	in	r30, 0x3d	; 61
    5460:	fe b7       	in	r31, 0x3e	; 62
    5462:	31 96       	adiw	r30, 0x01	; 1
    5464:	8f e3       	ldi	r24, 0x3F	; 63
    5466:	96 e0       	ldi	r25, 0x06	; 6
    5468:	ad b7       	in	r26, 0x3d	; 61
    546a:	be b7       	in	r27, 0x3e	; 62
    546c:	12 96       	adiw	r26, 0x02	; 2
    546e:	9c 93       	st	X, r25
    5470:	8e 93       	st	-X, r24
    5472:	11 97       	sbiw	r26, 0x01	; 1
    5474:	80 91 0c 01 	lds	r24, 0x010C
    5478:	82 83       	std	Z+2, r24	; 0x02
    547a:	13 82       	std	Z+3, r1	; 0x03
    547c:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
#endif
            print_val_hex32(timer_count);
    5480:	20 91 a7 01 	lds	r18, 0x01A7
    5484:	30 91 a8 01 	lds	r19, 0x01A8
    5488:	40 91 a9 01 	lds	r20, 0x01A9
    548c:	50 91 aa 01 	lds	r21, 0x01AA
    5490:	00 d0       	rcall	.+0      	; 0x5492 <command_common+0x634>
    5492:	8b e2       	ldi	r24, 0x2B	; 43
    5494:	96 e0       	ldi	r25, 0x06	; 6
    5496:	ed b7       	in	r30, 0x3d	; 61
    5498:	fe b7       	in	r31, 0x3e	; 62
    549a:	92 83       	std	Z+2, r25	; 0x02
    549c:	81 83       	std	Z+1, r24	; 0x01
    549e:	ad b7       	in	r26, 0x3d	; 61
    54a0:	be b7       	in	r27, 0x3e	; 62
    54a2:	13 96       	adiw	r26, 0x03	; 3
    54a4:	2d 93       	st	X+, r18
    54a6:	3d 93       	st	X+, r19
    54a8:	4d 93       	st	X+, r20
    54aa:	5c 93       	st	X, r21
    54ac:	16 97       	sbiw	r26, 0x06	; 6
    54ae:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    54b2:	81 e0       	ldi	r24, 0x01	; 1
    54b4:	ed b7       	in	r30, 0x3d	; 61
    54b6:	fe b7       	in	r31, 0x3e	; 62
    54b8:	36 96       	adiw	r30, 0x06	; 6
    54ba:	0f b6       	in	r0, 0x3f	; 63
    54bc:	f8 94       	cli
    54be:	fe bf       	out	0x3e, r31	; 62
    54c0:	0f be       	out	0x3f, r0	; 63
    54c2:	ed bf       	out	0x3d, r30	; 61
    54c4:	1d c0       	rjmp	.+58     	; 0x5500 <command_common+0x6a2>
#   endif
#endif
            break;
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    54c6:	0e 94 d6 13 	call	0x27ac	; 0x27ac <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    54ca:	80 91 0c 01 	lds	r24, 0x010C
    54ce:	91 e0       	ldi	r25, 0x01	; 1
    54d0:	89 27       	eor	r24, r25
    54d2:	80 93 0c 01 	sts	0x010C, r24
            if (keyboard_nkro)
    54d6:	88 23       	and	r24, r24
    54d8:	19 f0       	breq	.+6      	; 0x54e0 <command_common+0x682>
                print("NKRO: on\n");
    54da:	81 e2       	ldi	r24, 0x21	; 33
    54dc:	96 e0       	ldi	r25, 0x06	; 6
    54de:	f2 ce       	rjmp	.-540    	; 0x52c4 <command_common+0x466>
            else
                print("NKRO: off\n");
    54e0:	86 e1       	ldi	r24, 0x16	; 22
    54e2:	96 e0       	ldi	r25, 0x06	; 6
    54e4:	ef ce       	rjmp	.-546    	; 0x52c4 <command_common+0x466>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    54e6:	80 e0       	ldi	r24, 0x00	; 0
    54e8:	03 c0       	rjmp	.+6      	; 0x54f0 <command_common+0x692>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    54ea:	8d 51       	subi	r24, 0x1D	; 29
    54ec:	01 c0       	rjmp	.+2      	; 0x54f0 <command_common+0x692>
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    54ee:	89 53       	subi	r24, 0x39	; 57
    54f0:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <switch_default_layer>
    54f4:	e9 ce       	rjmp	.-558    	; 0x52c8 <command_common+0x46a>
            break;
        default:
            print("?");
    54f6:	84 e1       	ldi	r24, 0x14	; 20
    54f8:	96 e0       	ldi	r25, 0x06	; 6
    54fa:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    54fe:	80 e0       	ldi	r24, 0x00	; 0
            return false;
    }
    return true;
}
    5500:	1f 91       	pop	r17
    5502:	08 95       	ret

00005504 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    5504:	1f 93       	push	r17
    5506:	18 2f       	mov	r17, r24
    switch (command_state) {
    5508:	80 91 b4 01 	lds	r24, 0x01B4
    550c:	81 30       	cpi	r24, 0x01	; 1
    550e:	79 f0       	breq	.+30     	; 0x552e <command_proc+0x2a>
    5510:	81 30       	cpi	r24, 0x01	; 1
    5512:	20 f0       	brcs	.+8      	; 0x551c <command_proc+0x18>
    5514:	82 30       	cpi	r24, 0x02	; 2
    5516:	09 f0       	breq	.+2      	; 0x551a <command_proc+0x16>
    5518:	be c1       	rjmp	.+892    	; 0x5896 <command_proc+0x392>
    551a:	48 c0       	rjmp	.+144    	; 0x55ac <command_proc+0xa8>
        case ONESHOT:
            if (!IS_COMMAND())
    551c:	e0 91 0d 01 	lds	r30, 0x010D
    5520:	f0 91 0e 01 	lds	r31, 0x010E
    5524:	80 81       	ld	r24, Z
    5526:	82 32       	cpi	r24, 0x22	; 34
    5528:	09 f0       	breq	.+2      	; 0x552c <command_proc+0x28>
    552a:	b7 c1       	rjmp	.+878    	; 0x589a <command_proc+0x396>
    552c:	07 c0       	rjmp	.+14     	; 0x553c <command_proc+0x38>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    552e:	e0 91 0d 01 	lds	r30, 0x010D
    5532:	f0 91 0e 01 	lds	r31, 0x010E
    5536:	80 81       	ld	r24, Z
    5538:	82 32       	cpi	r24, 0x22	; 34
    553a:	49 f4       	brne	.+18     	; 0x554e <command_proc+0x4a>
                return (command_extra(code) || command_common(code));
    553c:	81 2f       	mov	r24, r17
    553e:	0e 94 33 25 	call	0x4a66	; 0x4a66 <command_extra>
    5542:	88 23       	and	r24, r24
    5544:	49 f5       	brne	.+82     	; 0x5598 <command_proc+0x94>
    5546:	81 2f       	mov	r24, r17
    5548:	0e 94 2f 27 	call	0x4e5e	; 0x4e5e <command_common>
    554c:	a7 c1       	rjmp	.+846    	; 0x589c <command_proc+0x398>
            else
                return (command_console_extra(code) || command_console(code));
    554e:	81 2f       	mov	r24, r17
    5550:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <command_console_extra>
    5554:	88 23       	and	r24, r24
    5556:	01 f5       	brne	.+64     	; 0x5598 <command_proc+0x94>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    5558:	14 31       	cpi	r17, 0x14	; 20
    555a:	91 f0       	breq	.+36     	; 0x5580 <command_proc+0x7c>
    555c:	15 31       	cpi	r17, 0x15	; 21
    555e:	28 f4       	brcc	.+10     	; 0x556a <command_proc+0x66>
    5560:	1b 30       	cpi	r17, 0x0B	; 11
    5562:	39 f0       	breq	.+14     	; 0x5572 <command_proc+0x6e>
    5564:	10 31       	cpi	r17, 0x10	; 16
    5566:	d9 f4       	brne	.+54     	; 0x559e <command_proc+0x9a>
    5568:	0e c0       	rjmp	.+28     	; 0x5586 <command_proc+0x82>
    556a:	19 32       	cpi	r17, 0x29	; 41
    556c:	49 f0       	breq	.+18     	; 0x5580 <command_proc+0x7c>
    556e:	18 33       	cpi	r17, 0x38	; 56
    5570:	b1 f4       	brne	.+44     	; 0x559e <command_proc+0x9a>
        case KC_H:
        case KC_SLASH: /* ? */
            command_console_help();
    5572:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <command_console_help>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    5576:	88 e4       	ldi	r24, 0x48	; 72
    5578:	9a e0       	ldi	r25, 0x0A	; 10
    557a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    557e:	0c c0       	rjmp	.+24     	; 0x5598 <command_proc+0x94>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    5580:	10 92 b4 01 	sts	0x01B4, r1
    5584:	10 c0       	rjmp	.+32     	; 0x55a6 <command_proc+0xa2>
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    5586:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <mousekey_console_help>
            print("M> ");
    558a:	8e e4       	ldi	r24, 0x4E	; 78
    558c:	9a e0       	ldi	r25, 0x0A	; 10
    558e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
            command_state = MOUSEKEY;
    5592:	82 e0       	ldi	r24, 0x02	; 2
    5594:	80 93 b4 01 	sts	0x01B4, r24
    5598:	81 e0       	ldi	r24, 0x01	; 1
    559a:	90 e0       	ldi	r25, 0x00	; 0
    559c:	7f c1       	rjmp	.+766    	; 0x589c <command_proc+0x398>
            return true;
#endif
        default:
            print("?");
    559e:	8c e4       	ldi	r24, 0x4C	; 76
    55a0:	9a e0       	ldi	r25, 0x0A	; 10
    55a2:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    55a6:	80 e0       	ldi	r24, 0x00	; 0
    55a8:	90 e0       	ldi	r25, 0x00	; 0
    55aa:	78 c1       	rjmp	.+752    	; 0x589c <command_proc+0x398>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    55ac:	14 32       	cpi	r17, 0x24	; 36
    55ae:	88 f4       	brcc	.+34     	; 0x55d2 <command_proc+0xce>
    55b0:	1e 31       	cpi	r17, 0x1E	; 30
    55b2:	08 f0       	brcs	.+2      	; 0x55b6 <command_proc+0xb2>
    55b4:	f2 c0       	rjmp	.+484    	; 0x579a <command_proc+0x296>
    55b6:	1b 30       	cpi	r17, 0x0B	; 11
    55b8:	09 f1       	breq	.+66     	; 0x55fc <command_proc+0xf8>
    55ba:	1c 30       	cpi	r17, 0x0C	; 12
    55bc:	20 f4       	brcc	.+8      	; 0x55c6 <command_proc+0xc2>
    55be:	17 30       	cpi	r17, 0x07	; 7
    55c0:	09 f0       	breq	.+2      	; 0x55c4 <command_proc+0xc0>
    55c2:	45 c1       	rjmp	.+650    	; 0x584e <command_proc+0x34a>
    55c4:	2d c1       	rjmp	.+602    	; 0x5820 <command_proc+0x31c>
    55c6:	13 31       	cpi	r17, 0x13	; 19
    55c8:	59 f1       	breq	.+86     	; 0x5620 <command_proc+0x11c>
    55ca:	14 31       	cpi	r17, 0x14	; 20
    55cc:	09 f0       	breq	.+2      	; 0x55d0 <command_proc+0xcc>
    55ce:	3f c1       	rjmp	.+638    	; 0x584e <command_proc+0x34a>
    55d0:	18 c0       	rjmp	.+48     	; 0x5602 <command_proc+0xfe>
    55d2:	1b 34       	cpi	r17, 0x4B	; 75
    55d4:	09 f4       	brne	.+2      	; 0x55d8 <command_proc+0xd4>
    55d6:	18 c1       	rjmp	.+560    	; 0x5808 <command_proc+0x304>
    55d8:	1c 34       	cpi	r17, 0x4C	; 76
    55da:	30 f4       	brcc	.+12     	; 0x55e8 <command_proc+0xe4>
    55dc:	19 32       	cpi	r17, 0x29	; 41
    55de:	89 f0       	breq	.+34     	; 0x5602 <command_proc+0xfe>
    55e0:	18 33       	cpi	r17, 0x38	; 56
    55e2:	09 f0       	breq	.+2      	; 0x55e6 <command_proc+0xe2>
    55e4:	34 c1       	rjmp	.+616    	; 0x584e <command_proc+0x34a>
    55e6:	0a c0       	rjmp	.+20     	; 0x55fc <command_proc+0xf8>
    55e8:	11 35       	cpi	r17, 0x51	; 81
    55ea:	09 f4       	brne	.+2      	; 0x55ee <command_proc+0xea>
    55ec:	09 c1       	rjmp	.+530    	; 0x5800 <command_proc+0x2fc>
    55ee:	12 35       	cpi	r17, 0x52	; 82
    55f0:	09 f4       	brne	.+2      	; 0x55f4 <command_proc+0xf0>
    55f2:	02 c1       	rjmp	.+516    	; 0x57f8 <command_proc+0x2f4>
    55f4:	1e 34       	cpi	r17, 0x4E	; 78
    55f6:	09 f0       	breq	.+2      	; 0x55fa <command_proc+0xf6>
    55f8:	2a c1       	rjmp	.+596    	; 0x584e <command_proc+0x34a>
    55fa:	0c c1       	rjmp	.+536    	; 0x5814 <command_proc+0x310>
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    55fc:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <mousekey_console_help>
    5600:	29 c1       	rjmp	.+594    	; 0x5854 <command_proc+0x350>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    5602:	80 91 b5 01 	lds	r24, 0x01B5
    5606:	88 23       	and	r24, r24
    5608:	19 f0       	breq	.+6      	; 0x5610 <command_proc+0x10c>
                mousekey_param = 0;
    560a:	10 92 b5 01 	sts	0x01B5, r1
    560e:	22 c1       	rjmp	.+580    	; 0x5854 <command_proc+0x350>
            } else {
                print("C> ");
    5610:	83 eb       	ldi	r24, 0xB3	; 179
    5612:	9b e0       	ldi	r25, 0x0B	; 11
    5614:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
                command_state = CONSOLE;
    5618:	81 e0       	ldi	r24, 0x01	; 1
    561a:	80 93 b4 01 	sts	0x01B4, r24
    561e:	3e c1       	rjmp	.+636    	; 0x589c <command_proc+0x398>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    5620:	85 e4       	ldi	r24, 0x45	; 69
    5622:	9c e0       	ldi	r25, 0x0C	; 12
    5624:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    5628:	83 e3       	ldi	r24, 0x33	; 51
    562a:	9c e0       	ldi	r25, 0x0C	; 12
    562c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    5630:	00 d0       	rcall	.+0      	; 0x5632 <command_proc+0x12e>
    5632:	00 d0       	rcall	.+0      	; 0x5634 <command_proc+0x130>
    5634:	ed b7       	in	r30, 0x3d	; 61
    5636:	fe b7       	in	r31, 0x3e	; 62
    5638:	31 96       	adiw	r30, 0x01	; 1
    563a:	80 e3       	ldi	r24, 0x30	; 48
    563c:	9c e0       	ldi	r25, 0x0C	; 12
    563e:	ad b7       	in	r26, 0x3d	; 61
    5640:	be b7       	in	r27, 0x3e	; 62
    5642:	12 96       	adiw	r26, 0x02	; 2
    5644:	9c 93       	st	X, r25
    5646:	8e 93       	st	-X, r24
    5648:	11 97       	sbiw	r26, 0x01	; 1
    564a:	80 91 0f 01 	lds	r24, 0x010F
    564e:	82 83       	std	Z+2, r24	; 0x02
    5650:	13 82       	std	Z+3, r1	; 0x03
    5652:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    5656:	0f 90       	pop	r0
    5658:	0f 90       	pop	r0
    565a:	0f 90       	pop	r0
    565c:	0f 90       	pop	r0
    565e:	8e e2       	ldi	r24, 0x2E	; 46
    5660:	9c e0       	ldi	r25, 0x0C	; 12
    5662:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    5666:	8c e1       	ldi	r24, 0x1C	; 28
    5668:	9c e0       	ldi	r25, 0x0C	; 12
    566a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    566e:	00 d0       	rcall	.+0      	; 0x5670 <command_proc+0x16c>
    5670:	00 d0       	rcall	.+0      	; 0x5672 <command_proc+0x16e>
    5672:	ed b7       	in	r30, 0x3d	; 61
    5674:	fe b7       	in	r31, 0x3e	; 62
    5676:	31 96       	adiw	r30, 0x01	; 1
    5678:	89 e1       	ldi	r24, 0x19	; 25
    567a:	9c e0       	ldi	r25, 0x0C	; 12
    567c:	ad b7       	in	r26, 0x3d	; 61
    567e:	be b7       	in	r27, 0x3e	; 62
    5680:	12 96       	adiw	r26, 0x02	; 2
    5682:	9c 93       	st	X, r25
    5684:	8e 93       	st	-X, r24
    5686:	11 97       	sbiw	r26, 0x01	; 1
    5688:	80 91 10 01 	lds	r24, 0x0110
    568c:	82 83       	std	Z+2, r24	; 0x02
    568e:	13 82       	std	Z+3, r1	; 0x03
    5690:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    5694:	0f 90       	pop	r0
    5696:	0f 90       	pop	r0
    5698:	0f 90       	pop	r0
    569a:	0f 90       	pop	r0
    569c:	87 e1       	ldi	r24, 0x17	; 23
    569e:	9c e0       	ldi	r25, 0x0C	; 12
    56a0:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    56a4:	88 e0       	ldi	r24, 0x08	; 8
    56a6:	9c e0       	ldi	r25, 0x0C	; 12
    56a8:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    56ac:	00 d0       	rcall	.+0      	; 0x56ae <command_proc+0x1aa>
    56ae:	00 d0       	rcall	.+0      	; 0x56b0 <command_proc+0x1ac>
    56b0:	ed b7       	in	r30, 0x3d	; 61
    56b2:	fe b7       	in	r31, 0x3e	; 62
    56b4:	31 96       	adiw	r30, 0x01	; 1
    56b6:	85 e0       	ldi	r24, 0x05	; 5
    56b8:	9c e0       	ldi	r25, 0x0C	; 12
    56ba:	ad b7       	in	r26, 0x3d	; 61
    56bc:	be b7       	in	r27, 0x3e	; 62
    56be:	12 96       	adiw	r26, 0x02	; 2
    56c0:	9c 93       	st	X, r25
    56c2:	8e 93       	st	-X, r24
    56c4:	11 97       	sbiw	r26, 0x01	; 1
    56c6:	80 91 11 01 	lds	r24, 0x0111
    56ca:	82 83       	std	Z+2, r24	; 0x02
    56cc:	13 82       	std	Z+3, r1	; 0x03
    56ce:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    56d2:	0f 90       	pop	r0
    56d4:	0f 90       	pop	r0
    56d6:	0f 90       	pop	r0
    56d8:	0f 90       	pop	r0
    56da:	83 e0       	ldi	r24, 0x03	; 3
    56dc:	9c e0       	ldi	r25, 0x0C	; 12
    56de:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    56e2:	82 ef       	ldi	r24, 0xF2	; 242
    56e4:	9b e0       	ldi	r25, 0x0B	; 11
    56e6:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    56ea:	00 d0       	rcall	.+0      	; 0x56ec <command_proc+0x1e8>
    56ec:	00 d0       	rcall	.+0      	; 0x56ee <command_proc+0x1ea>
    56ee:	ed b7       	in	r30, 0x3d	; 61
    56f0:	fe b7       	in	r31, 0x3e	; 62
    56f2:	31 96       	adiw	r30, 0x01	; 1
    56f4:	8f ee       	ldi	r24, 0xEF	; 239
    56f6:	9b e0       	ldi	r25, 0x0B	; 11
    56f8:	ad b7       	in	r26, 0x3d	; 61
    56fa:	be b7       	in	r27, 0x3e	; 62
    56fc:	12 96       	adiw	r26, 0x02	; 2
    56fe:	9c 93       	st	X, r25
    5700:	8e 93       	st	-X, r24
    5702:	11 97       	sbiw	r26, 0x01	; 1
    5704:	80 91 12 01 	lds	r24, 0x0112
    5708:	82 83       	std	Z+2, r24	; 0x02
    570a:	13 82       	std	Z+3, r1	; 0x03
    570c:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    5710:	0f 90       	pop	r0
    5712:	0f 90       	pop	r0
    5714:	0f 90       	pop	r0
    5716:	0f 90       	pop	r0
    5718:	8d ee       	ldi	r24, 0xED	; 237
    571a:	9b e0       	ldi	r25, 0x0B	; 11
    571c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    5720:	88 ed       	ldi	r24, 0xD8	; 216
    5722:	9b e0       	ldi	r25, 0x0B	; 11
    5724:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    5728:	00 d0       	rcall	.+0      	; 0x572a <command_proc+0x226>
    572a:	00 d0       	rcall	.+0      	; 0x572c <command_proc+0x228>
    572c:	ed b7       	in	r30, 0x3d	; 61
    572e:	fe b7       	in	r31, 0x3e	; 62
    5730:	31 96       	adiw	r30, 0x01	; 1
    5732:	85 ed       	ldi	r24, 0xD5	; 213
    5734:	9b e0       	ldi	r25, 0x0B	; 11
    5736:	ad b7       	in	r26, 0x3d	; 61
    5738:	be b7       	in	r27, 0x3e	; 62
    573a:	12 96       	adiw	r26, 0x02	; 2
    573c:	9c 93       	st	X, r25
    573e:	8e 93       	st	-X, r24
    5740:	11 97       	sbiw	r26, 0x01	; 1
    5742:	80 91 13 01 	lds	r24, 0x0113
    5746:	82 83       	std	Z+2, r24	; 0x02
    5748:	13 82       	std	Z+3, r1	; 0x03
    574a:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    574e:	0f 90       	pop	r0
    5750:	0f 90       	pop	r0
    5752:	0f 90       	pop	r0
    5754:	0f 90       	pop	r0
    5756:	83 ed       	ldi	r24, 0xD3	; 211
    5758:	9b e0       	ldi	r25, 0x0B	; 11
    575a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    575e:	8c eb       	ldi	r24, 0xBC	; 188
    5760:	9b e0       	ldi	r25, 0x0B	; 11
    5762:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    5766:	00 d0       	rcall	.+0      	; 0x5768 <command_proc+0x264>
    5768:	00 d0       	rcall	.+0      	; 0x576a <command_proc+0x266>
    576a:	ed b7       	in	r30, 0x3d	; 61
    576c:	fe b7       	in	r31, 0x3e	; 62
    576e:	31 96       	adiw	r30, 0x01	; 1
    5770:	89 eb       	ldi	r24, 0xB9	; 185
    5772:	9b e0       	ldi	r25, 0x0B	; 11
    5774:	ad b7       	in	r26, 0x3d	; 61
    5776:	be b7       	in	r27, 0x3e	; 62
    5778:	12 96       	adiw	r26, 0x02	; 2
    577a:	9c 93       	st	X, r25
    577c:	8e 93       	st	-X, r24
    577e:	11 97       	sbiw	r26, 0x01	; 1
    5780:	80 91 14 01 	lds	r24, 0x0114
    5784:	82 83       	std	Z+2, r24	; 0x02
    5786:	13 82       	std	Z+3, r1	; 0x03
    5788:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    578c:	0f 90       	pop	r0
    578e:	0f 90       	pop	r0
    5790:	0f 90       	pop	r0
    5792:	0f 90       	pop	r0
    5794:	87 eb       	ldi	r24, 0xB7	; 183
    5796:	9b e0       	ldi	r25, 0x0B	; 11
    5798:	57 c0       	rjmp	.+174    	; 0x5848 <command_proc+0x344>
/***********************************************************
 * Utilities
 ***********************************************************/
static uint8_t numkey2num(uint8_t code)
{
    switch (code) {
    579a:	12 32       	cpi	r17, 0x22	; 34
    579c:	f9 f0       	breq	.+62     	; 0x57dc <command_proc+0x2d8>
    579e:	13 32       	cpi	r17, 0x23	; 35
    57a0:	60 f4       	brcc	.+24     	; 0x57ba <command_proc+0x2b6>
    57a2:	1f 31       	cpi	r17, 0x1F	; 31
    57a4:	99 f0       	breq	.+38     	; 0x57cc <command_proc+0x2c8>
    57a6:	10 32       	cpi	r17, 0x20	; 32
    57a8:	18 f4       	brcc	.+6      	; 0x57b0 <command_proc+0x2ac>
    57aa:	1e 31       	cpi	r17, 0x1E	; 30
    57ac:	09 f5       	brne	.+66     	; 0x57f0 <command_proc+0x2ec>
    57ae:	10 c0       	rjmp	.+32     	; 0x57d0 <command_proc+0x2cc>
    57b0:	10 32       	cpi	r17, 0x20	; 32
    57b2:	81 f0       	breq	.+32     	; 0x57d4 <command_proc+0x2d0>
    57b4:	11 32       	cpi	r17, 0x21	; 33
    57b6:	e1 f4       	brne	.+56     	; 0x57f0 <command_proc+0x2ec>
    57b8:	0f c0       	rjmp	.+30     	; 0x57d8 <command_proc+0x2d4>
    57ba:	14 32       	cpi	r17, 0x24	; 36
    57bc:	99 f0       	breq	.+38     	; 0x57e4 <command_proc+0x2e0>
    57be:	14 32       	cpi	r17, 0x24	; 36
    57c0:	78 f0       	brcs	.+30     	; 0x57e0 <command_proc+0x2dc>
    57c2:	15 32       	cpi	r17, 0x25	; 37
    57c4:	89 f0       	breq	.+34     	; 0x57e8 <command_proc+0x2e4>
    57c6:	16 32       	cpi	r17, 0x26	; 38
    57c8:	99 f4       	brne	.+38     	; 0x57f0 <command_proc+0x2ec>
    57ca:	10 c0       	rjmp	.+32     	; 0x57ec <command_proc+0x2e8>
    57cc:	82 e0       	ldi	r24, 0x02	; 2
    57ce:	11 c0       	rjmp	.+34     	; 0x57f2 <command_proc+0x2ee>
    57d0:	81 e0       	ldi	r24, 0x01	; 1
    57d2:	0f c0       	rjmp	.+30     	; 0x57f2 <command_proc+0x2ee>
    57d4:	83 e0       	ldi	r24, 0x03	; 3
    57d6:	0d c0       	rjmp	.+26     	; 0x57f2 <command_proc+0x2ee>
    57d8:	84 e0       	ldi	r24, 0x04	; 4
    57da:	0b c0       	rjmp	.+22     	; 0x57f2 <command_proc+0x2ee>
    57dc:	85 e0       	ldi	r24, 0x05	; 5
    57de:	09 c0       	rjmp	.+18     	; 0x57f2 <command_proc+0x2ee>
    57e0:	86 e0       	ldi	r24, 0x06	; 6
    57e2:	07 c0       	rjmp	.+14     	; 0x57f2 <command_proc+0x2ee>
    57e4:	87 e0       	ldi	r24, 0x07	; 7
    57e6:	05 c0       	rjmp	.+10     	; 0x57f2 <command_proc+0x2ee>
    57e8:	88 e0       	ldi	r24, 0x08	; 8
    57ea:	03 c0       	rjmp	.+6      	; 0x57f2 <command_proc+0x2ee>
    57ec:	89 e0       	ldi	r24, 0x09	; 9
    57ee:	01 c0       	rjmp	.+2      	; 0x57f2 <command_proc+0x2ee>
    57f0:	80 e0       	ldi	r24, 0x00	; 0
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    57f2:	80 93 b5 01 	sts	0x01B5, r24
    57f6:	2e c0       	rjmp	.+92     	; 0x5854 <command_proc+0x350>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    57f8:	80 91 b5 01 	lds	r24, 0x01B5
    57fc:	61 e0       	ldi	r22, 0x01	; 1
    57fe:	07 c0       	rjmp	.+14     	; 0x580e <command_proc+0x30a>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    5800:	80 91 b5 01 	lds	r24, 0x01B5
    5804:	61 e0       	ldi	r22, 0x01	; 1
    5806:	09 c0       	rjmp	.+18     	; 0x581a <command_proc+0x316>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    5808:	80 91 b5 01 	lds	r24, 0x01B5
    580c:	6a e0       	ldi	r22, 0x0A	; 10
    580e:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <mousekey_param_inc>
    5812:	20 c0       	rjmp	.+64     	; 0x5854 <command_proc+0x350>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5814:	80 91 b5 01 	lds	r24, 0x01B5
    5818:	6a e0       	ldi	r22, 0x0A	; 10
    581a:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <mousekey_param_dec>
    581e:	1a c0       	rjmp	.+52     	; 0x5854 <command_proc+0x350>
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    5820:	8e e1       	ldi	r24, 0x1E	; 30
    5822:	80 93 0f 01 	sts	0x010F, r24
            mk_interval = MOUSEKEY_INTERVAL;
    5826:	82 e3       	ldi	r24, 0x32	; 50
    5828:	80 93 10 01 	sts	0x0110, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    582c:	8a e0       	ldi	r24, 0x0A	; 10
    582e:	80 93 11 01 	sts	0x0111, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    5832:	84 e1       	ldi	r24, 0x14	; 20
    5834:	80 93 12 01 	sts	0x0112, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    5838:	88 e0       	ldi	r24, 0x08	; 8
    583a:	80 93 13 01 	sts	0x0113, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    583e:	88 e2       	ldi	r24, 0x28	; 40
    5840:	80 93 14 01 	sts	0x0114, r24
            print("set default\n");
    5844:	86 ea       	ldi	r24, 0xA6	; 166
    5846:	9b e0       	ldi	r25, 0x0B	; 11
    5848:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    584c:	03 c0       	rjmp	.+6      	; 0x5854 <command_proc+0x350>
            break;
        default:
            print("?");
    584e:	84 ea       	ldi	r24, 0xA4	; 164
    5850:	9b e0       	ldi	r25, 0x0B	; 11
    5852:	1d c0       	rjmp	.+58     	; 0x588e <command_proc+0x38a>
            return false;
    }
    if (mousekey_param)
    5854:	20 91 b5 01 	lds	r18, 0x01B5
    5858:	22 23       	and	r18, r18
    585a:	b9 f0       	breq	.+46     	; 0x588a <command_proc+0x386>
        xprintf("M%d> ", mousekey_param);
    585c:	00 d0       	rcall	.+0      	; 0x585e <command_proc+0x35a>
    585e:	00 d0       	rcall	.+0      	; 0x5860 <command_proc+0x35c>
    5860:	ed b7       	in	r30, 0x3d	; 61
    5862:	fe b7       	in	r31, 0x3e	; 62
    5864:	31 96       	adiw	r30, 0x01	; 1
    5866:	8e e9       	ldi	r24, 0x9E	; 158
    5868:	9b e0       	ldi	r25, 0x0B	; 11
    586a:	ad b7       	in	r26, 0x3d	; 61
    586c:	be b7       	in	r27, 0x3e	; 62
    586e:	12 96       	adiw	r26, 0x02	; 2
    5870:	9c 93       	st	X, r25
    5872:	8e 93       	st	-X, r24
    5874:	11 97       	sbiw	r26, 0x01	; 1
    5876:	22 83       	std	Z+2, r18	; 0x02
    5878:	13 82       	std	Z+3, r1	; 0x03
    587a:	0e 94 92 07 	call	0xf24	; 0xf24 <__xprintf>
    587e:	81 e0       	ldi	r24, 0x01	; 1
    5880:	0f 90       	pop	r0
    5882:	0f 90       	pop	r0
    5884:	0f 90       	pop	r0
    5886:	0f 90       	pop	r0
    5888:	09 c0       	rjmp	.+18     	; 0x589c <command_proc+0x398>
    else
        print("M>" );
    588a:	8b e9       	ldi	r24, 0x9B	; 155
    588c:	9b e0       	ldi	r25, 0x0B	; 11
    588e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <xputs>
    5892:	81 e0       	ldi	r24, 0x01	; 1
    5894:	03 c0       	rjmp	.+6      	; 0x589c <command_proc+0x398>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    5896:	10 92 b4 01 	sts	0x01B4, r1
    589a:	80 e0       	ldi	r24, 0x00	; 0
            return false;
    }
    return true;
}
    589c:	1f 91       	pop	r17
    589e:	08 95       	ret

000058a0 <__fixsfsi>:
    58a0:	04 d0       	rcall	.+8      	; 0x58aa <__fixunssfsi>
    58a2:	68 94       	set
    58a4:	b1 11       	cpse	r27, r1
    58a6:	8d c0       	rjmp	.+282    	; 0x59c2 <__fp_szero>
    58a8:	08 95       	ret

000058aa <__fixunssfsi>:
    58aa:	70 d0       	rcall	.+224    	; 0x598c <__fp_splitA>
    58ac:	88 f0       	brcs	.+34     	; 0x58d0 <__fixunssfsi+0x26>
    58ae:	9f 57       	subi	r25, 0x7F	; 127
    58b0:	90 f0       	brcs	.+36     	; 0x58d6 <__fixunssfsi+0x2c>
    58b2:	b9 2f       	mov	r27, r25
    58b4:	99 27       	eor	r25, r25
    58b6:	b7 51       	subi	r27, 0x17	; 23
    58b8:	a0 f0       	brcs	.+40     	; 0x58e2 <__fixunssfsi+0x38>
    58ba:	d1 f0       	breq	.+52     	; 0x58f0 <__fixunssfsi+0x46>
    58bc:	66 0f       	add	r22, r22
    58be:	77 1f       	adc	r23, r23
    58c0:	88 1f       	adc	r24, r24
    58c2:	99 1f       	adc	r25, r25
    58c4:	1a f0       	brmi	.+6      	; 0x58cc <__fixunssfsi+0x22>
    58c6:	ba 95       	dec	r27
    58c8:	c9 f7       	brne	.-14     	; 0x58bc <__fixunssfsi+0x12>
    58ca:	12 c0       	rjmp	.+36     	; 0x58f0 <__fixunssfsi+0x46>
    58cc:	b1 30       	cpi	r27, 0x01	; 1
    58ce:	81 f0       	breq	.+32     	; 0x58f0 <__fixunssfsi+0x46>
    58d0:	77 d0       	rcall	.+238    	; 0x59c0 <__fp_zero>
    58d2:	b1 e0       	ldi	r27, 0x01	; 1
    58d4:	08 95       	ret
    58d6:	74 c0       	rjmp	.+232    	; 0x59c0 <__fp_zero>
    58d8:	67 2f       	mov	r22, r23
    58da:	78 2f       	mov	r23, r24
    58dc:	88 27       	eor	r24, r24
    58de:	b8 5f       	subi	r27, 0xF8	; 248
    58e0:	39 f0       	breq	.+14     	; 0x58f0 <__fixunssfsi+0x46>
    58e2:	b9 3f       	cpi	r27, 0xF9	; 249
    58e4:	cc f3       	brlt	.-14     	; 0x58d8 <__fixunssfsi+0x2e>
    58e6:	86 95       	lsr	r24
    58e8:	77 95       	ror	r23
    58ea:	67 95       	ror	r22
    58ec:	b3 95       	inc	r27
    58ee:	d9 f7       	brne	.-10     	; 0x58e6 <__fixunssfsi+0x3c>
    58f0:	3e f4       	brtc	.+14     	; 0x5900 <__fixunssfsi+0x56>
    58f2:	90 95       	com	r25
    58f4:	80 95       	com	r24
    58f6:	70 95       	com	r23
    58f8:	61 95       	neg	r22
    58fa:	7f 4f       	sbci	r23, 0xFF	; 255
    58fc:	8f 4f       	sbci	r24, 0xFF	; 255
    58fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5900:	08 95       	ret

00005902 <__floatunsisf>:
    5902:	e8 94       	clt
    5904:	09 c0       	rjmp	.+18     	; 0x5918 <__floatsisf+0x12>

00005906 <__floatsisf>:
    5906:	97 fb       	bst	r25, 7
    5908:	3e f4       	brtc	.+14     	; 0x5918 <__floatsisf+0x12>
    590a:	90 95       	com	r25
    590c:	80 95       	com	r24
    590e:	70 95       	com	r23
    5910:	61 95       	neg	r22
    5912:	7f 4f       	sbci	r23, 0xFF	; 255
    5914:	8f 4f       	sbci	r24, 0xFF	; 255
    5916:	9f 4f       	sbci	r25, 0xFF	; 255
    5918:	99 23       	and	r25, r25
    591a:	a9 f0       	breq	.+42     	; 0x5946 <__floatsisf+0x40>
    591c:	f9 2f       	mov	r31, r25
    591e:	96 e9       	ldi	r25, 0x96	; 150
    5920:	bb 27       	eor	r27, r27
    5922:	93 95       	inc	r25
    5924:	f6 95       	lsr	r31
    5926:	87 95       	ror	r24
    5928:	77 95       	ror	r23
    592a:	67 95       	ror	r22
    592c:	b7 95       	ror	r27
    592e:	f1 11       	cpse	r31, r1
    5930:	f8 cf       	rjmp	.-16     	; 0x5922 <__floatsisf+0x1c>
    5932:	fa f4       	brpl	.+62     	; 0x5972 <__floatsisf+0x6c>
    5934:	bb 0f       	add	r27, r27
    5936:	11 f4       	brne	.+4      	; 0x593c <__floatsisf+0x36>
    5938:	60 ff       	sbrs	r22, 0
    593a:	1b c0       	rjmp	.+54     	; 0x5972 <__floatsisf+0x6c>
    593c:	6f 5f       	subi	r22, 0xFF	; 255
    593e:	7f 4f       	sbci	r23, 0xFF	; 255
    5940:	8f 4f       	sbci	r24, 0xFF	; 255
    5942:	9f 4f       	sbci	r25, 0xFF	; 255
    5944:	16 c0       	rjmp	.+44     	; 0x5972 <__floatsisf+0x6c>
    5946:	88 23       	and	r24, r24
    5948:	11 f0       	breq	.+4      	; 0x594e <__floatsisf+0x48>
    594a:	96 e9       	ldi	r25, 0x96	; 150
    594c:	11 c0       	rjmp	.+34     	; 0x5970 <__floatsisf+0x6a>
    594e:	77 23       	and	r23, r23
    5950:	21 f0       	breq	.+8      	; 0x595a <__floatsisf+0x54>
    5952:	9e e8       	ldi	r25, 0x8E	; 142
    5954:	87 2f       	mov	r24, r23
    5956:	76 2f       	mov	r23, r22
    5958:	05 c0       	rjmp	.+10     	; 0x5964 <__floatsisf+0x5e>
    595a:	66 23       	and	r22, r22
    595c:	71 f0       	breq	.+28     	; 0x597a <__floatsisf+0x74>
    595e:	96 e8       	ldi	r25, 0x86	; 134
    5960:	86 2f       	mov	r24, r22
    5962:	70 e0       	ldi	r23, 0x00	; 0
    5964:	60 e0       	ldi	r22, 0x00	; 0
    5966:	2a f0       	brmi	.+10     	; 0x5972 <__floatsisf+0x6c>
    5968:	9a 95       	dec	r25
    596a:	66 0f       	add	r22, r22
    596c:	77 1f       	adc	r23, r23
    596e:	88 1f       	adc	r24, r24
    5970:	da f7       	brpl	.-10     	; 0x5968 <__floatsisf+0x62>
    5972:	88 0f       	add	r24, r24
    5974:	96 95       	lsr	r25
    5976:	87 95       	ror	r24
    5978:	97 f9       	bld	r25, 7
    597a:	08 95       	ret

0000597c <__fp_split3>:
    597c:	57 fd       	sbrc	r21, 7
    597e:	90 58       	subi	r25, 0x80	; 128
    5980:	44 0f       	add	r20, r20
    5982:	55 1f       	adc	r21, r21
    5984:	59 f0       	breq	.+22     	; 0x599c <__fp_splitA+0x10>
    5986:	5f 3f       	cpi	r21, 0xFF	; 255
    5988:	71 f0       	breq	.+28     	; 0x59a6 <__fp_splitA+0x1a>
    598a:	47 95       	ror	r20

0000598c <__fp_splitA>:
    598c:	88 0f       	add	r24, r24
    598e:	97 fb       	bst	r25, 7
    5990:	99 1f       	adc	r25, r25
    5992:	61 f0       	breq	.+24     	; 0x59ac <__fp_splitA+0x20>
    5994:	9f 3f       	cpi	r25, 0xFF	; 255
    5996:	79 f0       	breq	.+30     	; 0x59b6 <__fp_splitA+0x2a>
    5998:	87 95       	ror	r24
    599a:	08 95       	ret
    599c:	12 16       	cp	r1, r18
    599e:	13 06       	cpc	r1, r19
    59a0:	14 06       	cpc	r1, r20
    59a2:	55 1f       	adc	r21, r21
    59a4:	f2 cf       	rjmp	.-28     	; 0x598a <__fp_split3+0xe>
    59a6:	46 95       	lsr	r20
    59a8:	f1 df       	rcall	.-30     	; 0x598c <__fp_splitA>
    59aa:	08 c0       	rjmp	.+16     	; 0x59bc <__fp_splitA+0x30>
    59ac:	16 16       	cp	r1, r22
    59ae:	17 06       	cpc	r1, r23
    59b0:	18 06       	cpc	r1, r24
    59b2:	99 1f       	adc	r25, r25
    59b4:	f1 cf       	rjmp	.-30     	; 0x5998 <__fp_splitA+0xc>
    59b6:	86 95       	lsr	r24
    59b8:	71 05       	cpc	r23, r1
    59ba:	61 05       	cpc	r22, r1
    59bc:	08 94       	sec
    59be:	08 95       	ret

000059c0 <__fp_zero>:
    59c0:	e8 94       	clt

000059c2 <__fp_szero>:
    59c2:	bb 27       	eor	r27, r27
    59c4:	66 27       	eor	r22, r22
    59c6:	77 27       	eor	r23, r23
    59c8:	cb 01       	movw	r24, r22
    59ca:	97 f9       	bld	r25, 7
    59cc:	08 95       	ret

000059ce <__mulsf3>:
    59ce:	0b d0       	rcall	.+22     	; 0x59e6 <__mulsf3x>
    59d0:	78 c0       	rjmp	.+240    	; 0x5ac2 <__fp_round>
    59d2:	69 d0       	rcall	.+210    	; 0x5aa6 <__fp_pscA>
    59d4:	28 f0       	brcs	.+10     	; 0x59e0 <__mulsf3+0x12>
    59d6:	6e d0       	rcall	.+220    	; 0x5ab4 <__fp_pscB>
    59d8:	18 f0       	brcs	.+6      	; 0x59e0 <__mulsf3+0x12>
    59da:	95 23       	and	r25, r21
    59dc:	09 f0       	breq	.+2      	; 0x59e0 <__mulsf3+0x12>
    59de:	5a c0       	rjmp	.+180    	; 0x5a94 <__fp_inf>
    59e0:	5f c0       	rjmp	.+190    	; 0x5aa0 <__fp_nan>
    59e2:	11 24       	eor	r1, r1
    59e4:	ee cf       	rjmp	.-36     	; 0x59c2 <__fp_szero>

000059e6 <__mulsf3x>:
    59e6:	ca df       	rcall	.-108    	; 0x597c <__fp_split3>
    59e8:	a0 f3       	brcs	.-24     	; 0x59d2 <__mulsf3+0x4>

000059ea <__mulsf3_pse>:
    59ea:	95 9f       	mul	r25, r21
    59ec:	d1 f3       	breq	.-12     	; 0x59e2 <__mulsf3+0x14>
    59ee:	95 0f       	add	r25, r21
    59f0:	50 e0       	ldi	r21, 0x00	; 0
    59f2:	55 1f       	adc	r21, r21
    59f4:	62 9f       	mul	r22, r18
    59f6:	f0 01       	movw	r30, r0
    59f8:	72 9f       	mul	r23, r18
    59fa:	bb 27       	eor	r27, r27
    59fc:	f0 0d       	add	r31, r0
    59fe:	b1 1d       	adc	r27, r1
    5a00:	63 9f       	mul	r22, r19
    5a02:	aa 27       	eor	r26, r26
    5a04:	f0 0d       	add	r31, r0
    5a06:	b1 1d       	adc	r27, r1
    5a08:	aa 1f       	adc	r26, r26
    5a0a:	64 9f       	mul	r22, r20
    5a0c:	66 27       	eor	r22, r22
    5a0e:	b0 0d       	add	r27, r0
    5a10:	a1 1d       	adc	r26, r1
    5a12:	66 1f       	adc	r22, r22
    5a14:	82 9f       	mul	r24, r18
    5a16:	22 27       	eor	r18, r18
    5a18:	b0 0d       	add	r27, r0
    5a1a:	a1 1d       	adc	r26, r1
    5a1c:	62 1f       	adc	r22, r18
    5a1e:	73 9f       	mul	r23, r19
    5a20:	b0 0d       	add	r27, r0
    5a22:	a1 1d       	adc	r26, r1
    5a24:	62 1f       	adc	r22, r18
    5a26:	83 9f       	mul	r24, r19
    5a28:	a0 0d       	add	r26, r0
    5a2a:	61 1d       	adc	r22, r1
    5a2c:	22 1f       	adc	r18, r18
    5a2e:	74 9f       	mul	r23, r20
    5a30:	33 27       	eor	r19, r19
    5a32:	a0 0d       	add	r26, r0
    5a34:	61 1d       	adc	r22, r1
    5a36:	23 1f       	adc	r18, r19
    5a38:	84 9f       	mul	r24, r20
    5a3a:	60 0d       	add	r22, r0
    5a3c:	21 1d       	adc	r18, r1
    5a3e:	82 2f       	mov	r24, r18
    5a40:	76 2f       	mov	r23, r22
    5a42:	6a 2f       	mov	r22, r26
    5a44:	11 24       	eor	r1, r1
    5a46:	9f 57       	subi	r25, 0x7F	; 127
    5a48:	50 40       	sbci	r21, 0x00	; 0
    5a4a:	8a f0       	brmi	.+34     	; 0x5a6e <__mulsf3_pse+0x84>
    5a4c:	e1 f0       	breq	.+56     	; 0x5a86 <__mulsf3_pse+0x9c>
    5a4e:	88 23       	and	r24, r24
    5a50:	4a f0       	brmi	.+18     	; 0x5a64 <__mulsf3_pse+0x7a>
    5a52:	ee 0f       	add	r30, r30
    5a54:	ff 1f       	adc	r31, r31
    5a56:	bb 1f       	adc	r27, r27
    5a58:	66 1f       	adc	r22, r22
    5a5a:	77 1f       	adc	r23, r23
    5a5c:	88 1f       	adc	r24, r24
    5a5e:	91 50       	subi	r25, 0x01	; 1
    5a60:	50 40       	sbci	r21, 0x00	; 0
    5a62:	a9 f7       	brne	.-22     	; 0x5a4e <__mulsf3_pse+0x64>
    5a64:	9e 3f       	cpi	r25, 0xFE	; 254
    5a66:	51 05       	cpc	r21, r1
    5a68:	70 f0       	brcs	.+28     	; 0x5a86 <__mulsf3_pse+0x9c>
    5a6a:	14 c0       	rjmp	.+40     	; 0x5a94 <__fp_inf>
    5a6c:	aa cf       	rjmp	.-172    	; 0x59c2 <__fp_szero>
    5a6e:	5f 3f       	cpi	r21, 0xFF	; 255
    5a70:	ec f3       	brlt	.-6      	; 0x5a6c <__mulsf3_pse+0x82>
    5a72:	98 3e       	cpi	r25, 0xE8	; 232
    5a74:	dc f3       	brlt	.-10     	; 0x5a6c <__mulsf3_pse+0x82>
    5a76:	86 95       	lsr	r24
    5a78:	77 95       	ror	r23
    5a7a:	67 95       	ror	r22
    5a7c:	b7 95       	ror	r27
    5a7e:	f7 95       	ror	r31
    5a80:	e7 95       	ror	r30
    5a82:	9f 5f       	subi	r25, 0xFF	; 255
    5a84:	c1 f7       	brne	.-16     	; 0x5a76 <__mulsf3_pse+0x8c>
    5a86:	fe 2b       	or	r31, r30
    5a88:	88 0f       	add	r24, r24
    5a8a:	91 1d       	adc	r25, r1
    5a8c:	96 95       	lsr	r25
    5a8e:	87 95       	ror	r24
    5a90:	97 f9       	bld	r25, 7
    5a92:	08 95       	ret

00005a94 <__fp_inf>:
    5a94:	97 f9       	bld	r25, 7
    5a96:	9f 67       	ori	r25, 0x7F	; 127
    5a98:	80 e8       	ldi	r24, 0x80	; 128
    5a9a:	70 e0       	ldi	r23, 0x00	; 0
    5a9c:	60 e0       	ldi	r22, 0x00	; 0
    5a9e:	08 95       	ret

00005aa0 <__fp_nan>:
    5aa0:	9f ef       	ldi	r25, 0xFF	; 255
    5aa2:	80 ec       	ldi	r24, 0xC0	; 192
    5aa4:	08 95       	ret

00005aa6 <__fp_pscA>:
    5aa6:	00 24       	eor	r0, r0
    5aa8:	0a 94       	dec	r0
    5aaa:	16 16       	cp	r1, r22
    5aac:	17 06       	cpc	r1, r23
    5aae:	18 06       	cpc	r1, r24
    5ab0:	09 06       	cpc	r0, r25
    5ab2:	08 95       	ret

00005ab4 <__fp_pscB>:
    5ab4:	00 24       	eor	r0, r0
    5ab6:	0a 94       	dec	r0
    5ab8:	12 16       	cp	r1, r18
    5aba:	13 06       	cpc	r1, r19
    5abc:	14 06       	cpc	r1, r20
    5abe:	05 06       	cpc	r0, r21
    5ac0:	08 95       	ret

00005ac2 <__fp_round>:
    5ac2:	09 2e       	mov	r0, r25
    5ac4:	03 94       	inc	r0
    5ac6:	00 0c       	add	r0, r0
    5ac8:	11 f4       	brne	.+4      	; 0x5ace <__fp_round+0xc>
    5aca:	88 23       	and	r24, r24
    5acc:	52 f0       	brmi	.+20     	; 0x5ae2 <__fp_round+0x20>
    5ace:	bb 0f       	add	r27, r27
    5ad0:	40 f4       	brcc	.+16     	; 0x5ae2 <__fp_round+0x20>
    5ad2:	bf 2b       	or	r27, r31
    5ad4:	11 f4       	brne	.+4      	; 0x5ada <__fp_round+0x18>
    5ad6:	60 ff       	sbrs	r22, 0
    5ad8:	04 c0       	rjmp	.+8      	; 0x5ae2 <__fp_round+0x20>
    5ada:	6f 5f       	subi	r22, 0xFF	; 255
    5adc:	7f 4f       	sbci	r23, 0xFF	; 255
    5ade:	8f 4f       	sbci	r24, 0xFF	; 255
    5ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ae2:	08 95       	ret

00005ae4 <__udivmodqi4>:
    5ae4:	99 1b       	sub	r25, r25
    5ae6:	79 e0       	ldi	r23, 0x09	; 9
    5ae8:	04 c0       	rjmp	.+8      	; 0x5af2 <__udivmodqi4_ep>

00005aea <__udivmodqi4_loop>:
    5aea:	99 1f       	adc	r25, r25
    5aec:	96 17       	cp	r25, r22
    5aee:	08 f0       	brcs	.+2      	; 0x5af2 <__udivmodqi4_ep>
    5af0:	96 1b       	sub	r25, r22

00005af2 <__udivmodqi4_ep>:
    5af2:	88 1f       	adc	r24, r24
    5af4:	7a 95       	dec	r23
    5af6:	c9 f7       	brne	.-14     	; 0x5aea <__udivmodqi4_loop>
    5af8:	80 95       	com	r24
    5afa:	08 95       	ret

00005afc <__divmodhi4>:
    5afc:	97 fb       	bst	r25, 7
    5afe:	09 2e       	mov	r0, r25
    5b00:	07 26       	eor	r0, r23
    5b02:	0a d0       	rcall	.+20     	; 0x5b18 <__divmodhi4_neg1>
    5b04:	77 fd       	sbrc	r23, 7
    5b06:	04 d0       	rcall	.+8      	; 0x5b10 <__divmodhi4_neg2>
    5b08:	0c d0       	rcall	.+24     	; 0x5b22 <__udivmodhi4>
    5b0a:	06 d0       	rcall	.+12     	; 0x5b18 <__divmodhi4_neg1>
    5b0c:	00 20       	and	r0, r0
    5b0e:	1a f4       	brpl	.+6      	; 0x5b16 <__divmodhi4_exit>

00005b10 <__divmodhi4_neg2>:
    5b10:	70 95       	com	r23
    5b12:	61 95       	neg	r22
    5b14:	7f 4f       	sbci	r23, 0xFF	; 255

00005b16 <__divmodhi4_exit>:
    5b16:	08 95       	ret

00005b18 <__divmodhi4_neg1>:
    5b18:	f6 f7       	brtc	.-4      	; 0x5b16 <__divmodhi4_exit>
    5b1a:	90 95       	com	r25
    5b1c:	81 95       	neg	r24
    5b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    5b20:	08 95       	ret

00005b22 <__udivmodhi4>:
    5b22:	aa 1b       	sub	r26, r26
    5b24:	bb 1b       	sub	r27, r27
    5b26:	51 e1       	ldi	r21, 0x11	; 17
    5b28:	07 c0       	rjmp	.+14     	; 0x5b38 <__udivmodhi4_ep>

00005b2a <__udivmodhi4_loop>:
    5b2a:	aa 1f       	adc	r26, r26
    5b2c:	bb 1f       	adc	r27, r27
    5b2e:	a6 17       	cp	r26, r22
    5b30:	b7 07       	cpc	r27, r23
    5b32:	10 f0       	brcs	.+4      	; 0x5b38 <__udivmodhi4_ep>
    5b34:	a6 1b       	sub	r26, r22
    5b36:	b7 0b       	sbc	r27, r23

00005b38 <__udivmodhi4_ep>:
    5b38:	88 1f       	adc	r24, r24
    5b3a:	99 1f       	adc	r25, r25
    5b3c:	5a 95       	dec	r21
    5b3e:	a9 f7       	brne	.-22     	; 0x5b2a <__udivmodhi4_loop>
    5b40:	80 95       	com	r24
    5b42:	90 95       	com	r25
    5b44:	bc 01       	movw	r22, r24
    5b46:	cd 01       	movw	r24, r26
    5b48:	08 95       	ret

00005b4a <__eerd_byte_m32u4>:
    5b4a:	f9 99       	sbic	0x1f, 1	; 31
    5b4c:	fe cf       	rjmp	.-4      	; 0x5b4a <__eerd_byte_m32u4>
    5b4e:	92 bd       	out	0x22, r25	; 34
    5b50:	81 bd       	out	0x21, r24	; 33
    5b52:	f8 9a       	sbi	0x1f, 0	; 31
    5b54:	99 27       	eor	r25, r25
    5b56:	80 b5       	in	r24, 0x20	; 32
    5b58:	08 95       	ret

00005b5a <__eerd_word_m32u4>:
    5b5a:	a8 e1       	ldi	r26, 0x18	; 24
    5b5c:	b0 e0       	ldi	r27, 0x00	; 0
    5b5e:	42 e0       	ldi	r20, 0x02	; 2
    5b60:	50 e0       	ldi	r21, 0x00	; 0
    5b62:	0c 94 c8 2d 	jmp	0x5b90	; 0x5b90 <__eerd_blraw_m32u4>

00005b66 <__eewr_byte_m32u4>:
    5b66:	26 2f       	mov	r18, r22

00005b68 <__eewr_r18_m32u4>:
    5b68:	f9 99       	sbic	0x1f, 1	; 31
    5b6a:	fe cf       	rjmp	.-4      	; 0x5b68 <__eewr_r18_m32u4>
    5b6c:	1f ba       	out	0x1f, r1	; 31
    5b6e:	92 bd       	out	0x22, r25	; 34
    5b70:	81 bd       	out	0x21, r24	; 33
    5b72:	20 bd       	out	0x20, r18	; 32
    5b74:	0f b6       	in	r0, 0x3f	; 63
    5b76:	f8 94       	cli
    5b78:	fa 9a       	sbi	0x1f, 2	; 31
    5b7a:	f9 9a       	sbi	0x1f, 1	; 31
    5b7c:	0f be       	out	0x3f, r0	; 63
    5b7e:	01 96       	adiw	r24, 0x01	; 1
    5b80:	08 95       	ret

00005b82 <__eewr_word_m32u4>:
    5b82:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__eewr_byte_m32u4>
    5b86:	27 2f       	mov	r18, r23
    5b88:	0c 94 b4 2d 	jmp	0x5b68	; 0x5b68 <__eewr_r18_m32u4>

00005b8c <__eerd_block_m32u4>:
    5b8c:	dc 01       	movw	r26, r24
    5b8e:	cb 01       	movw	r24, r22

00005b90 <__eerd_blraw_m32u4>:
    5b90:	fc 01       	movw	r30, r24
    5b92:	f9 99       	sbic	0x1f, 1	; 31
    5b94:	fe cf       	rjmp	.-4      	; 0x5b92 <__eerd_blraw_m32u4+0x2>
    5b96:	06 c0       	rjmp	.+12     	; 0x5ba4 <__eerd_blraw_m32u4+0x14>
    5b98:	f2 bd       	out	0x22, r31	; 34
    5b9a:	e1 bd       	out	0x21, r30	; 33
    5b9c:	f8 9a       	sbi	0x1f, 0	; 31
    5b9e:	31 96       	adiw	r30, 0x01	; 1
    5ba0:	00 b4       	in	r0, 0x20	; 32
    5ba2:	0d 92       	st	X+, r0
    5ba4:	41 50       	subi	r20, 0x01	; 1
    5ba6:	50 40       	sbci	r21, 0x00	; 0
    5ba8:	b8 f7       	brcc	.-18     	; 0x5b98 <__eerd_blraw_m32u4+0x8>
    5baa:	08 95       	ret

00005bac <_exit>:
    5bac:	f8 94       	cli

00005bae <__stop_program>:
    5bae:	ff cf       	rjmp	.-2      	; 0x5bae <__stop_program>
