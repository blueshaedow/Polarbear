
polarbear_tester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00002ac2  00002b56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ac2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000081  0080010e  0080010e  00002b64  2**0
                  ALLOC
  3 .noinit       00000004  0080018f  0080018f  00002b64  2**0
                  ALLOC
  4 .stab         00000024  00000000  00000000  00002b64  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000008f  00000000  00000000  00002b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000007e8  00000000  00000000  00002c17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000011df  00000000  00000000  000033ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000a79f  00000000  00000000  000045de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002abd  00000000  00000000  0000ed7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000732e  00000000  00000000  0001183a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000c70  00000000  00000000  00018b68  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003a35  00000000  00000000  000197d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003c4e  00000000  00000000  0001d20d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000008e8  00000000  00000000  00020e5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

inline
bool matrix_is_on(uint8_t row, uint8_t col)
{
    return (matrix[row] & ((matrix_row_t)1<<col));
}
       0:	0c 94 0b 01 	jmp	0x216	; 0x216 <__ctors_end>
	    PORTD ^=  (1<<6);
    }
}

void led_init() 
{
       4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
    Endpoint_SelectEndpoint(ep);
    return -1;
}
#else
int8_t sendchar(uint8_t c)
{
       8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
      10:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
{
    driver = d;
}

host_driver_t *host_get_driver(void)
{
      14:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}

void debug_action(action_t action)
{
      18:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
{
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
      1c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>

/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
void del_mods(uint8_t mods) { real_mods &= ~mods; }
void set_mods(uint8_t mods) { real_mods = mods; }
      20:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
    set_sleep_mode(SLEEP_MODE_IDLE);
    sleep_enable();
    sei();
    sleep_cpu();
    sleep_disable();
}
      24:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
    TIMSK0 = (1<<OCIE0A);
}

inline
void timer_clear(void)
{
      28:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__vector_10>
      2c:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__vector_11>
      30:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__vector_12>
      34:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      38:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      3c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      40:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      44:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      48:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      4c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      50:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      54:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <__vector_21>
      58:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      5c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      60:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      64:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      68:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      6c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      70:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      74:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      78:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      7c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      80:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      84:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      88:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      8c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      90:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      94:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      98:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      9c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      a0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      a4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      a8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>

000000ac <keymaps>:
      ac:	29 1e 1f 20 21 22 4c 2b 14 1a 08 15 17 31 c1 04     ).. !"L+.....1..
      bc:	16 07 09 0a 34 e1 1d 1b 06 19 05 c2 e3 e2 13 00     ....4...........
      cc:	2a c0 28 e0 00 00 00 00 00 00 01 27 26 25 24 23     *.(........'&%$#
      dc:	01 01 13 12 0c 18 1c 01 01 33 0f 0e 0d 0b 01 01     .........3......
      ec:	38 37 36 10 11 01 01 01 01 00 01 01 01 01 00 00     876.............
      fc:	00 00 00 00 bf 00 00 00 00 00 00 00 00 00 4e 4b     ..............NK
     10c:	00 00 c1 00 4f 52 51 50 00 00 00 00 4d 4a 00 00     ....ORQP....MJ..
     11c:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 35 c3     ..............5.
     12c:	c4 c5 c6 c7 00 00 c8 c9 ca cb cc cd 00 2d 2e 2f     .............-./
     13c:	30 00 00 00 00 00 00 00 00 c2 00 00 00 00 00 00     0...............
     14c:	00 00 00 00 00 00 00 00                             ........

00000154 <fn_actions>:
     154:	2c a1 04 8a 08 8a 1e 02 1f 02 20 02 21 02 22 02     ,......... .!.".
     164:	27 02 26 02 25 02 24 02 23 02 34 02                 '.&.%.$.#.4.

00000170 <KeyboardReport>:
     170:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     180:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     190:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     1a0:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

000001af <DeviceDescriptor>:
     1af:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
     1bf:	00 01                                               ..

000001c1 <ConfigurationDescriptor>:
     1c1:	09 02 22 00 01 01 00 a0 32 09 04 00 00 01 03 01     ..".....2.......
     1d1:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     1e1:	00 0a                                               ..

000001e3 <LanguageString>:
     1e3:	04 03 09 04                                         ....

000001e7 <ManufacturerString>:
     1e7:	16 03 44 00 61 00 6e 00 6e 00 79 00 54 00 73 00     ..D.a.n.n.y.T.s.
     1f7:	75 00 65 00 69 00 00 00                             u.e.i...

000001ff <ProductString>:
     1ff:	14 03 50 00 6f 00 6c 00 61 00 72 00 62 00 65 00     ..P.o.l.a.r.b.e.
     20f:	61 00 72 00 00 00 00                                a.r....

00000216 <__ctors_end>:
     216:	11 24       	eor	r1, r1
     218:	1f be       	out	0x3f, r1	; 63
     21a:	cf ef       	ldi	r28, 0xFF	; 255
     21c:	da e0       	ldi	r29, 0x0A	; 10
     21e:	de bf       	out	0x3e, r29	; 62
     220:	cd bf       	out	0x3d, r28	; 61

00000222 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     222:	04 b6       	in	r0, 0x34	; 52
     224:	03 fe       	sbrs	r0, 3
     226:	24 c0       	rjmp	.+72     	; 0x270 <__do_copy_data>
     228:	80 91 8f 01 	lds	r24, 0x018F
     22c:	90 91 90 01 	lds	r25, 0x0190
     230:	a0 91 91 01 	lds	r26, 0x0191
     234:	b0 91 92 01 	lds	r27, 0x0192
     238:	87 50       	subi	r24, 0x07	; 7
     23a:	90 4b       	sbci	r25, 0xB0	; 176
     23c:	a7 40       	sbci	r26, 0x07	; 7
     23e:	b0 4b       	sbci	r27, 0xB0	; 176
     240:	b9 f4       	brne	.+46     	; 0x270 <__do_copy_data>
        reset_key = 0;
     242:	10 92 8f 01 	sts	0x018F, r1
     246:	10 92 90 01 	sts	0x0190, r1
     24a:	10 92 91 01 	sts	0x0191, r1
     24e:	10 92 92 01 	sts	0x0192, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     252:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     254:	84 b7       	in	r24, 0x34	; 52
     256:	87 7f       	andi	r24, 0xF7	; 247
     258:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     25a:	88 e1       	ldi	r24, 0x18	; 24
     25c:	0f b6       	in	r0, 0x3f	; 63
     25e:	f8 94       	cli
     260:	80 93 60 00 	sts	0x0060, r24
     264:	10 92 60 00 	sts	0x0060, r1
     268:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     26a:	e0 e0       	ldi	r30, 0x00	; 0
     26c:	f8 e3       	ldi	r31, 0x38	; 56
     26e:	09 95       	icall

00000270 <__do_copy_data>:
     270:	11 e0       	ldi	r17, 0x01	; 1
     272:	a0 e0       	ldi	r26, 0x00	; 0
     274:	b1 e0       	ldi	r27, 0x01	; 1
     276:	e2 ec       	ldi	r30, 0xC2	; 194
     278:	fa e2       	ldi	r31, 0x2A	; 42
     27a:	02 c0       	rjmp	.+4      	; 0x280 <.do_copy_data_start>

0000027c <.do_copy_data_loop>:
     27c:	05 90       	lpm	r0, Z+
     27e:	0d 92       	st	X+, r0

00000280 <.do_copy_data_start>:
     280:	ae 30       	cpi	r26, 0x0E	; 14
     282:	b1 07       	cpc	r27, r17
     284:	d9 f7       	brne	.-10     	; 0x27c <.do_copy_data_loop>

00000286 <__do_clear_bss>:
     286:	11 e0       	ldi	r17, 0x01	; 1
     288:	ae e0       	ldi	r26, 0x0E	; 14
     28a:	b1 e0       	ldi	r27, 0x01	; 1
     28c:	01 c0       	rjmp	.+2      	; 0x290 <.do_clear_bss_start>

0000028e <.do_clear_bss_loop>:
     28e:	1d 92       	st	X+, r1

00000290 <.do_clear_bss_start>:
     290:	af 38       	cpi	r26, 0x8F	; 143
     292:	b1 07       	cpc	r27, r17
     294:	e1 f7       	brne	.-8      	; 0x28e <.do_clear_bss_loop>
     296:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <main>
     29a:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <_exit>

0000029e <__bad_interrupt>:
     29e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002a2 <keymap_key_to_keycode>:


/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
     2a2:	97 e0       	ldi	r25, 0x07	; 7
     2a4:	79 9f       	mul	r23, r25
     2a6:	f0 01       	movw	r30, r0
     2a8:	11 24       	eor	r1, r1
     2aa:	e6 0f       	add	r30, r22
     2ac:	f1 1d       	adc	r31, r1
     2ae:	9a e2       	ldi	r25, 0x2A	; 42
     2b0:	89 9f       	mul	r24, r25
     2b2:	c0 01       	movw	r24, r0
     2b4:	11 24       	eor	r1, r1
     2b6:	e8 0f       	add	r30, r24
     2b8:	f9 1f       	adc	r31, r25
     2ba:	e4 55       	subi	r30, 0x54	; 84
     2bc:	ff 4f       	sbci	r31, 0xFF	; 255
     2be:	e4 91       	lpm	r30, Z+
}
     2c0:	8e 2f       	mov	r24, r30
     2c2:	08 95       	ret

000002c4 <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
     2c4:	1f 93       	push	r17
     2c6:	18 2f       	mov	r17, r24
	if (keycode == KC_FN0) {
     2c8:	80 3c       	cpi	r24, 0xC0	; 192
     2ca:	19 f4       	brne	.+6      	; 0x2d2 <keymap_fn_to_action+0xe>
		led_toggle(1<<USB_LED_STATUS1);
     2cc:	80 e2       	ldi	r24, 0x20	; 32
     2ce:	0e 94 47 02 	call	0x48e	; 0x48e <led_toggle>
	} 
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
     2d2:	e1 2f       	mov	r30, r17
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	ee 0f       	add	r30, r30
     2d8:	ff 1f       	adc	r31, r31
     2da:	ec 52       	subi	r30, 0x2C	; 44
     2dc:	f0 40       	sbci	r31, 0x00	; 0
     2de:	25 91       	lpm	r18, Z+
     2e0:	34 91       	lpm	r19, Z+
}
     2e2:	c9 01       	movw	r24, r18
     2e4:	1f 91       	pop	r17
     2e6:	08 95       	ret

000002e8 <matrix_get_row>:

inline
matrix_row_t matrix_get_row(uint8_t row)
{
     2e8:	ee e0       	ldi	r30, 0x0E	; 14
     2ea:	f1 e0       	ldi	r31, 0x01	; 1
     2ec:	e8 0f       	add	r30, r24
     2ee:	f1 1d       	adc	r31, r1
    return matrix[row];
}
     2f0:	80 81       	ld	r24, Z
     2f2:	08 95       	ret

000002f4 <matrix_print>:
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
     2f4:	08 95       	ret

000002f6 <unselect_rows>:
 * pin: E2  B6  B5  B4  B3  B2 
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRB  &= ~0b01111100;
     2f6:	84 b1       	in	r24, 0x04	; 4
     2f8:	83 78       	andi	r24, 0x83	; 131
     2fa:	84 b9       	out	0x04, r24	; 4
    PORTB &= ~0b01111100;
     2fc:	85 b1       	in	r24, 0x05	; 5
     2fe:	83 78       	andi	r24, 0x83	; 131
     300:	85 b9       	out	0x05, r24	; 5
    DDRE  &= ~0b00000100;
     302:	6a 98       	cbi	0x0d, 2	; 13
    PORTE &= ~0b00000100;
     304:	72 98       	cbi	0x0e, 2	; 14
}
     306:	08 95       	ret

00000308 <matrix_init>:
}

void matrix_init(void)
{
    // initialize row and col
    unselect_rows();
     308:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <unselect_rows>
 * pin: C7  F7  F6  F5  F4  F1  F0
 */
static void  init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRC  &= ~(1<<7);
     30c:	3f 98       	cbi	0x07, 7	; 7
    PORTC |=  (1<<7);
     30e:	47 9a       	sbi	0x08, 7	; 8
    DDRF  &= ~(1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<1 | 1<<0);
     310:	80 b3       	in	r24, 0x10	; 16
     312:	8c 70       	andi	r24, 0x0C	; 12
     314:	80 bb       	out	0x10, r24	; 16
    PORTF |=  (1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<1 | 1<<0);
     316:	81 b3       	in	r24, 0x11	; 17
     318:	83 6f       	ori	r24, 0xF3	; 243
     31a:	81 bb       	out	0x11, r24	; 17
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     320:	fc 01       	movw	r30, r24
     322:	e2 5f       	subi	r30, 0xF2	; 242
     324:	fe 4f       	sbci	r31, 0xFE	; 254
     326:	10 82       	st	Z, r1
        matrix_debouncing[i] = 0;
     328:	fc 01       	movw	r30, r24
     32a:	ec 5e       	subi	r30, 0xEC	; 236
     32c:	fe 4f       	sbci	r31, 0xFE	; 254
     32e:	10 82       	st	Z, r1
     330:	01 96       	adiw	r24, 0x01	; 1
    // initialize row and col
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
     332:	86 30       	cpi	r24, 0x06	; 6
     334:	91 05       	cpc	r25, r1
     336:	a1 f7       	brne	.-24     	; 0x320 <matrix_init+0x18>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
     338:	08 95       	ret

0000033a <matrix_scan>:

uint8_t matrix_scan(void)
{
     33a:	ff 92       	push	r15
     33c:	0f 93       	push	r16
     33e:	1f 93       	push	r17
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	00 91 00 01 	lds	r16, 0x0100
     348:	c4 e1       	ldi	r28, 0x14	; 20
     34a:	d1 e0       	ldi	r29, 0x01	; 1
     34c:	10 e0       	ldi	r17, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     34e:	80 ea       	ldi	r24, 0xA0	; 160
     350:	f8 2e       	mov	r15, r24
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
     352:	12 30       	cpi	r17, 0x02	; 2
     354:	a1 f0       	breq	.+40     	; 0x37e <matrix_scan+0x44>
     356:	13 30       	cpi	r17, 0x03	; 3
     358:	28 f4       	brcc	.+10     	; 0x364 <matrix_scan+0x2a>
     35a:	11 23       	and	r17, r17
     35c:	51 f0       	breq	.+20     	; 0x372 <matrix_scan+0x38>
     35e:	11 30       	cpi	r17, 0x01	; 1
     360:	c9 f4       	brne	.+50     	; 0x394 <matrix_scan+0x5a>
     362:	0a c0       	rjmp	.+20     	; 0x378 <matrix_scan+0x3e>
     364:	14 30       	cpi	r17, 0x04	; 4
     366:	89 f0       	breq	.+34     	; 0x38a <matrix_scan+0x50>
     368:	14 30       	cpi	r17, 0x04	; 4
     36a:	60 f0       	brcs	.+24     	; 0x384 <matrix_scan+0x4a>
     36c:	15 30       	cpi	r17, 0x05	; 5
     36e:	91 f4       	brne	.+36     	; 0x394 <matrix_scan+0x5a>
     370:	0f c0       	rjmp	.+30     	; 0x390 <matrix_scan+0x56>
        case 0:
            DDRE  |=  (1<<2);
     372:	6a 9a       	sbi	0x0d, 2	; 13
            PORTE &= ~(1<<2);
     374:	72 98       	cbi	0x0e, 2	; 14
     376:	0e c0       	rjmp	.+28     	; 0x394 <matrix_scan+0x5a>
            break;
        case 1:
            DDRB  |=  (1<<6);
     378:	26 9a       	sbi	0x04, 6	; 4
            PORTB &= ~(1<<6);
     37a:	2e 98       	cbi	0x05, 6	; 5
     37c:	0b c0       	rjmp	.+22     	; 0x394 <matrix_scan+0x5a>
            break;
        case 2:
            DDRB  |=  (1<<5);
     37e:	25 9a       	sbi	0x04, 5	; 4
            PORTB &= ~(1<<5);
     380:	2d 98       	cbi	0x05, 5	; 5
     382:	08 c0       	rjmp	.+16     	; 0x394 <matrix_scan+0x5a>
            break;
        case 3:
            DDRB  |=  (1<<4);
     384:	24 9a       	sbi	0x04, 4	; 4
            PORTB &= ~(1<<4);
     386:	2c 98       	cbi	0x05, 4	; 5
     388:	05 c0       	rjmp	.+10     	; 0x394 <matrix_scan+0x5a>
            break;
        case 4:
            DDRB  |=  (1<<3);
     38a:	23 9a       	sbi	0x04, 3	; 4
            PORTB &= ~(1<<3);
     38c:	2b 98       	cbi	0x05, 3	; 5
     38e:	02 c0       	rjmp	.+4      	; 0x394 <matrix_scan+0x5a>
            break;
        case 5:
            DDRB  |=  (1<<2);
     390:	22 9a       	sbi	0x04, 2	; 4
            PORTB &= ~(1<<2);
     392:	2a 98       	cbi	0x05, 2	; 5
     394:	8f 2d       	mov	r24, r15
     396:	8a 95       	dec	r24
     398:	f1 f7       	brne	.-4      	; 0x396 <matrix_scan+0x5c>
    PORTF |=  (1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<1 | 1<<0);
}

static matrix_row_t read_cols(void)
{
    return (PINC&(1<<7) ? 0 : (1<<0)) |
     39a:	96 b1       	in	r25, 0x06	; 6
     39c:	8f b1       	in	r24, 0x0f	; 15
     39e:	80 95       	com	r24
     3a0:	88 1f       	adc	r24, r24
     3a2:	88 27       	eor	r24, r24
     3a4:	88 1f       	adc	r24, r24
     3a6:	88 0f       	add	r24, r24
     3a8:	7e 99       	sbic	0x0f, 6	; 15
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <matrix_scan+0x76>
     3ac:	64 e0       	ldi	r22, 0x04	; 4
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <matrix_scan+0x78>
     3b0:	60 e0       	ldi	r22, 0x00	; 0
     3b2:	7d 99       	sbic	0x0f, 5	; 15
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <matrix_scan+0x80>
     3b6:	58 e0       	ldi	r21, 0x08	; 8
     3b8:	01 c0       	rjmp	.+2      	; 0x3bc <matrix_scan+0x82>
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	7c 99       	sbic	0x0f, 4	; 15
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <matrix_scan+0x8a>
     3c0:	40 e1       	ldi	r20, 0x10	; 16
     3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <matrix_scan+0x8c>
     3c4:	40 e0       	ldi	r20, 0x00	; 0
     3c6:	79 99       	sbic	0x0f, 1	; 15
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <matrix_scan+0x94>
     3ca:	30 e2       	ldi	r19, 0x20	; 32
     3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <matrix_scan+0x96>
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	78 99       	sbic	0x0f, 0	; 15
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <matrix_scan+0x9e>
     3d4:	20 e4       	ldi	r18, 0x40	; 64
     3d6:	01 c0       	rjmp	.+2      	; 0x3da <matrix_scan+0xa0>
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	90 95       	com	r25
     3dc:	99 1f       	adc	r25, r25
     3de:	99 27       	eor	r25, r25
     3e0:	99 1f       	adc	r25, r25
     3e2:	98 2b       	or	r25, r24
     3e4:	96 2b       	or	r25, r22
     3e6:	95 2b       	or	r25, r21
     3e8:	94 2b       	or	r25, r20
     3ea:	93 2b       	or	r25, r19
     3ec:	92 2b       	or	r25, r18
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        // if (cols == 1) {
        //     led_set(1<<USB_LED_JUNK);
        // }
        if (matrix_debouncing[i] != cols) {
     3ee:	88 81       	ld	r24, Y
     3f0:	89 17       	cp	r24, r25
     3f2:	11 f0       	breq	.+4      	; 0x3f8 <matrix_scan+0xbe>
            matrix_debouncing[i] = cols;
     3f4:	98 83       	st	Y, r25
     3f6:	05 e0       	ldi	r16, 0x05	; 5
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
        }
        unselect_rows();
     3f8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     3fc:	1f 5f       	subi	r17, 0xFF	; 255
     3fe:	21 96       	adiw	r28, 0x01	; 1
     400:	16 30       	cpi	r17, 0x06	; 6
     402:	09 f0       	breq	.+2      	; 0x406 <matrix_scan+0xcc>
     404:	a6 cf       	rjmp	.-180    	; 0x352 <matrix_scan+0x18>
     406:	00 93 00 01 	sts	0x0100, r16
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
     40a:	00 23       	and	r16, r16
     40c:	19 f1       	breq	.+70     	; 0x454 <matrix_scan+0x11a>
        if (--debouncing) {
     40e:	80 2f       	mov	r24, r16
     410:	81 50       	subi	r24, 0x01	; 1
     412:	80 93 00 01 	sts	0x0100, r24
     416:	88 23       	and	r24, r24
     418:	29 f0       	breq	.+10     	; 0x424 <matrix_scan+0xea>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     41a:	80 ea       	ldi	r24, 0xA0	; 160
     41c:	9f e0       	ldi	r25, 0x0F	; 15
     41e:	01 97       	sbiw	r24, 0x01	; 1
     420:	f1 f7       	brne	.-4      	; 0x41e <matrix_scan+0xe4>
     422:	18 c0       	rjmp	.+48     	; 0x454 <matrix_scan+0x11a>
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
     424:	80 91 14 01 	lds	r24, 0x0114
     428:	80 93 0e 01 	sts	0x010E, r24
     42c:	80 91 15 01 	lds	r24, 0x0115
     430:	80 93 0f 01 	sts	0x010F, r24
     434:	80 91 16 01 	lds	r24, 0x0116
     438:	80 93 10 01 	sts	0x0110, r24
     43c:	80 91 17 01 	lds	r24, 0x0117
     440:	80 93 11 01 	sts	0x0111, r24
     444:	80 91 18 01 	lds	r24, 0x0118
     448:	80 93 12 01 	sts	0x0112, r24
     44c:	80 91 19 01 	lds	r24, 0x0119
     450:	80 93 13 01 	sts	0x0113, r24
            }
        }
    }

    return 1;
}
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	1f 91       	pop	r17
     45c:	0f 91       	pop	r16
     45e:	ff 90       	pop	r15
     460:	08 95       	ret

00000462 <led_set>:
struct cRGB led[1];


void led_set(uint8_t usb_led)
{
	if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
     462:	81 ff       	sbrs	r24, 1
     464:	03 c0       	rjmp	.+6      	; 0x46c <led_set+0xa>
        // output low
        // C7
	    DDRC  &= ~(1<<7);
     466:	3f 98       	cbi	0x07, 7	; 7
	    PORTC |=  (1<<7);
     468:	47 9a       	sbi	0x08, 7	; 8
     46a:	08 95       	ret
	} else if (usb_led & (1<<USB_LED_STATUS1)) {
     46c:	85 ff       	sbrs	r24, 5
     46e:	03 c0       	rjmp	.+6      	; 0x476 <led_set+0x14>
		// C6
	    DDRC  &= ~(1<<6);
     470:	3e 98       	cbi	0x07, 6	; 7
	    PORTC |=  (1<<6);
     472:	46 9a       	sbi	0x08, 6	; 8
     474:	08 95       	ret
	    // turn USB_LED_STATUS2 off
	    // DDRD  &= ~(1<<3);
	    // PORTD &= ~(1<<3);
	} else if (usb_led & (1<<USB_LED_STATUS2)) {
     476:	86 ff       	sbrs	r24, 6
     478:	03 c0       	rjmp	.+6      	; 0x480 <led_set+0x1e>
		// D3
	    DDRD  &= ~(1<<3);
     47a:	53 98       	cbi	0x0a, 3	; 10
	    PORTD |=  (1<<3);
     47c:	5b 9a       	sbi	0x0b, 3	; 11
     47e:	08 95       	ret
	    // turn USB_LED_STATUS1 off
	    // DDRC  &= ~(1<<6);
	    // PORTC &= ~(1<<6);
    } else {
    	// Hi-Z
        DDRC  &= ~(1<<7);
     480:	3f 98       	cbi	0x07, 7	; 7
        PORTC &= ~(1<<7);
     482:	47 98       	cbi	0x08, 7	; 8
	    DDRC  &= ~(1<<6);
     484:	3e 98       	cbi	0x07, 6	; 7
	    PORTC &= ~(1<<6);
     486:	46 98       	cbi	0x08, 6	; 8
	    DDRD  &= ~(1<<3);
     488:	53 98       	cbi	0x0a, 3	; 10
	    PORTD &= ~(1<<3);
     48a:	5b 98       	cbi	0x0b, 3	; 11
     48c:	08 95       	ret

0000048e <led_toggle>:
    }
}

void led_toggle(uint8_t usb_led)
{
	if (usb_led & (1<<USB_LED_STATUS1)) {
     48e:	85 ff       	sbrs	r24, 5
     490:	04 c0       	rjmp	.+8      	; 0x49a <led_toggle+0xc>
		// C6
	    // DDRC  &= ~(1<<6);	
	    // PORTC ^=  (1<<6);
	    // D6
	    // DDRD  &= ~(1<<6);	
	    PORTD ^=  (1<<6);
     492:	8b b1       	in	r24, 0x0b	; 11
     494:	90 e4       	ldi	r25, 0x40	; 64
     496:	89 27       	eor	r24, r25
     498:	8b b9       	out	0x0b, r24	; 11
     49a:	08 95       	ret

0000049c <EVENT_USB_Device_Disconnect>:

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    /* For battery powered device */
    USB_IsInitialized = false;
     49c:	10 92 85 01 	sts	0x0185, r1
        USB_Disable();  // Disable all interrupts
	USB_Controller_Enable();
        USB_INT_Enable(USB_INT_VBUSTI);
    }
*/
}
     4a0:	08 95       	ret

000004a2 <EVENT_USB_Device_Reset>:

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
}
     4a2:	08 95       	ret

000004a4 <EVENT_USB_Device_Suspend>:
{
    print("[S]");
#ifdef SLEEP_LED_ENABLE
    sleep_led_enable();
#endif
}
     4a4:	08 95       	ret

000004a6 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
     4a6:	80 91 1b 01 	lds	r24, 0x011B
     4aa:	08 95       	ret

000004ac <send_mouse>:
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();
#endif
}
     4ac:	08 95       	ret

000004ae <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
     4ae:	df 93       	push	r29
     4b0:	cf 93       	push	r28
     4b2:	00 d0       	rcall	.+0      	; 0x4b4 <send_consumer+0x6>
     4b4:	0f 92       	push	r0
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62
     4ba:	ac 01       	movw	r20, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     4bc:	80 91 86 01 	lds	r24, 0x0186
     4c0:	84 30       	cpi	r24, 0x04	; 4
     4c2:	29 f5       	brne	.+74     	; 0x50e <send_consumer+0x60>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	80 93 e9 00 	sts	0x00E9, r24
     4ca:	2f ef       	ldi	r18, 0xFF	; 255
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4cc:	95 ed       	ldi	r25, 0xD5	; 213
     4ce:	05 c0       	rjmp	.+10     	; 0x4da <send_consumer+0x2c>
     4d0:	89 2f       	mov	r24, r25
     4d2:	8a 95       	dec	r24
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <send_consumer+0x24>
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     4d6:	22 23       	and	r18, r18
     4d8:	29 f0       	breq	.+10     	; 0x4e4 <send_consumer+0x36>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     4da:	80 91 e8 00 	lds	r24, 0x00E8
     4de:	21 50       	subi	r18, 0x01	; 1
     4e0:	85 ff       	sbrs	r24, 5
     4e2:	f6 cf       	rjmp	.-20     	; 0x4d0 <send_consumer+0x22>
     4e4:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
     4e8:	85 ff       	sbrs	r24, 5
     4ea:	11 c0       	rjmp	.+34     	; 0x50e <send_consumer+0x60>
        return;

    report_extra_t r = {
        .report_id = REPORT_ID_CONSUMER,
        .usage = data
    };
     4ec:	5b 83       	std	Y+3, r21	; 0x03
     4ee:	4a 83       	std	Y+2, r20	; 0x02
     4f0:	83 e0       	ldi	r24, 0x03	; 3
     4f2:	89 83       	std	Y+1, r24	; 0x01

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    if (!Endpoint_IsReadWriteAllowed()) return;

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     4f4:	ce 01       	movw	r24, r28
     4f6:	01 96       	adiw	r24, 0x01	; 1
     4f8:	63 e0       	ldi	r22, 0x03	; 3
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	40 e0       	ldi	r20, 0x00	; 0
     4fe:	50 e0       	ldi	r21, 0x00	; 0
     500:	0e 94 3b 05 	call	0xa76	; 0xa76 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     504:	80 91 e8 00 	lds	r24, 0x00E8
     508:	8e 77       	andi	r24, 0x7E	; 126
     50a:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	cf 91       	pop	r28
     516:	df 91       	pop	r29
     518:	08 95       	ret

0000051a <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
     51a:	df 93       	push	r29
     51c:	cf 93       	push	r28
     51e:	00 d0       	rcall	.+0      	; 0x520 <send_system+0x6>
     520:	0f 92       	push	r0
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
     526:	ac 01       	movw	r20, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     528:	80 91 86 01 	lds	r24, 0x0186
     52c:	84 30       	cpi	r24, 0x04	; 4
     52e:	29 f5       	brne	.+74     	; 0x57a <send_system+0x60>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	80 93 e9 00 	sts	0x00E9, r24
     536:	2f ef       	ldi	r18, 0xFF	; 255
     538:	95 ed       	ldi	r25, 0xD5	; 213
     53a:	05 c0       	rjmp	.+10     	; 0x546 <send_system+0x2c>
     53c:	89 2f       	mov	r24, r25
     53e:	8a 95       	dec	r24
     540:	f1 f7       	brne	.-4      	; 0x53e <send_system+0x24>
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     542:	22 23       	and	r18, r18
     544:	29 f0       	breq	.+10     	; 0x550 <send_system+0x36>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     546:	80 91 e8 00 	lds	r24, 0x00E8
     54a:	21 50       	subi	r18, 0x01	; 1
     54c:	85 ff       	sbrs	r24, 5
     54e:	f6 cf       	rjmp	.-20     	; 0x53c <send_system+0x22>
     550:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
     554:	85 ff       	sbrs	r24, 5
     556:	11 c0       	rjmp	.+34     	; 0x57a <send_system+0x60>
        return;

    report_extra_t r = {
        .report_id = REPORT_ID_SYSTEM,
        .usage = data
    };
     558:	5b 83       	std	Y+3, r21	; 0x03
     55a:	4a 83       	std	Y+2, r20	; 0x02
     55c:	82 e0       	ldi	r24, 0x02	; 2
     55e:	89 83       	std	Y+1, r24	; 0x01

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    if (!Endpoint_IsReadWriteAllowed()) return;

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     560:	ce 01       	movw	r24, r28
     562:	01 96       	adiw	r24, 0x01	; 1
     564:	63 e0       	ldi	r22, 0x03	; 3
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	40 e0       	ldi	r20, 0x00	; 0
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	0e 94 3b 05 	call	0xa76	; 0xa76 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     570:	80 91 e8 00 	lds	r24, 0x00E8
     574:	8e 77       	andi	r24, 0x7E	; 126
     576:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	cf 91       	pop	r28
     582:	df 91       	pop	r29
     584:	08 95       	ret

00000586 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
     586:	0f 93       	push	r16
     588:	1f 93       	push	r17
     58a:	18 2f       	mov	r17, r24
     58c:	09 2f       	mov	r16, r25
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     58e:	80 91 86 01 	lds	r24, 0x0186
     592:	84 30       	cpi	r24, 0x04	; 4
     594:	61 f5       	brne	.+88     	; 0x5ee <send_keyboard+0x68>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	80 93 e9 00 	sts	0x00E9, r24
     59c:	9f ef       	ldi	r25, 0xFF	; 255
     59e:	25 ed       	ldi	r18, 0xD5	; 213
     5a0:	05 c0       	rjmp	.+10     	; 0x5ac <send_keyboard+0x26>
     5a2:	82 2f       	mov	r24, r18
     5a4:	8a 95       	dec	r24
     5a6:	f1 f7       	brne	.-4      	; 0x5a4 <send_keyboard+0x1e>
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     5a8:	99 23       	and	r25, r25
     5aa:	29 f0       	breq	.+10     	; 0x5b6 <send_keyboard+0x30>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     5ac:	80 91 e8 00 	lds	r24, 0x00E8
     5b0:	91 50       	subi	r25, 0x01	; 1
     5b2:	85 ff       	sbrs	r24, 5
     5b4:	f6 cf       	rjmp	.-20     	; 0x5a2 <send_keyboard+0x1c>
     5b6:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
     5ba:	85 ff       	sbrs	r24, 5
     5bc:	18 c0       	rjmp	.+48     	; 0x5ee <send_keyboard+0x68>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
     5be:	81 2f       	mov	r24, r17
     5c0:	90 2f       	mov	r25, r16
     5c2:	68 e0       	ldi	r22, 0x08	; 8
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	40 e0       	ldi	r20, 0x00	; 0
     5c8:	50 e0       	ldi	r21, 0x00	; 0
     5ca:	0e 94 3b 05 	call	0xa76	; 0xa76 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5ce:	80 91 e8 00 	lds	r24, 0x00E8
     5d2:	8e 77       	andi	r24, 0x7E	; 126
     5d4:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
     5d8:	ac e1       	ldi	r26, 0x1C	; 28
     5da:	b1 e0       	ldi	r27, 0x01	; 1
     5dc:	21 2f       	mov	r18, r17
     5de:	30 2f       	mov	r19, r16
     5e0:	c9 01       	movw	r24, r18
     5e2:	fc 01       	movw	r30, r24
     5e4:	88 e0       	ldi	r24, 0x08	; 8
     5e6:	01 90       	ld	r0, Z+
     5e8:	0d 92       	st	X+, r0
     5ea:	81 50       	subi	r24, 0x01	; 1
     5ec:	e1 f7       	brne	.-8      	; 0x5e6 <send_keyboard+0x60>
}
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	08 95       	ret

000005f4 <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
     5f4:	84 b7       	in	r24, 0x34	; 52
     5f6:	87 7f       	andi	r24, 0xF7	; 247
     5f8:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
     5fa:	88 e1       	ldi	r24, 0x18	; 24
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	80 93 60 00 	sts	0x0060, r24
     604:	10 92 60 00 	sts	0x0060, r1
     608:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    clock_prescale_set(clock_div_1);
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	20 e8       	ldi	r18, 0x80	; 128
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	20 93 61 00 	sts	0x0061, r18
     618:	80 93 61 00 	sts	0x0061, r24
     61c:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    keyboard_setup();
     61e:	0e 94 66 09 	call	0x12cc	; 0x12cc <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
     622:	0e 94 19 06 	call	0xc32	; 0xc32 <USB_Disable>

    USB_Init();
     626:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     62a:	80 91 e2 00 	lds	r24, 0x00E2
     62e:	84 60       	ori	r24, 0x04	; 4
     630:	80 93 e2 00 	sts	0x00E2, r24
int main(void)
{
    setup_mcu();
    keyboard_setup();
    setup_usb();
    sei();
     634:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
     636:	80 91 86 01 	lds	r24, 0x0186
     63a:	84 30       	cpi	r24, 0x04	; 4
     63c:	e1 f7       	brne	.-8      	; 0x636 <main+0x42>
#endif
    }
    print("USB configured.\n");

    /* init modules */
    keyboard_init();
     63e:	0e 94 00 0a 	call	0x1400	; 0x1400 <keyboard_init>
    host_set_driver(&lufa_driver);
     642:	82 e0       	ldi	r24, 0x02	; 2
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	0e 94 18 09 	call	0x1230	; 0x1230 <host_set_driver>
     64a:	0c c0       	rjmp	.+24     	; 0x664 <main+0x70>

    print("Keyboard start.\n");
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
            print("[s]");
            suspend_power_down();
     64c:	0e 94 97 14 	call	0x292e	; 0x292e <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
     650:	80 91 84 01 	lds	r24, 0x0184
     654:	88 23       	and	r24, r24
     656:	31 f0       	breq	.+12     	; 0x664 <main+0x70>
     658:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <suspend_wakeup_condition>
     65c:	88 23       	and	r24, r24
     65e:	11 f0       	breq	.+4      	; 0x664 <main+0x70>
                    USB_Device_SendRemoteWakeup();
     660:	0e 94 50 04 	call	0x8a0	; 0x8a0 <USB_Device_SendRemoteWakeup>
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
     664:	80 91 86 01 	lds	r24, 0x0186
     668:	85 30       	cpi	r24, 0x05	; 5
     66a:	81 f3       	breq	.-32     	; 0x64c <main+0x58>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
                    USB_Device_SendRemoteWakeup();
            }
        }

        keyboard_task();
     66c:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <keyboard_task>
     670:	f9 cf       	rjmp	.-14     	; 0x664 <main+0x70>

00000672 <EVENT_USB_Device_Connect>:
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    /* For battery powered device */
    if (!USB_IsInitialized) {
     672:	80 91 85 01 	lds	r24, 0x0185
     676:	88 23       	and	r24, r24
     678:	49 f4       	brne	.+18     	; 0x68c <EVENT_USB_Device_Connect+0x1a>
        USB_Disable();
     67a:	0e 94 19 06 	call	0xc32	; 0xc32 <USB_Disable>
        USB_Init();
     67e:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <USB_Init>
     682:	80 91 e2 00 	lds	r24, 0x00E2
     686:	84 60       	ori	r24, 0x04	; 4
     688:	80 93 e2 00 	sts	0x00E2, r24
     68c:	08 95       	ret

0000068e <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
     68e:	80 91 88 01 	lds	r24, 0x0188
     692:	83 30       	cpi	r24, 0x03	; 3
     694:	09 f4       	brne	.+2      	; 0x698 <EVENT_USB_Device_ControlRequest+0xa>
     696:	55 c0       	rjmp	.+170    	; 0x742 <EVENT_USB_Device_ControlRequest+0xb4>
     698:	84 30       	cpi	r24, 0x04	; 4
     69a:	30 f4       	brcc	.+12     	; 0x6a8 <EVENT_USB_Device_ControlRequest+0x1a>
     69c:	81 30       	cpi	r24, 0x01	; 1
     69e:	71 f0       	breq	.+28     	; 0x6bc <EVENT_USB_Device_ControlRequest+0x2e>
     6a0:	82 30       	cpi	r24, 0x02	; 2
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <EVENT_USB_Device_ControlRequest+0x18>
     6a4:	af c0       	rjmp	.+350    	; 0x804 <EVENT_USB_Device_ControlRequest+0x176>
     6a6:	96 c0       	rjmp	.+300    	; 0x7d4 <EVENT_USB_Device_ControlRequest+0x146>
     6a8:	8a 30       	cpi	r24, 0x0A	; 10
     6aa:	09 f4       	brne	.+2      	; 0x6ae <EVENT_USB_Device_ControlRequest+0x20>
     6ac:	83 c0       	rjmp	.+262    	; 0x7b4 <EVENT_USB_Device_ControlRequest+0x126>
     6ae:	8b 30       	cpi	r24, 0x0B	; 11
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <EVENT_USB_Device_ControlRequest+0x26>
     6b2:	68 c0       	rjmp	.+208    	; 0x784 <EVENT_USB_Device_ControlRequest+0xf6>
     6b4:	89 30       	cpi	r24, 0x09	; 9
     6b6:	09 f0       	breq	.+2      	; 0x6ba <EVENT_USB_Device_ControlRequest+0x2c>
     6b8:	a5 c0       	rjmp	.+330    	; 0x804 <EVENT_USB_Device_ControlRequest+0x176>
     6ba:	20 c0       	rjmp	.+64     	; 0x6fc <EVENT_USB_Device_ControlRequest+0x6e>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     6bc:	80 91 87 01 	lds	r24, 0x0187
     6c0:	81 3a       	cpi	r24, 0xA1	; 161
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <EVENT_USB_Device_ControlRequest+0x38>
     6c4:	9f c0       	rjmp	.+318    	; 0x804 <EVENT_USB_Device_ControlRequest+0x176>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     6c6:	80 91 e8 00 	lds	r24, 0x00E8
     6ca:	87 7f       	andi	r24, 0xF7	; 247
     6cc:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
     6d0:	80 91 8b 01 	lds	r24, 0x018B
     6d4:	90 91 8c 01 	lds	r25, 0x018C
     6d8:	89 2b       	or	r24, r25
     6da:	21 f4       	brne	.+8      	; 0x6e4 <EVENT_USB_Device_ControlRequest+0x56>
     6dc:	8c e1       	ldi	r24, 0x1C	; 28
     6de:	91 e0       	ldi	r25, 0x01	; 1
     6e0:	68 e0       	ldi	r22, 0x08	; 8
     6e2:	03 c0       	rjmp	.+6      	; 0x6ea <EVENT_USB_Device_ControlRequest+0x5c>
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	60 e0       	ldi	r22, 0x00	; 0
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	0e 94 66 04 	call	0x8cc	; 0x8cc <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     6f0:	80 91 e8 00 	lds	r24, 0x00E8
     6f4:	8b 77       	andi	r24, 0x7B	; 123
     6f6:	80 93 e8 00 	sts	0x00E8, r24
     6fa:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     6fc:	80 91 87 01 	lds	r24, 0x0187
     700:	81 32       	cpi	r24, 0x21	; 33
     702:	09 f0       	breq	.+2      	; 0x706 <EVENT_USB_Device_ControlRequest+0x78>
     704:	7f c0       	rjmp	.+254    	; 0x804 <EVENT_USB_Device_ControlRequest+0x176>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
     706:	80 91 8b 01 	lds	r24, 0x018B
     70a:	90 91 8c 01 	lds	r25, 0x018C
     70e:	89 2b       	or	r24, r25
     710:	09 f0       	breq	.+2      	; 0x714 <EVENT_USB_Device_ControlRequest+0x86>
     712:	78 c0       	rjmp	.+240    	; 0x804 <EVENT_USB_Device_ControlRequest+0x176>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     714:	80 91 e8 00 	lds	r24, 0x00E8
     718:	87 7f       	andi	r24, 0xF7	; 247
     71a:	80 93 e8 00 	sts	0x00E8, r24
     71e:	05 c0       	rjmp	.+10     	; 0x72a <EVENT_USB_Device_ControlRequest+0x9c>
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
     720:	80 91 86 01 	lds	r24, 0x0186
     724:	88 23       	and	r24, r24
     726:	09 f4       	brne	.+2      	; 0x72a <EVENT_USB_Device_ControlRequest+0x9c>
     728:	6d c0       	rjmp	.+218    	; 0x804 <EVENT_USB_Device_ControlRequest+0x176>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     72a:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
     72e:	82 ff       	sbrs	r24, 2
     730:	f7 cf       	rjmp	.-18     	; 0x720 <EVENT_USB_Device_ControlRequest+0x92>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     732:	80 91 f1 00 	lds	r24, 0x00F1
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
     736:	80 93 1b 01 	sts	0x011B, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     73a:	80 91 e8 00 	lds	r24, 0x00E8
     73e:	8b 77       	andi	r24, 0x7B	; 123
     740:	1c c0       	rjmp	.+56     	; 0x77a <EVENT_USB_Device_ControlRequest+0xec>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     742:	80 91 87 01 	lds	r24, 0x0187
     746:	81 3a       	cpi	r24, 0xA1	; 161
     748:	09 f0       	breq	.+2      	; 0x74c <EVENT_USB_Device_ControlRequest+0xbe>
     74a:	5c c0       	rjmp	.+184    	; 0x804 <EVENT_USB_Device_ControlRequest+0x176>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
     74c:	80 91 8b 01 	lds	r24, 0x018B
     750:	90 91 8c 01 	lds	r25, 0x018C
     754:	89 2b       	or	r24, r25
     756:	09 f0       	breq	.+2      	; 0x75a <EVENT_USB_Device_ControlRequest+0xcc>
     758:	55 c0       	rjmp	.+170    	; 0x804 <EVENT_USB_Device_ControlRequest+0x176>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     75a:	80 91 e8 00 	lds	r24, 0x00E8
     75e:	87 7f       	andi	r24, 0xF7	; 247
     760:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     764:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
     768:	80 ff       	sbrs	r24, 0
     76a:	fc cf       	rjmp	.-8      	; 0x764 <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
     76c:	80 91 01 01 	lds	r24, 0x0101
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     770:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     774:	80 91 e8 00 	lds	r24, 0x00E8
     778:	8e 77       	andi	r24, 0x7E	; 126
     77a:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearIN();
                    Endpoint_ClearStatusStage();
     77e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <Endpoint_ClearStatusStage>
     782:	08 95       	ret
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     784:	80 91 87 01 	lds	r24, 0x0187
     788:	81 32       	cpi	r24, 0x21	; 33
     78a:	e1 f5       	brne	.+120    	; 0x804 <EVENT_USB_Device_ControlRequest+0x176>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
     78c:	80 91 8b 01 	lds	r24, 0x018B
     790:	90 91 8c 01 	lds	r25, 0x018C
     794:	89 2b       	or	r24, r25
     796:	b1 f5       	brne	.+108    	; 0x804 <EVENT_USB_Device_ControlRequest+0x176>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     798:	80 91 e8 00 	lds	r24, 0x00E8
     79c:	87 7f       	andi	r24, 0xF7	; 247
     79e:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
     7a2:	0e 94 c6 05 	call	0xb8c	; 0xb8c <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
     7a6:	80 91 89 01 	lds	r24, 0x0189
     7aa:	80 93 01 01 	sts	0x0101, r24
                    clear_keyboard();
     7ae:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <clear_keyboard>
     7b2:	08 95       	ret
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     7b4:	80 91 87 01 	lds	r24, 0x0187
     7b8:	81 32       	cpi	r24, 0x21	; 33
     7ba:	21 f5       	brne	.+72     	; 0x804 <EVENT_USB_Device_ControlRequest+0x176>
     7bc:	80 91 e8 00 	lds	r24, 0x00E8
     7c0:	87 7f       	andi	r24, 0xF7	; 247
     7c2:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
     7c6:	0e 94 c6 05 	call	0xb8c	; 0xb8c <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
     7ca:	80 91 8a 01 	lds	r24, 0x018A
     7ce:	80 93 1a 01 	sts	0x011A, r24
     7d2:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     7d4:	80 91 87 01 	lds	r24, 0x0187
     7d8:	81 3a       	cpi	r24, 0xA1	; 161
     7da:	a1 f4       	brne	.+40     	; 0x804 <EVENT_USB_Device_ControlRequest+0x176>
     7dc:	80 91 e8 00 	lds	r24, 0x00E8
     7e0:	87 7f       	andi	r24, 0xF7	; 247
     7e2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7e6:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
     7ea:	80 ff       	sbrs	r24, 0
     7ec:	fc cf       	rjmp	.-8      	; 0x7e6 <EVENT_USB_Device_ControlRequest+0x158>
                Endpoint_Write_8(keyboard_idle);
     7ee:	80 91 1a 01 	lds	r24, 0x011A
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7f2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7f6:	80 91 e8 00 	lds	r24, 0x00E8
     7fa:	8e 77       	andi	r24, 0x7E	; 126
     7fc:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
     800:	0e 94 c6 05 	call	0xb8c	; 0xb8c <Endpoint_ClearStatusStage>
     804:	08 95       	ret

00000806 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	61 ec       	ldi	r22, 0xC1	; 193
     80a:	42 e0       	ldi	r20, 0x02	; 2
     80c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <Endpoint_ConfigureEndpoint_Prv>
#ifdef NKRO_ENABLE
    /* Setup NKRO HID Report Endpoints */
    ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
                                     NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
#endif
}
     810:	08 95       	ret

00000812 <EVENT_USB_Device_WakeUp>:
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    suspend_wakeup_init();
     812:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <suspend_wakeup_init>
#ifdef SLEEP_LED_ENABLE
    sleep_led_disable();
    // NOTE: converters may not accept this
    led_set(host_keyboard_leds());
#endif
}
     816:	08 95       	ret

00000818 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     818:	da 01       	movw	r26, r20
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
     81a:	93 30       	cpi	r25, 0x03	; 3
     81c:	b1 f0       	breq	.+44     	; 0x84a <CALLBACK_USB_GetDescriptor+0x32>
     81e:	94 30       	cpi	r25, 0x04	; 4
     820:	28 f4       	brcc	.+10     	; 0x82c <CALLBACK_USB_GetDescriptor+0x14>
     822:	91 30       	cpi	r25, 0x01	; 1
     824:	41 f0       	breq	.+16     	; 0x836 <CALLBACK_USB_GetDescriptor+0x1e>
     826:	92 30       	cpi	r25, 0x02	; 2
     828:	99 f5       	brne	.+102    	; 0x890 <CALLBACK_USB_GetDescriptor+0x78>
     82a:	0a c0       	rjmp	.+20     	; 0x840 <CALLBACK_USB_GetDescriptor+0x28>
     82c:	91 32       	cpi	r25, 0x21	; 33
     82e:	11 f1       	breq	.+68     	; 0x874 <CALLBACK_USB_GetDescriptor+0x5c>
     830:	92 32       	cpi	r25, 0x22	; 34
     832:	71 f5       	brne	.+92     	; 0x890 <CALLBACK_USB_GetDescriptor+0x78>
     834:	26 c0       	rjmp	.+76     	; 0x882 <CALLBACK_USB_GetDescriptor+0x6a>
     836:	22 e1       	ldi	r18, 0x12	; 18
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	ef ea       	ldi	r30, 0xAF	; 175
     83c:	f1 e0       	ldi	r31, 0x01	; 1
     83e:	2c c0       	rjmp	.+88     	; 0x898 <CALLBACK_USB_GetDescriptor+0x80>
     840:	22 e2       	ldi	r18, 0x22	; 34
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	e1 ec       	ldi	r30, 0xC1	; 193
     846:	f1 e0       	ldi	r31, 0x01	; 1
     848:	27 c0       	rjmp	.+78     	; 0x898 <CALLBACK_USB_GetDescriptor+0x80>
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
     84a:	81 30       	cpi	r24, 0x01	; 1
     84c:	49 f0       	breq	.+18     	; 0x860 <CALLBACK_USB_GetDescriptor+0x48>
     84e:	81 30       	cpi	r24, 0x01	; 1
     850:	18 f0       	brcs	.+6      	; 0x858 <CALLBACK_USB_GetDescriptor+0x40>
     852:	82 30       	cpi	r24, 0x02	; 2
     854:	e9 f4       	brne	.+58     	; 0x890 <CALLBACK_USB_GetDescriptor+0x78>
     856:	08 c0       	rjmp	.+16     	; 0x868 <CALLBACK_USB_GetDescriptor+0x50>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
     858:	e3 ee       	ldi	r30, 0xE3	; 227
     85a:	f1 e0       	ldi	r31, 0x01	; 1
     85c:	84 91       	lpm	r24, Z+
     85e:	07 c0       	rjmp	.+14     	; 0x86e <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     860:	e7 ee       	ldi	r30, 0xE7	; 231
     862:	f1 e0       	ldi	r31, 0x01	; 1
     864:	84 91       	lpm	r24, Z+
     866:	03 c0       	rjmp	.+6      	; 0x86e <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
     868:	ef ef       	ldi	r30, 0xFF	; 255
     86a:	f1 e0       	ldi	r31, 0x01	; 1
     86c:	84 91       	lpm	r24, Z+
     86e:	28 2f       	mov	r18, r24
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	12 c0       	rjmp	.+36     	; 0x898 <CALLBACK_USB_GetDescriptor+0x80>
                    break;
            }
            break;
        case HID_DTYPE_HID:
            switch (wIndex) {
     874:	66 23       	and	r22, r22
     876:	61 f4       	brne	.+24     	; 0x890 <CALLBACK_USB_GetDescriptor+0x78>
     878:	29 e0       	ldi	r18, 0x09	; 9
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	e3 ed       	ldi	r30, 0xD3	; 211
     87e:	f1 e0       	ldi	r31, 0x01	; 1
     880:	0b c0       	rjmp	.+22     	; 0x898 <CALLBACK_USB_GetDescriptor+0x80>
                break;
#endif
            }
            break;
        case HID_DTYPE_Report:
            switch (wIndex) {
     882:	66 23       	and	r22, r22
     884:	29 f4       	brne	.+10     	; 0x890 <CALLBACK_USB_GetDescriptor+0x78>
     886:	2f e3       	ldi	r18, 0x3F	; 63
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	e0 e7       	ldi	r30, 0x70	; 112
     88c:	f1 e0       	ldi	r31, 0x01	; 1
     88e:	04 c0       	rjmp	.+8      	; 0x898 <CALLBACK_USB_GetDescriptor+0x80>
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	e0 e0       	ldi	r30, 0x00	; 0
     896:	f0 e0       	ldi	r31, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
     898:	ed 93       	st	X+, r30
     89a:	fc 93       	st	X, r31
    return Size;
}
     89c:	c9 01       	movw	r24, r18
     89e:	08 95       	ret

000008a0 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     8a0:	80 e1       	ldi	r24, 0x10	; 16
     8a2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     8a4:	82 e1       	ldi	r24, 0x12	; 18
     8a6:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     8a8:	09 b4       	in	r0, 0x29	; 41
     8aa:	00 fe       	sbrs	r0, 0
     8ac:	fd cf       	rjmp	.-6      	; 0x8a8 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     8ae:	80 91 d8 00 	lds	r24, 0x00D8
     8b2:	8f 7d       	andi	r24, 0xDF	; 223
     8b4:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
     8b8:	80 91 e0 00 	lds	r24, 0x00E0
     8bc:	82 60       	ori	r24, 0x02	; 2
     8be:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
     8c2:	80 91 e0 00 	lds	r24, 0x00E0
     8c6:	81 fd       	sbrc	r24, 1
     8c8:	fc cf       	rjmp	.-8      	; 0x8c2 <USB_Device_SendRemoteWakeup+0x22>
}
     8ca:	08 95       	ret

000008cc <Endpoint_Write_Control_Stream_LE>:
     8cc:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     8ce:	40 91 8d 01 	lds	r20, 0x018D
     8d2:	50 91 8e 01 	lds	r21, 0x018E
     8d6:	46 17       	cp	r20, r22
     8d8:	57 07       	cpc	r21, r23
     8da:	18 f4       	brcc	.+6      	; 0x8e2 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     8dc:	f9 01       	movw	r30, r18
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	43 c0       	rjmp	.+134    	; 0x968 <Endpoint_Write_Control_Stream_LE+0x9c>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     8e2:	61 15       	cp	r22, r1
     8e4:	71 05       	cpc	r23, r1
     8e6:	11 f0       	breq	.+4      	; 0x8ec <Endpoint_Write_Control_Stream_LE+0x20>
     8e8:	ab 01       	movw	r20, r22
     8ea:	f8 cf       	rjmp	.-16     	; 0x8dc <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8ec:	80 91 e8 00 	lds	r24, 0x00E8
     8f0:	8e 77       	andi	r24, 0x7E	; 126
     8f2:	80 93 e8 00 	sts	0x00E8, r24
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	50 e0       	ldi	r21, 0x00	; 0
     8fa:	f0 cf       	rjmp	.-32     	; 0x8dc <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8fc:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     900:	88 23       	and	r24, r24
     902:	09 f4       	brne	.+2      	; 0x906 <Endpoint_Write_Control_Stream_LE+0x3a>
     904:	47 c0       	rjmp	.+142    	; 0x994 <Endpoint_Write_Control_Stream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     906:	85 30       	cpi	r24, 0x05	; 5
     908:	09 f4       	brne	.+2      	; 0x90c <Endpoint_Write_Control_Stream_LE+0x40>
     90a:	46 c0       	rjmp	.+140    	; 0x998 <Endpoint_Write_Control_Stream_LE+0xcc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     90c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     910:	83 fd       	sbrc	r24, 3
     912:	44 c0       	rjmp	.+136    	; 0x99c <Endpoint_Write_Control_Stream_LE+0xd0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     914:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     918:	82 fd       	sbrc	r24, 2
     91a:	36 c0       	rjmp	.+108    	; 0x988 <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     91c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     920:	80 ff       	sbrs	r24, 0
     922:	22 c0       	rjmp	.+68     	; 0x968 <Endpoint_Write_Control_Stream_LE+0x9c>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     924:	80 91 f3 00 	lds	r24, 0x00F3
     928:	90 91 f2 00 	lds	r25, 0x00F2
     92c:	78 2f       	mov	r23, r24
     92e:	60 e0       	ldi	r22, 0x00	; 0
     930:	29 2f       	mov	r18, r25
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	26 2b       	or	r18, r22
     936:	37 2b       	or	r19, r23
     938:	07 c0       	rjmp	.+14     	; 0x948 <Endpoint_Write_Control_Stream_LE+0x7c>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     93a:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     93c:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     940:	41 50       	subi	r20, 0x01	; 1
     942:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     944:	2f 5f       	subi	r18, 0xFF	; 255
     946:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     948:	41 15       	cp	r20, r1
     94a:	51 05       	cpc	r21, r1
     94c:	19 f0       	breq	.+6      	; 0x954 <Endpoint_Write_Control_Stream_LE+0x88>
     94e:	28 30       	cpi	r18, 0x08	; 8
     950:	31 05       	cpc	r19, r1
     952:	98 f3       	brcs	.-26     	; 0x93a <Endpoint_Write_Control_Stream_LE+0x6e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	28 30       	cpi	r18, 0x08	; 8
     958:	31 05       	cpc	r19, r1
     95a:	09 f4       	brne	.+2      	; 0x95e <Endpoint_Write_Control_Stream_LE+0x92>
     95c:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     95e:	80 91 e8 00 	lds	r24, 0x00E8
     962:	8e 77       	andi	r24, 0x7E	; 126
     964:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     968:	41 15       	cp	r20, r1
     96a:	51 05       	cpc	r21, r1
     96c:	39 f6       	brne	.-114    	; 0x8fc <Endpoint_Write_Control_Stream_LE+0x30>
     96e:	99 23       	and	r25, r25
     970:	29 f6       	brne	.-118    	; 0x8fc <Endpoint_Write_Control_Stream_LE+0x30>
     972:	0a c0       	rjmp	.+20     	; 0x988 <Endpoint_Write_Control_Stream_LE+0xbc>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     974:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     978:	88 23       	and	r24, r24
     97a:	61 f0       	breq	.+24     	; 0x994 <Endpoint_Write_Control_Stream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     97c:	85 30       	cpi	r24, 0x05	; 5
     97e:	61 f0       	breq	.+24     	; 0x998 <Endpoint_Write_Control_Stream_LE+0xcc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     980:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     984:	83 fd       	sbrc	r24, 3
     986:	0a c0       	rjmp	.+20     	; 0x99c <Endpoint_Write_Control_Stream_LE+0xd0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     988:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     98c:	82 ff       	sbrs	r24, 2
     98e:	f2 cf       	rjmp	.-28     	; 0x974 <Endpoint_Write_Control_Stream_LE+0xa8>
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	08 95       	ret
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	08 95       	ret
     998:	83 e0       	ldi	r24, 0x03	; 3
     99a:	08 95       	ret
     99c:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     99e:	08 95       	ret

000009a0 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     9a0:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     9a2:	40 91 8d 01 	lds	r20, 0x018D
     9a6:	50 91 8e 01 	lds	r21, 0x018E
     9aa:	46 17       	cp	r20, r22
     9ac:	57 07       	cpc	r21, r23
     9ae:	18 f4       	brcc	.+6      	; 0x9b6 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     9b0:	f9 01       	movw	r30, r18
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	44 c0       	rjmp	.+136    	; 0xa3e <Endpoint_Write_Control_PStream_LE+0x9e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     9b6:	61 15       	cp	r22, r1
     9b8:	71 05       	cpc	r23, r1
     9ba:	11 f0       	breq	.+4      	; 0x9c0 <Endpoint_Write_Control_PStream_LE+0x20>
     9bc:	ab 01       	movw	r20, r22
     9be:	f8 cf       	rjmp	.-16     	; 0x9b0 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9c0:	80 91 e8 00 	lds	r24, 0x00E8
     9c4:	8e 77       	andi	r24, 0x7E	; 126
     9c6:	80 93 e8 00 	sts	0x00E8, r24
     9ca:	40 e0       	ldi	r20, 0x00	; 0
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	f0 cf       	rjmp	.-32     	; 0x9b0 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9d0:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9d4:	88 23       	and	r24, r24
     9d6:	09 f4       	brne	.+2      	; 0x9da <Endpoint_Write_Control_PStream_LE+0x3a>
     9d8:	48 c0       	rjmp	.+144    	; 0xa6a <Endpoint_Write_Control_PStream_LE+0xca>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9da:	85 30       	cpi	r24, 0x05	; 5
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <Endpoint_Write_Control_PStream_LE+0x40>
     9de:	47 c0       	rjmp	.+142    	; 0xa6e <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9e0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     9e4:	83 fd       	sbrc	r24, 3
     9e6:	45 c0       	rjmp	.+138    	; 0xa72 <Endpoint_Write_Control_PStream_LE+0xd2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9e8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     9ec:	82 fd       	sbrc	r24, 2
     9ee:	37 c0       	rjmp	.+110    	; 0xa5e <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     9f0:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     9f4:	80 ff       	sbrs	r24, 0
     9f6:	23 c0       	rjmp	.+70     	; 0xa3e <Endpoint_Write_Control_PStream_LE+0x9e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     9f8:	80 91 f3 00 	lds	r24, 0x00F3
     9fc:	90 91 f2 00 	lds	r25, 0x00F2
     a00:	78 2f       	mov	r23, r24
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	29 2f       	mov	r18, r25
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	26 2b       	or	r18, r22
     a0a:	37 2b       	or	r19, r23
     a0c:	08 c0       	rjmp	.+16     	; 0xa1e <Endpoint_Write_Control_PStream_LE+0x7e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     a0e:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a10:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     a14:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     a16:	41 50       	subi	r20, 0x01	; 1
     a18:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     a1a:	2f 5f       	subi	r18, 0xFF	; 255
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     a1e:	41 15       	cp	r20, r1
     a20:	51 05       	cpc	r21, r1
     a22:	19 f0       	breq	.+6      	; 0xa2a <Endpoint_Write_Control_PStream_LE+0x8a>
     a24:	28 30       	cpi	r18, 0x08	; 8
     a26:	31 05       	cpc	r19, r1
     a28:	90 f3       	brcs	.-28     	; 0xa0e <Endpoint_Write_Control_PStream_LE+0x6e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	28 30       	cpi	r18, 0x08	; 8
     a2e:	31 05       	cpc	r19, r1
     a30:	09 f4       	brne	.+2      	; 0xa34 <Endpoint_Write_Control_PStream_LE+0x94>
     a32:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a34:	80 91 e8 00 	lds	r24, 0x00E8
     a38:	8e 77       	andi	r24, 0x7E	; 126
     a3a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     a3e:	41 15       	cp	r20, r1
     a40:	51 05       	cpc	r21, r1
     a42:	31 f6       	brne	.-116    	; 0x9d0 <Endpoint_Write_Control_PStream_LE+0x30>
     a44:	99 23       	and	r25, r25
     a46:	21 f6       	brne	.-120    	; 0x9d0 <Endpoint_Write_Control_PStream_LE+0x30>
     a48:	0a c0       	rjmp	.+20     	; 0xa5e <Endpoint_Write_Control_PStream_LE+0xbe>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a4a:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a4e:	88 23       	and	r24, r24
     a50:	61 f0       	breq	.+24     	; 0xa6a <Endpoint_Write_Control_PStream_LE+0xca>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a52:	85 30       	cpi	r24, 0x05	; 5
     a54:	61 f0       	breq	.+24     	; 0xa6e <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a56:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     a5a:	83 fd       	sbrc	r24, 3
     a5c:	0a c0       	rjmp	.+20     	; 0xa72 <Endpoint_Write_Control_PStream_LE+0xd2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a5e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     a62:	82 ff       	sbrs	r24, 2
     a64:	f2 cf       	rjmp	.-28     	; 0xa4a <Endpoint_Write_Control_PStream_LE+0xaa>
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	08 95       	ret
     a6a:	82 e0       	ldi	r24, 0x02	; 2
     a6c:	08 95       	ret
     a6e:	83 e0       	ldi	r24, 0x03	; 3
     a70:	08 95       	ret
     a72:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     a74:	08 95       	ret

00000a76 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     a76:	bf 92       	push	r11
     a78:	cf 92       	push	r12
     a7a:	df 92       	push	r13
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	18 2f       	mov	r17, r24
     a8a:	09 2f       	mov	r16, r25
     a8c:	7b 01       	movw	r14, r22
     a8e:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     a90:	0e 94 e7 05 	call	0xbce	; 0xbce <Endpoint_WaitUntilReady>
     a94:	b8 2e       	mov	r11, r24
     a96:	88 23       	and	r24, r24
     a98:	b1 f5       	brne	.+108    	; 0xb06 <__stack+0x7>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     a9a:	81 2f       	mov	r24, r17
     a9c:	90 2f       	mov	r25, r16
     a9e:	9c 01       	movw	r18, r24
     aa0:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     aa2:	c1 14       	cp	r12, r1
     aa4:	d1 04       	cpc	r13, r1
     aa6:	39 f0       	breq	.+14     	; 0xab6 <Endpoint_Write_Stream_LE+0x40>
	{
		Length -= *BytesProcessed;
     aa8:	f6 01       	movw	r30, r12
     aaa:	80 81       	ld	r24, Z
     aac:	91 81       	ldd	r25, Z+1	; 0x01
     aae:	e8 1a       	sub	r14, r24
     ab0:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     ab2:	c8 0f       	add	r28, r24
     ab4:	d9 1f       	adc	r29, r25
     ab6:	00 e0       	ldi	r16, 0x00	; 0
     ab8:	10 e0       	ldi	r17, 0x00	; 0
     aba:	22 c0       	rjmp	.+68     	; 0xb00 <__stack+0x1>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     abc:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     ac0:	85 fd       	sbrc	r24, 5
     ac2:	16 c0       	rjmp	.+44     	; 0xaf0 <Endpoint_Write_Stream_LE+0x7a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ac4:	80 91 e8 00 	lds	r24, 0x00E8
     ac8:	8e 77       	andi	r24, 0x7E	; 126
     aca:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
     ace:	c1 14       	cp	r12, r1
     ad0:	d1 04       	cpc	r13, r1
     ad2:	49 f0       	breq	.+18     	; 0xae6 <Endpoint_Write_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
     ad4:	f6 01       	movw	r30, r12
     ad6:	80 81       	ld	r24, Z
     ad8:	91 81       	ldd	r25, Z+1	; 0x01
     ada:	80 0f       	add	r24, r16
     adc:	91 1f       	adc	r25, r17
     ade:	91 83       	std	Z+1, r25	; 0x01
     ae0:	80 83       	st	Z, r24
     ae2:	85 e0       	ldi	r24, 0x05	; 5
     ae4:	11 c0       	rjmp	.+34     	; 0xb08 <__stack+0x9>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     ae6:	0e 94 e7 05 	call	0xbce	; 0xbce <Endpoint_WaitUntilReady>
     aea:	88 23       	and	r24, r24
     aec:	49 f0       	breq	.+18     	; 0xb00 <__stack+0x1>
     aee:	0c c0       	rjmp	.+24     	; 0xb08 <__stack+0x9>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     af0:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     af2:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     af6:	08 94       	sec
     af8:	e1 08       	sbc	r14, r1
     afa:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     afc:	0f 5f       	subi	r16, 0xFF	; 255
     afe:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     b00:	e1 14       	cp	r14, r1
     b02:	f1 04       	cpc	r15, r1
     b04:	d9 f6       	brne	.-74     	; 0xabc <Endpoint_Write_Stream_LE+0x46>
     b06:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	ff 90       	pop	r15
     b12:	ef 90       	pop	r14
     b14:	df 90       	pop	r13
     b16:	cf 90       	pop	r12
     b18:	bf 90       	pop	r11
     b1a:	08 95       	ret

00000b1c <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     b1c:	38 2f       	mov	r19, r24
     b1e:	28 2f       	mov	r18, r24
     b20:	2e c0       	rjmp	.+92     	; 0xb7e <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b22:	82 2f       	mov	r24, r18
     b24:	8f 70       	andi	r24, 0x0F	; 15
     b26:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     b2a:	23 17       	cp	r18, r19
     b2c:	21 f4       	brne	.+8      	; 0xb36 <Endpoint_ConfigureEndpoint_Prv+0x1a>
     b2e:	76 2f       	mov	r23, r22
     b30:	94 2f       	mov	r25, r20
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	06 c0       	rjmp	.+12     	; 0xb42 <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     b36:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     b3a:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     b3e:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     b42:	91 ff       	sbrs	r25, 1
     b44:	1b c0       	rjmp	.+54     	; 0xb7c <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     b46:	80 91 eb 00 	lds	r24, 0x00EB
     b4a:	8e 7f       	andi	r24, 0xFE	; 254
     b4c:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     b50:	80 91 ed 00 	lds	r24, 0x00ED
     b54:	8d 7f       	andi	r24, 0xFD	; 253
     b56:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     b5a:	80 91 eb 00 	lds	r24, 0x00EB
     b5e:	81 60       	ori	r24, 0x01	; 1
     b60:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     b64:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     b68:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     b6c:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     b70:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
     b74:	87 fd       	sbrc	r24, 7
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <Endpoint_ConfigureEndpoint_Prv+0x60>
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     b7c:	2f 5f       	subi	r18, 0xFF	; 255
     b7e:	27 30       	cpi	r18, 0x07	; 7
     b80:	80 f2       	brcs	.-96     	; 0xb22 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b82:	3f 70       	andi	r19, 0x0F	; 15
     b84:	30 93 e9 00 	sts	0x00E9, r19
     b88:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     b8a:	08 95       	ret

00000b8c <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     b8c:	80 91 87 01 	lds	r24, 0x0187
     b90:	88 23       	and	r24, r24
     b92:	9c f4       	brge	.+38     	; 0xbba <Endpoint_ClearStatusStage+0x2e>
     b94:	04 c0       	rjmp	.+8      	; 0xb9e <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     b96:	80 91 86 01 	lds	r24, 0x0186
     b9a:	88 23       	and	r24, r24
     b9c:	b9 f0       	breq	.+46     	; 0xbcc <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b9e:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     ba2:	82 ff       	sbrs	r24, 2
     ba4:	f8 cf       	rjmp	.-16     	; 0xb96 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ba6:	80 91 e8 00 	lds	r24, 0x00E8
     baa:	8b 77       	andi	r24, 0x7B	; 123
     bac:	80 93 e8 00 	sts	0x00E8, r24
     bb0:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     bb2:	80 91 86 01 	lds	r24, 0x0186
     bb6:	88 23       	and	r24, r24
     bb8:	49 f0       	breq	.+18     	; 0xbcc <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     bba:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     bbe:	80 ff       	sbrs	r24, 0
     bc0:	f8 cf       	rjmp	.-16     	; 0xbb2 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bc2:	80 91 e8 00 	lds	r24, 0x00E8
     bc6:	8e 77       	andi	r24, 0x7E	; 126
     bc8:	80 93 e8 00 	sts	0x00E8, r24
     bcc:	08 95       	ret

00000bce <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     bce:	40 91 e4 00 	lds	r20, 0x00E4
     bd2:	50 91 e5 00 	lds	r21, 0x00E5
     bd6:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     bd8:	80 91 ec 00 	lds	r24, 0x00EC
     bdc:	80 ff       	sbrs	r24, 0
     bde:	24 c0       	rjmp	.+72     	; 0xc28 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     be0:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     be4:	80 fd       	sbrc	r24, 0
     be6:	1e c0       	rjmp	.+60     	; 0xc24 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     be8:	80 91 86 01 	lds	r24, 0x0186

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     bec:	88 23       	and	r24, r24
     bee:	11 f4       	brne	.+4      	; 0xbf4 <Endpoint_WaitUntilReady+0x26>
     bf0:	82 e0       	ldi	r24, 0x02	; 2
     bf2:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     bf4:	85 30       	cpi	r24, 0x05	; 5
     bf6:	11 f4       	brne	.+4      	; 0xbfc <Endpoint_WaitUntilReady+0x2e>
     bf8:	83 e0       	ldi	r24, 0x03	; 3
     bfa:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     bfc:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     c00:	85 ff       	sbrs	r24, 5
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <Endpoint_WaitUntilReady+0x3a>
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	08 95       	ret
     c08:	80 91 e4 00 	lds	r24, 0x00E4
     c0c:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     c10:	84 17       	cp	r24, r20
     c12:	95 07       	cpc	r25, r21
     c14:	09 f3       	breq	.-62     	; 0xbd8 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     c16:	22 23       	and	r18, r18
     c18:	11 f4       	brne	.+4      	; 0xc1e <Endpoint_WaitUntilReady+0x50>
     c1a:	84 e0       	ldi	r24, 0x04	; 4
     c1c:	08 95       	ret
     c1e:	21 50       	subi	r18, 0x01	; 1
     c20:	ac 01       	movw	r20, r24
     c22:	da cf       	rjmp	.-76     	; 0xbd8 <Endpoint_WaitUntilReady+0xa>
     c24:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     c26:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c28:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     c2c:	82 ff       	sbrs	r24, 2
     c2e:	dc cf       	rjmp	.-72     	; 0xbe8 <Endpoint_WaitUntilReady+0x1a>
     c30:	f9 cf       	rjmp	.-14     	; 0xc24 <Endpoint_WaitUntilReady+0x56>

00000c32 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     c32:	0e 94 8c 06 	call	0xd18	; 0xd18 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c36:	0e 94 94 06 	call	0xd28	; 0xd28 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     c3a:	e0 ee       	ldi	r30, 0xE0	; 224
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	81 60       	ori	r24, 0x01	; 1
     c42:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     c44:	a8 ed       	ldi	r26, 0xD8	; 216
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	8c 91       	ld	r24, X
     c4a:	8f 77       	andi	r24, 0x7F	; 127
     c4c:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c4e:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
     c50:	e7 ed       	ldi	r30, 0xD7	; 215
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	8e 7f       	andi	r24, 0xFE	; 254
     c58:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     c5a:	8c 91       	ld	r24, X
     c5c:	8f 7e       	andi	r24, 0xEF	; 239
     c5e:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     c60:	10 92 85 01 	sts	0x0185, r1
}
     c64:	08 95       	ret

00000c66 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     c66:	ef 92       	push	r14
     c68:	ff 92       	push	r15
     c6a:	0f 93       	push	r16
     c6c:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     c6e:	0e 94 8c 06 	call	0xd18	; 0xd18 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c72:	0e 94 94 06 	call	0xd28	; 0xd28 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     c76:	08 ed       	ldi	r16, 0xD8	; 216
     c78:	10 e0       	ldi	r17, 0x00	; 0
     c7a:	f8 01       	movw	r30, r16
     c7c:	80 81       	ld	r24, Z
     c7e:	8f 77       	andi	r24, 0x7F	; 127
     c80:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     c82:	80 81       	ld	r24, Z
     c84:	80 68       	ori	r24, 0x80	; 128
     c86:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     c88:	80 81       	ld	r24, Z
     c8a:	8f 7d       	andi	r24, 0xDF	; 223
     c8c:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c8e:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     c90:	10 92 86 01 	sts	0x0186, r1
	USB_Device_ConfigurationNumber  = 0;
     c94:	10 92 82 01 	sts	0x0182, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     c98:	10 92 84 01 	sts	0x0184, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     c9c:	10 92 83 01 	sts	0x0183, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     ca0:	80 ee       	ldi	r24, 0xE0	; 224
     ca2:	e8 2e       	mov	r14, r24
     ca4:	f1 2c       	mov	r15, r1
     ca6:	f7 01       	movw	r30, r14
     ca8:	80 81       	ld	r24, Z
     caa:	8b 7f       	andi	r24, 0xFB	; 251
     cac:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     cae:	f8 01       	movw	r30, r16
     cb0:	80 81       	ld	r24, Z
     cb2:	81 60       	ori	r24, 0x01	; 1
     cb4:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	42 e0       	ldi	r20, 0x02	; 2
     cbc:	0e 94 8e 05 	call	0xb1c	; 0xb1c <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     cc0:	e1 ee       	ldi	r30, 0xE1	; 225
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	8e 7f       	andi	r24, 0xFE	; 254
     cc8:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     cca:	e2 ee       	ldi	r30, 0xE2	; 226
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	81 60       	ori	r24, 0x01	; 1
     cd2:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     cd4:	80 81       	ld	r24, Z
     cd6:	88 60       	ori	r24, 0x08	; 8
     cd8:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     cda:	f7 01       	movw	r30, r14
     cdc:	80 81       	ld	r24, Z
     cde:	8e 7f       	andi	r24, 0xFE	; 254
     ce0:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     ce2:	f8 01       	movw	r30, r16
     ce4:	80 81       	ld	r24, Z
     ce6:	80 61       	ori	r24, 0x10	; 16
     ce8:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     cea:	1f 91       	pop	r17
     cec:	0f 91       	pop	r16
     cee:	ff 90       	pop	r15
     cf0:	ef 90       	pop	r14
     cf2:	08 95       	ret

00000cf4 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     cf4:	e8 ed       	ldi	r30, 0xD8	; 216
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	8f 7e       	andi	r24, 0xEF	; 239
     cfc:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     cfe:	e7 ed       	ldi	r30, 0xD7	; 215
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	81 60       	ori	r24, 0x01	; 1
     d06:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     d08:	84 e0       	ldi	r24, 0x04	; 4
     d0a:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	80 93 85 01 	sts	0x0185, r24

	USB_ResetInterface();
     d12:	0e 94 33 06 	call	0xc66	; 0xc66 <USB_ResetInterface>
}
     d16:	08 95       	ret

00000d18 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     d18:	e8 ed       	ldi	r30, 0xD8	; 216
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	8e 7f       	andi	r24, 0xFE	; 254
     d20:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     d22:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     d26:	08 95       	ret

00000d28 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     d28:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     d2c:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     d30:	08 95       	ret

00000d32 <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     d32:	1f 92       	push	r1
     d34:	0f 92       	push	r0
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	0f 92       	push	r0
     d3a:	11 24       	eor	r1, r1
     d3c:	1f 93       	push	r17
     d3e:	2f 93       	push	r18
     d40:	3f 93       	push	r19
     d42:	4f 93       	push	r20
     d44:	5f 93       	push	r21
     d46:	6f 93       	push	r22
     d48:	7f 93       	push	r23
     d4a:	8f 93       	push	r24
     d4c:	9f 93       	push	r25
     d4e:	af 93       	push	r26
     d50:	bf 93       	push	r27
     d52:	ef 93       	push	r30
     d54:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     d56:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d5a:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d5e:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     d62:	80 91 f0 00 	lds	r24, 0x00F0
     d66:	87 7f       	andi	r24, 0xF7	; 247
     d68:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     d6c:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     d6e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <USB_Device_ProcessControlRequest>
     d72:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     d76:	80 91 f0 00 	lds	r24, 0x00F0
     d7a:	88 60       	ori	r24, 0x08	; 8
     d7c:	80 93 f0 00 	sts	0x00F0, r24
     d80:	1f 70       	andi	r17, 0x0F	; 15
     d82:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     d86:	ff 91       	pop	r31
     d88:	ef 91       	pop	r30
     d8a:	bf 91       	pop	r27
     d8c:	af 91       	pop	r26
     d8e:	9f 91       	pop	r25
     d90:	8f 91       	pop	r24
     d92:	7f 91       	pop	r23
     d94:	6f 91       	pop	r22
     d96:	5f 91       	pop	r21
     d98:	4f 91       	pop	r20
     d9a:	3f 91       	pop	r19
     d9c:	2f 91       	pop	r18
     d9e:	1f 91       	pop	r17
     da0:	0f 90       	pop	r0
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	0f 90       	pop	r0
     da6:	1f 90       	pop	r1
     da8:	18 95       	reti

00000daa <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     daa:	1f 92       	push	r1
     dac:	0f 92       	push	r0
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	0f 92       	push	r0
     db2:	11 24       	eor	r1, r1
     db4:	2f 93       	push	r18
     db6:	3f 93       	push	r19
     db8:	4f 93       	push	r20
     dba:	5f 93       	push	r21
     dbc:	6f 93       	push	r22
     dbe:	7f 93       	push	r23
     dc0:	8f 93       	push	r24
     dc2:	9f 93       	push	r25
     dc4:	af 93       	push	r26
     dc6:	bf 93       	push	r27
     dc8:	ef 93       	push	r30
     dca:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     dcc:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     dd0:	82 ff       	sbrs	r24, 2
     dd2:	0b c0       	rjmp	.+22     	; 0xdea <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     dd4:	80 91 e2 00 	lds	r24, 0x00E2
     dd8:	82 ff       	sbrs	r24, 2
     dda:	07 c0       	rjmp	.+14     	; 0xdea <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     ddc:	80 91 e1 00 	lds	r24, 0x00E1
     de0:	8b 7f       	andi	r24, 0xFB	; 251
     de2:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     de6:	0e 94 17 09 	call	0x122e	; 0x122e <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     dea:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     dee:	80 ff       	sbrs	r24, 0
     df0:	1f c0       	rjmp	.+62     	; 0xe30 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     df2:	80 91 d8 00 	lds	r24, 0x00D8
     df6:	80 ff       	sbrs	r24, 0
     df8:	1b c0       	rjmp	.+54     	; 0xe30 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     dfa:	80 91 da 00 	lds	r24, 0x00DA
     dfe:	8e 7f       	andi	r24, 0xFE	; 254
     e00:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     e04:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     e08:	80 ff       	sbrs	r24, 0
     e0a:	0d c0       	rjmp	.+26     	; 0xe26 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     e0c:	80 e1       	ldi	r24, 0x10	; 16
     e0e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     e10:	82 e1       	ldi	r24, 0x12	; 18
     e12:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     e14:	09 b4       	in	r0, 0x29	; 41
     e16:	00 fe       	sbrs	r0, 0
     e18:	fd cf       	rjmp	.-6      	; 0xe14 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	80 93 86 01 	sts	0x0186, r24
			EVENT_USB_Device_Connect();
     e20:	0e 94 39 03 	call	0x672	; 0x672 <EVENT_USB_Device_Connect>
     e24:	05 c0       	rjmp	.+10     	; 0xe30 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     e26:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     e28:	10 92 86 01 	sts	0x0186, r1
			EVENT_USB_Device_Disconnect();
     e2c:	0e 94 4e 02 	call	0x49c	; 0x49c <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     e30:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     e34:	80 ff       	sbrs	r24, 0
     e36:	19 c0       	rjmp	.+50     	; 0xe6a <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     e38:	80 91 e2 00 	lds	r24, 0x00E2
     e3c:	80 ff       	sbrs	r24, 0
     e3e:	15 c0       	rjmp	.+42     	; 0xe6a <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     e40:	80 91 e2 00 	lds	r24, 0x00E2
     e44:	8e 7f       	andi	r24, 0xFE	; 254
     e46:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     e4a:	80 91 e2 00 	lds	r24, 0x00E2
     e4e:	80 61       	ori	r24, 0x10	; 16
     e50:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     e54:	80 91 d8 00 	lds	r24, 0x00D8
     e58:	80 62       	ori	r24, 0x20	; 32
     e5a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     e5e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     e60:	85 e0       	ldi	r24, 0x05	; 5
     e62:	80 93 86 01 	sts	0x0186, r24
		EVENT_USB_Device_Suspend();
     e66:	0e 94 52 02 	call	0x4a4	; 0x4a4 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     e6a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     e6e:	84 ff       	sbrs	r24, 4
     e70:	30 c0       	rjmp	.+96     	; 0xed2 <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     e72:	80 91 e2 00 	lds	r24, 0x00E2
     e76:	84 ff       	sbrs	r24, 4
     e78:	2c c0       	rjmp	.+88     	; 0xed2 <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     e7a:	80 e1       	ldi	r24, 0x10	; 16
     e7c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     e7e:	82 e1       	ldi	r24, 0x12	; 18
     e80:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     e82:	09 b4       	in	r0, 0x29	; 41
     e84:	00 fe       	sbrs	r0, 0
     e86:	fd cf       	rjmp	.-6      	; 0xe82 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     e88:	80 91 d8 00 	lds	r24, 0x00D8
     e8c:	8f 7d       	andi	r24, 0xDF	; 223
     e8e:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     e92:	80 91 e1 00 	lds	r24, 0x00E1
     e96:	8f 7e       	andi	r24, 0xEF	; 239
     e98:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     e9c:	80 91 e2 00 	lds	r24, 0x00E2
     ea0:	8f 7e       	andi	r24, 0xEF	; 239
     ea2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     ea6:	80 91 e2 00 	lds	r24, 0x00E2
     eaa:	81 60       	ori	r24, 0x01	; 1
     eac:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     eb0:	80 91 82 01 	lds	r24, 0x0182
     eb4:	88 23       	and	r24, r24
     eb6:	11 f0       	breq	.+4      	; 0xebc <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
     eb8:	84 e0       	ldi	r24, 0x04	; 4
     eba:	07 c0       	rjmp	.+14     	; 0xeca <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     ebc:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     ec0:	87 fd       	sbrc	r24, 7
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <__vector_10+0x11e>
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	01 c0       	rjmp	.+2      	; 0xeca <__vector_10+0x120>
     ec8:	83 e0       	ldi	r24, 0x03	; 3
     eca:	80 93 86 01 	sts	0x0186, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     ece:	0e 94 09 04 	call	0x812	; 0x812 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     ed2:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     ed6:	83 ff       	sbrs	r24, 3
     ed8:	29 c0       	rjmp	.+82     	; 0xf2c <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     eda:	80 91 e2 00 	lds	r24, 0x00E2
     ede:	83 ff       	sbrs	r24, 3
     ee0:	25 c0       	rjmp	.+74     	; 0xf2c <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     ee2:	80 91 e1 00 	lds	r24, 0x00E1
     ee6:	87 7f       	andi	r24, 0xF7	; 247
     ee8:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     eec:	82 e0       	ldi	r24, 0x02	; 2
     eee:	80 93 86 01 	sts	0x0186, r24
		USB_Device_ConfigurationNumber = 0;
     ef2:	10 92 82 01 	sts	0x0182, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     ef6:	80 91 e1 00 	lds	r24, 0x00E1
     efa:	8e 7f       	andi	r24, 0xFE	; 254
     efc:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     f00:	80 91 e2 00 	lds	r24, 0x00E2
     f04:	8e 7f       	andi	r24, 0xFE	; 254
     f06:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     f0a:	80 91 e2 00 	lds	r24, 0x00E2
     f0e:	80 61       	ori	r24, 0x10	; 16
     f10:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	60 e0       	ldi	r22, 0x00	; 0
     f18:	42 e0       	ldi	r20, 0x02	; 2
     f1a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     f1e:	80 91 f0 00 	lds	r24, 0x00F0
     f22:	88 60       	ori	r24, 0x08	; 8
     f24:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     f28:	0e 94 51 02 	call	0x4a2	; 0x4a2 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     f2c:	ff 91       	pop	r31
     f2e:	ef 91       	pop	r30
     f30:	bf 91       	pop	r27
     f32:	af 91       	pop	r26
     f34:	9f 91       	pop	r25
     f36:	8f 91       	pop	r24
     f38:	7f 91       	pop	r23
     f3a:	6f 91       	pop	r22
     f3c:	5f 91       	pop	r21
     f3e:	4f 91       	pop	r20
     f40:	3f 91       	pop	r19
     f42:	2f 91       	pop	r18
     f44:	0f 90       	pop	r0
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	0f 90       	pop	r0
     f4a:	1f 90       	pop	r1
     f4c:	18 95       	reti

00000f4e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     f4e:	1f 93       	push	r17
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	ac 97       	sbiw	r28, 0x2c	; 44
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	cd bf       	out	0x3d, r28	; 61
     f64:	e7 e8       	ldi	r30, 0x87	; 135
     f66:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f68:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     f6c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     f6e:	21 e0       	ldi	r18, 0x01	; 1
     f70:	ef 38       	cpi	r30, 0x8F	; 143
     f72:	f2 07       	cpc	r31, r18
     f74:	c9 f7       	brne	.-14     	; 0xf68 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     f76:	0e 94 47 03 	call	0x68e	; 0x68e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f7a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     f7e:	83 ff       	sbrs	r24, 3
     f80:	3e c1       	rjmp	.+636    	; 0x11fe <USB_Device_ProcessControlRequest+0x2b0>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     f82:	80 91 87 01 	lds	r24, 0x0187

		switch (USB_ControlRequest.bRequest)
     f86:	30 91 88 01 	lds	r19, 0x0188
     f8a:	35 30       	cpi	r19, 0x05	; 5
     f8c:	09 f4       	brne	.+2      	; 0xf90 <USB_Device_ProcessControlRequest+0x42>
     f8e:	87 c0       	rjmp	.+270    	; 0x109e <USB_Device_ProcessControlRequest+0x150>
     f90:	36 30       	cpi	r19, 0x06	; 6
     f92:	40 f4       	brcc	.+16     	; 0xfa4 <USB_Device_ProcessControlRequest+0x56>
     f94:	31 30       	cpi	r19, 0x01	; 1
     f96:	c9 f1       	breq	.+114    	; 0x100a <USB_Device_ProcessControlRequest+0xbc>
     f98:	31 30       	cpi	r19, 0x01	; 1
     f9a:	70 f0       	brcs	.+28     	; 0xfb8 <USB_Device_ProcessControlRequest+0x6a>
     f9c:	33 30       	cpi	r19, 0x03	; 3
     f9e:	09 f0       	breq	.+2      	; 0xfa2 <USB_Device_ProcessControlRequest+0x54>
     fa0:	2e c1       	rjmp	.+604    	; 0x11fe <USB_Device_ProcessControlRequest+0x2b0>
     fa2:	33 c0       	rjmp	.+102    	; 0x100a <USB_Device_ProcessControlRequest+0xbc>
     fa4:	38 30       	cpi	r19, 0x08	; 8
     fa6:	09 f4       	brne	.+2      	; 0xfaa <USB_Device_ProcessControlRequest+0x5c>
     fa8:	f9 c0       	rjmp	.+498    	; 0x119c <USB_Device_ProcessControlRequest+0x24e>
     faa:	39 30       	cpi	r19, 0x09	; 9
     fac:	09 f4       	brne	.+2      	; 0xfb0 <USB_Device_ProcessControlRequest+0x62>
     fae:	09 c1       	rjmp	.+530    	; 0x11c2 <USB_Device_ProcessControlRequest+0x274>
     fb0:	36 30       	cpi	r19, 0x06	; 6
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <USB_Device_ProcessControlRequest+0x68>
     fb4:	24 c1       	rjmp	.+584    	; 0x11fe <USB_Device_ProcessControlRequest+0x2b0>
     fb6:	97 c0       	rjmp	.+302    	; 0x10e6 <USB_Device_ProcessControlRequest+0x198>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     fb8:	80 38       	cpi	r24, 0x80	; 128
     fba:	21 f0       	breq	.+8      	; 0xfc4 <USB_Device_ProcessControlRequest+0x76>
     fbc:	82 38       	cpi	r24, 0x82	; 130
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <USB_Device_ProcessControlRequest+0x74>
     fc0:	1e c1       	rjmp	.+572    	; 0x11fe <USB_Device_ProcessControlRequest+0x2b0>
     fc2:	08 c0       	rjmp	.+16     	; 0xfd4 <USB_Device_ProcessControlRequest+0x86>
     fc4:	90 91 83 01 	lds	r25, 0x0183
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     fc8:	80 91 84 01 	lds	r24, 0x0184
     fcc:	88 23       	and	r24, r24
     fce:	99 f0       	breq	.+38     	; 0xff6 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     fd0:	92 60       	ori	r25, 0x02	; 2
     fd2:	11 c0       	rjmp	.+34     	; 0xff6 <USB_Device_ProcessControlRequest+0xa8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fd4:	80 91 8b 01 	lds	r24, 0x018B
     fd8:	8f 70       	andi	r24, 0x0F	; 15
     fda:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     fde:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	25 e0       	ldi	r18, 0x05	; 5
     fe6:	96 95       	lsr	r25
     fe8:	87 95       	ror	r24
     fea:	2a 95       	dec	r18
     fec:	e1 f7       	brne	.-8      	; 0xfe6 <USB_Device_ProcessControlRequest+0x98>
     fee:	98 2f       	mov	r25, r24
     ff0:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ff2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ff6:	80 91 e8 00 	lds	r24, 0x00E8
     ffa:	87 7f       	andi	r24, 0xF7	; 247
     ffc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1000:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    1004:	10 92 f1 00 	sts	0x00F1, r1
    1008:	d4 c0       	rjmp	.+424    	; 0x11b2 <USB_Device_ProcessControlRequest+0x264>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <USB_Device_ProcessControlRequest+0xc6>
    100e:	82 30       	cpi	r24, 0x02	; 2
    1010:	09 f0       	breq	.+2      	; 0x1014 <USB_Device_ProcessControlRequest+0xc6>
    1012:	f5 c0       	rjmp	.+490    	; 0x11fe <USB_Device_ProcessControlRequest+0x2b0>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	8f 71       	andi	r24, 0x1F	; 31
    1018:	90 70       	andi	r25, 0x00	; 0
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	21 f0       	breq	.+8      	; 0x1026 <USB_Device_ProcessControlRequest+0xd8>
    101e:	02 97       	sbiw	r24, 0x02	; 2
    1020:	09 f0       	breq	.+2      	; 0x1024 <USB_Device_ProcessControlRequest+0xd6>
    1022:	ed c0       	rjmp	.+474    	; 0x11fe <USB_Device_ProcessControlRequest+0x2b0>
    1024:	0c c0       	rjmp	.+24     	; 0x103e <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1026:	80 91 89 01 	lds	r24, 0x0189
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	09 f0       	breq	.+2      	; 0x1030 <USB_Device_ProcessControlRequest+0xe2>
    102e:	e7 c0       	rjmp	.+462    	; 0x11fe <USB_Device_ProcessControlRequest+0x2b0>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1030:	10 92 84 01 	sts	0x0184, r1
    1034:	33 30       	cpi	r19, 0x03	; 3
    1036:	69 f5       	brne	.+90     	; 0x1092 <USB_Device_ProcessControlRequest+0x144>
    1038:	80 93 84 01 	sts	0x0184, r24
    103c:	2a c0       	rjmp	.+84     	; 0x1092 <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    103e:	80 91 89 01 	lds	r24, 0x0189
    1042:	88 23       	and	r24, r24
    1044:	31 f5       	brne	.+76     	; 0x1092 <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1046:	20 91 8b 01 	lds	r18, 0x018B
    104a:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    104c:	09 f4       	brne	.+2      	; 0x1050 <USB_Device_ProcessControlRequest+0x102>
    104e:	d7 c0       	rjmp	.+430    	; 0x11fe <USB_Device_ProcessControlRequest+0x2b0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1050:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1054:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1058:	80 ff       	sbrs	r24, 0
    105a:	1b c0       	rjmp	.+54     	; 0x1092 <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    105c:	33 30       	cpi	r19, 0x03	; 3
    105e:	21 f4       	brne	.+8      	; 0x1068 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1060:	80 91 eb 00 	lds	r24, 0x00EB
    1064:	80 62       	ori	r24, 0x20	; 32
    1066:	13 c0       	rjmp	.+38     	; 0x108e <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1068:	80 91 eb 00 	lds	r24, 0x00EB
    106c:	80 61       	ori	r24, 0x10	; 16
    106e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 c0       	rjmp	.+4      	; 0x107c <USB_Device_ProcessControlRequest+0x12e>
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	2a 95       	dec	r18
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <USB_Device_ProcessControlRequest+0x12a>
    1080:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1084:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1088:	80 91 eb 00 	lds	r24, 0x00EB
    108c:	88 60       	ori	r24, 0x08	; 8
    108e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1092:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1096:	80 91 e8 00 	lds	r24, 0x00E8
    109a:	87 7f       	andi	r24, 0xF7	; 247
    109c:	8d c0       	rjmp	.+282    	; 0x11b8 <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    109e:	88 23       	and	r24, r24
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <USB_Device_ProcessControlRequest+0x156>
    10a2:	ad c0       	rjmp	.+346    	; 0x11fe <USB_Device_ProcessControlRequest+0x2b0>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    10a4:	10 91 89 01 	lds	r17, 0x0189
    10a8:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    10aa:	80 91 e3 00 	lds	r24, 0x00E3
    10ae:	80 78       	andi	r24, 0x80	; 128
    10b0:	81 2b       	or	r24, r17
    10b2:	80 93 e3 00 	sts	0x00E3, r24
    10b6:	80 91 e8 00 	lds	r24, 0x00E8
    10ba:	87 7f       	andi	r24, 0xF7	; 247
    10bc:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    10c0:	0e 94 c6 05 	call	0xb8c	; 0xb8c <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10c4:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    10c8:	80 ff       	sbrs	r24, 0
    10ca:	fc cf       	rjmp	.-8      	; 0x10c4 <USB_Device_ProcessControlRequest+0x176>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    10cc:	80 91 e3 00 	lds	r24, 0x00E3
    10d0:	80 68       	ori	r24, 0x80	; 128
    10d2:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    10d6:	11 23       	and	r17, r17
    10d8:	11 f4       	brne	.+4      	; 0x10de <USB_Device_ProcessControlRequest+0x190>
    10da:	82 e0       	ldi	r24, 0x02	; 2
    10dc:	01 c0       	rjmp	.+2      	; 0x10e0 <USB_Device_ProcessControlRequest+0x192>
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	80 93 86 01 	sts	0x0186, r24
    10e4:	8c c0       	rjmp	.+280    	; 0x11fe <USB_Device_ProcessControlRequest+0x2b0>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    10e6:	80 58       	subi	r24, 0x80	; 128
    10e8:	82 30       	cpi	r24, 0x02	; 2
    10ea:	08 f0       	brcs	.+2      	; 0x10ee <USB_Device_ProcessControlRequest+0x1a0>
    10ec:	88 c0       	rjmp	.+272    	; 0x11fe <USB_Device_ProcessControlRequest+0x2b0>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    10ee:	80 91 89 01 	lds	r24, 0x0189
    10f2:	90 91 8a 01 	lds	r25, 0x018A
    10f6:	23 e0       	ldi	r18, 0x03	; 3
    10f8:	8c 3d       	cpi	r24, 0xDC	; 220
    10fa:	92 07       	cpc	r25, r18
    10fc:	09 f0       	breq	.+2      	; 0x1100 <USB_Device_ProcessControlRequest+0x1b2>
    10fe:	34 c0       	rjmp	.+104    	; 0x1168 <USB_Device_ProcessControlRequest+0x21a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1100:	83 e0       	ldi	r24, 0x03	; 3
    1102:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1104:	8a e2       	ldi	r24, 0x2A	; 42
    1106:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1108:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    110a:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    110c:	de 01       	movw	r26, r28
    110e:	15 96       	adiw	r26, 0x05	; 5
    1110:	6e e0       	ldi	r22, 0x0E	; 14
    1112:	40 e0       	ldi	r20, 0x00	; 0
    1114:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1116:	11 e2       	ldi	r17, 0x21	; 33
    1118:	e6 2f       	mov	r30, r22
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	10 93 57 00 	sts	0x0057, r17
    1120:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    1122:	40 ff       	sbrs	r20, 0
    1124:	03 c0       	rjmp	.+6      	; 0x112c <USB_Device_ProcessControlRequest+0x1de>
					{
						SerialByte >>= 4;
    1126:	82 95       	swap	r24
    1128:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    112a:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    112c:	8f 70       	andi	r24, 0x0F	; 15
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1132:	8a 30       	cpi	r24, 0x0A	; 10
    1134:	18 f0       	brcs	.+6      	; 0x113c <USB_Device_ProcessControlRequest+0x1ee>
    1136:	c9 01       	movw	r24, r18
    1138:	c7 96       	adiw	r24, 0x37	; 55
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <USB_Device_ProcessControlRequest+0x1f2>
    113c:	c9 01       	movw	r24, r18
    113e:	c0 96       	adiw	r24, 0x30	; 48
    1140:	8d 93       	st	X+, r24
    1142:	9d 93       	st	X+, r25
    1144:	4f 5f       	subi	r20, 0xFF	; 255
    1146:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1148:	44 31       	cpi	r20, 0x14	; 20
    114a:	51 05       	cpc	r21, r1
    114c:	29 f7       	brne	.-54     	; 0x1118 <USB_Device_ProcessControlRequest+0x1ca>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    114e:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1150:	80 91 e8 00 	lds	r24, 0x00E8
    1154:	87 7f       	andi	r24, 0xF7	; 247
    1156:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    115a:	ce 01       	movw	r24, r28
    115c:	03 96       	adiw	r24, 0x03	; 3
    115e:	6a e2       	ldi	r22, 0x2A	; 42
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	0e 94 66 04 	call	0x8cc	; 0x8cc <Endpoint_Write_Control_Stream_LE>
    1166:	14 c0       	rjmp	.+40     	; 0x1190 <USB_Device_ProcessControlRequest+0x242>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1168:	60 91 8b 01 	lds	r22, 0x018B
    116c:	ae 01       	movw	r20, r28
    116e:	4f 5f       	subi	r20, 0xFF	; 255
    1170:	5f 4f       	sbci	r21, 0xFF	; 255
    1172:	0e 94 0c 04 	call	0x818	; 0x818 <CALLBACK_USB_GetDescriptor>
    1176:	bc 01       	movw	r22, r24
    1178:	00 97       	sbiw	r24, 0x00	; 0
    117a:	09 f4       	brne	.+2      	; 0x117e <USB_Device_ProcessControlRequest+0x230>
    117c:	40 c0       	rjmp	.+128    	; 0x11fe <USB_Device_ProcessControlRequest+0x2b0>
    117e:	80 91 e8 00 	lds	r24, 0x00E8
    1182:	87 7f       	andi	r24, 0xF7	; 247
    1184:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	9a 81       	ldd	r25, Y+2	; 0x02
    118c:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1190:	80 91 e8 00 	lds	r24, 0x00E8
    1194:	8b 77       	andi	r24, 0x7B	; 123
    1196:	80 93 e8 00 	sts	0x00E8, r24
    119a:	31 c0       	rjmp	.+98     	; 0x11fe <USB_Device_ProcessControlRequest+0x2b0>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    119c:	80 38       	cpi	r24, 0x80	; 128
    119e:	79 f5       	brne	.+94     	; 0x11fe <USB_Device_ProcessControlRequest+0x2b0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11a0:	80 91 e8 00 	lds	r24, 0x00E8
    11a4:	87 7f       	andi	r24, 0xF7	; 247
    11a6:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    11aa:	80 91 82 01 	lds	r24, 0x0182
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    11ae:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11b2:	80 91 e8 00 	lds	r24, 0x00E8
    11b6:	8e 77       	andi	r24, 0x7E	; 126
    11b8:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    11bc:	0e 94 c6 05 	call	0xb8c	; 0xb8c <Endpoint_ClearStatusStage>
    11c0:	1e c0       	rjmp	.+60     	; 0x11fe <USB_Device_ProcessControlRequest+0x2b0>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    11c2:	88 23       	and	r24, r24
    11c4:	e1 f4       	brne	.+56     	; 0x11fe <USB_Device_ProcessControlRequest+0x2b0>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    11c6:	90 91 89 01 	lds	r25, 0x0189
    11ca:	92 30       	cpi	r25, 0x02	; 2
    11cc:	c0 f4       	brcc	.+48     	; 0x11fe <USB_Device_ProcessControlRequest+0x2b0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11ce:	80 91 e8 00 	lds	r24, 0x00E8
    11d2:	87 7f       	andi	r24, 0xF7	; 247
    11d4:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    11d8:	90 93 82 01 	sts	0x0182, r25

	Endpoint_ClearStatusStage();
    11dc:	0e 94 c6 05 	call	0xb8c	; 0xb8c <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    11e0:	80 91 82 01 	lds	r24, 0x0182
    11e4:	88 23       	and	r24, r24
    11e6:	31 f4       	brne	.+12     	; 0x11f4 <USB_Device_ProcessControlRequest+0x2a6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    11e8:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    11ec:	87 fd       	sbrc	r24, 7
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <USB_Device_ProcessControlRequest+0x2a6>
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	01 c0       	rjmp	.+2      	; 0x11f6 <USB_Device_ProcessControlRequest+0x2a8>
    11f4:	84 e0       	ldi	r24, 0x04	; 4
    11f6:	80 93 86 01 	sts	0x0186, r24

	EVENT_USB_Device_ConfigurationChanged();
    11fa:	0e 94 03 04 	call	0x806	; 0x806 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    11fe:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1202:	83 ff       	sbrs	r24, 3
    1204:	0a c0       	rjmp	.+20     	; 0x121a <USB_Device_ProcessControlRequest+0x2cc>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1206:	80 91 e8 00 	lds	r24, 0x00E8
    120a:	87 7f       	andi	r24, 0xF7	; 247
    120c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1210:	80 91 eb 00 	lds	r24, 0x00EB
    1214:	80 62       	ori	r24, 0x20	; 32
    1216:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    121a:	ac 96       	adiw	r28, 0x2c	; 44
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	1f 91       	pop	r17
    122c:	08 95       	ret

0000122e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    122e:	08 95       	ret

00001230 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    1230:	90 93 29 01 	sts	0x0129, r25
    1234:	80 93 28 01 	sts	0x0128, r24
}
    1238:	08 95       	ret

0000123a <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    123a:	e0 91 28 01 	lds	r30, 0x0128
    123e:	f0 91 29 01 	lds	r31, 0x0129
    1242:	30 97       	sbiw	r30, 0x00	; 0
    1244:	11 f4       	brne	.+4      	; 0x124a <host_keyboard_leds+0x10>
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	08 95       	ret
    return (*driver->keyboard_leds)();
    124a:	01 90       	ld	r0, Z+
    124c:	f0 81       	ld	r31, Z
    124e:	e0 2d       	mov	r30, r0
    1250:	09 95       	icall
}
    1252:	08 95       	ret

00001254 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    if (!driver) return;
    1254:	e0 91 28 01 	lds	r30, 0x0128
    1258:	f0 91 29 01 	lds	r31, 0x0129
    125c:	30 97       	sbiw	r30, 0x00	; 0
    125e:	21 f0       	breq	.+8      	; 0x1268 <host_keyboard_send+0x14>
    (*driver->send_keyboard)(report);
    1260:	02 80       	ldd	r0, Z+2	; 0x02
    1262:	f3 81       	ldd	r31, Z+3	; 0x03
    1264:	e0 2d       	mov	r30, r0
    1266:	09 95       	icall
    1268:	08 95       	ret

0000126a <host_system_send>:
    if (!driver) return;
    (*driver->send_mouse)(report);
}

void host_system_send(uint16_t report)
{
    126a:	9c 01       	movw	r18, r24
    if (report == last_system_report) return;
    126c:	80 91 26 01 	lds	r24, 0x0126
    1270:	90 91 27 01 	lds	r25, 0x0127
    1274:	28 17       	cp	r18, r24
    1276:	39 07       	cpc	r19, r25
    1278:	79 f0       	breq	.+30     	; 0x1298 <host_system_send+0x2e>
    last_system_report = report;
    127a:	30 93 27 01 	sts	0x0127, r19
    127e:	20 93 26 01 	sts	0x0126, r18

    if (!driver) return;
    1282:	e0 91 28 01 	lds	r30, 0x0128
    1286:	f0 91 29 01 	lds	r31, 0x0129
    128a:	30 97       	sbiw	r30, 0x00	; 0
    128c:	29 f0       	breq	.+10     	; 0x1298 <host_system_send+0x2e>
    (*driver->send_system)(report);
    128e:	06 80       	ldd	r0, Z+6	; 0x06
    1290:	f7 81       	ldd	r31, Z+7	; 0x07
    1292:	e0 2d       	mov	r30, r0
    1294:	c9 01       	movw	r24, r18
    1296:	09 95       	icall
    1298:	08 95       	ret

0000129a <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    129a:	9c 01       	movw	r18, r24
    if (report == last_consumer_report) return;
    129c:	80 91 24 01 	lds	r24, 0x0124
    12a0:	90 91 25 01 	lds	r25, 0x0125
    12a4:	28 17       	cp	r18, r24
    12a6:	39 07       	cpc	r19, r25
    12a8:	79 f0       	breq	.+30     	; 0x12c8 <host_consumer_send+0x2e>
    last_consumer_report = report;
    12aa:	30 93 25 01 	sts	0x0125, r19
    12ae:	20 93 24 01 	sts	0x0124, r18

    if (!driver) return;
    12b2:	e0 91 28 01 	lds	r30, 0x0128
    12b6:	f0 91 29 01 	lds	r31, 0x0129
    12ba:	30 97       	sbiw	r30, 0x00	; 0
    12bc:	29 f0       	breq	.+10     	; 0x12c8 <host_consumer_send+0x2e>
    (*driver->send_consumer)(report);
    12be:	00 84       	ldd	r0, Z+8	; 0x08
    12c0:	f1 85       	ldd	r31, Z+9	; 0x09
    12c2:	e0 2d       	mov	r30, r0
    12c4:	c9 01       	movw	r24, r18
    12c6:	09 95       	icall
    12c8:	08 95       	ret

000012ca <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    12ca:	08 95       	ret

000012cc <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    12cc:	0e 94 65 09 	call	0x12ca	; 0x12ca <matrix_setup>
}
    12d0:	08 95       	ret

000012d2 <keyboard_set_leds>:
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    12d2:	0e 94 31 02 	call	0x462	; 0x462 <led_set>
}
    12d6:	08 95       	ret

000012d8 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    12d8:	bf 92       	push	r11
    12da:	cf 92       	push	r12
    12dc:	df 92       	push	r13
    12de:	ef 92       	push	r14
    12e0:	ff 92       	push	r15
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	2a 97       	sbiw	r28, 0x0a	; 10
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    12fa:	0e 94 9d 01 	call	0x33a	; 0x33a <matrix_scan>
    12fe:	ee 24       	eor	r14, r14
    1300:	ff 24       	eor	r15, r15
    1302:	be 2c       	mov	r11, r14
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    1304:	8e 2d       	mov	r24, r14
    1306:	0e 94 74 01 	call	0x2e8	; 0x2e8 <matrix_get_row>
    130a:	c8 2e       	mov	r12, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    130c:	f7 01       	movw	r30, r14
    130e:	e5 5d       	subi	r30, 0xD5	; 213
    1310:	fe 4f       	sbci	r31, 0xFE	; 254
    1312:	d0 80       	ld	r13, Z
    1314:	d8 26       	eor	r13, r24
        if (matrix_change) {
    1316:	09 f4       	brne	.+2      	; 0x131a <keyboard_task+0x42>
    1318:	3f c0       	rjmp	.+126    	; 0x1398 <keyboard_task+0xc0>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    131a:	80 91 7c 01 	lds	r24, 0x017C
    131e:	81 ff       	sbrs	r24, 1
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <keyboard_task+0x4e>
    1322:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <matrix_print>
    1326:	00 e0       	ldi	r16, 0x00	; 0
    1328:	10 e0       	ldi	r17, 0x00	; 0
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    132a:	ed 2d       	mov	r30, r13
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	cf 01       	movw	r24, r30
    1330:	00 2e       	mov	r0, r16
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <keyboard_task+0x60>
    1334:	95 95       	asr	r25
    1336:	87 95       	ror	r24
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <keyboard_task+0x5c>
    133c:	80 ff       	sbrs	r24, 0
    133e:	27 c0       	rjmp	.+78     	; 0x138e <keyboard_task+0xb6>
                    action_exec((keyevent_t){
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
    1340:	0e 94 09 15 	call	0x2a12	; 0x2a12 <timer_read>
    1344:	09 83       	std	Y+1, r16	; 0x01
    1346:	ba 82       	std	Y+2, r11	; 0x02
    1348:	6c 2d       	mov	r22, r12
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	00 2e       	mov	r0, r16
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <keyboard_task+0x7c>
    1350:	75 95       	asr	r23
    1352:	67 95       	ror	r22
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <keyboard_task+0x78>
    1358:	61 70       	andi	r22, 0x01	; 1
    135a:	70 70       	andi	r23, 0x00	; 0
    135c:	6b 83       	std	Y+3, r22	; 0x03
    135e:	81 60       	ori	r24, 0x01	; 1
    1360:	9d 83       	std	Y+5, r25	; 0x05
    1362:	8c 83       	std	Y+4, r24	; 0x04
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    1364:	40 2f       	mov	r20, r16
    1366:	5b 2d       	mov	r21, r11
    1368:	78 2f       	mov	r23, r24
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    1370:	f7 01       	movw	r30, r14
    1372:	e5 5d       	subi	r30, 0xD5	; 213
    1374:	fe 4f       	sbci	r31, 0xFE	; 254
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	00 2e       	mov	r0, r16
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <keyboard_task+0xaa>
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	0a 94       	dec	r0
    1384:	e2 f7       	brpl	.-8      	; 0x137e <keyboard_task+0xa6>
    1386:	20 81       	ld	r18, Z
    1388:	28 27       	eor	r18, r24
    138a:	20 83       	st	Z, r18
    138c:	1d c0       	rjmp	.+58     	; 0x13c8 <keyboard_task+0xf0>
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    138e:	0f 5f       	subi	r16, 0xFF	; 255
    1390:	1f 4f       	sbci	r17, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    1392:	07 30       	cpi	r16, 0x07	; 7
    1394:	11 05       	cpc	r17, r1
    1396:	59 f6       	brne	.-106    	; 0x132e <keyboard_task+0x56>
    1398:	08 94       	sec
    139a:	e1 1c       	adc	r14, r1
    139c:	f1 1c       	adc	r15, r1
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    139e:	86 e0       	ldi	r24, 0x06	; 6
    13a0:	e8 16       	cp	r14, r24
    13a2:	f1 04       	cpc	r15, r1
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <keyboard_task+0xd0>
    13a6:	ad cf       	rjmp	.-166    	; 0x1302 <keyboard_task+0x2a>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    13a8:	0e 94 09 15 	call	0x2a12	; 0x2a12 <timer_read>
    13ac:	2f ef       	ldi	r18, 0xFF	; 255
    13ae:	2e 83       	std	Y+6, r18	; 0x06
    13b0:	2f 83       	std	Y+7, r18	; 0x07
    13b2:	18 86       	std	Y+8, r1	; 0x08
    13b4:	81 60       	ori	r24, 0x01	; 1
    13b6:	78 2f       	mov	r23, r24
    13b8:	9a 87       	std	Y+10, r25	; 0x0a
    13ba:	89 87       	std	Y+9, r24	; 0x09
    13bc:	4f ef       	ldi	r20, 0xFF	; 255
    13be:	5f ef       	ldi	r21, 0xFF	; 255
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    13c4:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <action_exec>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    13c8:	10 91 2a 01 	lds	r17, 0x012A
    13cc:	0e 94 1d 09 	call	0x123a	; 0x123a <host_keyboard_leds>
    13d0:	18 17       	cp	r17, r24
    13d2:	31 f0       	breq	.+12     	; 0x13e0 <keyboard_task+0x108>
        led_status = host_keyboard_leds();
    13d4:	0e 94 1d 09 	call	0x123a	; 0x123a <host_keyboard_leds>
    13d8:	80 93 2a 01 	sts	0x012A, r24
        keyboard_set_leds(led_status);
    13dc:	0e 94 69 09 	call	0x12d2	; 0x12d2 <keyboard_set_leds>
    }
}
    13e0:	2a 96       	adiw	r28, 0x0a	; 10
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	1f 91       	pop	r17
    13f2:	0f 91       	pop	r16
    13f4:	ff 90       	pop	r15
    13f6:	ef 90       	pop	r14
    13f8:	df 90       	pop	r13
    13fa:	cf 90       	pop	r12
    13fc:	bf 90       	pop	r11
    13fe:	08 95       	ret

00001400 <keyboard_init>:
    matrix_setup();
}

void keyboard_init(void)
{
    timer_init();
    1400:	0e 94 00 15 	call	0x2a00	; 0x2a00 <timer_init>
    matrix_init();
    1404:	0e 94 84 01 	call	0x308	; 0x308 <matrix_init>
#endif

#ifdef BACKLIGHT_ENABLE
    backlight_init();
#endif
}
    1408:	08 95       	ret

0000140a <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    140a:	df 93       	push	r29
    140c:	cf 93       	push	r28
    140e:	00 d0       	rcall	.+0      	; 0x1410 <debug_event+0x6>
    1410:	00 d0       	rcall	.+0      	; 0x1412 <debug_event+0x8>
    1412:	0f 92       	push	r0
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <debug_record>:

void debug_record(keyrecord_t record)
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	00 d0       	rcall	.+0      	; 0x142e <debug_record+0x6>
    142e:	00 d0       	rcall	.+0      	; 0x1430 <debug_record+0x8>
    1430:	00 d0       	rcall	.+0      	; 0x1432 <debug_record+0xa>
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    1436:	26 96       	adiw	r28, 0x06	; 6
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    1448:	0e 94 09 12 	call	0x2412	; 0x2412 <layer_switch_get_action>
    144c:	48 2f       	mov	r20, r24

    switch (action.kind.id) {
    144e:	89 2f       	mov	r24, r25
    1450:	82 95       	swap	r24
    1452:	8f 70       	andi	r24, 0x0F	; 15
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	2c 30       	cpi	r18, 0x0C	; 12
    145a:	31 05       	cpc	r19, r1
    145c:	4c f4       	brge	.+18     	; 0x1470 <is_tap_key+0x28>
    145e:	2a 30       	cpi	r18, 0x0A	; 10
    1460:	31 05       	cpc	r19, r1
    1462:	6c f4       	brge	.+26     	; 0x147e <is_tap_key+0x36>
    1464:	22 50       	subi	r18, 0x02	; 2
    1466:	30 40       	sbci	r19, 0x00	; 0
    1468:	22 30       	cpi	r18, 0x02	; 2
    146a:	31 05       	cpc	r19, r1
    146c:	c0 f4       	brcc	.+48     	; 0x149e <is_tap_key+0x56>
    146e:	07 c0       	rjmp	.+14     	; 0x147e <is_tap_key+0x36>
    1470:	2c 30       	cpi	r18, 0x0C	; 12
    1472:	31 05       	cpc	r19, r1
    1474:	51 f0       	breq	.+20     	; 0x148a <is_tap_key+0x42>
    1476:	2f 30       	cpi	r18, 0x0F	; 15
    1478:	31 05       	cpc	r19, r1
    147a:	89 f4       	brne	.+34     	; 0x149e <is_tap_key+0x56>
    147c:	06 c0       	rjmp	.+12     	; 0x148a <is_tap_key+0x42>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    147e:	40 3e       	cpi	r20, 0xE0	; 224
    1480:	10 f0       	brcs	.+4      	; 0x1486 <is_tap_key+0x3e>
    1482:	40 3f       	cpi	r20, 0xF0	; 240
    1484:	61 f4       	brne	.+24     	; 0x149e <is_tap_key+0x56>
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	08 95       	ret
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    148a:	9f 70       	andi	r25, 0x0F	; 15
    148c:	89 2f       	mov	r24, r25
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	23 e0       	ldi	r18, 0x03	; 3
    1492:	96 95       	lsr	r25
    1494:	87 95       	ror	r24
    1496:	2a 95       	dec	r18
    1498:	e1 f7       	brne	.-8      	; 0x1492 <is_tap_key+0x4a>
    149a:	81 70       	andi	r24, 0x01	; 1
    149c:	08 95       	ret
    149e:	80 e0       	ldi	r24, 0x00	; 0
            return false;
    }
    return false;
}
    14a0:	08 95       	ret

000014a2 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    14a2:	0e 94 9c 13 	call	0x2738	; 0x2738 <clear_weak_mods>
    clear_keys();
    14a6:	0e 94 6e 13 	call	0x26dc	; 0x26dc <clear_keys>
    send_keyboard_report();
    14aa:	0e 94 b4 13 	call	0x2768	; 0x2768 <send_keyboard_report>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    host_consumer_send(0);
#endif
}
    14ae:	08 95       	ret

000014b0 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    14b0:	0e 94 8c 13 	call	0x2718	; 0x2718 <clear_mods>
    clear_keyboard_but_mods();
    14b4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <clear_keyboard_but_mods>
}
    14b8:	08 95       	ret

000014ba <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    14ba:	88 23       	and	r24, r24
    14bc:	21 f0       	breq	.+8      	; 0x14c6 <unregister_mods+0xc>
        del_mods(mods);
    14be:	0e 94 85 13 	call	0x270a	; 0x270a <del_mods>
        send_keyboard_report();
    14c2:	0e 94 b4 13 	call	0x2768	; 0x2768 <send_keyboard_report>
    14c6:	08 95       	ret

000014c8 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    14c8:	88 23       	and	r24, r24
    14ca:	21 f0       	breq	.+8      	; 0x14d4 <register_mods+0xc>
        add_mods(mods);
    14cc:	0e 94 7f 13 	call	0x26fe	; 0x26fe <add_mods>
        send_keyboard_report();
    14d0:	0e 94 b4 13 	call	0x2768	; 0x2768 <send_keyboard_report>
    14d4:	08 95       	ret

000014d6 <unregister_code>:
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}

void unregister_code(uint8_t code)
{
    14d6:	28 2f       	mov	r18, r24
    if (code == KC_NO) {
    14d8:	88 23       	and	r24, r24
    14da:	09 f4       	brne	.+2      	; 0x14de <unregister_code+0x8>
    14dc:	4e c0       	rjmp	.+156    	; 0x157a <unregister_code+0xa4>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    14de:	82 38       	cpi	r24, 0x82	; 130
    14e0:	59 f4       	brne	.+22     	; 0x14f8 <unregister_code+0x22>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    14e2:	0e 94 1d 09 	call	0x123a	; 0x123a <host_keyboard_leds>
    14e6:	81 ff       	sbrs	r24, 1
    14e8:	48 c0       	rjmp	.+144    	; 0x157a <unregister_code+0xa4>
#endif
        add_key(KC_CAPSLOCK);
    14ea:	89 e3       	ldi	r24, 0x39	; 57
    14ec:	0e 94 3d 13 	call	0x267a	; 0x267a <add_key>
        send_keyboard_report();
    14f0:	0e 94 b4 13 	call	0x2768	; 0x2768 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    14f4:	89 e3       	ldi	r24, 0x39	; 57
    14f6:	0c c0       	rjmp	.+24     	; 0x1510 <unregister_code+0x3a>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    14f8:	83 38       	cpi	r24, 0x83	; 131
    14fa:	69 f4       	brne	.+26     	; 0x1516 <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    14fc:	0e 94 1d 09 	call	0x123a	; 0x123a <host_keyboard_leds>
    1500:	80 ff       	sbrs	r24, 0
    1502:	3b c0       	rjmp	.+118    	; 0x157a <unregister_code+0xa4>
#endif
        add_key(KC_NUMLOCK);
    1504:	83 e5       	ldi	r24, 0x53	; 83
    1506:	0e 94 3d 13 	call	0x267a	; 0x267a <add_key>
        send_keyboard_report();
    150a:	0e 94 b4 13 	call	0x2768	; 0x2768 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    150e:	83 e5       	ldi	r24, 0x53	; 83
    1510:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <del_key>
    1514:	1f c0       	rjmp	.+62     	; 0x1554 <unregister_code+0x7e>
        send_keyboard_report();
    }

    else if (KC_LOCKING_SCROLL == code) {
    1516:	84 38       	cpi	r24, 0x84	; 132
    1518:	59 f4       	brne	.+22     	; 0x1530 <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    151a:	0e 94 1d 09 	call	0x123a	; 0x123a <host_keyboard_leds>
    151e:	82 ff       	sbrs	r24, 2
    1520:	2c c0       	rjmp	.+88     	; 0x157a <unregister_code+0xa4>
#endif
        add_key(KC_SCROLLLOCK);
    1522:	87 e4       	ldi	r24, 0x47	; 71
    1524:	0e 94 3d 13 	call	0x267a	; 0x267a <add_key>
        send_keyboard_report();
    1528:	0e 94 b4 13 	call	0x2768	; 0x2768 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    152c:	87 e4       	ldi	r24, 0x47	; 71
    152e:	f0 cf       	rjmp	.-32     	; 0x1510 <unregister_code+0x3a>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    1530:	84 50       	subi	r24, 0x04	; 4
    1532:	81 3a       	cpi	r24, 0xA1	; 161
    1534:	10 f4       	brcc	.+4      	; 0x153a <unregister_code+0x64>
        del_key(code);
    1536:	82 2f       	mov	r24, r18
    1538:	eb cf       	rjmp	.-42     	; 0x1510 <unregister_code+0x3a>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    153a:	82 2f       	mov	r24, r18
    153c:	80 5e       	subi	r24, 0xE0	; 224
    153e:	88 30       	cpi	r24, 0x08	; 8
    1540:	60 f4       	brcc	.+24     	; 0x155a <unregister_code+0x84>
        del_mods(MOD_BIT(code));
    1542:	27 70       	andi	r18, 0x07	; 7
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	01 c0       	rjmp	.+2      	; 0x154c <unregister_code+0x76>
    154a:	88 0f       	add	r24, r24
    154c:	2a 95       	dec	r18
    154e:	ea f7       	brpl	.-6      	; 0x154a <unregister_code+0x74>
    1550:	0e 94 85 13 	call	0x270a	; 0x270a <del_mods>
        send_keyboard_report();
    1554:	0e 94 b4 13 	call	0x2768	; 0x2768 <send_keyboard_report>
    1558:	08 95       	ret
    }
    else if IS_SYSTEM(code) {
    155a:	82 2f       	mov	r24, r18
    155c:	85 5a       	subi	r24, 0xA5	; 165
    155e:	83 30       	cpi	r24, 0x03	; 3
    1560:	28 f4       	brcc	.+10     	; 0x156c <unregister_code+0x96>
        host_system_send(0);
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	0e 94 35 09 	call	0x126a	; 0x126a <host_system_send>
    156a:	08 95       	ret
    }
    else if IS_CONSUMER(code) {
    156c:	28 5a       	subi	r18, 0xA8	; 168
    156e:	23 31       	cpi	r18, 0x13	; 19
    1570:	20 f4       	brcc	.+8      	; 0x157a <unregister_code+0xa4>
        host_consumer_send(0);
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	0e 94 4d 09 	call	0x129a	; 0x129a <host_consumer_send>
    157a:	08 95       	ret

0000157c <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    157c:	28 2f       	mov	r18, r24
    if (code == KC_NO) {
    157e:	88 23       	and	r24, r24
    1580:	09 f4       	brne	.+2      	; 0x1584 <register_code+0x8>
    1582:	ca c0       	rjmp	.+404    	; 0x1718 <register_code+0x19c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    1584:	82 38       	cpi	r24, 0x82	; 130
    1586:	59 f4       	brne	.+22     	; 0x159e <register_code+0x22>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    1588:	0e 94 1d 09 	call	0x123a	; 0x123a <host_keyboard_leds>
    158c:	81 fd       	sbrc	r24, 1
    158e:	c4 c0       	rjmp	.+392    	; 0x1718 <register_code+0x19c>
#endif
        add_key(KC_CAPSLOCK);
    1590:	89 e3       	ldi	r24, 0x39	; 57
    1592:	0e 94 3d 13 	call	0x267a	; 0x267a <add_key>
        send_keyboard_report();
    1596:	0e 94 b4 13 	call	0x2768	; 0x2768 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    159a:	89 e3       	ldi	r24, 0x39	; 57
    159c:	0c c0       	rjmp	.+24     	; 0x15b6 <register_code+0x3a>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    159e:	83 38       	cpi	r24, 0x83	; 131
    15a0:	69 f4       	brne	.+26     	; 0x15bc <register_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    15a2:	0e 94 1d 09 	call	0x123a	; 0x123a <host_keyboard_leds>
    15a6:	80 fd       	sbrc	r24, 0
    15a8:	b7 c0       	rjmp	.+366    	; 0x1718 <register_code+0x19c>
#endif
        add_key(KC_NUMLOCK);
    15aa:	83 e5       	ldi	r24, 0x53	; 83
    15ac:	0e 94 3d 13 	call	0x267a	; 0x267a <add_key>
        send_keyboard_report();
    15b0:	0e 94 b4 13 	call	0x2768	; 0x2768 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    15b4:	83 e5       	ldi	r24, 0x53	; 83
    15b6:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <del_key>
    15ba:	21 c0       	rjmp	.+66     	; 0x15fe <register_code+0x82>
        send_keyboard_report();
    }

    else if (KC_LOCKING_SCROLL == code) {
    15bc:	84 38       	cpi	r24, 0x84	; 132
    15be:	59 f4       	brne	.+22     	; 0x15d6 <register_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    15c0:	0e 94 1d 09 	call	0x123a	; 0x123a <host_keyboard_leds>
    15c4:	82 fd       	sbrc	r24, 2
    15c6:	a8 c0       	rjmp	.+336    	; 0x1718 <register_code+0x19c>
#endif
        add_key(KC_SCROLLLOCK);
    15c8:	87 e4       	ldi	r24, 0x47	; 71
    15ca:	0e 94 3d 13 	call	0x267a	; 0x267a <add_key>
        send_keyboard_report();
    15ce:	0e 94 b4 13 	call	0x2768	; 0x2768 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    15d2:	87 e4       	ldi	r24, 0x47	; 71
    15d4:	f0 cf       	rjmp	.-32     	; 0x15b6 <register_code+0x3a>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    15d6:	84 50       	subi	r24, 0x04	; 4
    15d8:	81 3a       	cpi	r24, 0xA1	; 161
    15da:	20 f4       	brcc	.+8      	; 0x15e4 <register_code+0x68>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    15dc:	82 2f       	mov	r24, r18
    15de:	0e 94 3d 13 	call	0x267a	; 0x267a <add_key>
    15e2:	0d c0       	rjmp	.+26     	; 0x15fe <register_code+0x82>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    15e4:	82 2f       	mov	r24, r18
    15e6:	80 5e       	subi	r24, 0xE0	; 224
    15e8:	88 30       	cpi	r24, 0x08	; 8
    15ea:	60 f4       	brcc	.+24     	; 0x1604 <register_code+0x88>
        add_mods(MOD_BIT(code));
    15ec:	27 70       	andi	r18, 0x07	; 7
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	01 c0       	rjmp	.+2      	; 0x15f6 <register_code+0x7a>
    15f4:	88 0f       	add	r24, r24
    15f6:	2a 95       	dec	r18
    15f8:	ea f7       	brpl	.-6      	; 0x15f4 <register_code+0x78>
    15fa:	0e 94 7f 13 	call	0x26fe	; 0x26fe <add_mods>
        send_keyboard_report();
    15fe:	0e 94 b4 13 	call	0x2768	; 0x2768 <send_keyboard_report>
    1602:	08 95       	ret
    }
    else if IS_SYSTEM(code) {
    1604:	82 2f       	mov	r24, r18
    1606:	85 5a       	subi	r24, 0xA5	; 165
    1608:	83 30       	cpi	r24, 0x03	; 3
    160a:	a0 f4       	brcc	.+40     	; 0x1634 <register_code+0xb8>
        host_system_send(KEYCODE2SYSTEM(code));
    160c:	25 3a       	cpi	r18, 0xA5	; 165
    160e:	19 f4       	brne	.+6      	; 0x1616 <register_code+0x9a>
    1610:	81 e8       	ldi	r24, 0x81	; 129
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	0c c0       	rjmp	.+24     	; 0x162e <register_code+0xb2>
    1616:	26 3a       	cpi	r18, 0xA6	; 166
    1618:	19 f4       	brne	.+6      	; 0x1620 <register_code+0xa4>
    161a:	82 e8       	ldi	r24, 0x82	; 130
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	07 c0       	rjmp	.+14     	; 0x162e <register_code+0xb2>
    1620:	27 3a       	cpi	r18, 0xA7	; 167
    1622:	19 f0       	breq	.+6      	; 0x162a <register_code+0xae>
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	02 c0       	rjmp	.+4      	; 0x162e <register_code+0xb2>
    162a:	83 e8       	ldi	r24, 0x83	; 131
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	0e 94 35 09 	call	0x126a	; 0x126a <host_system_send>
    1632:	08 95       	ret
    }
    else if IS_CONSUMER(code) {
    1634:	82 2f       	mov	r24, r18
    1636:	88 5a       	subi	r24, 0xA8	; 168
    1638:	83 31       	cpi	r24, 0x13	; 19
    163a:	08 f0       	brcs	.+2      	; 0x163e <register_code+0xc2>
    163c:	6d c0       	rjmp	.+218    	; 0x1718 <register_code+0x19c>
        host_consumer_send(KEYCODE2CONSUMER(code));
    163e:	28 3a       	cpi	r18, 0xA8	; 168
    1640:	19 f4       	brne	.+6      	; 0x1648 <register_code+0xcc>
    1642:	82 ee       	ldi	r24, 0xE2	; 226
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	66 c0       	rjmp	.+204    	; 0x1714 <register_code+0x198>
    1648:	29 3a       	cpi	r18, 0xA9	; 169
    164a:	19 f4       	brne	.+6      	; 0x1652 <register_code+0xd6>
    164c:	89 ee       	ldi	r24, 0xE9	; 233
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	61 c0       	rjmp	.+194    	; 0x1714 <register_code+0x198>
    1652:	2a 3a       	cpi	r18, 0xAA	; 170
    1654:	19 f4       	brne	.+6      	; 0x165c <register_code+0xe0>
    1656:	8a ee       	ldi	r24, 0xEA	; 234
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	5c c0       	rjmp	.+184    	; 0x1714 <register_code+0x198>
    165c:	2b 3a       	cpi	r18, 0xAB	; 171
    165e:	19 f4       	brne	.+6      	; 0x1666 <register_code+0xea>
    1660:	85 eb       	ldi	r24, 0xB5	; 181
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	57 c0       	rjmp	.+174    	; 0x1714 <register_code+0x198>
    1666:	2c 3a       	cpi	r18, 0xAC	; 172
    1668:	19 f4       	brne	.+6      	; 0x1670 <register_code+0xf4>
    166a:	86 eb       	ldi	r24, 0xB6	; 182
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	52 c0       	rjmp	.+164    	; 0x1714 <register_code+0x198>
    1670:	2b 3b       	cpi	r18, 0xBB	; 187
    1672:	19 f4       	brne	.+6      	; 0x167a <register_code+0xfe>
    1674:	83 eb       	ldi	r24, 0xB3	; 179
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	4d c0       	rjmp	.+154    	; 0x1714 <register_code+0x198>
    167a:	2c 3b       	cpi	r18, 0xBC	; 188
    167c:	19 f4       	brne	.+6      	; 0x1684 <register_code+0x108>
    167e:	84 eb       	ldi	r24, 0xB4	; 180
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	48 c0       	rjmp	.+144    	; 0x1714 <register_code+0x198>
    1684:	2d 3a       	cpi	r18, 0xAD	; 173
    1686:	19 f4       	brne	.+6      	; 0x168e <register_code+0x112>
    1688:	87 eb       	ldi	r24, 0xB7	; 183
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	43 c0       	rjmp	.+134    	; 0x1714 <register_code+0x198>
    168e:	20 3b       	cpi	r18, 0xB0	; 176
    1690:	19 f4       	brne	.+6      	; 0x1698 <register_code+0x11c>
    1692:	8c ec       	ldi	r24, 0xCC	; 204
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	3e c0       	rjmp	.+124    	; 0x1714 <register_code+0x198>
    1698:	2e 3a       	cpi	r18, 0xAE	; 174
    169a:	19 f4       	brne	.+6      	; 0x16a2 <register_code+0x126>
    169c:	8d ec       	ldi	r24, 0xCD	; 205
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	39 c0       	rjmp	.+114    	; 0x1714 <register_code+0x198>
    16a2:	2f 3a       	cpi	r18, 0xAF	; 175
    16a4:	19 f4       	brne	.+6      	; 0x16ac <register_code+0x130>
    16a6:	83 e8       	ldi	r24, 0x83	; 131
    16a8:	91 e0       	ldi	r25, 0x01	; 1
    16aa:	34 c0       	rjmp	.+104    	; 0x1714 <register_code+0x198>
    16ac:	21 3b       	cpi	r18, 0xB1	; 177
    16ae:	19 f4       	brne	.+6      	; 0x16b6 <register_code+0x13a>
    16b0:	8a e8       	ldi	r24, 0x8A	; 138
    16b2:	91 e0       	ldi	r25, 0x01	; 1
    16b4:	2f c0       	rjmp	.+94     	; 0x1714 <register_code+0x198>
    16b6:	22 3b       	cpi	r18, 0xB2	; 178
    16b8:	19 f4       	brne	.+6      	; 0x16c0 <register_code+0x144>
    16ba:	82 e9       	ldi	r24, 0x92	; 146
    16bc:	91 e0       	ldi	r25, 0x01	; 1
    16be:	2a c0       	rjmp	.+84     	; 0x1714 <register_code+0x198>
    16c0:	23 3b       	cpi	r18, 0xB3	; 179
    16c2:	19 f4       	brne	.+6      	; 0x16ca <register_code+0x14e>
    16c4:	84 e9       	ldi	r24, 0x94	; 148
    16c6:	91 e0       	ldi	r25, 0x01	; 1
    16c8:	25 c0       	rjmp	.+74     	; 0x1714 <register_code+0x198>
    16ca:	24 3b       	cpi	r18, 0xB4	; 180
    16cc:	19 f4       	brne	.+6      	; 0x16d4 <register_code+0x158>
    16ce:	81 e2       	ldi	r24, 0x21	; 33
    16d0:	92 e0       	ldi	r25, 0x02	; 2
    16d2:	20 c0       	rjmp	.+64     	; 0x1714 <register_code+0x198>
    16d4:	25 3b       	cpi	r18, 0xB5	; 181
    16d6:	19 f4       	brne	.+6      	; 0x16de <register_code+0x162>
    16d8:	83 e2       	ldi	r24, 0x23	; 35
    16da:	92 e0       	ldi	r25, 0x02	; 2
    16dc:	1b c0       	rjmp	.+54     	; 0x1714 <register_code+0x198>
    16de:	26 3b       	cpi	r18, 0xB6	; 182
    16e0:	19 f4       	brne	.+6      	; 0x16e8 <register_code+0x16c>
    16e2:	84 e2       	ldi	r24, 0x24	; 36
    16e4:	92 e0       	ldi	r25, 0x02	; 2
    16e6:	16 c0       	rjmp	.+44     	; 0x1714 <register_code+0x198>
    16e8:	27 3b       	cpi	r18, 0xB7	; 183
    16ea:	19 f4       	brne	.+6      	; 0x16f2 <register_code+0x176>
    16ec:	85 e2       	ldi	r24, 0x25	; 37
    16ee:	92 e0       	ldi	r25, 0x02	; 2
    16f0:	11 c0       	rjmp	.+34     	; 0x1714 <register_code+0x198>
    16f2:	28 3b       	cpi	r18, 0xB8	; 184
    16f4:	19 f4       	brne	.+6      	; 0x16fc <register_code+0x180>
    16f6:	86 e2       	ldi	r24, 0x26	; 38
    16f8:	92 e0       	ldi	r25, 0x02	; 2
    16fa:	0c c0       	rjmp	.+24     	; 0x1714 <register_code+0x198>
    16fc:	29 3b       	cpi	r18, 0xB9	; 185
    16fe:	19 f4       	brne	.+6      	; 0x1706 <register_code+0x18a>
    1700:	87 e2       	ldi	r24, 0x27	; 39
    1702:	92 e0       	ldi	r25, 0x02	; 2
    1704:	07 c0       	rjmp	.+14     	; 0x1714 <register_code+0x198>
    1706:	2a 3b       	cpi	r18, 0xBA	; 186
    1708:	19 f0       	breq	.+6      	; 0x1710 <register_code+0x194>
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <register_code+0x198>
    1710:	8a e2       	ldi	r24, 0x2A	; 42
    1712:	92 e0       	ldi	r25, 0x02	; 2
    1714:	0e 94 4d 09 	call	0x129a	; 0x129a <host_consumer_send>
    1718:	08 95       	ret

0000171a <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    171a:	af 92       	push	r10
    171c:	bf 92       	push	r11
    171e:	cf 92       	push	r12
    1720:	df 92       	push	r13
    1722:	ef 92       	push	r14
    1724:	ff 92       	push	r15
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	2a 97       	sbiw	r28, 0x0a	; 10
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	5c 01       	movw	r10, r24
    keyevent_t event = record->event;
    1740:	de 01       	movw	r26, r28
    1742:	11 96       	adiw	r26, 0x01	; 1
    1744:	fc 01       	movw	r30, r24
    1746:	85 e0       	ldi	r24, 0x05	; 5
    1748:	01 90       	ld	r0, Z+
    174a:	0d 92       	st	X+, r0
    174c:	81 50       	subi	r24, 0x01	; 1
    174e:	e1 f7       	brne	.-8      	; 0x1748 <process_action+0x2e>
    1750:	fb 80       	ldd	r15, Y+3	; 0x03
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    1752:	f5 01       	movw	r30, r10
    1754:	05 81       	ldd	r16, Z+5	; 0x05
    1756:	02 95       	swap	r16
    1758:	0f 70       	andi	r16, 0x0F	; 15
#endif

    if (IS_NOEVENT(event)) { return; }
    175a:	de 01       	movw	r26, r28
    175c:	16 96       	adiw	r26, 0x06	; 6
    175e:	fe 01       	movw	r30, r28
    1760:	31 96       	adiw	r30, 0x01	; 1
    1762:	85 e0       	ldi	r24, 0x05	; 5
    1764:	01 90       	ld	r0, Z+
    1766:	0d 92       	st	X+, r0
    1768:	81 50       	subi	r24, 0x01	; 1
    176a:	e1 f7       	brne	.-8      	; 0x1764 <process_action+0x4a>
    176c:	3e 81       	ldd	r19, Y+6	; 0x06
    176e:	2f 81       	ldd	r18, Y+7	; 0x07

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    1770:	89 85       	ldd	r24, Y+9	; 0x09
    1772:	9a 85       	ldd	r25, Y+10	; 0x0a
    1774:	89 2b       	or	r24, r25
    1776:	09 f4       	brne	.+2      	; 0x177a <process_action+0x60>
    1778:	c4 c1       	rjmp	.+904    	; 0x1b02 <process_action+0x3e8>
    177a:	2f 3f       	cpi	r18, 0xFF	; 255
    177c:	09 f0       	breq	.+2      	; 0x1780 <process_action+0x66>
    177e:	9b c1       	rjmp	.+822    	; 0x1ab6 <process_action+0x39c>
    1780:	3f 3f       	cpi	r19, 0xFF	; 255
    1782:	09 f0       	breq	.+2      	; 0x1786 <process_action+0x6c>
    1784:	98 c1       	rjmp	.+816    	; 0x1ab6 <process_action+0x39c>
    1786:	bd c1       	rjmp	.+890    	; 0x1b02 <process_action+0x3e8>
    1788:	8d 2d       	mov	r24, r13
    178a:	8f 70       	andi	r24, 0x0F	; 15
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
                                                                action.key.mods<<4;
    178c:	f0 ef       	ldi	r31, 0xF0	; 240
    178e:	df 22       	and	r13, r31
    1790:	11 f4       	brne	.+4      	; 0x1796 <process_action+0x7c>
    1792:	18 2f       	mov	r17, r24
    1794:	03 c0       	rjmp	.+6      	; 0x179c <process_action+0x82>
    1796:	18 2f       	mov	r17, r24
    1798:	12 95       	swap	r17
    179a:	10 7f       	andi	r17, 0xF0	; 240
                if (event.pressed) {
    179c:	ff 20       	and	r15, r15
    179e:	49 f0       	breq	.+18     	; 0x17b2 <process_action+0x98>
                    if (mods) {
    17a0:	11 23       	and	r17, r17
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <process_action+0x8c>
    17a4:	62 c1       	rjmp	.+708    	; 0x1a6a <process_action+0x350>
                        add_weak_mods(mods);
    17a6:	81 2f       	mov	r24, r17
    17a8:	0e 94 8f 13 	call	0x271e	; 0x271e <add_weak_mods>
                        send_keyboard_report();
    17ac:	0e 94 b4 13 	call	0x2768	; 0x2768 <send_keyboard_report>
    17b0:	5c c1       	rjmp	.+696    	; 0x1a6a <process_action+0x350>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    17b2:	8c 2d       	mov	r24, r12
    17b4:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <unregister_code>
                    if (mods) {
    17b8:	11 23       	and	r17, r17
    17ba:	09 f4       	brne	.+2      	; 0x17be <process_action+0xa4>
    17bc:	a2 c1       	rjmp	.+836    	; 0x1b02 <process_action+0x3e8>
                        del_weak_mods(mods);
    17be:	81 2f       	mov	r24, r17
    17c0:	0e 94 95 13 	call	0x272a	; 0x272a <del_weak_mods>
                        send_keyboard_report();
    17c4:	0e 94 b4 13 	call	0x2768	; 0x2768 <send_keyboard_report>
    17c8:	9c c1       	rjmp	.+824    	; 0x1b02 <process_action+0x3e8>
    17ca:	8d 2d       	mov	r24, r13
    17cc:	8f 70       	andi	r24, 0x0F	; 15
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
                                                                    action.key.mods<<4;
    17ce:	20 ef       	ldi	r18, 0xF0	; 240
    17d0:	d2 22       	and	r13, r18
    17d2:	90 e2       	ldi	r25, 0x20	; 32
    17d4:	d9 16       	cp	r13, r25
    17d6:	11 f4       	brne	.+4      	; 0x17dc <process_action+0xc2>
    17d8:	18 2f       	mov	r17, r24
    17da:	03 c0       	rjmp	.+6      	; 0x17e2 <process_action+0xc8>
    17dc:	18 2f       	mov	r17, r24
    17de:	12 95       	swap	r17
    17e0:	10 7f       	andi	r17, 0xF0	; 240
                switch (action.layer_tap.code) {
    17e2:	cc 20       	and	r12, r12
    17e4:	21 f0       	breq	.+8      	; 0x17ee <process_action+0xd4>
    17e6:	e1 e0       	ldi	r30, 0x01	; 1
    17e8:	ce 16       	cp	r12, r30
    17ea:	09 f5       	brne	.+66     	; 0x182e <process_action+0x114>
    17ec:	12 c0       	rjmp	.+36     	; 0x1812 <process_action+0xf8>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    17ee:	ff 20       	and	r15, r15
    17f0:	41 f0       	breq	.+16     	; 0x1802 <process_action+0xe8>
                            if (tap_count == 0) {
    17f2:	00 23       	and	r16, r16
    17f4:	31 f1       	breq	.+76     	; 0x1842 <process_action+0x128>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    17f6:	01 30       	cpi	r16, 0x01	; 1
    17f8:	21 f5       	brne	.+72     	; 0x1842 <process_action+0x128>
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    17fa:	81 2f       	mov	r24, r17
    17fc:	0e 94 9f 13 	call	0x273e	; 0x273e <set_oneshot_mods>
    1800:	80 c1       	rjmp	.+768    	; 0x1b02 <process_action+0x3e8>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    1802:	00 23       	and	r16, r16
    1804:	19 f0       	breq	.+6      	; 0x180c <process_action+0xf2>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    1806:	01 30       	cpi	r16, 0x01	; 1
    1808:	09 f4       	brne	.+2      	; 0x180c <process_action+0xf2>
    180a:	7b c1       	rjmp	.+758    	; 0x1b02 <process_action+0x3e8>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    180c:	0e 94 a2 13 	call	0x2744	; 0x2744 <clear_oneshot_mods>
    1810:	02 c1       	rjmp	.+516    	; 0x1a16 <process_action+0x2fc>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    1812:	ff 20       	and	r15, r15
    1814:	41 f0       	breq	.+16     	; 0x1826 <process_action+0x10c>
                            if (tap_count <= TAPPING_TOGGLE) {
    1816:	06 30       	cpi	r16, 0x06	; 6
    1818:	08 f0       	brcs	.+2      	; 0x181c <process_action+0x102>
    181a:	73 c1       	rjmp	.+742    	; 0x1b02 <process_action+0x3e8>
                                if (mods & get_mods()) {
    181c:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <get_mods>
    1820:	81 23       	and	r24, r17
    1822:	79 f0       	breq	.+30     	; 0x1842 <process_action+0x128>
    1824:	f8 c0       	rjmp	.+496    	; 0x1a16 <process_action+0x2fc>
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    1826:	05 30       	cpi	r16, 0x05	; 5
    1828:	08 f0       	brcs	.+2      	; 0x182c <process_action+0x112>
    182a:	6b c1       	rjmp	.+726    	; 0x1b02 <process_action+0x3e8>
    182c:	f4 c0       	rjmp	.+488    	; 0x1a16 <process_action+0x2fc>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    182e:	ff 20       	and	r15, r15
    1830:	61 f0       	breq	.+24     	; 0x184a <process_action+0x130>
                            if (tap_count > 0) {
    1832:	00 23       	and	r16, r16
    1834:	31 f0       	breq	.+12     	; 0x1842 <process_action+0x128>
                                if (record->tap.interrupted) {
    1836:	f5 01       	movw	r30, r10
    1838:	85 81       	ldd	r24, Z+5	; 0x05
    183a:	80 ff       	sbrs	r24, 0
    183c:	16 c1       	rjmp	.+556    	; 0x1a6a <process_action+0x350>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    183e:	8f 70       	andi	r24, 0x0F	; 15
    1840:	85 83       	std	Z+5, r24	; 0x05
                                    register_mods(mods);
    1842:	81 2f       	mov	r24, r17
    1844:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <register_mods>
    1848:	5c c1       	rjmp	.+696    	; 0x1b02 <process_action+0x3e8>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    184a:	00 23       	and	r16, r16
    184c:	09 f4       	brne	.+2      	; 0x1850 <process_action+0x136>
    184e:	e3 c0       	rjmp	.+454    	; 0x1a16 <process_action+0x2fc>
    1850:	17 c1       	rjmp	.+558    	; 0x1a80 <process_action+0x366>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    1852:	8d 2d       	mov	r24, r13
    1854:	83 70       	andi	r24, 0x03	; 3
    1856:	09 f0       	breq	.+2      	; 0x185a <process_action+0x140>
    1858:	5e c0       	rjmp	.+188    	; 0x1916 <process_action+0x1fc>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    185a:	ff 20       	and	r15, r15
    185c:	09 f0       	breq	.+2      	; 0x1860 <process_action+0x146>
    185e:	51 c1       	rjmp	.+674    	; 0x1b02 <process_action+0x3e8>
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    1860:	2c 2d       	mov	r18, r12
    1862:	22 95       	swap	r18
    1864:	26 95       	lsr	r18
    1866:	27 70       	andi	r18, 0x07	; 7
    1868:	22 0f       	add	r18, r18
    186a:	22 0f       	add	r18, r18
    186c:	8c 2d       	mov	r24, r12
    186e:	8f 70       	andi	r24, 0x0F	; 15
    1870:	e8 2e       	mov	r14, r24
    1872:	ff 24       	eor	r15, r15
    1874:	00 e0       	ldi	r16, 0x00	; 0
    1876:	10 e0       	ldi	r17, 0x00	; 0
    1878:	02 2e       	mov	r0, r18
    187a:	04 c0       	rjmp	.+8      	; 0x1884 <process_action+0x16a>
    187c:	ee 0c       	add	r14, r14
    187e:	ff 1c       	adc	r15, r15
    1880:	00 1f       	adc	r16, r16
    1882:	11 1f       	adc	r17, r17
    1884:	0a 94       	dec	r0
    1886:	d2 f7       	brpl	.-12     	; 0x187c <process_action+0x162>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    1888:	c4 fc       	sbrc	r12, 4
    188a:	05 c0       	rjmp	.+10     	; 0x1896 <process_action+0x17c>
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0f c0       	rjmp	.+30     	; 0x18b4 <process_action+0x19a>
    1896:	6f e0       	ldi	r22, 0x0F	; 15
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	04 c0       	rjmp	.+8      	; 0x18a8 <process_action+0x18e>
    18a0:	66 0f       	add	r22, r22
    18a2:	77 1f       	adc	r23, r23
    18a4:	88 1f       	adc	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	2a 95       	dec	r18
    18aa:	d2 f7       	brpl	.-12     	; 0x18a0 <process_action+0x186>
    18ac:	60 95       	com	r22
    18ae:	70 95       	com	r23
    18b0:	80 95       	com	r24
    18b2:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    18b4:	d6 94       	lsr	r13
    18b6:	d6 94       	lsr	r13
    18b8:	f3 e0       	ldi	r31, 0x03	; 3
    18ba:	df 22       	and	r13, r31
    18bc:	4d 2d       	mov	r20, r13
    18be:	50 e0       	ldi	r21, 0x00	; 0
    18c0:	41 30       	cpi	r20, 0x01	; 1
    18c2:	51 05       	cpc	r21, r1
    18c4:	a9 f0       	breq	.+42     	; 0x18f0 <process_action+0x1d6>
    18c6:	42 30       	cpi	r20, 0x02	; 2
    18c8:	51 05       	cpc	r21, r1
    18ca:	1c f4       	brge	.+6      	; 0x18d2 <process_action+0x1b8>
    18cc:	45 2b       	or	r20, r21
    18ce:	49 f0       	breq	.+18     	; 0x18e2 <process_action+0x1c8>
    18d0:	18 c1       	rjmp	.+560    	; 0x1b02 <process_action+0x3e8>
    18d2:	42 30       	cpi	r20, 0x02	; 2
    18d4:	51 05       	cpc	r21, r1
    18d6:	89 f0       	breq	.+34     	; 0x18fa <process_action+0x1e0>
    18d8:	43 30       	cpi	r20, 0x03	; 3
    18da:	51 05       	cpc	r21, r1
    18dc:	09 f0       	breq	.+2      	; 0x18e0 <process_action+0x1c6>
    18de:	11 c1       	rjmp	.+546    	; 0x1b02 <process_action+0x3e8>
    18e0:	13 c0       	rjmp	.+38     	; 0x1908 <process_action+0x1ee>
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    18e2:	6e 29       	or	r22, r14
    18e4:	7f 29       	or	r23, r15
    18e6:	80 2b       	or	r24, r16
    18e8:	91 2b       	or	r25, r17
    18ea:	0e 94 1b 13 	call	0x2636	; 0x2636 <default_layer_and>
    18ee:	09 c1       	rjmp	.+530    	; 0x1b02 <process_action+0x3e8>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
    18f0:	6e 29       	or	r22, r14
    18f2:	7f 29       	or	r23, r15
    18f4:	80 2b       	or	r24, r16
    18f6:	91 2b       	or	r25, r17
    18f8:	0b c0       	rjmp	.+22     	; 0x1910 <process_action+0x1f6>
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    18fa:	6e 29       	or	r22, r14
    18fc:	7f 29       	or	r23, r15
    18fe:	80 2b       	or	r24, r16
    1900:	91 2b       	or	r25, r17
    1902:	0e 94 0a 13 	call	0x2614	; 0x2614 <default_layer_xor>
    1906:	fd c0       	rjmp	.+506    	; 0x1b02 <process_action+0x3e8>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    1908:	0e 94 1b 13 	call	0x2636	; 0x2636 <default_layer_and>
    190c:	c8 01       	movw	r24, r16
    190e:	b7 01       	movw	r22, r14
    1910:	0e 94 2c 13 	call	0x2658	; 0x2658 <default_layer_or>
    1914:	f6 c0       	rjmp	.+492    	; 0x1b02 <process_action+0x3e8>
    1916:	90 e0       	ldi	r25, 0x00	; 0
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    1918:	ff 20       	and	r15, r15
    191a:	11 f4       	brne	.+4      	; 0x1920 <process_action+0x206>
    191c:	96 95       	lsr	r25
    191e:	87 95       	ror	r24
    1920:	81 70       	andi	r24, 0x01	; 1
    1922:	09 f4       	brne	.+2      	; 0x1926 <process_action+0x20c>
    1924:	ee c0       	rjmp	.+476    	; 0x1b02 <process_action+0x3e8>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    1926:	2c 2d       	mov	r18, r12
    1928:	22 95       	swap	r18
    192a:	26 95       	lsr	r18
    192c:	27 70       	andi	r18, 0x07	; 7
    192e:	22 0f       	add	r18, r18
    1930:	22 0f       	add	r18, r18
    1932:	8c 2d       	mov	r24, r12
    1934:	8f 70       	andi	r24, 0x0F	; 15
    1936:	e8 2e       	mov	r14, r24
    1938:	ff 24       	eor	r15, r15
    193a:	00 e0       	ldi	r16, 0x00	; 0
    193c:	10 e0       	ldi	r17, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	04 c0       	rjmp	.+8      	; 0x194a <process_action+0x230>
    1942:	ee 0c       	add	r14, r14
    1944:	ff 1c       	adc	r15, r15
    1946:	00 1f       	adc	r16, r16
    1948:	11 1f       	adc	r17, r17
    194a:	0a 94       	dec	r0
    194c:	d2 f7       	brpl	.-12     	; 0x1942 <process_action+0x228>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    194e:	c4 fc       	sbrc	r12, 4
    1950:	05 c0       	rjmp	.+10     	; 0x195c <process_action+0x242>
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	70 e0       	ldi	r23, 0x00	; 0
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0f c0       	rjmp	.+30     	; 0x197a <process_action+0x260>
    195c:	6f e0       	ldi	r22, 0x0F	; 15
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	04 c0       	rjmp	.+8      	; 0x196e <process_action+0x254>
    1966:	66 0f       	add	r22, r22
    1968:	77 1f       	adc	r23, r23
    196a:	88 1f       	adc	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	2a 95       	dec	r18
    1970:	d2 f7       	brpl	.-12     	; 0x1966 <process_action+0x24c>
    1972:	60 95       	com	r22
    1974:	70 95       	com	r23
    1976:	80 95       	com	r24
    1978:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    197a:	d6 94       	lsr	r13
    197c:	d6 94       	lsr	r13
    197e:	23 e0       	ldi	r18, 0x03	; 3
    1980:	d2 22       	and	r13, r18
    1982:	4d 2d       	mov	r20, r13
    1984:	50 e0       	ldi	r21, 0x00	; 0
    1986:	41 30       	cpi	r20, 0x01	; 1
    1988:	51 05       	cpc	r21, r1
    198a:	a9 f0       	breq	.+42     	; 0x19b6 <process_action+0x29c>
    198c:	42 30       	cpi	r20, 0x02	; 2
    198e:	51 05       	cpc	r21, r1
    1990:	1c f4       	brge	.+6      	; 0x1998 <process_action+0x27e>
    1992:	45 2b       	or	r20, r21
    1994:	49 f0       	breq	.+18     	; 0x19a8 <process_action+0x28e>
    1996:	b5 c0       	rjmp	.+362    	; 0x1b02 <process_action+0x3e8>
    1998:	42 30       	cpi	r20, 0x02	; 2
    199a:	51 05       	cpc	r21, r1
    199c:	89 f0       	breq	.+34     	; 0x19c0 <process_action+0x2a6>
    199e:	43 30       	cpi	r20, 0x03	; 3
    19a0:	51 05       	cpc	r21, r1
    19a2:	09 f0       	breq	.+2      	; 0x19a6 <process_action+0x28c>
    19a4:	ae c0       	rjmp	.+348    	; 0x1b02 <process_action+0x3e8>
    19a6:	13 c0       	rjmp	.+38     	; 0x19ce <process_action+0x2b4>
                        case OP_BIT_AND: layer_and(bits | mask); break;
    19a8:	6e 29       	or	r22, r14
    19aa:	7f 29       	or	r23, r15
    19ac:	80 2b       	or	r24, r16
    19ae:	91 2b       	or	r25, r17
    19b0:	0e 94 6e 12 	call	0x24dc	; 0x24dc <layer_and>
    19b4:	a6 c0       	rjmp	.+332    	; 0x1b02 <process_action+0x3e8>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
    19b6:	6e 29       	or	r22, r14
    19b8:	7f 29       	or	r23, r15
    19ba:	80 2b       	or	r24, r16
    19bc:	91 2b       	or	r25, r17
    19be:	0b c0       	rjmp	.+22     	; 0x19d6 <process_action+0x2bc>
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    19c0:	6e 29       	or	r22, r14
    19c2:	7f 29       	or	r23, r15
    19c4:	80 2b       	or	r24, r16
    19c6:	91 2b       	or	r25, r17
    19c8:	0e 94 5d 12 	call	0x24ba	; 0x24ba <layer_xor>
    19cc:	9a c0       	rjmp	.+308    	; 0x1b02 <process_action+0x3e8>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    19ce:	0e 94 6e 12 	call	0x24dc	; 0x24dc <layer_and>
    19d2:	c8 01       	movw	r24, r16
    19d4:	b7 01       	movw	r22, r14
    19d6:	0e 94 7f 12 	call	0x24fe	; 0x24fe <layer_or>
    19da:	93 c0       	rjmp	.+294    	; 0x1b02 <process_action+0x3e8>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    19dc:	80 ef       	ldi	r24, 0xF0	; 240
    19de:	c8 16       	cp	r12, r24
    19e0:	f1 f0       	breq	.+60     	; 0x1a1e <process_action+0x304>
    19e2:	8c 15       	cp	r24, r12
    19e4:	20 f0       	brcs	.+8      	; 0x19ee <process_action+0x2d4>
    19e6:	90 ee       	ldi	r25, 0xE0	; 224
    19e8:	c9 16       	cp	r12, r25
    19ea:	d8 f1       	brcs	.+118    	; 0x1a62 <process_action+0x348>
    19ec:	09 c0       	rjmp	.+18     	; 0x1a00 <process_action+0x2e6>
    19ee:	e2 ef       	ldi	r30, 0xF2	; 242
    19f0:	ce 16       	cp	r12, r30
    19f2:	41 f1       	breq	.+80     	; 0x1a44 <process_action+0x32a>
    19f4:	ce 16       	cp	r12, r30
    19f6:	08 f1       	brcs	.+66     	; 0x1a3a <process_action+0x320>
    19f8:	f3 ef       	ldi	r31, 0xF3	; 243
    19fa:	cf 16       	cp	r12, r31
    19fc:	91 f5       	brne	.+100    	; 0x1a62 <process_action+0x348>
    19fe:	27 c0       	rjmp	.+78     	; 0x1a4e <process_action+0x334>
    1a00:	1c 2d       	mov	r17, r12
    1a02:	1f 70       	andi	r17, 0x0F	; 15
    1a04:	8d 2d       	mov	r24, r13
    1a06:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    1a08:	ff 20       	and	r15, r15
    1a0a:	19 f0       	breq	.+6      	; 0x1a12 <process_action+0x2f8>
                        layer_on(action.layer_tap.val);
    1a0c:	0e 94 cc 12 	call	0x2598	; 0x2598 <layer_on>
    1a10:	18 cf       	rjmp	.-464    	; 0x1842 <process_action+0x128>
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
    1a12:	0e 94 ac 12 	call	0x2558	; 0x2558 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    1a16:	81 2f       	mov	r24, r17
    1a18:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <unregister_mods>
    1a1c:	72 c0       	rjmp	.+228    	; 0x1b02 <process_action+0x3e8>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    1a1e:	ff 20       	and	r15, r15
    1a20:	21 f0       	breq	.+8      	; 0x1a2a <process_action+0x310>
                        if (tap_count < TAPPING_TOGGLE) {
    1a22:	05 30       	cpi	r16, 0x05	; 5
    1a24:	08 f0       	brcs	.+2      	; 0x1a28 <process_action+0x30e>
    1a26:	6d c0       	rjmp	.+218    	; 0x1b02 <process_action+0x3e8>
    1a28:	03 c0       	rjmp	.+6      	; 0x1a30 <process_action+0x316>
                            layer_invert(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    1a2a:	06 30       	cpi	r16, 0x06	; 6
    1a2c:	08 f0       	brcs	.+2      	; 0x1a30 <process_action+0x316>
    1a2e:	69 c0       	rjmp	.+210    	; 0x1b02 <process_action+0x3e8>
                            layer_invert(action.layer_tap.val);
    1a30:	8d 2d       	mov	r24, r13
    1a32:	8f 71       	andi	r24, 0x1F	; 31
    1a34:	0e 94 90 12 	call	0x2520	; 0x2520 <layer_invert>
    1a38:	64 c0       	rjmp	.+200    	; 0x1b02 <process_action+0x3e8>
    1a3a:	8d 2d       	mov	r24, r13
    1a3c:	8f 71       	andi	r24, 0x1F	; 31
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    1a3e:	ff 20       	and	r15, r15
    1a40:	29 f1       	breq	.+74     	; 0x1a8c <process_action+0x372>
    1a42:	19 c0       	rjmp	.+50     	; 0x1a76 <process_action+0x35c>
    1a44:	8d 2d       	mov	r24, r13
    1a46:	8f 71       	andi	r24, 0x1F	; 31
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    1a48:	ff 20       	and	r15, r15
    1a4a:	a9 f0       	breq	.+42     	; 0x1a76 <process_action+0x35c>
    1a4c:	1f c0       	rjmp	.+62     	; 0x1a8c <process_action+0x372>
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    1a4e:	ff 20       	and	r15, r15
    1a50:	29 f0       	breq	.+10     	; 0x1a5c <process_action+0x342>
    1a52:	8d 2d       	mov	r24, r13
    1a54:	8f 71       	andi	r24, 0x1F	; 31
    1a56:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <layer_move>
    1a5a:	53 c0       	rjmp	.+166    	; 0x1b02 <process_action+0x3e8>
    1a5c:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <layer_clear>
    1a60:	50 c0       	rjmp	.+160    	; 0x1b02 <process_action+0x3e8>
                                    layer_clear();
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    1a62:	ff 20       	and	r15, r15
    1a64:	59 f0       	breq	.+22     	; 0x1a7c <process_action+0x362>
                        if (tap_count > 0) {
    1a66:	00 23       	and	r16, r16
    1a68:	21 f0       	breq	.+8      	; 0x1a72 <process_action+0x358>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    1a6a:	8c 2d       	mov	r24, r12
    1a6c:	0e 94 be 0a 	call	0x157c	; 0x157c <register_code>
    1a70:	48 c0       	rjmp	.+144    	; 0x1b02 <process_action+0x3e8>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
    1a72:	8d 2d       	mov	r24, r13
    1a74:	8f 71       	andi	r24, 0x1F	; 31
    1a76:	0e 94 cc 12 	call	0x2598	; 0x2598 <layer_on>
    1a7a:	43 c0       	rjmp	.+134    	; 0x1b02 <process_action+0x3e8>
                        }
                    } else {
                        if (tap_count > 0) {
    1a7c:	00 23       	and	r16, r16
    1a7e:	21 f0       	breq	.+8      	; 0x1a88 <process_action+0x36e>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    1a80:	8c 2d       	mov	r24, r12
    1a82:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <unregister_code>
    1a86:	3d c0       	rjmp	.+122    	; 0x1b02 <process_action+0x3e8>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
                            layer_off(action.layer_tap.val);
    1a88:	8d 2d       	mov	r24, r13
    1a8a:	8f 71       	andi	r24, 0x1F	; 31
    1a8c:	0e 94 ac 12 	call	0x2558	; 0x2558 <layer_off>
    1a90:	38 c0       	rjmp	.+112    	; 0x1b02 <process_action+0x3e8>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    1a92:	2f e0       	ldi	r18, 0x0F	; 15
    1a94:	d2 22       	and	r13, r18
    1a96:	c5 01       	movw	r24, r10
    1a98:	6c 2d       	mov	r22, r12
    1a9a:	4d 2d       	mov	r20, r13
    1a9c:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <action_get_macro>
    1aa0:	0e 94 8e 11 	call	0x231c	; 0x231c <action_macro_play>
    1aa4:	2e c0       	rjmp	.+92     	; 0x1b02 <process_action+0x3e8>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    1aa6:	8f e0       	ldi	r24, 0x0F	; 15
    1aa8:	d8 22       	and	r13, r24
    1aaa:	c5 01       	movw	r24, r10
    1aac:	6c 2d       	mov	r22, r12
    1aae:	4d 2d       	mov	r20, r13
    1ab0:	0e 94 df 13 	call	0x27be	; 0x27be <action_function>
    1ab4:	26 c0       	rjmp	.+76     	; 0x1b02 <process_action+0x3e8>
    uint8_t tap_count = record->tap.count;
#endif

    if (IS_NOEVENT(event)) { return; }

    action_t action = layer_switch_get_action(event.key);
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aba:	0e 94 09 12 	call	0x2412	; 0x2412 <layer_switch_get_action>
    1abe:	6c 01       	movw	r12, r24
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    1ac0:	0e 94 08 12 	call	0x2410	; 0x2410 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    1ac4:	0e 94 07 12 	call	0x240e	; 0x240e <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    1ac8:	8d 2d       	mov	r24, r13
    1aca:	82 95       	swap	r24
    1acc:	8f 70       	andi	r24, 0x0F	; 15
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	88 30       	cpi	r24, 0x08	; 8
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <process_action+0x3be>
    1ad6:	bd ce       	rjmp	.-646    	; 0x1852 <process_action+0x138>
    1ad8:	89 30       	cpi	r24, 0x09	; 9
    1ada:	91 05       	cpc	r25, r1
    1adc:	3c f4       	brge	.+14     	; 0x1aec <process_action+0x3d2>
    1ade:	82 30       	cpi	r24, 0x02	; 2
    1ae0:	91 05       	cpc	r25, r1
    1ae2:	0c f4       	brge	.+2      	; 0x1ae6 <process_action+0x3cc>
    1ae4:	51 ce       	rjmp	.-862    	; 0x1788 <process_action+0x6e>
    1ae6:	04 97       	sbiw	r24, 0x04	; 4
    1ae8:	64 f4       	brge	.+24     	; 0x1b02 <process_action+0x3e8>
    1aea:	6f ce       	rjmp	.-802    	; 0x17ca <process_action+0xb0>
    1aec:	8c 30       	cpi	r24, 0x0C	; 12
    1aee:	91 05       	cpc	r25, r1
    1af0:	81 f2       	breq	.-96     	; 0x1a92 <process_action+0x378>
    1af2:	8d 30       	cpi	r24, 0x0D	; 13
    1af4:	91 05       	cpc	r25, r1
    1af6:	1c f4       	brge	.+6      	; 0x1afe <process_action+0x3e4>
    1af8:	0a 97       	sbiw	r24, 0x0a	; 10
    1afa:	1c f0       	brlt	.+6      	; 0x1b02 <process_action+0x3e8>
    1afc:	6f cf       	rjmp	.-290    	; 0x19dc <process_action+0x2c2>
    1afe:	0f 97       	sbiw	r24, 0x0f	; 15
    1b00:	91 f2       	breq	.-92     	; 0x1aa6 <process_action+0x38c>
            break;
#endif
        default:
            break;
    }
}
    1b02:	2a 96       	adiw	r28, 0x0a	; 10
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	f8 94       	cli
    1b08:	de bf       	out	0x3e, r29	; 62
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	cd bf       	out	0x3d, r28	; 61
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	1f 91       	pop	r17
    1b14:	0f 91       	pop	r16
    1b16:	ff 90       	pop	r15
    1b18:	ef 90       	pop	r14
    1b1a:	df 90       	pop	r13
    1b1c:	cf 90       	pop	r12
    1b1e:	bf 90       	pop	r11
    1b20:	af 90       	pop	r10
    1b22:	08 95       	ret

00001b24 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	2b 97       	sbiw	r28, 0x0b	; 11
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	de bf       	out	0x3e, r29	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	cd bf       	out	0x3d, r28	; 61
    1b38:	34 2f       	mov	r19, r20
    1b3a:	4f 83       	std	Y+7, r20	; 0x07
    1b3c:	25 2f       	mov	r18, r21
    1b3e:	58 87       	std	Y+8, r21	; 0x08
    1b40:	69 87       	std	Y+9, r22	; 0x09
    1b42:	7a 87       	std	Y+10, r23	; 0x0a
    1b44:	8b 87       	std	Y+11, r24	; 0x0b
    1b46:	47 2f       	mov	r20, r23
    1b48:	58 2f       	mov	r21, r24
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	31 96       	adiw	r30, 0x01	; 1
    1b4e:	86 e0       	ldi	r24, 0x06	; 6
    1b50:	df 01       	movw	r26, r30
    1b52:	1d 92       	st	X+, r1
    1b54:	8a 95       	dec	r24
    1b56:	e9 f7       	brne	.-6      	; 0x1b52 <action_exec+0x2e>
    1b58:	6b 83       	std	Y+3, r22	; 0x03
    1b5a:	39 83       	std	Y+1, r19	; 0x01
    1b5c:	2a 83       	std	Y+2, r18	; 0x02
    1b5e:	4c 83       	std	Y+4, r20	; 0x04
    1b60:	5d 83       	std	Y+5, r21	; 0x05

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    1b62:	43 2f       	mov	r20, r19
    1b64:	52 2f       	mov	r21, r18
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6a:	0e 94 cf 10 	call	0x219e	; 0x219e <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    1b6e:	2b 96       	adiw	r28, 0x0b	; 11
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    1b80:	0f 93       	push	r16
    1b82:	1f 93       	push	r17
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    1b84:	00 91 38 01 	lds	r16, 0x0138
    1b88:	15 c0       	rjmp	.+42     	; 0x1bb4 <debug_waiting_buffer+0x34>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    1b8a:	10 e0       	ldi	r17, 0x00	; 0
    1b8c:	f8 01       	movw	r30, r16
    1b8e:	ee 0f       	add	r30, r30
    1b90:	ff 1f       	adc	r31, r31
    1b92:	e0 0f       	add	r30, r16
    1b94:	f1 1f       	adc	r31, r17
    1b96:	ee 0f       	add	r30, r30
    1b98:	ff 1f       	adc	r31, r31
    1b9a:	e7 5c       	subi	r30, 0xC7	; 199
    1b9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b9e:	40 81       	ld	r20, Z
    1ba0:	51 81       	ldd	r21, Z+1	; 0x01
    1ba2:	62 81       	ldd	r22, Z+2	; 0x02
    1ba4:	73 81       	ldd	r23, Z+3	; 0x03
    1ba6:	84 81       	ldd	r24, Z+4	; 0x04
    1ba8:	95 81       	ldd	r25, Z+5	; 0x05
    1baa:	0e 94 14 0a 	call	0x1428	; 0x1428 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    1bae:	0f 5f       	subi	r16, 0xFF	; 255
    1bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb2:	07 70       	andi	r16, 0x07	; 7
    1bb4:	80 91 37 01 	lds	r24, 0x0137
    1bb8:	08 17       	cp	r16, r24
    1bba:	39 f7       	brne	.-50     	; 0x1b8a <debug_waiting_buffer+0xa>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    1bbc:	1f 91       	pop	r17
    1bbe:	0f 91       	pop	r16
    1bc0:	08 95       	ret

00001bc2 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    1bc2:	40 91 31 01 	lds	r20, 0x0131
    1bc6:	50 91 32 01 	lds	r21, 0x0132
    1bca:	60 91 33 01 	lds	r22, 0x0133
    1bce:	70 91 34 01 	lds	r23, 0x0134
    1bd2:	80 91 35 01 	lds	r24, 0x0135
    1bd6:	90 91 36 01 	lds	r25, 0x0136
    1bda:	0e 94 14 0a 	call	0x1428	; 0x1428 <debug_record>
}
    1bde:	08 95       	ret

00001be0 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    1be0:	0f 93       	push	r16
    1be2:	1f 93       	push	r17
    1be4:	cf 93       	push	r28
    1be6:	df 93       	push	r29
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    1be8:	80 91 36 01 	lds	r24, 0x0136
    1bec:	82 95       	swap	r24
    1bee:	8f 70       	andi	r24, 0x0F	; 15
    1bf0:	09 f0       	breq	.+2      	; 0x1bf4 <waiting_buffer_scan_tap+0x14>
    1bf2:	6d c0       	rjmp	.+218    	; 0x1cce <waiting_buffer_scan_tap+0xee>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    1bf4:	80 91 33 01 	lds	r24, 0x0133
    1bf8:	88 23       	and	r24, r24
    1bfa:	09 f4       	brne	.+2      	; 0x1bfe <waiting_buffer_scan_tap+0x1e>
    1bfc:	68 c0       	rjmp	.+208    	; 0x1cce <waiting_buffer_scan_tap+0xee>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    1bfe:	60 91 38 01 	lds	r22, 0x0138
    1c02:	00 91 37 01 	lds	r16, 0x0137
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    1c06:	40 91 34 01 	lds	r20, 0x0134
    1c0a:	50 91 35 01 	lds	r21, 0x0135
    1c0e:	10 91 32 01 	lds	r17, 0x0132
    1c12:	70 91 31 01 	lds	r23, 0x0131
    1c16:	ea 01       	movw	r28, r20
    1c18:	c0 95       	com	r28
    1c1a:	d0 95       	com	r29
    1c1c:	55 c0       	rjmp	.+170    	; 0x1cc8 <waiting_buffer_scan_tap+0xe8>
    1c1e:	41 15       	cp	r20, r1
    1c20:	51 05       	cpc	r21, r1
    1c22:	09 f4       	brne	.+2      	; 0x1c26 <waiting_buffer_scan_tap+0x46>
    1c24:	4f c0       	rjmp	.+158    	; 0x1cc4 <waiting_buffer_scan_tap+0xe4>
    1c26:	1f 3f       	cpi	r17, 0xFF	; 255
    1c28:	49 f4       	brne	.+18     	; 0x1c3c <waiting_buffer_scan_tap+0x5c>
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	7f 3f       	cpi	r23, 0xFF	; 255
    1c30:	11 f4       	brne	.+4      	; 0x1c36 <waiting_buffer_scan_tap+0x56>
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	88 23       	and	r24, r24
    1c38:	09 f0       	breq	.+2      	; 0x1c3c <waiting_buffer_scan_tap+0x5c>
    1c3a:	44 c0       	rjmp	.+136    	; 0x1cc4 <waiting_buffer_scan_tap+0xe4>
    1c3c:	26 2f       	mov	r18, r22
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	f9 01       	movw	r30, r18
    1c42:	ee 0f       	add	r30, r30
    1c44:	ff 1f       	adc	r31, r31
    1c46:	e2 0f       	add	r30, r18
    1c48:	f3 1f       	adc	r31, r19
    1c4a:	df 01       	movw	r26, r30
    1c4c:	aa 0f       	add	r26, r26
    1c4e:	bb 1f       	adc	r27, r27
    1c50:	a7 5c       	subi	r26, 0xC7	; 199
    1c52:	be 4f       	sbci	r27, 0xFE	; 254
    1c54:	11 96       	adiw	r26, 0x01	; 1
    1c56:	8c 91       	ld	r24, X
    1c58:	11 97       	sbiw	r26, 0x01	; 1
    1c5a:	18 17       	cp	r17, r24
    1c5c:	99 f5       	brne	.+102    	; 0x1cc4 <waiting_buffer_scan_tap+0xe4>
    1c5e:	8c 91       	ld	r24, X
    1c60:	78 17       	cp	r23, r24
    1c62:	81 f5       	brne	.+96     	; 0x1cc4 <waiting_buffer_scan_tap+0xe4>
    1c64:	ee 0f       	add	r30, r30
    1c66:	ff 1f       	adc	r31, r31
    1c68:	e5 5c       	subi	r30, 0xC5	; 197
    1c6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c6c:	80 81       	ld	r24, Z
    1c6e:	88 23       	and	r24, r24
    1c70:	49 f5       	brne	.+82     	; 0x1cc4 <waiting_buffer_scan_tap+0xe4>
    1c72:	13 96       	adiw	r26, 0x03	; 3
    1c74:	8d 91       	ld	r24, X+
    1c76:	9c 91       	ld	r25, X
    1c78:	14 97       	sbiw	r26, 0x04	; 4
    1c7a:	84 17       	cp	r24, r20
    1c7c:	95 07       	cpc	r25, r21
    1c7e:	18 f0       	brcs	.+6      	; 0x1c86 <waiting_buffer_scan_tap+0xa6>
    1c80:	84 1b       	sub	r24, r20
    1c82:	95 0b       	sbc	r25, r21
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <waiting_buffer_scan_tap+0xaa>
    1c86:	8c 0f       	add	r24, r28
    1c88:	9d 1f       	adc	r25, r29
    1c8a:	88 3c       	cpi	r24, 0xC8	; 200
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	d0 f4       	brcc	.+52     	; 0x1cc4 <waiting_buffer_scan_tap+0xe4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
            tapping_key.tap.count = 1;
    1c90:	80 91 36 01 	lds	r24, 0x0136
    1c94:	8f 70       	andi	r24, 0x0F	; 15
    1c96:	80 61       	ori	r24, 0x10	; 16
    1c98:	80 93 36 01 	sts	0x0136, r24
            waiting_buffer[i].tap.count = 1;
    1c9c:	f9 01       	movw	r30, r18
    1c9e:	ee 0f       	add	r30, r30
    1ca0:	ff 1f       	adc	r31, r31
    1ca2:	e2 0f       	add	r30, r18
    1ca4:	f3 1f       	adc	r31, r19
    1ca6:	ee 0f       	add	r30, r30
    1ca8:	ff 1f       	adc	r31, r31
    1caa:	e2 5c       	subi	r30, 0xC2	; 194
    1cac:	fe 4f       	sbci	r31, 0xFE	; 254
    1cae:	80 81       	ld	r24, Z
    1cb0:	8f 70       	andi	r24, 0x0F	; 15
    1cb2:	80 61       	ori	r24, 0x10	; 16
    1cb4:	80 83       	st	Z, r24
            process_action(&tapping_key);
    1cb6:	81 e3       	ldi	r24, 0x31	; 49
    1cb8:	91 e0       	ldi	r25, 0x01	; 1
    1cba:	0e 94 8d 0b 	call	0x171a	; 0x171a <process_action>

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    1cbe:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <debug_waiting_buffer>
    1cc2:	05 c0       	rjmp	.+10     	; 0x1cce <waiting_buffer_scan_tap+0xee>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    1cc4:	6f 5f       	subi	r22, 0xFF	; 255
    1cc6:	67 70       	andi	r22, 0x07	; 7
    1cc8:	60 17       	cp	r22, r16
    1cca:	09 f0       	breq	.+2      	; 0x1cce <waiting_buffer_scan_tap+0xee>
    1ccc:	a8 cf       	rjmp	.-176    	; 0x1c1e <waiting_buffer_scan_tap+0x3e>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	1f 91       	pop	r17
    1cd4:	0f 91       	pop	r16
    1cd6:	08 95       	ret

00001cd8 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    1cd8:	df 92       	push	r13
    1cda:	ef 92       	push	r14
    1cdc:	ff 92       	push	r15
    1cde:	0f 93       	push	r16
    1ce0:	1f 93       	push	r17
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	6b 97       	sbiw	r28, 0x1b	; 27
    1cec:	0f b6       	in	r0, 0x3f	; 63
    1cee:	f8 94       	cli
    1cf0:	de bf       	out	0x3e, r29	; 62
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	cd bf       	out	0x3d, r28	; 61
    1cf6:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	12 96       	adiw	r26, 0x02	; 2
    1cfc:	dc 90       	ld	r13, X
    1cfe:	12 97       	sbiw	r26, 0x02	; 2
    1d00:	4c 91       	ld	r20, X
    1d02:	11 96       	adiw	r26, 0x01	; 1
    1d04:	5c 91       	ld	r21, X
    1d06:	11 97       	sbiw	r26, 0x01	; 1
    1d08:	13 96       	adiw	r26, 0x03	; 3
    1d0a:	ed 90       	ld	r14, X+
    1d0c:	fc 90       	ld	r15, X
    1d0e:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    1d10:	20 91 34 01 	lds	r18, 0x0134
    1d14:	30 91 35 01 	lds	r19, 0x0135
    1d18:	60 91 32 01 	lds	r22, 0x0132
    1d1c:	70 91 31 01 	lds	r23, 0x0131
    1d20:	21 15       	cp	r18, r1
    1d22:	31 05       	cpc	r19, r1
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <process_tapping+0x50>
    1d26:	db c1       	rjmp	.+950    	; 0x20de <process_tapping+0x406>
    1d28:	6f 3f       	cpi	r22, 0xFF	; 255
    1d2a:	09 f0       	breq	.+2      	; 0x1d2e <process_tapping+0x56>
    1d2c:	03 c2       	rjmp	.+1030   	; 0x2134 <process_tapping+0x45c>
    1d2e:	7f 3f       	cpi	r23, 0xFF	; 255
    1d30:	09 f0       	breq	.+2      	; 0x1d34 <process_tapping+0x5c>
    1d32:	00 c2       	rjmp	.+1024   	; 0x2134 <process_tapping+0x45c>
    1d34:	d4 c1       	rjmp	.+936    	; 0x20de <process_tapping+0x406>
        if (WITHIN_TAPPING_TERM(event)) {
    1d36:	e2 16       	cp	r14, r18
    1d38:	f3 06       	cpc	r15, r19
    1d3a:	40 f0       	brcs	.+16     	; 0x1d4c <process_tapping+0x74>
    1d3c:	c7 01       	movw	r24, r14
    1d3e:	82 1b       	sub	r24, r18
    1d40:	93 0b       	sbc	r25, r19
    1d42:	88 3c       	cpi	r24, 0xC8	; 200
    1d44:	91 05       	cpc	r25, r1
    1d46:	08 f0       	brcs	.+2      	; 0x1d4a <process_tapping+0x72>
    1d48:	ee c0       	rjmp	.+476    	; 0x1f26 <process_tapping+0x24e>
    1d4a:	08 c0       	rjmp	.+16     	; 0x1d5c <process_tapping+0x84>
    1d4c:	20 95       	com	r18
    1d4e:	30 95       	com	r19
    1d50:	2e 0d       	add	r18, r14
    1d52:	3f 1d       	adc	r19, r15
    1d54:	28 3c       	cpi	r18, 0xC8	; 200
    1d56:	31 05       	cpc	r19, r1
    1d58:	08 f0       	brcs	.+2      	; 0x1d5c <process_tapping+0x84>
    1d5a:	e5 c0       	rjmp	.+458    	; 0x1f26 <process_tapping+0x24e>
            if (tapping_key.tap.count == 0) {
    1d5c:	80 91 36 01 	lds	r24, 0x0136
    1d60:	80 7f       	andi	r24, 0xF0	; 240
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <process_tapping+0x8e>
    1d64:	95 c0       	rjmp	.+298    	; 0x1e90 <process_tapping+0x1b8>
    1d66:	6f 3f       	cpi	r22, 0xFF	; 255
    1d68:	09 f0       	breq	.+2      	; 0x1d6c <process_tapping+0x94>
    1d6a:	ea c1       	rjmp	.+980    	; 0x2140 <process_tapping+0x468>
    1d6c:	7f 3f       	cpi	r23, 0xFF	; 255
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <process_tapping+0x9a>
    1d70:	e7 c1       	rjmp	.+974    	; 0x2140 <process_tapping+0x468>
    1d72:	15 c0       	rjmp	.+42     	; 0x1d9e <process_tapping+0xc6>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    1d74:	74 17       	cp	r23, r20
    1d76:	99 f4       	brne	.+38     	; 0x1d9e <process_tapping+0xc6>
    1d78:	dd 20       	and	r13, r13
    1d7a:	89 f4       	brne	.+34     	; 0x1d9e <process_tapping+0xc6>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    1d7c:	80 91 36 01 	lds	r24, 0x0136
    1d80:	8f 70       	andi	r24, 0x0F	; 15
    1d82:	80 61       	ori	r24, 0x10	; 16
    1d84:	80 93 36 01 	sts	0x0136, r24
                    debug_tapping_key();
    1d88:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <debug_tapping_key>
                    process_action(&tapping_key);
    1d8c:	81 e3       	ldi	r24, 0x31	; 49
    1d8e:	91 e0       	ldi	r25, 0x01	; 1
    1d90:	0e 94 8d 0b 	call	0x171a	; 0x171a <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    1d94:	80 91 36 01 	lds	r24, 0x0136
    1d98:	f8 01       	movw	r30, r16
    1d9a:	85 83       	std	Z+5, r24	; 0x05
    1d9c:	bc c1       	rjmp	.+888    	; 0x2116 <process_tapping+0x43e>
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    1d9e:	fd 82       	std	Y+5, r15	; 0x05
    1da0:	ec 82       	std	Y+4, r14	; 0x04
    1da2:	5a 83       	std	Y+2, r21	; 0x02
    1da4:	49 83       	std	Y+1, r20	; 0x01
    1da6:	db 82       	std	Y+3, r13	; 0x03
    1da8:	de 01       	movw	r26, r28
    1daa:	16 96       	adiw	r26, 0x06	; 6
    1dac:	fe 01       	movw	r30, r28
    1dae:	31 96       	adiw	r30, 0x01	; 1
    1db0:	85 e0       	ldi	r24, 0x05	; 5
    1db2:	01 90       	ld	r0, Z+
    1db4:	0d 92       	st	X+, r0
    1db6:	81 50       	subi	r24, 0x01	; 1
    1db8:	e1 f7       	brne	.-8      	; 0x1db2 <process_tapping+0xda>
    1dba:	68 85       	ldd	r22, Y+8	; 0x08
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    1dbc:	de 01       	movw	r26, r28
    1dbe:	1b 96       	adiw	r26, 0x0b	; 11
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	36 96       	adiw	r30, 0x06	; 6
    1dc4:	85 e0       	ldi	r24, 0x05	; 5
    1dc6:	01 90       	ld	r0, Z+
    1dc8:	0d 92       	st	X+, r0
    1dca:	81 50       	subi	r24, 0x01	; 1
    1dcc:	e1 f7       	brne	.-8      	; 0x1dc6 <process_tapping+0xee>
    1dce:	2c 85       	ldd	r18, Y+12	; 0x0c
    1dd0:	3b 85       	ldd	r19, Y+11	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    1dd2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dd4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dd6:	89 2b       	or	r24, r25
    1dd8:	09 f4       	brne	.+2      	; 0x1ddc <process_tapping+0x104>
    1dda:	51 c0       	rjmp	.+162    	; 0x1e7e <process_tapping+0x1a6>
    1ddc:	2f 3f       	cpi	r18, 0xFF	; 255
    1dde:	09 f0       	breq	.+2      	; 0x1de2 <process_tapping+0x10a>
    1de0:	b3 c1       	rjmp	.+870    	; 0x2148 <process_tapping+0x470>
    1de2:	3f 3f       	cpi	r19, 0xFF	; 255
    1de4:	09 f0       	breq	.+2      	; 0x1de8 <process_tapping+0x110>
    1de6:	b0 c1       	rjmp	.+864    	; 0x2148 <process_tapping+0x470>
    1de8:	4a c0       	rjmp	.+148    	; 0x1e7e <process_tapping+0x1a6>
    1dea:	fd 82       	std	Y+5, r15	; 0x05
    1dec:	ec 82       	std	Y+4, r14	; 0x04
    1dee:	5a 83       	std	Y+2, r21	; 0x02
    1df0:	49 83       	std	Y+1, r20	; 0x01
    1df2:	db 82       	std	Y+3, r13	; 0x03
    1df4:	de 01       	movw	r26, r28
    1df6:	1b 96       	adiw	r26, 0x0b	; 11
    1df8:	fe 01       	movw	r30, r28
    1dfa:	31 96       	adiw	r30, 0x01	; 1
    1dfc:	85 e0       	ldi	r24, 0x05	; 5
    1dfe:	01 90       	ld	r0, Z+
    1e00:	0d 92       	st	X+, r0
    1e02:	81 50       	subi	r24, 0x01	; 1
    1e04:	e1 f7       	brne	.-8      	; 0x1dfe <process_tapping+0x126>
    1e06:	fc 84       	ldd	r15, Y+12	; 0x0c
    1e08:	7b 85       	ldd	r23, Y+11	; 0x0b
    1e0a:	6d 85       	ldd	r22, Y+13	; 0x0d
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    1e0c:	80 91 38 01 	lds	r24, 0x0138
    1e10:	90 91 37 01 	lds	r25, 0x0137
    1e14:	1f c0       	rjmp	.+62     	; 0x1e54 <process_tapping+0x17c>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	f9 01       	movw	r30, r18
    1e1c:	ee 0f       	add	r30, r30
    1e1e:	ff 1f       	adc	r31, r31
    1e20:	e2 0f       	add	r30, r18
    1e22:	f3 1f       	adc	r31, r19
    1e24:	df 01       	movw	r26, r30
    1e26:	aa 0f       	add	r26, r26
    1e28:	bb 1f       	adc	r27, r27
    1e2a:	a7 5c       	subi	r26, 0xC7	; 199
    1e2c:	be 4f       	sbci	r27, 0xFE	; 254
    1e2e:	11 96       	adiw	r26, 0x01	; 1
    1e30:	8c 91       	ld	r24, X
    1e32:	11 97       	sbiw	r26, 0x01	; 1
    1e34:	f8 16       	cp	r15, r24
    1e36:	51 f4       	brne	.+20     	; 0x1e4c <process_tapping+0x174>
    1e38:	8c 91       	ld	r24, X
    1e3a:	78 17       	cp	r23, r24
    1e3c:	39 f4       	brne	.+14     	; 0x1e4c <process_tapping+0x174>
    1e3e:	ee 0f       	add	r30, r30
    1e40:	ff 1f       	adc	r31, r31
    1e42:	e5 5c       	subi	r30, 0xC5	; 197
    1e44:	fe 4f       	sbci	r31, 0xFE	; 254
    1e46:	80 81       	ld	r24, Z
    1e48:	68 17       	cp	r22, r24
    1e4a:	c9 f4       	brne	.+50     	; 0x1e7e <process_tapping+0x1a6>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    1e4c:	2f 5f       	subi	r18, 0xFF	; 255
    1e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e50:	82 2f       	mov	r24, r18
    1e52:	87 70       	andi	r24, 0x07	; 7
    1e54:	89 17       	cp	r24, r25
    1e56:	f9 f6       	brne	.-66     	; 0x1e16 <process_tapping+0x13e>
    1e58:	8d c1       	rjmp	.+794    	; 0x2174 <process_tapping+0x49c>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    1e5a:	9f 70       	andi	r25, 0x0F	; 15
    1e5c:	59 f0       	breq	.+22     	; 0x1e74 <process_tapping+0x19c>
    1e5e:	44 23       	and	r20, r20
    1e60:	49 f4       	brne	.+18     	; 0x1e74 <process_tapping+0x19c>
    1e62:	59 c1       	rjmp	.+690    	; 0x2116 <process_tapping+0x43e>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    1e64:	9f 70       	andi	r25, 0x0F	; 15
    1e66:	31 f0       	breq	.+12     	; 0x1e74 <process_tapping+0x19c>
    1e68:	d8 01       	movw	r26, r16
    1e6a:	15 96       	adiw	r26, 0x05	; 5
    1e6c:	8c 91       	ld	r24, X
    1e6e:	80 7f       	andi	r24, 0xF0	; 240
    1e70:	09 f4       	brne	.+2      	; 0x1e74 <process_tapping+0x19c>
    1e72:	51 c1       	rjmp	.+674    	; 0x2116 <process_tapping+0x43e>
                            if (IS_MOD(action.key.code)) return false;
    1e74:	40 5e       	subi	r20, 0xE0	; 224
    1e76:	48 30       	cpi	r20, 0x08	; 8
    1e78:	08 f4       	brcc	.+2      	; 0x1e7c <process_tapping+0x1a4>
    1e7a:	4d c1       	rjmp	.+666    	; 0x2116 <process_tapping+0x43e>
    1e7c:	48 c1       	rjmp	.+656    	; 0x210e <process_tapping+0x436>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    1e7e:	dd 20       	and	r13, r13
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <process_tapping+0x1ac>
    1e82:	49 c1       	rjmp	.+658    	; 0x2116 <process_tapping+0x43e>
                        tapping_key.tap.interrupted = true;
    1e84:	80 91 36 01 	lds	r24, 0x0136
    1e88:	81 60       	ori	r24, 0x01	; 1
    1e8a:	80 93 36 01 	sts	0x0136, r24
    1e8e:	43 c1       	rjmp	.+646    	; 0x2116 <process_tapping+0x43e>
    1e90:	6f 3f       	cpi	r22, 0xFF	; 255
    1e92:	09 f0       	breq	.+2      	; 0x1e96 <process_tapping+0x1be>
    1e94:	5d c1       	rjmp	.+698    	; 0x2150 <process_tapping+0x478>
    1e96:	7f 3f       	cpi	r23, 0xFF	; 255
    1e98:	09 f0       	breq	.+2      	; 0x1e9c <process_tapping+0x1c4>
    1e9a:	5a c1       	rjmp	.+692    	; 0x2150 <process_tapping+0x478>
    1e9c:	14 c0       	rjmp	.+40     	; 0x1ec6 <process_tapping+0x1ee>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    1e9e:	74 17       	cp	r23, r20
    1ea0:	91 f4       	brne	.+36     	; 0x1ec6 <process_tapping+0x1ee>
    1ea2:	dd 20       	and	r13, r13
    1ea4:	81 f4       	brne	.+32     	; 0x1ec6 <process_tapping+0x1ee>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    1ea6:	80 91 36 01 	lds	r24, 0x0136
    1eaa:	f8 01       	movw	r30, r16
    1eac:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    1eae:	c8 01       	movw	r24, r16
    1eb0:	0e 94 8d 0b 	call	0x171a	; 0x171a <process_action>
                    tapping_key = *keyp;
    1eb4:	a1 e3       	ldi	r26, 0x31	; 49
    1eb6:	b1 e0       	ldi	r27, 0x01	; 1
    1eb8:	f8 01       	movw	r30, r16
    1eba:	86 e0       	ldi	r24, 0x06	; 6
    1ebc:	01 90       	ld	r0, Z+
    1ebe:	0d 92       	st	X+, r0
    1ec0:	81 50       	subi	r24, 0x01	; 1
    1ec2:	e1 f7       	brne	.-8      	; 0x1ebc <process_tapping+0x1e4>
    1ec4:	20 c1       	rjmp	.+576    	; 0x2106 <process_tapping+0x42e>
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    1ec6:	5a 83       	std	Y+2, r21	; 0x02
    1ec8:	49 83       	std	Y+1, r20	; 0x01
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ece:	0e 94 24 0a 	call	0x1448	; 0x1448 <is_tap_key>
    1ed2:	88 23       	and	r24, r24
    1ed4:	09 f4       	brne	.+2      	; 0x1ed8 <process_tapping+0x200>
    1ed6:	1b c1       	rjmp	.+566    	; 0x210e <process_tapping+0x436>
    1ed8:	dd 20       	and	r13, r13
    1eda:	09 f4       	brne	.+2      	; 0x1ede <process_tapping+0x206>
    1edc:	18 c1       	rjmp	.+560    	; 0x210e <process_tapping+0x436>
                    if (tapping_key.tap.count > 1) {
    1ede:	30 91 36 01 	lds	r19, 0x0136
    1ee2:	83 2f       	mov	r24, r19
    1ee4:	82 95       	swap	r24
    1ee6:	8f 70       	andi	r24, 0x0F	; 15
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	02 97       	sbiw	r24, 0x02	; 2
    1eec:	9c f0       	brlt	.+38     	; 0x1f14 <process_tapping+0x23c>
                        process_action(&(keyrecord_t){
                                .tap = tapping_key.tap,
                                .event.key = tapping_key.event.key,
                                .event.time = event.time,
                                .event.pressed = false
                        });
    1eee:	90 91 32 01 	lds	r25, 0x0132
    1ef2:	20 91 31 01 	lds	r18, 0x0131
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	70 96       	adiw	r30, 0x10	; 16
    1efa:	86 e0       	ldi	r24, 0x06	; 6
    1efc:	df 01       	movw	r26, r30
    1efe:	1d 92       	st	X+, r1
    1f00:	8a 95       	dec	r24
    1f02:	e9 f7       	brne	.-6      	; 0x1efe <process_tapping+0x226>
    1f04:	99 8b       	std	Y+17, r25	; 0x11
    1f06:	28 8b       	std	Y+16, r18	; 0x10
    1f08:	fc 8a       	std	Y+20, r15	; 0x14
    1f0a:	eb 8a       	std	Y+19, r14	; 0x13
    1f0c:	3d 8b       	std	Y+21, r19	; 0x15
                }
                else if (is_tap_key(event.key) && event.pressed) {
                    if (tapping_key.tap.count > 1) {
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    1f0e:	cf 01       	movw	r24, r30
    1f10:	0e 94 8d 0b 	call	0x171a	; 0x171a <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    1f14:	a1 e3       	ldi	r26, 0x31	; 49
    1f16:	b1 e0       	ldi	r27, 0x01	; 1
    1f18:	f8 01       	movw	r30, r16
    1f1a:	86 e0       	ldi	r24, 0x06	; 6
    1f1c:	01 90       	ld	r0, Z+
    1f1e:	0d 92       	st	X+, r0
    1f20:	81 50       	subi	r24, 0x01	; 1
    1f22:	e1 f7       	brne	.-8      	; 0x1f1c <process_tapping+0x244>
    1f24:	ee c0       	rjmp	.+476    	; 0x2102 <process_tapping+0x42a>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    1f26:	80 91 36 01 	lds	r24, 0x0136
    1f2a:	80 7f       	andi	r24, 0xF0	; 240
    1f2c:	a9 f4       	brne	.+42     	; 0x1f58 <process_tapping+0x280>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    1f2e:	7e 2d       	mov	r23, r14
    1f30:	fd 82       	std	Y+5, r15	; 0x05
    1f32:	ec 82       	std	Y+4, r14	; 0x04
    1f34:	5a 83       	std	Y+2, r21	; 0x02
    1f36:	49 83       	std	Y+1, r20	; 0x01
    1f38:	db 82       	std	Y+3, r13	; 0x03
    1f3a:	6d 2d       	mov	r22, r13
    1f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3e:	0e 94 05 0a 	call	0x140a	; 0x140a <debug_event>
                process_action(&tapping_key);
    1f42:	01 e3       	ldi	r16, 0x31	; 49
    1f44:	11 e0       	ldi	r17, 0x01	; 1
    1f46:	c8 01       	movw	r24, r16
    1f48:	0e 94 8d 0b 	call	0x171a	; 0x171a <process_action>
                tapping_key = (keyrecord_t){};
    1f4c:	86 e0       	ldi	r24, 0x06	; 6
    1f4e:	f8 01       	movw	r30, r16
    1f50:	11 92       	st	Z+, r1
    1f52:	8a 95       	dec	r24
    1f54:	e9 f7       	brne	.-6      	; 0x1f50 <process_tapping+0x278>
    1f56:	c0 c0       	rjmp	.+384    	; 0x20d8 <process_tapping+0x400>
    1f58:	6f 3f       	cpi	r22, 0xFF	; 255
    1f5a:	09 f0       	breq	.+2      	; 0x1f5e <process_tapping+0x286>
    1f5c:	fd c0       	rjmp	.+506    	; 0x2158 <process_tapping+0x480>
    1f5e:	7f 3f       	cpi	r23, 0xFF	; 255
    1f60:	09 f0       	breq	.+2      	; 0x1f64 <process_tapping+0x28c>
    1f62:	fa c0       	rjmp	.+500    	; 0x2158 <process_tapping+0x480>
    1f64:	14 c0       	rjmp	.+40     	; 0x1f8e <process_tapping+0x2b6>
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    1f66:	74 17       	cp	r23, r20
    1f68:	91 f4       	brne	.+36     	; 0x1f8e <process_tapping+0x2b6>
    1f6a:	dd 20       	and	r13, r13
    1f6c:	81 f4       	brne	.+32     	; 0x1f8e <process_tapping+0x2b6>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    1f6e:	80 91 36 01 	lds	r24, 0x0136
    1f72:	d8 01       	movw	r26, r16
    1f74:	15 96       	adiw	r26, 0x05	; 5
    1f76:	8c 93       	st	X, r24
                    process_action(keyp);
    1f78:	c8 01       	movw	r24, r16
    1f7a:	0e 94 8d 0b 	call	0x171a	; 0x171a <process_action>
                    tapping_key = (keyrecord_t){};
    1f7e:	e1 e3       	ldi	r30, 0x31	; 49
    1f80:	f1 e0       	ldi	r31, 0x01	; 1
    1f82:	86 e0       	ldi	r24, 0x06	; 6
    1f84:	df 01       	movw	r26, r30
    1f86:	1d 92       	st	X+, r1
    1f88:	8a 95       	dec	r24
    1f8a:	e9 f7       	brne	.-6      	; 0x1f86 <process_tapping+0x2ae>
    1f8c:	be c0       	rjmp	.+380    	; 0x210a <process_tapping+0x432>
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    1f8e:	5a 83       	std	Y+2, r21	; 0x02
    1f90:	49 83       	std	Y+1, r20	; 0x01
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	9a 81       	ldd	r25, Y+2	; 0x02
    1f96:	0e 94 24 0a 	call	0x1448	; 0x1448 <is_tap_key>
    1f9a:	88 23       	and	r24, r24
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <process_tapping+0x2c8>
    1f9e:	b7 c0       	rjmp	.+366    	; 0x210e <process_tapping+0x436>
    1fa0:	dd 20       	and	r13, r13
    1fa2:	09 f4       	brne	.+2      	; 0x1fa6 <process_tapping+0x2ce>
    1fa4:	b4 c0       	rjmp	.+360    	; 0x210e <process_tapping+0x436>
                    if (tapping_key.tap.count > 1) {
    1fa6:	30 91 36 01 	lds	r19, 0x0136
    1faa:	83 2f       	mov	r24, r19
    1fac:	82 95       	swap	r24
    1fae:	8f 70       	andi	r24, 0x0F	; 15
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	02 97       	sbiw	r24, 0x02	; 2
    1fb4:	9c f0       	brlt	.+38     	; 0x1fdc <process_tapping+0x304>
                        process_action(&(keyrecord_t){
                                .tap = tapping_key.tap,
                                .event.key = tapping_key.event.key,
                                .event.time = event.time,
                                .event.pressed = false
                        });
    1fb6:	90 91 32 01 	lds	r25, 0x0132
    1fba:	20 91 31 01 	lds	r18, 0x0131
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	76 96       	adiw	r30, 0x16	; 22
    1fc2:	86 e0       	ldi	r24, 0x06	; 6
    1fc4:	df 01       	movw	r26, r30
    1fc6:	1d 92       	st	X+, r1
    1fc8:	8a 95       	dec	r24
    1fca:	e9 f7       	brne	.-6      	; 0x1fc6 <process_tapping+0x2ee>
    1fcc:	9f 8b       	std	Y+23, r25	; 0x17
    1fce:	2e 8b       	std	Y+22, r18	; 0x16
    1fd0:	fa 8e       	std	Y+26, r15	; 0x1a
    1fd2:	e9 8e       	std	Y+25, r14	; 0x19
    1fd4:	3b 8f       	std	Y+27, r19	; 0x1b
                }
                else if (is_tap_key(event.key) && event.pressed) {
                    if (tapping_key.tap.count > 1) {
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    1fd6:	cf 01       	movw	r24, r30
    1fd8:	0e 94 8d 0b 	call	0x171a	; 0x171a <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    1fdc:	a1 e3       	ldi	r26, 0x31	; 49
    1fde:	b1 e0       	ldi	r27, 0x01	; 1
    1fe0:	f8 01       	movw	r30, r16
    1fe2:	86 e0       	ldi	r24, 0x06	; 6
    1fe4:	01 90       	ld	r0, Z+
    1fe6:	0d 92       	st	X+, r0
    1fe8:	81 50       	subi	r24, 0x01	; 1
    1fea:	e1 f7       	brne	.-8      	; 0x1fe4 <process_tapping+0x30c>
    1fec:	8a c0       	rjmp	.+276    	; 0x2102 <process_tapping+0x42a>
    1fee:	6f 3f       	cpi	r22, 0xFF	; 255
    1ff0:	09 f0       	breq	.+2      	; 0x1ff4 <process_tapping+0x31c>
    1ff2:	b6 c0       	rjmp	.+364    	; 0x2160 <process_tapping+0x488>
    1ff4:	7f 3f       	cpi	r23, 0xFF	; 255
    1ff6:	09 f0       	breq	.+2      	; 0x1ffa <process_tapping+0x322>
    1ff8:	b3 c0       	rjmp	.+358    	; 0x2160 <process_tapping+0x488>
    1ffa:	71 c0       	rjmp	.+226    	; 0x20de <process_tapping+0x406>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    1ffc:	e2 16       	cp	r14, r18
    1ffe:	f3 06       	cpc	r15, r19
    2000:	40 f0       	brcs	.+16     	; 0x2012 <process_tapping+0x33a>
    2002:	c7 01       	movw	r24, r14
    2004:	82 1b       	sub	r24, r18
    2006:	93 0b       	sbc	r25, r19
    2008:	88 3c       	cpi	r24, 0xC8	; 200
    200a:	91 05       	cpc	r25, r1
    200c:	08 f0       	brcs	.+2      	; 0x2010 <process_tapping+0x338>
    200e:	53 c0       	rjmp	.+166    	; 0x20b6 <process_tapping+0x3de>
    2010:	08 c0       	rjmp	.+16     	; 0x2022 <process_tapping+0x34a>
    2012:	20 95       	com	r18
    2014:	30 95       	com	r19
    2016:	2e 0d       	add	r18, r14
    2018:	3f 1d       	adc	r19, r15
    201a:	28 3c       	cpi	r18, 0xC8	; 200
    201c:	31 05       	cpc	r19, r1
    201e:	08 f0       	brcs	.+2      	; 0x2022 <process_tapping+0x34a>
    2020:	4a c0       	rjmp	.+148    	; 0x20b6 <process_tapping+0x3de>
            if (event.pressed) {
    2022:	dd 20       	and	r13, r13
    2024:	09 f4       	brne	.+2      	; 0x2028 <process_tapping+0x350>
    2026:	73 c0       	rjmp	.+230    	; 0x210e <process_tapping+0x436>
    2028:	6f 3f       	cpi	r22, 0xFF	; 255
    202a:	09 f0       	breq	.+2      	; 0x202e <process_tapping+0x356>
    202c:	9f c0       	rjmp	.+318    	; 0x216c <process_tapping+0x494>
    202e:	7f 3f       	cpi	r23, 0xFF	; 255
    2030:	09 f0       	breq	.+2      	; 0x2034 <process_tapping+0x35c>
    2032:	9c c0       	rjmp	.+312    	; 0x216c <process_tapping+0x494>
    2034:	29 c0       	rjmp	.+82     	; 0x2088 <process_tapping+0x3b0>
                if (IS_TAPPING_KEY(event.key)) {
    2036:	74 17       	cp	r23, r20
    2038:	39 f5       	brne	.+78     	; 0x2088 <process_tapping+0x3b0>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    203a:	90 91 36 01 	lds	r25, 0x0136
    203e:	90 fd       	sbrc	r25, 0
    2040:	1a c0       	rjmp	.+52     	; 0x2076 <process_tapping+0x39e>
    2042:	89 2f       	mov	r24, r25
    2044:	82 95       	swap	r24
    2046:	8f 70       	andi	r24, 0x0F	; 15
    2048:	b1 f0       	breq	.+44     	; 0x2076 <process_tapping+0x39e>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    204a:	f8 01       	movw	r30, r16
    204c:	95 83       	std	Z+5, r25	; 0x05
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    204e:	8f 30       	cpi	r24, 0x0F	; 15
    2050:	31 f0       	breq	.+12     	; 0x205e <process_tapping+0x386>
    2052:	8f 5f       	subi	r24, 0xFF	; 255
    2054:	82 95       	swap	r24
    2056:	80 7f       	andi	r24, 0xF0	; 240
    2058:	9f 70       	andi	r25, 0x0F	; 15
    205a:	98 2b       	or	r25, r24
    205c:	95 83       	std	Z+5, r25	; 0x05
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    205e:	c8 01       	movw	r24, r16
    2060:	0e 94 8d 0b 	call	0x171a	; 0x171a <process_action>
                        tapping_key = *keyp;
    2064:	a1 e3       	ldi	r26, 0x31	; 49
    2066:	b1 e0       	ldi	r27, 0x01	; 1
    2068:	f8 01       	movw	r30, r16
    206a:	86 e0       	ldi	r24, 0x06	; 6
    206c:	01 90       	ld	r0, Z+
    206e:	0d 92       	st	X+, r0
    2070:	81 50       	subi	r24, 0x01	; 1
    2072:	e1 f7       	brne	.-8      	; 0x206c <process_tapping+0x394>
    2074:	48 c0       	rjmp	.+144    	; 0x2106 <process_tapping+0x42e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    2076:	a1 e3       	ldi	r26, 0x31	; 49
    2078:	b1 e0       	ldi	r27, 0x01	; 1
    207a:	f8 01       	movw	r30, r16
    207c:	86 e0       	ldi	r24, 0x06	; 6
    207e:	01 90       	ld	r0, Z+
    2080:	0d 92       	st	X+, r0
    2082:	81 50       	subi	r24, 0x01	; 1
    2084:	e1 f7       	brne	.-8      	; 0x207e <process_tapping+0x3a6>
    2086:	41 c0       	rjmp	.+130    	; 0x210a <process_tapping+0x432>
                        return true;
                    }
                } else if (is_tap_key(event.key)) {
    2088:	5a 83       	std	Y+2, r21	; 0x02
    208a:	49 83       	std	Y+1, r20	; 0x01
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	9a 81       	ldd	r25, Y+2	; 0x02
    2090:	0e 94 24 0a 	call	0x1448	; 0x1448 <is_tap_key>
    2094:	88 23       	and	r24, r24
    2096:	49 f0       	breq	.+18     	; 0x20aa <process_tapping+0x3d2>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    2098:	a1 e3       	ldi	r26, 0x31	; 49
    209a:	b1 e0       	ldi	r27, 0x01	; 1
    209c:	f8 01       	movw	r30, r16
    209e:	86 e0       	ldi	r24, 0x06	; 6
    20a0:	01 90       	ld	r0, Z+
    20a2:	0d 92       	st	X+, r0
    20a4:	81 50       	subi	r24, 0x01	; 1
    20a6:	e1 f7       	brne	.-8      	; 0x20a0 <process_tapping+0x3c8>
    20a8:	2c c0       	rjmp	.+88     	; 0x2102 <process_tapping+0x42a>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    20aa:	80 91 36 01 	lds	r24, 0x0136
    20ae:	81 60       	ori	r24, 0x01	; 1
    20b0:	80 93 36 01 	sts	0x0136, r24
    20b4:	2c c0       	rjmp	.+88     	; 0x210e <process_tapping+0x436>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    20b6:	7e 2d       	mov	r23, r14
    20b8:	fd 82       	std	Y+5, r15	; 0x05
    20ba:	ec 82       	std	Y+4, r14	; 0x04
    20bc:	5a 83       	std	Y+2, r21	; 0x02
    20be:	49 83       	std	Y+1, r20	; 0x01
    20c0:	db 82       	std	Y+3, r13	; 0x03
    20c2:	6d 2d       	mov	r22, r13
    20c4:	8d 81       	ldd	r24, Y+5	; 0x05
    20c6:	0e 94 05 0a 	call	0x140a	; 0x140a <debug_event>
            tapping_key = (keyrecord_t){};
    20ca:	e1 e3       	ldi	r30, 0x31	; 49
    20cc:	f1 e0       	ldi	r31, 0x01	; 1
    20ce:	86 e0       	ldi	r24, 0x06	; 6
    20d0:	df 01       	movw	r26, r30
    20d2:	1d 92       	st	X+, r1
    20d4:	8a 95       	dec	r24
    20d6:	e9 f7       	brne	.-6      	; 0x20d2 <process_tapping+0x3fa>
            debug_tapping_key();
    20d8:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <debug_tapping_key>
    20dc:	1c c0       	rjmp	.+56     	; 0x2116 <process_tapping+0x43e>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    20de:	dd 20       	and	r13, r13
    20e0:	b1 f0       	breq	.+44     	; 0x210e <process_tapping+0x436>
    20e2:	5a 83       	std	Y+2, r21	; 0x02
    20e4:	49 83       	std	Y+1, r20	; 0x01
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ea:	0e 94 24 0a 	call	0x1448	; 0x1448 <is_tap_key>
    20ee:	88 23       	and	r24, r24
    20f0:	71 f0       	breq	.+28     	; 0x210e <process_tapping+0x436>
            debug("Tapping: Start(Press tap key).\n");
            tapping_key = *keyp;
    20f2:	a1 e3       	ldi	r26, 0x31	; 49
    20f4:	b1 e0       	ldi	r27, 0x01	; 1
    20f6:	f8 01       	movw	r30, r16
    20f8:	86 e0       	ldi	r24, 0x06	; 6
    20fa:	01 90       	ld	r0, Z+
    20fc:	0d 92       	st	X+, r0
    20fe:	81 50       	subi	r24, 0x01	; 1
    2100:	e1 f7       	brne	.-8      	; 0x20fa <process_tapping+0x422>
            waiting_buffer_scan_tap();
    2102:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <waiting_buffer_scan_tap>
            debug_tapping_key();
    2106:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <debug_tapping_key>
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	05 c0       	rjmp	.+10     	; 0x2118 <process_tapping+0x440>
            return true;
        } else {
            process_action(keyp);
    210e:	c8 01       	movw	r24, r16
    2110:	0e 94 8d 0b 	call	0x171a	; 0x171a <process_action>
    2114:	fa cf       	rjmp	.-12     	; 0x210a <process_tapping+0x432>
            return true;
    2116:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
}
    2118:	6b 96       	adiw	r28, 0x1b	; 27
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	f8 94       	cli
    211e:	de bf       	out	0x3e, r29	; 62
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	cd bf       	out	0x3d, r28	; 61
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	1f 91       	pop	r17
    212a:	0f 91       	pop	r16
    212c:	ff 90       	pop	r15
    212e:	ef 90       	pop	r14
    2130:	df 90       	pop	r13
    2132:	08 95       	ret
bool process_tapping(keyrecord_t *keyp)
{
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2134:	80 91 33 01 	lds	r24, 0x0133
    2138:	88 23       	and	r24, r24
    213a:	09 f4       	brne	.+2      	; 0x213e <process_tapping+0x466>
    213c:	58 cf       	rjmp	.-336    	; 0x1fee <process_tapping+0x316>
    213e:	fb cd       	rjmp	.-1034   	; 0x1d36 <process_tapping+0x5e>
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2140:	65 17       	cp	r22, r21
    2142:	09 f0       	breq	.+2      	; 0x2146 <process_tapping+0x46e>
    2144:	2c ce       	rjmp	.-936    	; 0x1d9e <process_tapping+0xc6>
    2146:	16 ce       	rjmp	.-980    	; 0x1d74 <process_tapping+0x9c>
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2148:	61 30       	cpi	r22, 0x01	; 1
    214a:	09 f4       	brne	.+2      	; 0x214e <process_tapping+0x476>
    214c:	98 ce       	rjmp	.-720    	; 0x1e7e <process_tapping+0x1a6>
    214e:	4d ce       	rjmp	.-870    	; 0x1dea <process_tapping+0x112>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2150:	65 17       	cp	r22, r21
    2152:	09 f0       	breq	.+2      	; 0x2156 <process_tapping+0x47e>
    2154:	b8 ce       	rjmp	.-656    	; 0x1ec6 <process_tapping+0x1ee>
    2156:	a3 ce       	rjmp	.-698    	; 0x1e9e <process_tapping+0x1c6>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2158:	65 17       	cp	r22, r21
    215a:	09 f0       	breq	.+2      	; 0x215e <process_tapping+0x486>
    215c:	18 cf       	rjmp	.-464    	; 0x1f8e <process_tapping+0x2b6>
    215e:	03 cf       	rjmp	.-506    	; 0x1f66 <process_tapping+0x28e>
                    process_action(keyp);
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
    2160:	80 91 33 01 	lds	r24, 0x0133
    2164:	88 23       	and	r24, r24
    2166:	09 f0       	breq	.+2      	; 0x216a <process_tapping+0x492>
    2168:	ba cf       	rjmp	.-140    	; 0x20de <process_tapping+0x406>
    216a:	48 cf       	rjmp	.-368    	; 0x1ffc <process_tapping+0x324>
        if (WITHIN_TAPPING_TERM(event)) {
            if (event.pressed) {
                if (IS_TAPPING_KEY(event.key)) {
    216c:	65 17       	cp	r22, r21
    216e:	09 f0       	breq	.+2      	; 0x2172 <process_tapping+0x49a>
    2170:	8b cf       	rjmp	.-234    	; 0x2088 <process_tapping+0x3b0>
    2172:	61 cf       	rjmp	.-318    	; 0x2036 <process_tapping+0x35e>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    2174:	5a 83       	std	Y+2, r21	; 0x02
    2176:	49 83       	std	Y+1, r20	; 0x01
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	9a 81       	ldd	r25, Y+2	; 0x02
    217c:	0e 94 09 12 	call	0x2412	; 0x2412 <layer_switch_get_action>
    2180:	48 2f       	mov	r20, r24
                    switch (action.kind.id) {
    2182:	89 2f       	mov	r24, r25
    2184:	82 95       	swap	r24
    2186:	8f 70       	andi	r24, 0x0F	; 15
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	22 30       	cpi	r18, 0x02	; 2
    218e:	31 05       	cpc	r19, r1
    2190:	0c f4       	brge	.+2      	; 0x2194 <process_tapping+0x4bc>
    2192:	63 ce       	rjmp	.-826    	; 0x1e5a <process_tapping+0x182>
    2194:	24 30       	cpi	r18, 0x04	; 4
    2196:	31 05       	cpc	r19, r1
    2198:	0c f0       	brlt	.+2      	; 0x219c <process_tapping+0x4c4>
    219a:	b9 cf       	rjmp	.-142    	; 0x210e <process_tapping+0x436>
    219c:	63 ce       	rjmp	.-826    	; 0x1e64 <process_tapping+0x18c>

0000219e <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    219e:	0f 93       	push	r16
    21a0:	1f 93       	push	r17
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	2c 97       	sbiw	r28, 0x0c	; 12
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	4f 83       	std	Y+7, r20	; 0x07
    21b8:	58 87       	std	Y+8, r21	; 0x08
    21ba:	69 87       	std	Y+9, r22	; 0x09
    21bc:	7a 87       	std	Y+10, r23	; 0x0a
    21be:	8b 87       	std	Y+11, r24	; 0x0b
    21c0:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    21c2:	8e 01       	movw	r16, r28
    21c4:	09 5f       	subi	r16, 0xF9	; 249
    21c6:	1f 4f       	sbci	r17, 0xFF	; 255
    21c8:	c8 01       	movw	r24, r16
    21ca:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <process_tapping>
    21ce:	88 23       	and	r24, r24
    21d0:	d9 f0       	breq	.+54     	; 0x2208 <action_tapping_process+0x6a>
        if (!IS_NOEVENT(record.event)) {
    21d2:	28 85       	ldd	r18, Y+8	; 0x08
    21d4:	3f 81       	ldd	r19, Y+7	; 0x07
    21d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    21d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    21da:	89 2b       	or	r24, r25
    21dc:	09 f4       	brne	.+2      	; 0x21e0 <action_tapping_process+0x42>
    21de:	6b c0       	rjmp	.+214    	; 0x22b6 <action_tapping_process+0x118>
    21e0:	2f 3f       	cpi	r18, 0xFF	; 255
    21e2:	49 f4       	brne	.+18     	; 0x21f6 <action_tapping_process+0x58>
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	3f 3f       	cpi	r19, 0xFF	; 255
    21ea:	11 f4       	brne	.+4      	; 0x21f0 <action_tapping_process+0x52>
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	88 23       	and	r24, r24
    21f2:	09 f0       	breq	.+2      	; 0x21f6 <action_tapping_process+0x58>
    21f4:	60 c0       	rjmp	.+192    	; 0x22b6 <action_tapping_process+0x118>
            debug("processed: "); debug_record(record); debug("\n");
    21f6:	4f 81       	ldd	r20, Y+7	; 0x07
    21f8:	58 85       	ldd	r21, Y+8	; 0x08
    21fa:	69 85       	ldd	r22, Y+9	; 0x09
    21fc:	7a 85       	ldd	r23, Y+10	; 0x0a
    21fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    2200:	9c 85       	ldd	r25, Y+12	; 0x0c
    2202:	0e 94 14 0a 	call	0x1428	; 0x1428 <debug_record>
    2206:	57 c0       	rjmp	.+174    	; 0x22b6 <action_tapping_process+0x118>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
    2208:	de 01       	movw	r26, r28
    220a:	11 96       	adiw	r26, 0x01	; 1
    220c:	f8 01       	movw	r30, r16
    220e:	86 e0       	ldi	r24, 0x06	; 6
    2210:	01 90       	ld	r0, Z+
    2212:	0d 92       	st	X+, r0
    2214:	81 50       	subi	r24, 0x01	; 1
    2216:	e1 f7       	brne	.-8      	; 0x2210 <action_tapping_process+0x72>
    2218:	f9 81       	ldd	r31, Y+1	; 0x01
    221a:	ea 81       	ldd	r30, Y+2	; 0x02
    221c:	4c 81       	ldd	r20, Y+4	; 0x04
    221e:	5d 81       	ldd	r21, Y+5	; 0x05
    2220:	41 15       	cp	r20, r1
    2222:	51 05       	cpc	r21, r1
    2224:	09 f4       	brne	.+2      	; 0x2228 <action_tapping_process+0x8a>
    2226:	47 c0       	rjmp	.+142    	; 0x22b6 <action_tapping_process+0x118>
    2228:	ef 3f       	cpi	r30, 0xFF	; 255
    222a:	09 f0       	breq	.+2      	; 0x222e <action_tapping_process+0x90>
    222c:	4c c0       	rjmp	.+152    	; 0x22c6 <action_tapping_process+0x128>
    222e:	ff 3f       	cpi	r31, 0xFF	; 255
    2230:	09 f0       	breq	.+2      	; 0x2234 <action_tapping_process+0x96>
    2232:	49 c0       	rjmp	.+146    	; 0x22c6 <action_tapping_process+0x128>
    2234:	40 c0       	rjmp	.+128    	; 0x22b6 <action_tapping_process+0x118>
    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    2236:	f9 83       	std	Y+1, r31	; 0x01
    2238:	ea 83       	std	Y+2, r30	; 0x02
    223a:	5d 83       	std	Y+5, r21	; 0x05
    223c:	4c 83       	std	Y+4, r20	; 0x04
    223e:	f9 01       	movw	r30, r18
    2240:	ee 0f       	add	r30, r30
    2242:	ff 1f       	adc	r31, r31
    2244:	e2 0f       	add	r30, r18
    2246:	f3 1f       	adc	r31, r19
    2248:	ee 0f       	add	r30, r30
    224a:	ff 1f       	adc	r31, r31
    224c:	e7 5c       	subi	r30, 0xC7	; 199
    224e:	fe 4f       	sbci	r31, 0xFE	; 254
    2250:	de 01       	movw	r26, r28
    2252:	11 96       	adiw	r26, 0x01	; 1
    2254:	86 e0       	ldi	r24, 0x06	; 6
    2256:	0d 90       	ld	r0, X+
    2258:	01 92       	st	Z+, r0
    225a:	81 50       	subi	r24, 0x01	; 1
    225c:	e1 f7       	brne	.-8      	; 0x2256 <action_tapping_process+0xb8>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    225e:	60 93 37 01 	sts	0x0137, r22

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    2262:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <debug_waiting_buffer>
    2266:	27 c0       	rjmp	.+78     	; 0x22b6 <action_tapping_process+0x118>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    2268:	91 9f       	mul	r25, r17
    226a:	c0 01       	movw	r24, r0
    226c:	11 24       	eor	r1, r1
    226e:	87 5c       	subi	r24, 0xC7	; 199
    2270:	9e 4f       	sbci	r25, 0xFE	; 254
    2272:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <process_tapping>
    2276:	88 23       	and	r24, r24
    2278:	09 f4       	brne	.+2      	; 0x227c <action_tapping_process+0xde>
    227a:	45 c0       	rjmp	.+138    	; 0x2306 <action_tapping_process+0x168>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    227c:	80 91 38 01 	lds	r24, 0x0138
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	fc 01       	movw	r30, r24
    2284:	ee 0f       	add	r30, r30
    2286:	ff 1f       	adc	r31, r31
    2288:	e8 0f       	add	r30, r24
    228a:	f9 1f       	adc	r31, r25
    228c:	ee 0f       	add	r30, r30
    228e:	ff 1f       	adc	r31, r31
    2290:	e7 5c       	subi	r30, 0xC7	; 199
    2292:	fe 4f       	sbci	r31, 0xFE	; 254
    2294:	40 81       	ld	r20, Z
    2296:	51 81       	ldd	r21, Z+1	; 0x01
    2298:	62 81       	ldd	r22, Z+2	; 0x02
    229a:	73 81       	ldd	r23, Z+3	; 0x03
    229c:	84 81       	ldd	r24, Z+4	; 0x04
    229e:	95 81       	ldd	r25, Z+5	; 0x05
    22a0:	0e 94 14 0a 	call	0x1428	; 0x1428 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    22a4:	80 91 38 01 	lds	r24, 0x0138
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	01 96       	adiw	r24, 0x01	; 1
    22ac:	87 70       	andi	r24, 0x07	; 7
    22ae:	90 70       	andi	r25, 0x00	; 0
    22b0:	80 93 38 01 	sts	0x0138, r24
    22b4:	01 c0       	rjmp	.+2      	; 0x22b8 <action_tapping_process+0x11a>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    22b6:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    22b8:	90 91 38 01 	lds	r25, 0x0138
    22bc:	80 91 37 01 	lds	r24, 0x0137
    22c0:	98 17       	cp	r25, r24
    22c2:	91 f6       	brne	.-92     	; 0x2268 <action_tapping_process+0xca>
    22c4:	20 c0       	rjmp	.+64     	; 0x2306 <action_tapping_process+0x168>
{
    if (IS_NOEVENT(record.event)) {
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    22c6:	80 91 37 01 	lds	r24, 0x0137
    22ca:	28 2f       	mov	r18, r24
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	2f 5f       	subi	r18, 0xFF	; 255
    22d0:	3f 4f       	sbci	r19, 0xFF	; 255
    22d2:	b9 01       	movw	r22, r18
    22d4:	67 70       	andi	r22, 0x07	; 7
    22d6:	70 70       	andi	r23, 0x00	; 0
    22d8:	21 50       	subi	r18, 0x01	; 1
    22da:	30 40       	sbci	r19, 0x00	; 0
    22dc:	80 91 38 01 	lds	r24, 0x0138
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	68 17       	cp	r22, r24
    22e4:	79 07       	cpc	r23, r25
    22e6:	09 f0       	breq	.+2      	; 0x22ea <action_tapping_process+0x14c>
    22e8:	a6 cf       	rjmp	.-180    	; 0x2236 <action_tapping_process+0x98>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    22ea:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    22ee:	10 92 37 01 	sts	0x0137, r1
    waiting_buffer_tail = 0;
    22f2:	10 92 38 01 	sts	0x0138, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    22f6:	e1 e3       	ldi	r30, 0x31	; 49
    22f8:	f1 e0       	ldi	r31, 0x01	; 1
    22fa:	86 e0       	ldi	r24, 0x06	; 6
    22fc:	df 01       	movw	r26, r30
    22fe:	1d 92       	st	X+, r1
    2300:	8a 95       	dec	r24
    2302:	e9 f7       	brne	.-6      	; 0x22fe <action_tapping_process+0x160>
    2304:	d8 cf       	rjmp	.-80     	; 0x22b6 <action_tapping_process+0x118>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    2306:	2c 96       	adiw	r28, 0x0c	; 12
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	de bf       	out	0x3e, r29	; 62
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	cd bf       	out	0x3d, r28	; 61
    2312:	cf 91       	pop	r28
    2314:	df 91       	pop	r29
    2316:	1f 91       	pop	r17
    2318:	0f 91       	pop	r16
    231a:	08 95       	ret

0000231c <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    231c:	cf 92       	push	r12
    231e:	df 92       	push	r13
    2320:	ef 92       	push	r14
    2322:	ff 92       	push	r15
    2324:	1f 93       	push	r17
    2326:	cf 93       	push	r28
    2328:	df 93       	push	r29
    232a:	ec 01       	movw	r28, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	09 f4       	brne	.+2      	; 0x2332 <action_macro_play+0x16>
    2330:	66 c0       	rjmp	.+204    	; 0x23fe <action_macro_play+0xe2>
    2332:	10 e0       	ldi	r17, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2334:	90 ea       	ldi	r25, 0xA0	; 160
    2336:	c9 2e       	mov	r12, r25
    2338:	9f e0       	ldi	r25, 0x0F	; 15
    233a:	d9 2e       	mov	r13, r25
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	e8 2e       	mov	r14, r24
    2340:	f1 2c       	mov	r15, r1
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    2342:	fe 01       	movw	r30, r28
    2344:	21 96       	adiw	r28, 0x01	; 1
    2346:	94 91       	lpm	r25, Z+
    2348:	94 37       	cpi	r25, 0x74	; 116
    234a:	48 f4       	brcc	.+18     	; 0x235e <action_macro_play+0x42>
    234c:	94 30       	cpi	r25, 0x04	; 4
    234e:	08 f0       	brcs	.+2      	; 0x2352 <action_macro_play+0x36>
    2350:	44 c0       	rjmp	.+136    	; 0x23da <action_macro_play+0xbe>
    2352:	91 30       	cpi	r25, 0x01	; 1
    2354:	79 f0       	breq	.+30     	; 0x2374 <action_macro_play+0x58>
    2356:	92 30       	cpi	r25, 0x02	; 2
    2358:	09 f0       	breq	.+2      	; 0x235c <action_macro_play+0x40>
    235a:	51 c0       	rjmp	.+162    	; 0x23fe <action_macro_play+0xe2>
    235c:	1b c0       	rjmp	.+54     	; 0x2394 <action_macro_play+0x78>
    235e:	95 37       	cpi	r25, 0x75	; 117
    2360:	09 f4       	brne	.+2      	; 0x2364 <action_macro_play+0x48>
    2362:	37 c0       	rjmp	.+110    	; 0x23d2 <action_macro_play+0xb6>
    2364:	95 37       	cpi	r25, 0x75	; 117
    2366:	50 f1       	brcs	.+84     	; 0x23bc <action_macro_play+0xa0>
    2368:	89 2f       	mov	r24, r25
    236a:	84 58       	subi	r24, 0x84	; 132
    236c:	80 37       	cpi	r24, 0x70	; 112
    236e:	08 f0       	brcs	.+2      	; 0x2372 <action_macro_play+0x56>
    2370:	46 c0       	rjmp	.+140    	; 0x23fe <action_macro_play+0xe2>
    2372:	37 c0       	rjmp	.+110    	; 0x23e2 <action_macro_play+0xc6>
            case KEY_DOWN:
                MACRO_READ();
    2374:	fe 01       	movw	r30, r28
    2376:	21 96       	adiw	r28, 0x01	; 1
    2378:	94 91       	lpm	r25, Z+
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    237a:	89 2f       	mov	r24, r25
    237c:	80 5e       	subi	r24, 0xE0	; 224
    237e:	88 30       	cpi	r24, 0x08	; 8
    2380:	60 f5       	brcc	.+88     	; 0x23da <action_macro_play+0xbe>
                    add_weak_mods(MOD_BIT(macro));
    2382:	97 70       	andi	r25, 0x07	; 7
    2384:	8e 2d       	mov	r24, r14
    2386:	01 c0       	rjmp	.+2      	; 0x238a <action_macro_play+0x6e>
    2388:	88 0f       	add	r24, r24
    238a:	9a 95       	dec	r25
    238c:	ea f7       	brpl	.-6      	; 0x2388 <action_macro_play+0x6c>
    238e:	0e 94 8f 13 	call	0x271e	; 0x271e <add_weak_mods>
    2392:	0f c0       	rjmp	.+30     	; 0x23b2 <action_macro_play+0x96>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    2394:	fe 01       	movw	r30, r28
    2396:	21 96       	adiw	r28, 0x01	; 1
    2398:	94 91       	lpm	r25, Z+
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    239a:	89 2f       	mov	r24, r25
    239c:	80 5e       	subi	r24, 0xE0	; 224
    239e:	88 30       	cpi	r24, 0x08	; 8
    23a0:	58 f4       	brcc	.+22     	; 0x23b8 <action_macro_play+0x9c>
                    del_weak_mods(MOD_BIT(macro));
    23a2:	97 70       	andi	r25, 0x07	; 7
    23a4:	8e 2d       	mov	r24, r14
    23a6:	01 c0       	rjmp	.+2      	; 0x23aa <action_macro_play+0x8e>
    23a8:	88 0f       	add	r24, r24
    23aa:	9a 95       	dec	r25
    23ac:	ea f7       	brpl	.-6      	; 0x23a8 <action_macro_play+0x8c>
    23ae:	0e 94 95 13 	call	0x272a	; 0x272a <del_weak_mods>
                    send_keyboard_report();
    23b2:	0e 94 b4 13 	call	0x2768	; 0x2768 <send_keyboard_report>
    23b6:	19 c0       	rjmp	.+50     	; 0x23ea <action_macro_play+0xce>
                } else {
                    unregister_code(macro);
    23b8:	89 2f       	mov	r24, r25
    23ba:	15 c0       	rjmp	.+42     	; 0x23e6 <action_macro_play+0xca>
                }
                break;
            case WAIT:
                MACRO_READ();
    23bc:	fe 01       	movw	r30, r28
    23be:	24 91       	lpm	r18, Z+
    23c0:	04 c0       	rjmp	.+8      	; 0x23ca <action_macro_play+0xae>
    23c2:	c6 01       	movw	r24, r12
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <action_macro_play+0xa8>
    23c8:	21 50       	subi	r18, 0x01	; 1
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    23ca:	22 23       	and	r18, r18
    23cc:	d1 f7       	brne	.-12     	; 0x23c2 <action_macro_play+0xa6>
                } else {
                    unregister_code(macro);
                }
                break;
            case WAIT:
                MACRO_READ();
    23ce:	21 96       	adiw	r28, 0x01	; 1
    23d0:	0c c0       	rjmp	.+24     	; 0x23ea <action_macro_play+0xce>
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
                break;
            case INTERVAL:
                interval = MACRO_READ();
    23d2:	fe 01       	movw	r30, r28
    23d4:	21 96       	adiw	r28, 0x01	; 1
    23d6:	14 91       	lpm	r17, Z+
    23d8:	08 c0       	rjmp	.+16     	; 0x23ea <action_macro_play+0xce>
                dprintf("INTERVAL(%u)\n", interval);
                break;
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    23da:	89 2f       	mov	r24, r25
    23dc:	0e 94 be 0a 	call	0x157c	; 0x157c <register_code>
    23e0:	04 c0       	rjmp	.+8      	; 0x23ea <action_macro_play+0xce>
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    23e2:	89 2f       	mov	r24, r25
    23e4:	8f 77       	andi	r24, 0x7F	; 127
    23e6:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <unregister_code>
    23ea:	21 2f       	mov	r18, r17
    23ec:	04 c0       	rjmp	.+8      	; 0x23f6 <action_macro_play+0xda>
    23ee:	c6 01       	movw	r24, r12
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	f1 f7       	brne	.-4      	; 0x23f0 <action_macro_play+0xd4>
    23f4:	21 50       	subi	r18, 0x01	; 1
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    23f6:	22 23       	and	r18, r18
    23f8:	09 f4       	brne	.+2      	; 0x23fc <action_macro_play+0xe0>
    23fa:	a3 cf       	rjmp	.-186    	; 0x2342 <action_macro_play+0x26>
    23fc:	f8 cf       	rjmp	.-16     	; 0x23ee <action_macro_play+0xd2>
    }
}
    23fe:	df 91       	pop	r29
    2400:	cf 91       	pop	r28
    2402:	1f 91       	pop	r17
    2404:	ff 90       	pop	r15
    2406:	ef 90       	pop	r14
    2408:	df 90       	pop	r13
    240a:	cf 90       	pop	r12
    240c:	08 95       	ret

0000240e <default_layer_debug>:
}

void default_layer_debug(void)
{
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}
    240e:	08 95       	ret

00002410 <layer_debug>:
}

void layer_debug(void)
{
    dprintf("%08lX(%u)", layer_state, biton32(layer_state));
}
    2410:	08 95       	ret

00002412 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    2412:	cf 92       	push	r12
    2414:	df 92       	push	r13
    2416:	ef 92       	push	r14
    2418:	ff 92       	push	r15
    241a:	0f 93       	push	r16
    241c:	1f 93       	push	r17
    241e:	cf 93       	push	r28
    2420:	df 93       	push	r29
    2422:	6c 01       	movw	r12, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    2424:	e0 90 69 01 	lds	r14, 0x0169
    2428:	f0 90 6a 01 	lds	r15, 0x016A
    242c:	00 91 6b 01 	lds	r16, 0x016B
    2430:	10 91 6c 01 	lds	r17, 0x016C
    2434:	80 91 6d 01 	lds	r24, 0x016D
    2438:	90 91 6e 01 	lds	r25, 0x016E
    243c:	a0 91 6f 01 	lds	r26, 0x016F
    2440:	b0 91 70 01 	lds	r27, 0x0170
    2444:	e8 2a       	or	r14, r24
    2446:	f9 2a       	or	r15, r25
    2448:	0a 2b       	or	r16, r26
    244a:	1b 2b       	or	r17, r27
    244c:	cf e1       	ldi	r28, 0x1F	; 31
    244e:	d0 e0       	ldi	r29, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    2450:	d8 01       	movw	r26, r16
    2452:	c7 01       	movw	r24, r14
    2454:	0c 2e       	mov	r0, r28
    2456:	04 c0       	rjmp	.+8      	; 0x2460 <layer_switch_get_action+0x4e>
    2458:	b6 95       	lsr	r27
    245a:	a7 95       	ror	r26
    245c:	97 95       	ror	r25
    245e:	87 95       	ror	r24
    2460:	0a 94       	dec	r0
    2462:	d2 f7       	brpl	.-12     	; 0x2458 <layer_switch_get_action+0x46>
    2464:	81 70       	andi	r24, 0x01	; 1
    2466:	90 70       	andi	r25, 0x00	; 0
    2468:	89 2b       	or	r24, r25
    246a:	41 f0       	breq	.+16     	; 0x247c <layer_switch_get_action+0x6a>
            action = action_for_key(i, key);
    246c:	8c 2f       	mov	r24, r28
    246e:	b6 01       	movw	r22, r12
    2470:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <action_for_key>
    2474:	9c 01       	movw	r18, r24
            if (action.code != ACTION_TRANSPARENT) {
    2476:	81 30       	cpi	r24, 0x01	; 1
    2478:	91 05       	cpc	r25, r1
    247a:	51 f4       	brne	.+20     	; 0x2490 <layer_switch_get_action+0x7e>
                return action;
    247c:	21 97       	sbiw	r28, 0x01	; 1
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
    247e:	8f ef       	ldi	r24, 0xFF	; 255
    2480:	cf 3f       	cpi	r28, 0xFF	; 255
    2482:	d8 07       	cpc	r29, r24
    2484:	29 f7       	brne	.-54     	; 0x2450 <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    2486:	80 e0       	ldi	r24, 0x00	; 0
    2488:	b6 01       	movw	r22, r12
    248a:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <action_for_key>
    248e:	9c 01       	movw	r18, r24
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    2490:	82 2f       	mov	r24, r18
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	1f 91       	pop	r17
    2498:	0f 91       	pop	r16
    249a:	ff 90       	pop	r15
    249c:	ef 90       	pop	r14
    249e:	df 90       	pop	r13
    24a0:	cf 90       	pop	r12
    24a2:	08 95       	ret

000024a4 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    24a4:	60 93 6d 01 	sts	0x016D, r22
    24a8:	70 93 6e 01 	sts	0x016E, r23
    24ac:	80 93 6f 01 	sts	0x016F, r24
    24b0:	90 93 70 01 	sts	0x0170, r25
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    24b4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <clear_keyboard_but_mods>
}
    24b8:	08 95       	ret

000024ba <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    24ba:	9b 01       	movw	r18, r22
    24bc:	ac 01       	movw	r20, r24
    layer_state_set(layer_state ^ state);
    24be:	60 91 6d 01 	lds	r22, 0x016D
    24c2:	70 91 6e 01 	lds	r23, 0x016E
    24c6:	80 91 6f 01 	lds	r24, 0x016F
    24ca:	90 91 70 01 	lds	r25, 0x0170
    24ce:	62 27       	eor	r22, r18
    24d0:	73 27       	eor	r23, r19
    24d2:	84 27       	eor	r24, r20
    24d4:	95 27       	eor	r25, r21
    24d6:	0e 94 52 12 	call	0x24a4	; 0x24a4 <layer_state_set>
}
    24da:	08 95       	ret

000024dc <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    24dc:	9b 01       	movw	r18, r22
    24de:	ac 01       	movw	r20, r24
    layer_state_set(layer_state & state);
    24e0:	60 91 6d 01 	lds	r22, 0x016D
    24e4:	70 91 6e 01 	lds	r23, 0x016E
    24e8:	80 91 6f 01 	lds	r24, 0x016F
    24ec:	90 91 70 01 	lds	r25, 0x0170
    24f0:	62 23       	and	r22, r18
    24f2:	73 23       	and	r23, r19
    24f4:	84 23       	and	r24, r20
    24f6:	95 23       	and	r25, r21
    24f8:	0e 94 52 12 	call	0x24a4	; 0x24a4 <layer_state_set>
}
    24fc:	08 95       	ret

000024fe <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    24fe:	9b 01       	movw	r18, r22
    2500:	ac 01       	movw	r20, r24
    layer_state_set(layer_state | state);
    2502:	60 91 6d 01 	lds	r22, 0x016D
    2506:	70 91 6e 01 	lds	r23, 0x016E
    250a:	80 91 6f 01 	lds	r24, 0x016F
    250e:	90 91 70 01 	lds	r25, 0x0170
    2512:	62 2b       	or	r22, r18
    2514:	73 2b       	or	r23, r19
    2516:	84 2b       	or	r24, r20
    2518:	95 2b       	or	r25, r21
    251a:	0e 94 52 12 	call	0x24a4	; 0x24a4 <layer_state_set>
}
    251e:	08 95       	ret

00002520 <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    2520:	21 e0       	ldi	r18, 0x01	; 1
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	40 e0       	ldi	r20, 0x00	; 0
    2526:	50 e0       	ldi	r21, 0x00	; 0
    2528:	04 c0       	rjmp	.+8      	; 0x2532 <layer_invert+0x12>
    252a:	22 0f       	add	r18, r18
    252c:	33 1f       	adc	r19, r19
    252e:	44 1f       	adc	r20, r20
    2530:	55 1f       	adc	r21, r21
    2532:	8a 95       	dec	r24
    2534:	d2 f7       	brpl	.-12     	; 0x252a <layer_invert+0xa>
    2536:	80 91 6d 01 	lds	r24, 0x016D
    253a:	90 91 6e 01 	lds	r25, 0x016E
    253e:	a0 91 6f 01 	lds	r26, 0x016F
    2542:	b0 91 70 01 	lds	r27, 0x0170
    2546:	28 27       	eor	r18, r24
    2548:	39 27       	eor	r19, r25
    254a:	4a 27       	eor	r20, r26
    254c:	5b 27       	eor	r21, r27
    254e:	ca 01       	movw	r24, r20
    2550:	b9 01       	movw	r22, r18
    2552:	0e 94 52 12 	call	0x24a4	; 0x24a4 <layer_state_set>
}
    2556:	08 95       	ret

00002558 <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    2558:	21 e0       	ldi	r18, 0x01	; 1
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	40 e0       	ldi	r20, 0x00	; 0
    255e:	50 e0       	ldi	r21, 0x00	; 0
    2560:	04 c0       	rjmp	.+8      	; 0x256a <layer_off+0x12>
    2562:	22 0f       	add	r18, r18
    2564:	33 1f       	adc	r19, r19
    2566:	44 1f       	adc	r20, r20
    2568:	55 1f       	adc	r21, r21
    256a:	8a 95       	dec	r24
    256c:	d2 f7       	brpl	.-12     	; 0x2562 <layer_off+0xa>
    256e:	20 95       	com	r18
    2570:	30 95       	com	r19
    2572:	40 95       	com	r20
    2574:	50 95       	com	r21
    2576:	80 91 6d 01 	lds	r24, 0x016D
    257a:	90 91 6e 01 	lds	r25, 0x016E
    257e:	a0 91 6f 01 	lds	r26, 0x016F
    2582:	b0 91 70 01 	lds	r27, 0x0170
    2586:	28 23       	and	r18, r24
    2588:	39 23       	and	r19, r25
    258a:	4a 23       	and	r20, r26
    258c:	5b 23       	and	r21, r27
    258e:	ca 01       	movw	r24, r20
    2590:	b9 01       	movw	r22, r18
    2592:	0e 94 52 12 	call	0x24a4	; 0x24a4 <layer_state_set>
}
    2596:	08 95       	ret

00002598 <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    2598:	21 e0       	ldi	r18, 0x01	; 1
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e0       	ldi	r20, 0x00	; 0
    259e:	50 e0       	ldi	r21, 0x00	; 0
    25a0:	04 c0       	rjmp	.+8      	; 0x25aa <layer_on+0x12>
    25a2:	22 0f       	add	r18, r18
    25a4:	33 1f       	adc	r19, r19
    25a6:	44 1f       	adc	r20, r20
    25a8:	55 1f       	adc	r21, r21
    25aa:	8a 95       	dec	r24
    25ac:	d2 f7       	brpl	.-12     	; 0x25a2 <layer_on+0xa>
    25ae:	80 91 6d 01 	lds	r24, 0x016D
    25b2:	90 91 6e 01 	lds	r25, 0x016E
    25b6:	a0 91 6f 01 	lds	r26, 0x016F
    25ba:	b0 91 70 01 	lds	r27, 0x0170
    25be:	28 2b       	or	r18, r24
    25c0:	39 2b       	or	r19, r25
    25c2:	4a 2b       	or	r20, r26
    25c4:	5b 2b       	or	r21, r27
    25c6:	ca 01       	movw	r24, r20
    25c8:	b9 01       	movw	r22, r18
    25ca:	0e 94 52 12 	call	0x24a4	; 0x24a4 <layer_state_set>
}
    25ce:	08 95       	ret

000025d0 <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    25d0:	21 e0       	ldi	r18, 0x01	; 1
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e0       	ldi	r20, 0x00	; 0
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	04 c0       	rjmp	.+8      	; 0x25e2 <layer_move+0x12>
    25da:	22 0f       	add	r18, r18
    25dc:	33 1f       	adc	r19, r19
    25de:	44 1f       	adc	r20, r20
    25e0:	55 1f       	adc	r21, r21
    25e2:	8a 95       	dec	r24
    25e4:	d2 f7       	brpl	.-12     	; 0x25da <layer_move+0xa>
    25e6:	ca 01       	movw	r24, r20
    25e8:	b9 01       	movw	r22, r18
    25ea:	0e 94 52 12 	call	0x24a4	; 0x24a4 <layer_state_set>
}
    25ee:	08 95       	ret

000025f0 <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    25f0:	60 e0       	ldi	r22, 0x00	; 0
    25f2:	70 e0       	ldi	r23, 0x00	; 0
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	0e 94 52 12 	call	0x24a4	; 0x24a4 <layer_state_set>
}
    25fc:	08 95       	ret

000025fe <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    25fe:	60 93 69 01 	sts	0x0169, r22
    2602:	70 93 6a 01 	sts	0x016A, r23
    2606:	80 93 6b 01 	sts	0x016B, r24
    260a:	90 93 6c 01 	sts	0x016C, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    260e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <clear_keyboard_but_mods>
}
    2612:	08 95       	ret

00002614 <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    2614:	9b 01       	movw	r18, r22
    2616:	ac 01       	movw	r20, r24
    default_layer_state_set(default_layer_state ^ state);
    2618:	60 91 69 01 	lds	r22, 0x0169
    261c:	70 91 6a 01 	lds	r23, 0x016A
    2620:	80 91 6b 01 	lds	r24, 0x016B
    2624:	90 91 6c 01 	lds	r25, 0x016C
    2628:	62 27       	eor	r22, r18
    262a:	73 27       	eor	r23, r19
    262c:	84 27       	eor	r24, r20
    262e:	95 27       	eor	r25, r21
    2630:	0e 94 ff 12 	call	0x25fe	; 0x25fe <default_layer_state_set>
}
    2634:	08 95       	ret

00002636 <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    2636:	9b 01       	movw	r18, r22
    2638:	ac 01       	movw	r20, r24
    default_layer_state_set(default_layer_state & state);
    263a:	60 91 69 01 	lds	r22, 0x0169
    263e:	70 91 6a 01 	lds	r23, 0x016A
    2642:	80 91 6b 01 	lds	r24, 0x016B
    2646:	90 91 6c 01 	lds	r25, 0x016C
    264a:	62 23       	and	r22, r18
    264c:	73 23       	and	r23, r19
    264e:	84 23       	and	r24, r20
    2650:	95 23       	and	r25, r21
    2652:	0e 94 ff 12 	call	0x25fe	; 0x25fe <default_layer_state_set>
}
    2656:	08 95       	ret

00002658 <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    2658:	9b 01       	movw	r18, r22
    265a:	ac 01       	movw	r20, r24
    default_layer_state_set(default_layer_state | state);
    265c:	60 91 69 01 	lds	r22, 0x0169
    2660:	70 91 6a 01 	lds	r23, 0x016A
    2664:	80 91 6b 01 	lds	r24, 0x016B
    2668:	90 91 6c 01 	lds	r25, 0x016C
    266c:	62 2b       	or	r22, r18
    266e:	73 2b       	or	r23, r19
    2670:	84 2b       	or	r24, r20
    2672:	95 2b       	or	r25, r21
    2674:	0e 94 ff 12 	call	0x25fe	; 0x25fe <default_layer_state_set>
}
    2678:	08 95       	ret

0000267a <add_key>:
    host_keyboard_send(keyboard_report);
}

/* key */
void add_key(uint8_t key)
{
    267a:	38 2f       	mov	r19, r24
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    267c:	a0 91 0c 01 	lds	r26, 0x010C
    2680:	b0 91 0d 01 	lds	r27, 0x010D
    2684:	fd 01       	movw	r30, r26
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	8f ef       	ldi	r24, 0xFF	; 255
    268a:	92 81       	ldd	r25, Z+2	; 0x02
    268c:	93 17       	cp	r25, r19
    268e:	91 f0       	breq	.+36     	; 0x26b4 <add_key+0x3a>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    2690:	8f 3f       	cpi	r24, 0xFF	; 255
    2692:	19 f4       	brne	.+6      	; 0x269a <add_key+0x20>
    2694:	99 23       	and	r25, r25
    2696:	09 f4       	brne	.+2      	; 0x269a <add_key+0x20>
    2698:	82 2f       	mov	r24, r18
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    269a:	2f 5f       	subi	r18, 0xFF	; 255
    269c:	31 96       	adiw	r30, 0x01	; 1
    269e:	26 30       	cpi	r18, 0x06	; 6
    26a0:	a1 f7       	brne	.-24     	; 0x268a <add_key+0x10>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    26a2:	8f 3f       	cpi	r24, 0xFF	; 255
    26a4:	39 f0       	breq	.+14     	; 0x26b4 <add_key+0x3a>
            keyboard_report->keys[empty] = code;
    26a6:	99 27       	eor	r25, r25
    26a8:	87 fd       	sbrc	r24, 7
    26aa:	90 95       	com	r25
    26ac:	a8 0f       	add	r26, r24
    26ae:	b9 1f       	adc	r27, r25
    26b0:	12 96       	adiw	r26, 0x02	; 2
    26b2:	3c 93       	st	X, r19
    26b4:	08 95       	ret

000026b6 <del_key>:
#endif
    add_key_byte(key);
}

void del_key(uint8_t key)
{
    26b6:	98 2f       	mov	r25, r24
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    26bc:	e0 91 0c 01 	lds	r30, 0x010C
    26c0:	f0 91 0d 01 	lds	r31, 0x010D
    26c4:	e2 0f       	add	r30, r18
    26c6:	f3 1f       	adc	r31, r19
    26c8:	82 81       	ldd	r24, Z+2	; 0x02
    26ca:	89 17       	cp	r24, r25
    26cc:	09 f4       	brne	.+2      	; 0x26d0 <del_key+0x1a>
            keyboard_report->keys[i] = 0;
    26ce:	12 82       	std	Z+2, r1	; 0x02
    26d0:	2f 5f       	subi	r18, 0xFF	; 255
    26d2:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    26d4:	26 30       	cpi	r18, 0x06	; 6
    26d6:	31 05       	cpc	r19, r1
    26d8:	89 f7       	brne	.-30     	; 0x26bc <del_key+0x6>
        del_key_bit(key);
        return;
    }
#endif
    del_key_byte(key);
}
    26da:	08 95       	ret

000026dc <clear_keys>:

void clear_keys(void)
{
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    26e0:	e0 91 0c 01 	lds	r30, 0x010C
    26e4:	f0 91 0d 01 	lds	r31, 0x010D
    26e8:	e8 0f       	add	r30, r24
    26ea:	f9 1f       	adc	r31, r25
    26ec:	10 82       	st	Z, r1
    26ee:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    26f0:	88 30       	cpi	r24, 0x08	; 8
    26f2:	91 05       	cpc	r25, r1
    26f4:	a9 f7       	brne	.-22     	; 0x26e0 <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    26f6:	08 95       	ret

000026f8 <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    26f8:	80 91 79 01 	lds	r24, 0x0179
    26fc:	08 95       	ret

000026fe <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    26fe:	90 91 79 01 	lds	r25, 0x0179
    2702:	98 2b       	or	r25, r24
    2704:	90 93 79 01 	sts	0x0179, r25
    2708:	08 95       	ret

0000270a <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    270a:	80 95       	com	r24
    270c:	90 91 79 01 	lds	r25, 0x0179
    2710:	98 23       	and	r25, r24
    2712:	90 93 79 01 	sts	0x0179, r25
    2716:	08 95       	ret

00002718 <clear_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
    2718:	10 92 79 01 	sts	0x0179, r1
    271c:	08 95       	ret

0000271e <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    271e:	90 91 7b 01 	lds	r25, 0x017B
    2722:	98 2b       	or	r25, r24
    2724:	90 93 7b 01 	sts	0x017B, r25
    2728:	08 95       	ret

0000272a <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    272a:	80 95       	com	r24
    272c:	90 91 7b 01 	lds	r25, 0x017B
    2730:	98 23       	and	r25, r24
    2732:	90 93 7b 01 	sts	0x017B, r25
    2736:	08 95       	ret

00002738 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    2738:	10 92 7b 01 	sts	0x017B, r1
    273c:	08 95       	ret

0000273e <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    273e:	80 93 7a 01 	sts	0x017A, r24
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = timer_read();
#endif
}
    2742:	08 95       	ret

00002744 <clear_oneshot_mods>:
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    2744:	10 92 7a 01 	sts	0x017A, r1
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = 0;
#endif
}
    2748:	08 95       	ret

0000274a <has_anykey>:

/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    274a:	e0 91 0c 01 	lds	r30, 0x010C
    274e:	f0 91 0d 01 	lds	r31, 0x010D
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	91 e0       	ldi	r25, 0x01	; 1
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    2756:	81 81       	ldd	r24, Z+1	; 0x01
    2758:	81 11       	cpse	r24, r1
            cnt++;
    275a:	2f 5f       	subi	r18, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    275c:	9f 5f       	subi	r25, 0xFF	; 255
    275e:	31 96       	adiw	r30, 0x01	; 1
    2760:	98 30       	cpi	r25, 0x08	; 8
    2762:	c9 f7       	brne	.-14     	; 0x2756 <has_anykey+0xc>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    2764:	82 2f       	mov	r24, r18
    2766:	08 95       	ret

00002768 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    2768:	e0 91 0c 01 	lds	r30, 0x010C
    276c:	f0 91 0d 01 	lds	r31, 0x010D
    2770:	80 91 79 01 	lds	r24, 0x0179
    2774:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    2776:	e0 91 0c 01 	lds	r30, 0x010C
    277a:	f0 91 0d 01 	lds	r31, 0x010D
    277e:	80 81       	ld	r24, Z
    2780:	90 91 7b 01 	lds	r25, 0x017B
    2784:	89 2b       	or	r24, r25
    2786:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    2788:	90 91 7a 01 	lds	r25, 0x017A
    278c:	99 23       	and	r25, r25
    278e:	69 f0       	breq	.+26     	; 0x27aa <send_keyboard_report+0x42>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    2790:	e0 91 0c 01 	lds	r30, 0x010C
    2794:	f0 91 0d 01 	lds	r31, 0x010D
    2798:	80 81       	ld	r24, Z
    279a:	89 2b       	or	r24, r25
    279c:	80 83       	st	Z, r24
        if (has_anykey()) {
    279e:	0e 94 a5 13 	call	0x274a	; 0x274a <has_anykey>
    27a2:	88 23       	and	r24, r24
    27a4:	11 f0       	breq	.+4      	; 0x27aa <send_keyboard_report+0x42>
            clear_oneshot_mods();
    27a6:	0e 94 a2 13 	call	0x2744	; 0x2744 <clear_oneshot_mods>
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    27aa:	80 91 0c 01 	lds	r24, 0x010C
    27ae:	90 91 0d 01 	lds	r25, 0x010D
    27b2:	0e 94 2a 09 	call	0x1254	; 0x1254 <host_keyboard_send>
}
    27b6:	08 95       	ret

000027b8 <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	08 95       	ret

000027be <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
}
    27be:	08 95       	ret

000027c0 <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    27c0:	0e 94 51 01 	call	0x2a2	; 0x2a2 <keymap_key_to_keycode>
    27c4:	28 2f       	mov	r18, r24
    switch (keycode) {
    27c6:	80 5c       	subi	r24, 0xC0	; 192
    27c8:	80 32       	cpi	r24, 0x20	; 32
    27ca:	20 f4       	brcc	.+8      	; 0x27d4 <action_for_key+0x14>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    27cc:	82 2f       	mov	r24, r18
    27ce:	0e 94 62 01 	call	0x2c4	; 0x2c4 <keymap_fn_to_action>
    27d2:	08 95       	ret

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action;
    switch (keycode) {
    27d4:	2d 3b       	cpi	r18, 0xBD	; 189
    27d6:	50 f4       	brcc	.+20     	; 0x27ec <action_for_key+0x2c>
    27d8:	28 3a       	cpi	r18, 0xA8	; 168
    27da:	28 f5       	brcc	.+74     	; 0x2826 <action_for_key+0x66>
    27dc:	25 3a       	cpi	r18, 0xA5	; 165
    27de:	b0 f4       	brcc	.+44     	; 0x280c <action_for_key+0x4c>
    27e0:	24 30       	cpi	r18, 0x04	; 4
    27e2:	80 f4       	brcc	.+32     	; 0x2804 <action_for_key+0x44>
    27e4:	21 30       	cpi	r18, 0x01	; 1
    27e6:	09 f0       	breq	.+2      	; 0x27ea <action_for_key+0x2a>
    27e8:	9e c0       	rjmp	.+316    	; 0x2926 <action_for_key+0x166>
    27ea:	8c c0       	rjmp	.+280    	; 0x2904 <action_for_key+0x144>
    27ec:	28 3e       	cpi	r18, 0xE8	; 232
    27ee:	30 f4       	brcc	.+12     	; 0x27fc <action_for_key+0x3c>
    27f0:	20 3e       	cpi	r18, 0xE0	; 224
    27f2:	40 f4       	brcc	.+16     	; 0x2804 <action_for_key+0x44>
    27f4:	2f 3b       	cpi	r18, 0xBF	; 191
    27f6:	09 f0       	breq	.+2      	; 0x27fa <action_for_key+0x3a>
    27f8:	96 c0       	rjmp	.+300    	; 0x2926 <action_for_key+0x166>
    27fa:	87 c0       	rjmp	.+270    	; 0x290a <action_for_key+0x14a>
    27fc:	20 3f       	cpi	r18, 0xF0	; 240
    27fe:	08 f4       	brcc	.+2      	; 0x2802 <action_for_key+0x42>
    2800:	92 c0       	rjmp	.+292    	; 0x2926 <action_for_key+0x166>
    2802:	7d c0       	rjmp	.+250    	; 0x28fe <action_for_key+0x13e>
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    2804:	82 2f       	mov	r24, r18
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	9c 01       	movw	r18, r24
    280a:	8f c0       	rjmp	.+286    	; 0x292a <action_for_key+0x16a>
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    280c:	25 3a       	cpi	r18, 0xA5	; 165
    280e:	19 f4       	brne	.+6      	; 0x2816 <action_for_key+0x56>
    2810:	21 e8       	ldi	r18, 0x81	; 129
    2812:	30 e4       	ldi	r19, 0x40	; 64
    2814:	8a c0       	rjmp	.+276    	; 0x292a <action_for_key+0x16a>
    2816:	26 3a       	cpi	r18, 0xA6	; 166
    2818:	19 f0       	breq	.+6      	; 0x2820 <action_for_key+0x60>
    281a:	23 e8       	ldi	r18, 0x83	; 131
    281c:	30 e4       	ldi	r19, 0x40	; 64
    281e:	85 c0       	rjmp	.+266    	; 0x292a <action_for_key+0x16a>
    2820:	22 e8       	ldi	r18, 0x82	; 130
    2822:	30 e4       	ldi	r19, 0x40	; 64
    2824:	82 c0       	rjmp	.+260    	; 0x292a <action_for_key+0x16a>
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    2826:	28 3a       	cpi	r18, 0xA8	; 168
    2828:	19 f4       	brne	.+6      	; 0x2830 <action_for_key+0x70>
    282a:	22 ee       	ldi	r18, 0xE2	; 226
    282c:	34 e4       	ldi	r19, 0x44	; 68
    282e:	7d c0       	rjmp	.+250    	; 0x292a <action_for_key+0x16a>
    2830:	29 3a       	cpi	r18, 0xA9	; 169
    2832:	19 f4       	brne	.+6      	; 0x283a <action_for_key+0x7a>
    2834:	29 ee       	ldi	r18, 0xE9	; 233
    2836:	34 e4       	ldi	r19, 0x44	; 68
    2838:	78 c0       	rjmp	.+240    	; 0x292a <action_for_key+0x16a>
    283a:	2a 3a       	cpi	r18, 0xAA	; 170
    283c:	19 f4       	brne	.+6      	; 0x2844 <action_for_key+0x84>
    283e:	2a ee       	ldi	r18, 0xEA	; 234
    2840:	34 e4       	ldi	r19, 0x44	; 68
    2842:	73 c0       	rjmp	.+230    	; 0x292a <action_for_key+0x16a>
    2844:	2b 3a       	cpi	r18, 0xAB	; 171
    2846:	19 f4       	brne	.+6      	; 0x284e <action_for_key+0x8e>
    2848:	25 eb       	ldi	r18, 0xB5	; 181
    284a:	34 e4       	ldi	r19, 0x44	; 68
    284c:	6e c0       	rjmp	.+220    	; 0x292a <action_for_key+0x16a>
    284e:	2c 3a       	cpi	r18, 0xAC	; 172
    2850:	19 f4       	brne	.+6      	; 0x2858 <action_for_key+0x98>
    2852:	26 eb       	ldi	r18, 0xB6	; 182
    2854:	34 e4       	ldi	r19, 0x44	; 68
    2856:	69 c0       	rjmp	.+210    	; 0x292a <action_for_key+0x16a>
    2858:	2b 3b       	cpi	r18, 0xBB	; 187
    285a:	19 f4       	brne	.+6      	; 0x2862 <action_for_key+0xa2>
    285c:	23 eb       	ldi	r18, 0xB3	; 179
    285e:	34 e4       	ldi	r19, 0x44	; 68
    2860:	64 c0       	rjmp	.+200    	; 0x292a <action_for_key+0x16a>
    2862:	2c 3b       	cpi	r18, 0xBC	; 188
    2864:	19 f4       	brne	.+6      	; 0x286c <action_for_key+0xac>
    2866:	24 eb       	ldi	r18, 0xB4	; 180
    2868:	34 e4       	ldi	r19, 0x44	; 68
    286a:	5f c0       	rjmp	.+190    	; 0x292a <action_for_key+0x16a>
    286c:	2d 3a       	cpi	r18, 0xAD	; 173
    286e:	19 f4       	brne	.+6      	; 0x2876 <action_for_key+0xb6>
    2870:	27 eb       	ldi	r18, 0xB7	; 183
    2872:	34 e4       	ldi	r19, 0x44	; 68
    2874:	5a c0       	rjmp	.+180    	; 0x292a <action_for_key+0x16a>
    2876:	20 3b       	cpi	r18, 0xB0	; 176
    2878:	19 f4       	brne	.+6      	; 0x2880 <action_for_key+0xc0>
    287a:	2c ec       	ldi	r18, 0xCC	; 204
    287c:	34 e4       	ldi	r19, 0x44	; 68
    287e:	55 c0       	rjmp	.+170    	; 0x292a <action_for_key+0x16a>
    2880:	2e 3a       	cpi	r18, 0xAE	; 174
    2882:	19 f4       	brne	.+6      	; 0x288a <action_for_key+0xca>
    2884:	2d ec       	ldi	r18, 0xCD	; 205
    2886:	34 e4       	ldi	r19, 0x44	; 68
    2888:	50 c0       	rjmp	.+160    	; 0x292a <action_for_key+0x16a>
    288a:	2f 3a       	cpi	r18, 0xAF	; 175
    288c:	19 f4       	brne	.+6      	; 0x2894 <action_for_key+0xd4>
    288e:	23 e8       	ldi	r18, 0x83	; 131
    2890:	35 e4       	ldi	r19, 0x45	; 69
    2892:	4b c0       	rjmp	.+150    	; 0x292a <action_for_key+0x16a>
    2894:	21 3b       	cpi	r18, 0xB1	; 177
    2896:	19 f4       	brne	.+6      	; 0x289e <action_for_key+0xde>
    2898:	2a e8       	ldi	r18, 0x8A	; 138
    289a:	35 e4       	ldi	r19, 0x45	; 69
    289c:	46 c0       	rjmp	.+140    	; 0x292a <action_for_key+0x16a>
    289e:	22 3b       	cpi	r18, 0xB2	; 178
    28a0:	19 f4       	brne	.+6      	; 0x28a8 <action_for_key+0xe8>
    28a2:	22 e9       	ldi	r18, 0x92	; 146
    28a4:	35 e4       	ldi	r19, 0x45	; 69
    28a6:	41 c0       	rjmp	.+130    	; 0x292a <action_for_key+0x16a>
    28a8:	23 3b       	cpi	r18, 0xB3	; 179
    28aa:	19 f4       	brne	.+6      	; 0x28b2 <action_for_key+0xf2>
    28ac:	24 e9       	ldi	r18, 0x94	; 148
    28ae:	35 e4       	ldi	r19, 0x45	; 69
    28b0:	3c c0       	rjmp	.+120    	; 0x292a <action_for_key+0x16a>
    28b2:	24 3b       	cpi	r18, 0xB4	; 180
    28b4:	19 f4       	brne	.+6      	; 0x28bc <action_for_key+0xfc>
    28b6:	21 e2       	ldi	r18, 0x21	; 33
    28b8:	36 e4       	ldi	r19, 0x46	; 70
    28ba:	37 c0       	rjmp	.+110    	; 0x292a <action_for_key+0x16a>
    28bc:	25 3b       	cpi	r18, 0xB5	; 181
    28be:	19 f4       	brne	.+6      	; 0x28c6 <action_for_key+0x106>
    28c0:	23 e2       	ldi	r18, 0x23	; 35
    28c2:	36 e4       	ldi	r19, 0x46	; 70
    28c4:	32 c0       	rjmp	.+100    	; 0x292a <action_for_key+0x16a>
    28c6:	26 3b       	cpi	r18, 0xB6	; 182
    28c8:	19 f4       	brne	.+6      	; 0x28d0 <action_for_key+0x110>
    28ca:	24 e2       	ldi	r18, 0x24	; 36
    28cc:	36 e4       	ldi	r19, 0x46	; 70
    28ce:	2d c0       	rjmp	.+90     	; 0x292a <action_for_key+0x16a>
    28d0:	27 3b       	cpi	r18, 0xB7	; 183
    28d2:	19 f4       	brne	.+6      	; 0x28da <action_for_key+0x11a>
    28d4:	25 e2       	ldi	r18, 0x25	; 37
    28d6:	36 e4       	ldi	r19, 0x46	; 70
    28d8:	28 c0       	rjmp	.+80     	; 0x292a <action_for_key+0x16a>
    28da:	28 3b       	cpi	r18, 0xB8	; 184
    28dc:	19 f4       	brne	.+6      	; 0x28e4 <action_for_key+0x124>
    28de:	26 e2       	ldi	r18, 0x26	; 38
    28e0:	36 e4       	ldi	r19, 0x46	; 70
    28e2:	23 c0       	rjmp	.+70     	; 0x292a <action_for_key+0x16a>
    28e4:	29 3b       	cpi	r18, 0xB9	; 185
    28e6:	19 f4       	brne	.+6      	; 0x28ee <action_for_key+0x12e>
    28e8:	27 e2       	ldi	r18, 0x27	; 39
    28ea:	36 e4       	ldi	r19, 0x46	; 70
    28ec:	1e c0       	rjmp	.+60     	; 0x292a <action_for_key+0x16a>
    28ee:	2a 3b       	cpi	r18, 0xBA	; 186
    28f0:	19 f0       	breq	.+6      	; 0x28f8 <action_for_key+0x138>
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	34 e4       	ldi	r19, 0x44	; 68
    28f6:	19 c0       	rjmp	.+50     	; 0x292a <action_for_key+0x16a>
    28f8:	2a e2       	ldi	r18, 0x2A	; 42
    28fa:	36 e4       	ldi	r19, 0x46	; 70
    28fc:	16 c0       	rjmp	.+44     	; 0x292a <action_for_key+0x16a>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	30 65       	ori	r19, 0x50	; 80
    2902:	13 c0       	rjmp	.+38     	; 0x292a <action_for_key+0x16a>
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    2904:	21 e0       	ldi	r18, 0x01	; 1
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	10 c0       	rjmp	.+32     	; 0x292a <action_for_key+0x16a>
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    290a:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <clear_keyboard>
    290e:	84 ef       	ldi	r24, 0xF4	; 244
    2910:	91 e0       	ldi	r25, 0x01	; 1
    2912:	20 e9       	ldi	r18, 0x90	; 144
    2914:	31 e0       	ldi	r19, 0x01	; 1
    2916:	f9 01       	movw	r30, r18
    2918:	31 97       	sbiw	r30, 0x01	; 1
    291a:	f1 f7       	brne	.-4      	; 0x2918 <action_for_key+0x158>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    291c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291e:	d9 f7       	brne	.-10     	; 0x2916 <action_for_key+0x156>
            wait_ms(50);
            bootloader_jump(); // not return
    2920:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <bootloader_jump>
    2924:	02 c0       	rjmp	.+4      	; 0x292a <action_for_key+0x16a>
            break;
        default:
            action.code = ACTION_NO;
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    292a:	c9 01       	movw	r24, r18
    }
}
    292c:	08 95       	ret

0000292e <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    292e:	80 91 86 01 	lds	r24, 0x0186
    2932:	84 30       	cpi	r24, 0x04	; 4
    2934:	09 f1       	breq	.+66     	; 0x2978 <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    2936:	10 92 7d 01 	sts	0x017D, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    293a:	20 e4       	ldi	r18, 0x40	; 64
    293c:	88 e1       	ldi	r24, 0x18	; 24
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	f8 94       	cli
    2944:	a8 95       	wdr
    2946:	80 93 60 00 	sts	0x0060, r24
    294a:	0f be       	out	0x3f, r0	; 63
    294c:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    2950:	83 b7       	in	r24, 0x33	; 51
    2952:	81 7f       	andi	r24, 0xF1	; 241
    2954:	84 60       	ori	r24, 0x04	; 4
    2956:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    2958:	83 b7       	in	r24, 0x33	; 51
    295a:	81 60       	ori	r24, 0x01	; 1
    295c:	83 bf       	out	0x33, r24	; 51
    sei();
    295e:	78 94       	sei
    sleep_cpu();
    2960:	88 95       	sleep
    sleep_disable();
    2962:	83 b7       	in	r24, 0x33	; 51
    2964:	8e 7f       	andi	r24, 0xFE	; 254
    2966:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    2968:	88 e1       	ldi	r24, 0x18	; 24
    296a:	0f b6       	in	r0, 0x3f	; 63
    296c:	f8 94       	cli
    296e:	80 93 60 00 	sts	0x0060, r24
    2972:	10 92 60 00 	sts	0x0060, r1
    2976:	0f be       	out	0x3f, r0	; 63
    2978:	08 95       	ret

0000297a <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    297a:	08 95       	ret

0000297c <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    297c:	08 95       	ret

0000297e <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    297e:	1f 92       	push	r1
    2980:	0f 92       	push	r0
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	0f 92       	push	r0
    2986:	11 24       	eor	r1, r1
    2988:	8f 93       	push	r24
    298a:	9f 93       	push	r25
    298c:	af 93       	push	r26
    298e:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    2990:	80 91 7d 01 	lds	r24, 0x017D
    2994:	88 23       	and	r24, r24
    2996:	99 f4       	brne	.+38     	; 0x29be <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    2998:	80 91 7e 01 	lds	r24, 0x017E
    299c:	90 91 7f 01 	lds	r25, 0x017F
    29a0:	a0 91 80 01 	lds	r26, 0x0180
    29a4:	b0 91 81 01 	lds	r27, 0x0181
    29a8:	41 96       	adiw	r24, 0x11	; 17
    29aa:	a1 1d       	adc	r26, r1
    29ac:	b1 1d       	adc	r27, r1
    29ae:	80 93 7e 01 	sts	0x017E, r24
    29b2:	90 93 7f 01 	sts	0x017F, r25
    29b6:	a0 93 80 01 	sts	0x0180, r26
    29ba:	b0 93 81 01 	sts	0x0181, r27
            break;
        default:
            ;
    }
}
    29be:	bf 91       	pop	r27
    29c0:	af 91       	pop	r26
    29c2:	9f 91       	pop	r25
    29c4:	8f 91       	pop	r24
    29c6:	0f 90       	pop	r0
    29c8:	0f be       	out	0x3f, r0	; 63
    29ca:	0f 90       	pop	r0
    29cc:	1f 90       	pop	r1
    29ce:	18 95       	reti

000029d0 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    29d0:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <clear_keyboard>
#ifdef BACKLIGHT_ENABLE
    backlight_init();
#endif
}
    29d4:	08 95       	ret

000029d6 <suspend_wakeup_condition>:
}

__attribute__ ((weak)) void matrix_power_up(void) {}
__attribute__ ((weak)) void matrix_power_down(void) {}
bool suspend_wakeup_condition(void)
{
    29d6:	1f 93       	push	r17
    matrix_power_up();
    29d8:	0e 94 bd 14 	call	0x297a	; 0x297a <matrix_power_up>
    matrix_scan();
    29dc:	0e 94 9d 01 	call	0x33a	; 0x33a <matrix_scan>
    matrix_power_down();
    29e0:	0e 94 be 14 	call	0x297c	; 0x297c <matrix_power_down>
    29e4:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    29e6:	81 2f       	mov	r24, r17
    29e8:	0e 94 74 01 	call	0x2e8	; 0x2e8 <matrix_get_row>
    29ec:	88 23       	and	r24, r24
    29ee:	11 f0       	breq	.+4      	; 0x29f4 <suspend_wakeup_condition+0x1e>
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	04 c0       	rjmp	.+8      	; 0x29fc <suspend_wakeup_condition+0x26>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    29f4:	1f 5f       	subi	r17, 0xFF	; 255
    29f6:	16 30       	cpi	r17, 0x06	; 6
    29f8:	b1 f7       	brne	.-20     	; 0x29e6 <suspend_wakeup_condition+0x10>
    29fa:	80 e0       	ldi	r24, 0x00	; 0
        if (matrix_get_row(r)) return true;
    }
    return false;
}
    29fc:	1f 91       	pop	r17
    29fe:	08 95       	ret

00002a00 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    2a00:	82 e0       	ldi	r24, 0x02	; 2
    2a02:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    2a04:	93 e0       	ldi	r25, 0x03	; 3
    2a06:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    2a08:	9a ef       	ldi	r25, 0xFA	; 250
    2a0a:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    2a0c:	80 93 6e 00 	sts	0x006E, r24
}
    2a10:	08 95       	ret

00002a12 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    2a12:	8f b7       	in	r24, 0x3f	; 63
    cli();
    2a14:	f8 94       	cli
    t = timer_count;
    2a16:	20 91 7e 01 	lds	r18, 0x017E
    2a1a:	30 91 7f 01 	lds	r19, 0x017F
    2a1e:	40 91 80 01 	lds	r20, 0x0180
    2a22:	50 91 81 01 	lds	r21, 0x0181
    SREG = sreg;
    2a26:	8f bf       	out	0x3f, r24	; 63

    return (t & 0xFFFF);
}
    2a28:	c9 01       	movw	r24, r18
    2a2a:	08 95       	ret

00002a2c <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    2a2c:	1f 92       	push	r1
    2a2e:	0f 92       	push	r0
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	0f 92       	push	r0
    2a34:	11 24       	eor	r1, r1
    2a36:	8f 93       	push	r24
    2a38:	9f 93       	push	r25
    2a3a:	af 93       	push	r26
    2a3c:	bf 93       	push	r27
    timer_count++;
    2a3e:	80 91 7e 01 	lds	r24, 0x017E
    2a42:	90 91 7f 01 	lds	r25, 0x017F
    2a46:	a0 91 80 01 	lds	r26, 0x0180
    2a4a:	b0 91 81 01 	lds	r27, 0x0181
    2a4e:	01 96       	adiw	r24, 0x01	; 1
    2a50:	a1 1d       	adc	r26, r1
    2a52:	b1 1d       	adc	r27, r1
    2a54:	80 93 7e 01 	sts	0x017E, r24
    2a58:	90 93 7f 01 	sts	0x017F, r25
    2a5c:	a0 93 80 01 	sts	0x0180, r26
    2a60:	b0 93 81 01 	sts	0x0181, r27
}
    2a64:	bf 91       	pop	r27
    2a66:	af 91       	pop	r26
    2a68:	9f 91       	pop	r25
    2a6a:	8f 91       	pop	r24
    2a6c:	0f 90       	pop	r0
    2a6e:	0f be       	out	0x3f, r0	; 63
    2a70:	0f 90       	pop	r0
    2a72:	1f 90       	pop	r1
    2a74:	18 95       	reti

00002a76 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    2a76:	0e 94 19 06 	call	0xc32	; 0xc32 <USB_Disable>
    cli();
    2a7a:	f8 94       	cli
    2a7c:	80 e2       	ldi	r24, 0x20	; 32
    2a7e:	9e e4       	ldi	r25, 0x4E	; 78
    2a80:	20 e9       	ldi	r18, 0x90	; 144
    2a82:	31 e0       	ldi	r19, 0x01	; 1
    2a84:	f9 01       	movw	r30, r18
    2a86:	31 97       	sbiw	r30, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <bootloader_jump+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a8c:	d9 f7       	brne	.-10     	; 0x2a84 <bootloader_jump+0xe>
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    2a8e:	87 e0       	ldi	r24, 0x07	; 7
    2a90:	90 eb       	ldi	r25, 0xB0	; 176
    2a92:	a7 e0       	ldi	r26, 0x07	; 7
    2a94:	b0 eb       	ldi	r27, 0xB0	; 176
    2a96:	80 93 8f 01 	sts	0x018F, r24
    2a9a:	90 93 90 01 	sts	0x0190, r25
    2a9e:	a0 93 91 01 	sts	0x0191, r26
    2aa2:	b0 93 92 01 	sts	0x0192, r27
    wdt_enable(WDTO_250MS);
    2aa6:	2c e0       	ldi	r18, 0x0C	; 12
    2aa8:	88 e1       	ldi	r24, 0x18	; 24
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	f8 94       	cli
    2ab0:	a8 95       	wdr
    2ab2:	80 93 60 00 	sts	0x0060, r24
    2ab6:	0f be       	out	0x3f, r0	; 63
    2ab8:	20 93 60 00 	sts	0x0060, r18
    2abc:	ff cf       	rjmp	.-2      	; 0x2abc <bootloader_jump+0x46>

00002abe <_exit>:
    2abe:	f8 94       	cli

00002ac0 <__stop_program>:
    2ac0:	ff cf       	rjmp	.-2      	; 0x2ac0 <__stop_program>
