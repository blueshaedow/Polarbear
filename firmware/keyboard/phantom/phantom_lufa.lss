
phantom_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00004438  000044cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004438  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000be  0080010e  0080010e  000044da  2**0
                  ALLOC
  3 .noinit       00000004  008001cc  008001cc  000044da  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  000044dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000008f  00000000  00000000  00004d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000008e0  00000000  00000000  00004e23  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000013ee  00000000  00000000  00005703  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000cbed  00000000  00000000  00006af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002ff1  00000000  00000000  000136de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000809a  00000000  00000000  000166cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000de0  00000000  00000000  0001e76c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003d78  00000000  00000000  0001f54c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00003ea7  00000000  00000000  000232c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b30  00000000  00000000  0002716b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

inline
bool matrix_is_on(uint8_t row, uint8_t col)
{
    return (matrix[row] & ((matrix_row_t)1<<col));
}
       0:	0c 94 bc 03 	jmp	0x778	; 0x778 <__ctors_end>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       4:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
       8:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
{
    driver = d;
}

host_driver_t *host_get_driver(void)
{
       c:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}

void debug_action(action_t action)
{
      10:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>

/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
void del_mods(uint8_t mods) { real_mods &= ~mods; }
void set_mods(uint8_t mods) { real_mods = mods; }
      14:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
    if (bits >> 8) { bits >>= 8; n += 8;}
    if (bits >> 4) { bits >>= 4; n += 4;}
    if (bits >> 2) { bits >>= 2; n += 2;}
    if (bits >> 1) { bits >>= 1; n += 1;}
    return n;
}
      18:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
    set_sleep_mode(SLEEP_MODE_IDLE);
    sleep_enable();
    sei();
    sleep_cpu();
    sleep_disable();
}
      1c:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
    TIMSK0 = (1<<OCIE0A);
}

inline
void timer_clear(void)
{
      20:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
{
    eeprom_write_word(EECONFIG_MAGIC, EECONFIG_MAGIC_NUMBER);
}

void eeconfig_disable(void)
{
      24:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      28:	0c 94 52 0c 	jmp	0x18a4	; 0x18a4 <__vector_10>
      2c:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      30:	0c 94 ba 1b 	jmp	0x3774	; 0x3774 <__vector_12>
      34:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      38:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      3c:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      40:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      44:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      48:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      4c:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      50:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      54:	0c 94 14 1c 	jmp	0x3828	; 0x3828 <__vector_21>
      58:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      5c:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      60:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      64:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      68:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      6c:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      70:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      74:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      78:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      7c:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      80:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      84:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      88:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      8c:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      90:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      94:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      98:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      9c:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      a0:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      a4:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      a8:	0c 94 00 04 	jmp	0x800	; 0x800 <__bad_interrupt>
      ac:	a4 05       	cpc	r26, r4
      ae:	a7 05       	cpc	r26, r7
      b0:	aa 05       	cpc	r26, r10
      b2:	ad 05       	cpc	r26, r13
      b4:	b0 05       	cpc	r27, r0
      b6:	b3 05       	cpc	r27, r3
      b8:	b6 05       	cpc	r27, r6
      ba:	b9 05       	cpc	r27, r9
      bc:	bc 05       	cpc	r27, r12
      be:	bf 05       	cpc	r27, r15
      c0:	c2 05       	cpc	r28, r2
      c2:	c5 05       	cpc	r28, r5
      c4:	c8 05       	cpc	r28, r8
      c6:	cb 05       	cpc	r28, r11
      c8:	ce 05       	cpc	r28, r14
      ca:	d1 05       	cpc	r29, r1
      cc:	d4 05       	cpc	r29, r4

000000ce <fn_actions>:
      ce:	f1 a1                                               ..

000000d0 <keymaps>:
      d0:	29 35 3a 3b 3c 3d 3e 3f 40 41 42 43 44 45 46 47     )5:;<=>?@ABCDEFG
      e0:	48 1e 1f 20 21 22 23 24 25 26 27 2d 2e 00 2a 49     H.. !"#$%&'-..*I
      f0:	4a 4b 2b 14 1a 08 15 17 1c 18 0c 12 13 2f 30 31     JK+........../01
     100:	4c 4d 4e c0 04 16 07 09 0a 0b 0d 0e 0f 33 34 00     LMN..........34.
     110:	28 00 00 00 e1 00 1d 1b 06 19 05 11 10 36 37 38     (............678
     120:	00 e5 00 52 00 e0 e3 e2 00 00 00 00 2c 00 00 e6     ...R........,...
     130:	e7 65 e4 50 51 4f 01 01 01 01 01 01 01 01 01 01     .e.PQO..........
     140:	01 01 01 01 01 01 a6 01 01 01 01 01 01 01 01 01     ................
     150:	a8 aa a9 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
     160:	01 ad ae ac ab af 01 01 01 01 01 01 01 01 01 01     ................
     170:	01 01 01 01 01 00 01 00 00 00 01 00 01 01 b2 01     ................
     180:	01 01 01 01 01 01 00 39 00 01 00 01 01 01 00 00     .......9........
     190:	00 00 01 00 00 01 01 01 01 01 01 01                 ............

0000019c <__c.1552>:
     19c:	25 30 32 58 3a 20 25 30 33 32 6c 62 0a 00           %02X: %032lb..

000001aa <__c.1549>:
     1aa:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
     1ba:	42 43 44 45 46 0a 00                                BCDEF..

000001c1 <__c.1494>:
     1c1:	0d 0a 00                                            ...

000001c4 <__c.1492>:
     1c4:	25 30 32 58 00                                      %02X.

000001c9 <__c.1490>:
     1c9:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

000001d3 <__c.4986>:
     1d3:	5b 73 5d 00                                         [s].

000001d7 <__c.4984>:
     1d7:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     1e7:	00                                                  .

000001e8 <__c.4982>:
     1e8:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     1f8:	00                                                  .

000001f9 <__c.4805>:
     1f9:	5b 57 5d 00                                         [W].

000001fd <__c.4801>:
     1fd:	5b 53 5d 00                                         [S].

00000201 <__c.4797>:
     201:	5b 52 5d 00                                         [R].

00000205 <__c.4792>:
     205:	5b 44 5d 00                                         [D].

00000209 <__c.4785>:
     209:	5b 43 5d 00                                         [C].

0000020d <KeyboardReport>:
     20d:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     21d:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     22d:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     23d:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

0000024c <ExtrakeyReport>:
     24c:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     25c:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     26c:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     27c:	10 95 01 81 00 c0                                   ......

00000282 <ConsoleReport>:
     282:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
     292:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

000002a2 <DeviceDescriptor>:
     2a2:	12 01 10 01 00 00 00 08 ed fe 57 60 01 00 01 02     ..........W`....
     2b2:	00 01                                               ..

000002b4 <ConfigurationDescriptor>:
     2b4:	09 02 5b 00 03 01 00 a0 32 09 04 00 00 01 03 01     ..[.....2.......
     2c4:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     2d4:	00 0a 09 04 01 00 01 03 00 00 00 09 21 11 01 00     ............!...
     2e4:	01 22 36 00 07 05 82 03 08 00 0a 09 04 02 00 02     ."6.............
     2f4:	03 00 00 00 09 21 11 01 00 01 22 20 00 07 05 83     .....!...." ....
     304:	03 20 00 01 07 05 03 03 20 00 01                    . ...... ..

0000030f <LanguageString>:
     30f:	04 03 09 04                                         ....

00000313 <ManufacturerString>:
     313:	0e 03 74 00 2e 00 6d 00 2e 00 6b 00 2e 00 00 00     ..t...m...k.....

00000323 <ProductString>:
     323:	10 03 50 00 68 00 61 00 6e 00 74 00 6f 00 6d 00     ..P.h.a.n.t.o.m.
     333:	00 00                                               ..

00000335 <__c.1703>:
     335:	0a 00                                               ..

00000337 <__c.1698>:
     337:	25 30 32 58 20 00                                   %02X .

0000033d <__c.1695>:
     33d:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     34d:	20 00                                                .

0000034f <__c.2058>:
     34f:	0a 00                                               ..

00000351 <__c.2056>:
     351:	25 30 32 58 00                                      %02X.

00000356 <__c.2054>:
     356:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led
     366:	3a 20 00                                            : .

00000369 <__c.2022>:
     369:	64 6f 6e 65 2e 0a 00                                done...

00000370 <__c.2016>:
     370:	62 6f 6f 67 6d 61 67 69 63 20 73 63 61 6e 3a 20     boogmagic scan: 
     380:	2e 2e 2e 20 00                                      ... .

00000385 <__c.2331>:
     385:	3f 00                                               ?.

00000387 <__c.2322>:
     387:	74 69 6d 65 72 5f 63 6f 75 6e 74 3a 20 25 30 34     timer_count: %04
     397:	6c 58 0a 00                                         lX..

0000039b <__c.2320>:
     39b:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     3ab:	58 0a 00                                            X..

000003ae <__c.2318>:
     3ae:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     3be:	6c 3a 20 25 58 0a 00                                l: %X..

000003c5 <__c.2316>:
     3c5:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     3d5:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

000003df <__c.2314>:
     3df:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

000003ed <__c.2311>:
     3ed:	47 43 43 3a 20 34 2e 33 2e 33 20 41 56 52 2d 4c     GCC: 4.3.3 AVR-L
     3fd:	49 42 43 3a 20 31 2e 36 2e 37 20 41 56 52 5f 41     IBC: 1.6.7 AVR_A
     40d:	52 43 48 3a 20 61 76 72 35 0a 00                    RCH: avr5..

00000418 <__c.2309>:
     418:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     428:	4f 54 4d 41 47 49 43 20 45 58 54 52 41 4b 45 59     OTMAGIC EXTRAKEY
     438:	20 43 4f 4e 53 4f 4c 45 20 43 4f 4d 4d 41 4e 44      CONSOLE COMMAND
     448:	20 35 31 32 0a 00                                    512..

0000044e <__c.2307>:
     44e:	42 55 49 4c 44 3a 20 75 6e 6b 6e 6f 77 6e 20 28     BUILD: unknown (
     45e:	31 36 3a 30 38 3a 30 30 20 44 65 63 20 31 31 20     16:08:00 Dec 11 
     46e:	32 30 31 35 29 0a 00                                2015)..

00000475 <__c.2305>:
     475:	56 49 44 3a 20 30 78 46 45 45 44 28 74 2e 6d 2e     VID: 0xFEED(t.m.
     485:	6b 2e 29 20 50 49 44 3a 20 30 78 36 30 35 37 28     k.) PID: 0x6057(
     495:	50 68 61 6e 74 6f 6d 29 20 56 45 52 3a 20 30 78     Phantom) VER: 0x
     4a5:	30 30 30 31 0a 00                                   0001..

000004ab <__c.2303>:
     4ab:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     4bb:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     4cb:	6f 72 20 50 68 61 6e 74 6f 6d 0a 00                 or Phantom..

000004d7 <__c.2301>:
     4d7:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

000004e6 <__c.2298>:
     4e6:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

000004f3 <__c.2296>:
     4f3:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

000004ff <__c.2293>:
     4ff:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

0000050f <__c.2291>:
     50f:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

0000051e <__c.2288>:
     51e:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

0000052c <__c.2286>:
     52c:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000539 <__c.2283>:
     539:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000545 <__c.2281>:
     545:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000552 <__c.2278>:
     552:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     562:	00                                                  .

00000563 <__c.2275>:
     563:	43 3e 20 00                                         C> .

00000567 <__c.2269>:
     567:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000572 <__c.2230>:
     572:	0a 00                                               ..

00000574 <__c.2228>:
     574:	25 75 00                                            %u.

00000577 <__c.2226>:
     577:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

0000057f <__c.2224>:
     57f:	0a 00                                               ..

00000581 <__c.2222>:
     581:	25 75 00                                            %u.

00000584 <__c.2220>:
     584:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     594:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

000005a0 <__c.2218>:
     5a0:	0a 00                                               ..

000005a2 <__c.2216>:
     5a2:	25 75 00                                            %u.

000005a5 <__c.2214>:
     5a5:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     5b5:	20 00                                                .

000005b7 <__c.2212>:
     5b7:	0a 00                                               ..

000005b9 <__c.2210>:
     5b9:	25 75 00                                            %u.

000005bc <__c.2208>:
     5bc:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

000005c6 <__c.2206>:
     5c6:	0a 00                                               ..

000005c8 <__c.2204>:
     5c8:	25 75 00                                            %u.

000005cb <__c.2202>:
     5cb:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     5db:	20 00                                                .

000005dd <__c.2200>:
     5dd:	0a 00                                               ..

000005df <__c.2198>:
     5df:	25 75 00                                            %u.

000005e2 <__c.2196>:
     5e2:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     5f2:	20 00                                                .

000005f4 <__c.2194>:
     5f4:	0a 00                                               ..

000005f6 <__c.2192>:
     5f6:	25 75 00                                            %u.

000005f9 <__c.2190>:
     5f9:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     609:	74 72 6f 6c 3a 20 00                                trol: .

00000610 <__c.2188>:
     610:	0a 00                                               ..

00000612 <__c.2186>:
     612:	25 75 00                                            %u.

00000615 <__c.2184>:
     615:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     625:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

0000062e <__c.2182>:
     62e:	0a 00                                               ..

00000630 <__c.2180>:
     630:	25 30 32 58 00                                      %02X.

00000635 <__c.2178>:
     635:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     645:	77 3a 20 00                                         w: .

00000649 <__c.2175>:
     649:	0a 00                                               ..

0000064b <__c.2173>:
     64b:	25 75 00                                            %u.

0000064e <__c.2171>:
     64e:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000657 <__c.2169>:
     657:	0a 00                                               ..

00000659 <__c.2167>:
     659:	25 75 00                                            %u.

0000065c <__c.2165>:
     65c:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000668 <__c.2163>:
     668:	0a 00                                               ..

0000066a <__c.2161>:
     66a:	25 75 00                                            %u.

0000066d <__c.2159>:
     66d:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000677 <__c.2157>:
     677:	0a 00                                               ..

00000679 <__c.2155>:
     679:	25 75 00                                            %u.

0000067c <__c.2153>:
     67c:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000686 <__c.2151>:
     686:	0a 00                                               ..

00000688 <__c.2149>:
     688:	25 30 32 58 00                                      %02X.

0000068d <__c.2147>:
     68d:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     69d:	3a 20 00                                            : .

000006a0 <__c.2144>:
     6a0:	0a 00                                               ..

000006a2 <__c.2142>:
     6a2:	25 75 00                                            %u.

000006a5 <__c.2140>:
     6a5:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

000006b5 <__c.2135>:
     6b5:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     6c5:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     6d5:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     6e5:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     6f5:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     705:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     715:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     725:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     735:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     745:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 00              r.e:.eeprom..

00000752 <__c.2360>:
     752:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     762:	43 2f 71 3a 09 71 75 69 74 0a 00                    C/q:.quit..

0000076d <__c.2396>:
     76d:	4c 25 64 0a 00                                      L%d..

00000772 <__c.2373>:
     772:	43 3e 20 00                                         C> .

00000776 <__c.2371>:
     776:	3f 00                                               ?.

00000778 <__ctors_end>:
     778:	11 24       	eor	r1, r1
     77a:	1f be       	out	0x3f, r1	; 63
     77c:	cf ef       	ldi	r28, 0xFF	; 255
     77e:	da e0       	ldi	r29, 0x0A	; 10
     780:	de bf       	out	0x3e, r29	; 62
     782:	cd bf       	out	0x3d, r28	; 61

00000784 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     784:	04 b6       	in	r0, 0x34	; 52
     786:	03 fe       	sbrs	r0, 3
     788:	24 c0       	rjmp	.+72     	; 0x7d2 <__do_copy_data>
     78a:	80 91 cc 01 	lds	r24, 0x01CC
     78e:	90 91 cd 01 	lds	r25, 0x01CD
     792:	a0 91 ce 01 	lds	r26, 0x01CE
     796:	b0 91 cf 01 	lds	r27, 0x01CF
     79a:	87 50       	subi	r24, 0x07	; 7
     79c:	90 4b       	sbci	r25, 0xB0	; 176
     79e:	a7 40       	sbci	r26, 0x07	; 7
     7a0:	b0 4b       	sbci	r27, 0xB0	; 176
     7a2:	b9 f4       	brne	.+46     	; 0x7d2 <__do_copy_data>
        reset_key = 0;
     7a4:	10 92 cc 01 	sts	0x01CC, r1
     7a8:	10 92 cd 01 	sts	0x01CD, r1
     7ac:	10 92 ce 01 	sts	0x01CE, r1
     7b0:	10 92 cf 01 	sts	0x01CF, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     7b4:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     7b6:	84 b7       	in	r24, 0x34	; 52
     7b8:	87 7f       	andi	r24, 0xF7	; 247
     7ba:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     7bc:	88 e1       	ldi	r24, 0x18	; 24
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	80 93 60 00 	sts	0x0060, r24
     7c6:	10 92 60 00 	sts	0x0060, r1
     7ca:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     7cc:	e0 e0       	ldi	r30, 0x00	; 0
     7ce:	ff e3       	ldi	r31, 0x3F	; 63
     7d0:	09 95       	icall

000007d2 <__do_copy_data>:
     7d2:	11 e0       	ldi	r17, 0x01	; 1
     7d4:	a0 e0       	ldi	r26, 0x00	; 0
     7d6:	b1 e0       	ldi	r27, 0x01	; 1
     7d8:	e8 e3       	ldi	r30, 0x38	; 56
     7da:	f4 e4       	ldi	r31, 0x44	; 68
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <.do_copy_data_start>

000007de <.do_copy_data_loop>:
     7de:	05 90       	lpm	r0, Z+
     7e0:	0d 92       	st	X+, r0

000007e2 <.do_copy_data_start>:
     7e2:	ae 30       	cpi	r26, 0x0E	; 14
     7e4:	b1 07       	cpc	r27, r17
     7e6:	d9 f7       	brne	.-10     	; 0x7de <.do_copy_data_loop>

000007e8 <__do_clear_bss>:
     7e8:	11 e0       	ldi	r17, 0x01	; 1
     7ea:	ae e0       	ldi	r26, 0x0E	; 14
     7ec:	b1 e0       	ldi	r27, 0x01	; 1
     7ee:	01 c0       	rjmp	.+2      	; 0x7f2 <.do_clear_bss_start>

000007f0 <.do_clear_bss_loop>:
     7f0:	1d 92       	st	X+, r1

000007f2 <.do_clear_bss_start>:
     7f2:	ac 3c       	cpi	r26, 0xCC	; 204
     7f4:	b1 07       	cpc	r27, r17
     7f6:	e1 f7       	brne	.-8      	; 0x7f0 <.do_clear_bss_loop>
     7f8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <main>
     7fc:	0c 94 1a 22 	jmp	0x4434	; 0x4434 <_exit>

00000800 <__bad_interrupt>:
     800:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000804 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     804:	ff 93       	push	r31
	push	ZL
     806:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     808:	e0 91 0e 01 	lds	r30, 0x010E
	lds	ZH, xfunc_out+1	;/
     80c:	f0 91 0f 01 	lds	r31, 0x010F
	sbiw	ZL, 0		;Skip if null
     810:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     812:	09 f0       	breq	.+2      	; 0x816 <xputc+0x12>
	icall
     814:	09 95       	icall
2:	pop	ZL
     816:	ef 91       	pop	r30
	pop	ZH
     818:	ff 91       	pop	r31
	ret
     81a:	08 95       	ret

0000081c <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     81c:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     81e:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     820:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     822:	11 f0       	breq	.+4      	; 0x828 <xputs+0xc>
	rcall	xputc
     824:	ef df       	rcall	.-34     	; 0x804 <xputc>
	rjmp	1b
     826:	fb cf       	rjmp	.-10     	; 0x81e <xputs+0x2>
2:	ret
     828:	08 95       	ret

0000082a <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     82a:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     82c:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     82e:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     830:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     832:	0c c0       	rjmp	.+24     	; 0x84c <xitoa+0x22>
	neg	r20		;
     834:	41 95       	neg	r20
	sbrs	r25, 7		;
     836:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     838:	09 c0       	rjmp	.+18     	; 0x84c <xitoa+0x22>
	ldi	r30, '-'	;
     83a:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     83c:	60 95       	com	r22
	com	r23		;
     83e:	70 95       	com	r23
	com	r24		;
     840:	80 95       	com	r24
	com	r25		;
     842:	90 95       	com	r25
	adc	r22, r1		;
     844:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     846:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     848:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     84a:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     84c:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     84e:	02 c0       	rjmp	.+4      	; 0x854 <xitoa+0x2a>
	neg	r18		;
     850:	21 95       	neg	r18
	ldi	r19, '0'	;/
     852:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     854:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     856:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     858:	66 0f       	add	r22, r22
	rol	r23		;
     85a:	77 1f       	adc	r23, r23
	rol	r24		;
     85c:	88 1f       	adc	r24, r24
	rol	r25		;
     85e:	99 1f       	adc	r25, r25
	rol	r26		;
     860:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     862:	a4 17       	cp	r26, r20
	brcs	3f		;
     864:	10 f0       	brcs	.+4      	; 0x86a <xitoa+0x40>
	sub	r26, r20	;
     866:	a4 1b       	sub	r26, r20
	inc	r22		;
     868:	63 95       	inc	r22
3:	dec	r21		;
     86a:	5a 95       	dec	r21
	brne	2b		;/
     86c:	a9 f7       	brne	.-22     	; 0x858 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     86e:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     870:	08 f0       	brcs	.+2      	; 0x874 <xitoa+0x4a>
	subi	r26, -7		;
     872:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     874:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     876:	af 93       	push	r26
	inc	r31		;/
     878:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     87a:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     87c:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     87e:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     880:	91 05       	cpc	r25, r1
	brne	1b		;/
     882:	41 f7       	brne	.-48     	; 0x854 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     884:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     886:	11 f4       	brne	.+4      	; 0x88c <xitoa+0x62>
	push	r30		;
     888:	ef 93       	push	r30
	inc	r31		;/
     88a:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     88c:	f2 17       	cp	r31, r18
	brcc	6f		;
     88e:	18 f4       	brcc	.+6      	; 0x896 <xitoa+0x6c>
	push	r19		;
     890:	3f 93       	push	r19
	inc	r31		;
     892:	f3 95       	inc	r31
	rjmp	5b		;/
     894:	fb cf       	rjmp	.-10     	; 0x88c <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     896:	8f 91       	pop	r24
	rcall	xputc		;
     898:	b5 df       	rcall	.-150    	; 0x804 <xputc>
	dec	r31		;
     89a:	fa 95       	dec	r31
	brne	6b		;/
     89c:	e1 f7       	brne	.-8      	; 0x896 <xitoa+0x6c>

	ret
     89e:	08 95       	ret

000008a0 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     8a0:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     8a2:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     8a4:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     8a6:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     8a8:	21 f0       	breq	.+8      	; 0x8b2 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     8aa:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     8ac:	19 f0       	breq	.+6      	; 0x8b4 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     8ae:	aa df       	rcall	.-172    	; 0x804 <xputc>
	rjmp	0b		;/
     8b0:	f9 cf       	rjmp	.-14     	; 0x8a4 <xvprintf+0x4>
90:	ret
     8b2:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     8b4:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     8b6:	e8 94       	clt
	_LPMI	r21		;Get flags
     8b8:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     8ba:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     8bc:	c1 f3       	breq	.-16     	; 0x8ae <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     8be:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     8c0:	11 f4       	brne	.+4      	; 0x8c6 <xvprintf+0x26>
	set			;/
     8c2:	68 94       	set
22:	_LPMI	r21		;Get width
     8c4:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     8c6:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     8c8:	48 f4       	brcc	.+18     	; 0x8dc <xvprintf+0x3c>
	subi	r21, '0'	;
     8ca:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     8cc:	90 f3       	brcs	.-28     	; 0x8b2 <xvprintf+0x12>
	lsl	r18		;
     8ce:	22 0f       	add	r18, r18
	mov	r0, r18		;
     8d0:	02 2e       	mov	r0, r18
	lsl	r18		;
     8d2:	22 0f       	add	r18, r18
	lsl	r18		;
     8d4:	22 0f       	add	r18, r18
	add	r18, r0		;
     8d6:	20 0d       	add	r18, r0
	add	r18, r21	;
     8d8:	25 0f       	add	r18, r21
	rjmp	22b		;/
     8da:	f4 cf       	rjmp	.-24     	; 0x8c4 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     8dc:	0e f4       	brtc	.+2      	; 0x8e0 <xvprintf+0x40>
	neg	r18		;
     8de:	21 95       	neg	r18
25:	ld	r24, Y+		;
     8e0:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     8e2:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     8e4:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     8e6:	19 f3       	breq	.-58     	; 0x8ae <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     8e8:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     8ea:	29 f1       	breq	.+74     	; 0x936 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     8ec:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     8ee:	59 f1       	breq	.+86     	; 0x946 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     8f0:	bc 01       	movw	r22, r24
	clr	r24		;
     8f2:	88 27       	eor	r24, r24
	clr	r25		;
     8f4:	99 27       	eor	r25, r25
	clt			;/
     8f6:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     8f8:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     8fa:	21 f4       	brne	.+8      	; 0x904 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     8fc:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     8fe:	99 91       	ld	r25, Y+
	set			;
     900:	68 94       	set
	_LPMI	r21		;/
     902:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     904:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     906:	39 f4       	brne	.+14     	; 0x916 <xvprintf+0x76>
	ldi	r20, -10	;
     908:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     90a:	7e f0       	brts	.+30     	; 0x92a <xvprintf+0x8a>
	sbrs	r23, 7		;
     90c:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     90e:	0d c0       	rjmp	.+26     	; 0x92a <xvprintf+0x8a>
	ldi	r24, -1		;
     910:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     912:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     914:	0a c0       	rjmp	.+20     	; 0x92a <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     916:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     918:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     91a:	39 f0       	breq	.+14     	; 0x92a <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     91c:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     91e:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     920:	21 f0       	breq	.+8      	; 0x92a <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     922:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     924:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     926:	09 f0       	breq	.+2      	; 0x92a <xvprintf+0x8a>
	ret			;abort
     928:	08 95       	ret
40:	push	ZH		;Output the value
     92a:	ff 93       	push	r31
	push	ZL		;
     92c:	ef 93       	push	r30
	rcall	xitoa		;
     92e:	7d df       	rcall	.-262    	; 0x82a <xitoa>
42:	pop	ZL		;
     930:	ef 91       	pop	r30
	pop	ZH		;
     932:	ff 91       	pop	r31
	rjmp	0b		;/
     934:	b7 cf       	rjmp	.-146    	; 0x8a4 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     936:	ff 93       	push	r31
	push	ZL
     938:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     93a:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     93c:	81 91       	ld	r24, Z+
	cpi	r24, 0
     93e:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     940:	b9 f3       	breq	.-18     	; 0x930 <xvprintf+0x90>
	rcall	xputc
     942:	60 df       	rcall	.-320    	; 0x804 <xputc>
	rjmp	51b
     944:	fb cf       	rjmp	.-10     	; 0x93c <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     946:	ff 93       	push	r31
	push	ZL
     948:	ef 93       	push	r30
	rcall	xputs
     94a:	68 df       	rcall	.-304    	; 0x81c <xputs>
	rjmp	42b
     94c:	f1 cf       	rjmp	.-30     	; 0x930 <xvprintf+0x90>

0000094e <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     94e:	df 93       	push	r29
	push	YL
     950:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     952:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     954:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     956:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     958:	a3 df       	rcall	.-186    	; 0x8a0 <xvprintf>
	pop	YL
     95a:	cf 91       	pop	r28
	pop	YH
     95c:	df 91       	pop	r29
	ret
     95e:	08 95       	ret

00000960 <keymap_key_to_keycode>:
#define KEYMAPS_SIZE    (sizeof(keymaps) / sizeof(keymaps[0]))
#define FN_ACTIONS_SIZE (sizeof(fn_actions) / sizeof(fn_actions[0]))

/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
     960:	28 2f       	mov	r18, r24
     962:	86 2f       	mov	r24, r22
     964:	90 e0       	ldi	r25, 0x00	; 0
    if (layer < KEYMAPS_SIZE) {
     966:	22 30       	cpi	r18, 0x02	; 2
     968:	80 f4       	brcc	.+32     	; 0x98a <keymap_key_to_keycode+0x2a>
        return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
     96a:	e1 e1       	ldi	r30, 0x11	; 17
     96c:	7e 9f       	mul	r23, r30
     96e:	f0 01       	movw	r30, r0
     970:	11 24       	eor	r1, r1
     972:	e8 0f       	add	r30, r24
     974:	f9 1f       	adc	r31, r25
     976:	86 e6       	ldi	r24, 0x66	; 102
     978:	28 9f       	mul	r18, r24
     97a:	c0 01       	movw	r24, r0
     97c:	11 24       	eor	r1, r1
     97e:	e8 0f       	add	r30, r24
     980:	f9 1f       	adc	r31, r25
     982:	e0 53       	subi	r30, 0x30	; 48
     984:	ff 4f       	sbci	r31, 0xFF	; 255
     986:	84 91       	lpm	r24, Z+
     988:	08 95       	ret
    } else {
        // fall back to layer 0
        return pgm_read_byte(&keymaps[0][(key.row)][(key.col)]);
     98a:	e1 e1       	ldi	r30, 0x11	; 17
     98c:	7e 9f       	mul	r23, r30
     98e:	f0 01       	movw	r30, r0
     990:	11 24       	eor	r1, r1
     992:	e8 0f       	add	r30, r24
     994:	f9 1f       	adc	r31, r25
     996:	e0 53       	subi	r30, 0x30	; 48
     998:	ff 4f       	sbci	r31, 0xFF	; 255
     99a:	84 91       	lpm	r24, Z+
    }
}
     99c:	08 95       	ret

0000099e <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    action_t action;
    if (FN_INDEX(keycode) < FN_ACTIONS_SIZE) {
     99e:	80 3c       	cpi	r24, 0xC0	; 192
     9a0:	29 f4       	brne	.+10     	; 0x9ac <keymap_fn_to_action+0xe>
        action.code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]);
     9a2:	ee ec       	ldi	r30, 0xCE	; 206
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	25 91       	lpm	r18, Z+
     9a8:	34 91       	lpm	r19, Z+
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <keymap_fn_to_action+0x12>
    } else {
        action.code = ACTION_NO;
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	30 e0       	ldi	r19, 0x00	; 0
    }
    return action;
}
     9b0:	c9 01       	movw	r24, r18
     9b2:	08 95       	ret

000009b4 <matrix_get_row>:

inline
matrix_row_t matrix_get_row(uint8_t row)
{
     9b4:	e8 2f       	mov	r30, r24
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	ee 0f       	add	r30, r30
     9ba:	ff 1f       	adc	r31, r31
     9bc:	ee 0f       	add	r30, r30
     9be:	ff 1f       	adc	r31, r31
     9c0:	e0 5f       	subi	r30, 0xF0	; 240
     9c2:	fe 4f       	sbci	r31, 0xFE	; 254
     9c4:	60 81       	ld	r22, Z
     9c6:	71 81       	ldd	r23, Z+1	; 0x01
    return matrix[row];
}
     9c8:	82 81       	ldd	r24, Z+2	; 0x02
     9ca:	93 81       	ldd	r25, Z+3	; 0x03
     9cc:	08 95       	ret

000009ce <unselect_cols>:
 * pin: D5  C7  C6  D4  D0  E6  F0  F1  F4  F5  F6  F7  D7  D6  D1  D2  D3
 */
static void unselect_cols(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRC  |= 0b11000000; // PC: 7 6
     9ce:	87 b1       	in	r24, 0x07	; 7
     9d0:	80 6c       	ori	r24, 0xC0	; 192
     9d2:	87 b9       	out	0x07, r24	; 7
    PORTC |= 0b11000000;
     9d4:	88 b1       	in	r24, 0x08	; 8
     9d6:	80 6c       	ori	r24, 0xC0	; 192
     9d8:	88 b9       	out	0x08, r24	; 8
    DDRD  |= 0b11111111; // PD: 7 6 5 4 3 2 1 0
     9da:	8a b1       	in	r24, 0x0a	; 10
     9dc:	8f ef       	ldi	r24, 0xFF	; 255
     9de:	8a b9       	out	0x0a, r24	; 10
    PORTD |= 0b11111111;
     9e0:	9b b1       	in	r25, 0x0b	; 11
     9e2:	8b b9       	out	0x0b, r24	; 11
    DDRE  |= 0b01000000; // PE: 6
     9e4:	6e 9a       	sbi	0x0d, 6	; 13
    PORTE |= 0b01000000;
     9e6:	76 9a       	sbi	0x0e, 6	; 14
    DDRF  |= 0b11110011; // PF: 7 6 5 4 1 0
     9e8:	80 b3       	in	r24, 0x10	; 16
     9ea:	83 6f       	ori	r24, 0xF3	; 243
     9ec:	80 bb       	out	0x10, r24	; 16
    PORTF |= 0b11110011;
     9ee:	81 b3       	in	r24, 0x11	; 17
     9f0:	83 6f       	ori	r24, 0xF3	; 243
     9f2:	81 bb       	out	0x11, r24	; 17
}
     9f4:	08 95       	ret

000009f6 <matrix_init>:
}

void matrix_init(void)
{
    // To use PORTF disable JTAG with writing JTD bit twice within four cycles.
    MCUCR |= (1<<JTD);
     9f6:	85 b7       	in	r24, 0x35	; 53
     9f8:	80 68       	ori	r24, 0x80	; 128
     9fa:	85 bf       	out	0x35, r24	; 53
    MCUCR |= (1<<JTD);
     9fc:	85 b7       	in	r24, 0x35	; 53
     9fe:	80 68       	ori	r24, 0x80	; 128
     a00:	85 bf       	out	0x35, r24	; 53
	
    // initialize row and col
    unselect_cols();
     a02:	0e 94 e7 04 	call	0x9ce	; 0x9ce <unselect_cols>
 * pin: B5  B4  B3  B2  B1  B0
 */
static void init_rows(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRB  &= ~0b00111111;
     a06:	84 b1       	in	r24, 0x04	; 4
     a08:	80 7c       	andi	r24, 0xC0	; 192
     a0a:	84 b9       	out	0x04, r24	; 4
    PORTB |= 0b00111111;
     a0c:	85 b1       	in	r24, 0x05	; 5
     a0e:	8f 63       	ori	r24, 0x3F	; 63
     a10:	85 b9       	out	0x05, r24	; 5
   reaches the value in the output compare register,
   and are turned on when it reaches TOP (=256). */
static
void setup_leds(void)
{
    TCCR1A |=      // Timer control register 1A
     a12:	80 91 80 00 	lds	r24, 0x0080
     a16:	89 62       	ori	r24, 0x29	; 41
     a18:	80 93 80 00 	sts	0x0080, r24
        (1<<WGM10) | // Fast PWM 8-bit
        (1<<COM1B1)| // Clear OC1B on match, set at TOP
        (1<<COM1C1); // Clear OC1C on match, set at TOP
    TCCR1B |=      // Timer control register 1B
     a1c:	80 91 81 00 	lds	r24, 0x0081
     a20:	8c 60       	ori	r24, 0x0C	; 12
     a22:	80 93 81 00 	sts	0x0081, r24
        (1<<WGM12) | // Fast PWM 8-bit
        (1<<CS12);   // Prescaler 256
    OCR1B = LED_BRIGHTNESS;    // Output compare register 1B
     a26:	8a ef       	ldi	r24, 0xFA	; 250
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	90 93 8b 00 	sts	0x008B, r25
     a2e:	80 93 8a 00 	sts	0x008A, r24
    OCR1C = LED_BRIGHTNESS;    // Output compare register 1C
     a32:	90 93 8d 00 	sts	0x008D, r25
     a36:	80 93 8c 00 	sts	0x008C, r24
    // LEDs: LED_A -> PORTB6, LED_B -> PORTB7
    DDRB  |= (1<<6) | (1<<7);
     a3a:	84 b1       	in	r24, 0x04	; 4
     a3c:	80 6c       	ori	r24, 0xC0	; 192
     a3e:	84 b9       	out	0x04, r24	; 4
    PORTB  &= ~((1<<6) | (1<<7));
     a40:	85 b1       	in	r24, 0x05	; 5
     a42:	8f 73       	andi	r24, 0x3F	; 63
     a44:	85 b9       	out	0x05, r24	; 5
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	90 e0       	ldi	r25, 0x00	; 0
    setup_leds();
#endif

    // initialize matrix state: all keys off
    for (uint8_t i = 0; i < MATRIX_ROWS; i++)  {
        matrix[i] = 0;
     a4a:	fc 01       	movw	r30, r24
     a4c:	e0 5f       	subi	r30, 0xF0	; 240
     a4e:	fe 4f       	sbci	r31, 0xFE	; 254
     a50:	10 82       	st	Z, r1
     a52:	11 82       	std	Z+1, r1	; 0x01
     a54:	12 82       	std	Z+2, r1	; 0x02
     a56:	13 82       	std	Z+3, r1	; 0x03
        matrix_debouncing[i] = 0;
     a58:	fc 01       	movw	r30, r24
     a5a:	e8 5d       	subi	r30, 0xD8	; 216
     a5c:	fe 4f       	sbci	r31, 0xFE	; 254
     a5e:	10 82       	st	Z, r1
     a60:	11 82       	std	Z+1, r1	; 0x01
     a62:	12 82       	std	Z+2, r1	; 0x02
     a64:	13 82       	std	Z+3, r1	; 0x03
     a66:	04 96       	adiw	r24, 0x04	; 4
#ifndef SLEEP_LED_ENABLE
    setup_leds();
#endif

    // initialize matrix state: all keys off
    for (uint8_t i = 0; i < MATRIX_ROWS; i++)  {
     a68:	88 31       	cpi	r24, 0x18	; 24
     a6a:	91 05       	cpc	r25, r1
     a6c:	71 f7       	brne	.-36     	; 0xa4a <matrix_init+0x54>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
     a6e:	08 95       	ret

00000a70 <matrix_print>:
{
    return matrix[row];
}

void matrix_print(void)
{
     a70:	ef 92       	push	r14
     a72:	ff 92       	push	r15
     a74:	0f 93       	push	r16
     a76:	1f 93       	push	r17
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
     a7c:	8a ea       	ldi	r24, 0xAA	; 170
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
     a84:	00 e1       	ldi	r16, 0x10	; 16
     a86:	11 e0       	ldi	r17, 0x01	; 1
     a88:	c0 e0       	ldi	r28, 0x00	; 0
     a8a:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        xprintf("%02X: %032lb\n", row, bitrev32(matrix_get_row(row)));
     a8c:	2c e9       	ldi	r18, 0x9C	; 156
     a8e:	e2 2e       	mov	r14, r18
     a90:	21 e0       	ldi	r18, 0x01	; 1
     a92:	f2 2e       	mov	r15, r18
     a94:	d8 01       	movw	r26, r16
     a96:	6d 91       	ld	r22, X+
     a98:	7d 91       	ld	r23, X+
     a9a:	8d 91       	ld	r24, X+
     a9c:	9d 91       	ld	r25, X+
     a9e:	8d 01       	movw	r16, r26
     aa0:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <bitrev32>
     aa4:	ed b7       	in	r30, 0x3d	; 61
     aa6:	fe b7       	in	r31, 0x3e	; 62
     aa8:	38 97       	sbiw	r30, 0x08	; 8
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	fe bf       	out	0x3e, r31	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	ed bf       	out	0x3d, r30	; 61
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	ad b7       	in	r26, 0x3d	; 61
     ab8:	be b7       	in	r27, 0x3e	; 62
     aba:	12 96       	adiw	r26, 0x02	; 2
     abc:	fc 92       	st	X, r15
     abe:	ee 92       	st	-X, r14
     ac0:	11 97       	sbiw	r26, 0x01	; 1
     ac2:	d3 83       	std	Z+3, r29	; 0x03
     ac4:	c2 83       	std	Z+2, r28	; 0x02
     ac6:	64 83       	std	Z+4, r22	; 0x04
     ac8:	75 83       	std	Z+5, r23	; 0x05
     aca:	86 83       	std	Z+6, r24	; 0x06
     acc:	97 83       	std	Z+7, r25	; 0x07
     ace:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
     ad2:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
     ad4:	ed b7       	in	r30, 0x3d	; 61
     ad6:	fe b7       	in	r31, 0x3e	; 62
     ad8:	38 96       	adiw	r30, 0x08	; 8
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	f8 94       	cli
     ade:	fe bf       	out	0x3e, r31	; 62
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	ed bf       	out	0x3d, r30	; 61
     ae4:	c6 30       	cpi	r28, 0x06	; 6
     ae6:	d1 05       	cpc	r29, r1
     ae8:	a9 f6       	brne	.-86     	; 0xa94 <matrix_print+0x24>
        xprintf("%02X: %032lb\n", row, bitrev32(matrix_get_row(row)));
    }
}
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	ff 90       	pop	r15
     af4:	ef 90       	pop	r14
     af6:	08 95       	ret

00000af8 <matrix_scan>:
        matrix_debouncing[i] = 0;
    }
}

uint8_t matrix_scan(void)
{
     af8:	2f 92       	push	r2
     afa:	3f 92       	push	r3
     afc:	4f 92       	push	r4
     afe:	5f 92       	push	r5
     b00:	6f 92       	push	r6
     b02:	7f 92       	push	r7
     b04:	8f 92       	push	r8
     b06:	9f 92       	push	r9
     b08:	af 92       	push	r10
     b0a:	bf 92       	push	r11
     b0c:	cf 92       	push	r12
     b0e:	df 92       	push	r13
     b10:	ef 92       	push	r14
     b12:	ff 92       	push	r15
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	aa 24       	eor	r10, r10
     b1e:	bb 24       	eor	r11, r11
        uint8_t rows = read_rows();
        for (uint8_t row = 0; row < MATRIX_ROWS; row++) {  // 0-5
            bool prev_bit = matrix_debouncing[row] & ((matrix_row_t)1<<col);
            bool curr_bit = rows & (1<<row);
            if (prev_bit != curr_bit) {
                matrix_debouncing[row] ^= ((matrix_row_t)1<<col);
     b20:	f1 e0       	ldi	r31, 0x01	; 1
     b22:	2f 2e       	mov	r2, r31
     b24:	31 2c       	mov	r3, r1
     b26:	41 2c       	mov	r4, r1
     b28:	51 2c       	mov	r5, r1
                if (debouncing) {
                    dprint("bounce!: "); dprintf("%02X", debouncing); dprintln();
                }
                debouncing = DEBOUNCE;
     b2a:	e7 e0       	ldi	r30, 0x07	; 7
     b2c:	6e 2e       	mov	r6, r30
}

static void select_col(uint8_t col)
{
    // Output low(DDR:1, PORT:0) to select
    switch (col) {
     b2e:	ea 2d       	mov	r30, r10
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	e1 31       	cpi	r30, 0x11	; 17
     b34:	f1 05       	cpc	r31, r1
     b36:	d0 f5       	brcc	.+116    	; 0xbac <__stack+0xad>
     b38:	ea 5a       	subi	r30, 0xAA	; 170
     b3a:	ff 4f       	sbci	r31, 0xFF	; 255
     b3c:	ee 0f       	add	r30, r30
     b3e:	ff 1f       	adc	r31, r31
     b40:	05 90       	lpm	r0, Z+
     b42:	f4 91       	lpm	r31, Z+
     b44:	e0 2d       	mov	r30, r0
     b46:	09 94       	ijmp
        case 0:
            DDRD  |= (1<<5);
     b48:	55 9a       	sbi	0x0a, 5	; 10
            PORTD &= ~(1<<5);
     b4a:	5d 98       	cbi	0x0b, 5	; 11
     b4c:	2f c0       	rjmp	.+94     	; 0xbac <__stack+0xad>
            break;
        case 1:
            DDRC  |= (1<<7);
     b4e:	3f 9a       	sbi	0x07, 7	; 7
            PORTC &= ~(1<<7);
     b50:	47 98       	cbi	0x08, 7	; 8
     b52:	2c c0       	rjmp	.+88     	; 0xbac <__stack+0xad>
            break;
        case 2:
            DDRC  |= (1<<6);
     b54:	3e 9a       	sbi	0x07, 6	; 7
            PORTC &= ~(1<<6);
     b56:	46 98       	cbi	0x08, 6	; 8
     b58:	29 c0       	rjmp	.+82     	; 0xbac <__stack+0xad>
            break;
        case 3:
            DDRD  |= (1<<4);
     b5a:	54 9a       	sbi	0x0a, 4	; 10
            PORTD &= ~(1<<4);
     b5c:	5c 98       	cbi	0x0b, 4	; 11
     b5e:	26 c0       	rjmp	.+76     	; 0xbac <__stack+0xad>
            break;
        case 4:
            DDRD  |= (1<<0);
     b60:	50 9a       	sbi	0x0a, 0	; 10
            PORTD &= ~(1<<0);
     b62:	58 98       	cbi	0x0b, 0	; 11
     b64:	23 c0       	rjmp	.+70     	; 0xbac <__stack+0xad>
            break;
        case 5:
            DDRE  |= (1<<6);
     b66:	6e 9a       	sbi	0x0d, 6	; 13
            PORTE &= ~(1<<6);
     b68:	76 98       	cbi	0x0e, 6	; 14
     b6a:	20 c0       	rjmp	.+64     	; 0xbac <__stack+0xad>
            break;
        case 6:
            DDRF  |= (1<<0);
     b6c:	80 9a       	sbi	0x10, 0	; 16
            PORTF &= ~(1<<0);
     b6e:	88 98       	cbi	0x11, 0	; 17
     b70:	1d c0       	rjmp	.+58     	; 0xbac <__stack+0xad>
            break;
        case 7:
            DDRF  |= (1<<1);
     b72:	81 9a       	sbi	0x10, 1	; 16
            PORTF &= ~(1<<1);
     b74:	89 98       	cbi	0x11, 1	; 17
     b76:	1a c0       	rjmp	.+52     	; 0xbac <__stack+0xad>
            break;
        case 8:
            DDRF  |= (1<<4);
     b78:	84 9a       	sbi	0x10, 4	; 16
            PORTF &= ~(1<<4);
     b7a:	8c 98       	cbi	0x11, 4	; 17
     b7c:	17 c0       	rjmp	.+46     	; 0xbac <__stack+0xad>
            break;
        case 9:
            DDRF  |= (1<<5);
     b7e:	85 9a       	sbi	0x10, 5	; 16
            PORTF &= ~(1<<5);
     b80:	8d 98       	cbi	0x11, 5	; 17
     b82:	14 c0       	rjmp	.+40     	; 0xbac <__stack+0xad>
            break;
        case 10:
            DDRF  |= (1<<6);
     b84:	86 9a       	sbi	0x10, 6	; 16
            PORTF &= ~(1<<6);
     b86:	8e 98       	cbi	0x11, 6	; 17
     b88:	11 c0       	rjmp	.+34     	; 0xbac <__stack+0xad>
            break;
        case 11:
            DDRF  |= (1<<7);
     b8a:	87 9a       	sbi	0x10, 7	; 16
            PORTF &= ~(1<<7);
     b8c:	8f 98       	cbi	0x11, 7	; 17
     b8e:	0e c0       	rjmp	.+28     	; 0xbac <__stack+0xad>
            break;
        case 12:
            DDRD  |= (1<<7);
     b90:	57 9a       	sbi	0x0a, 7	; 10
            PORTD &= ~(1<<7);
     b92:	5f 98       	cbi	0x0b, 7	; 11
     b94:	0b c0       	rjmp	.+22     	; 0xbac <__stack+0xad>
            break;
        case 13:
            DDRD  |= (1<<6);
     b96:	56 9a       	sbi	0x0a, 6	; 10
            PORTD &= ~(1<<6);
     b98:	5e 98       	cbi	0x0b, 6	; 11
     b9a:	08 c0       	rjmp	.+16     	; 0xbac <__stack+0xad>
            break;
        case 14:
            DDRD  |= (1<<1);
     b9c:	51 9a       	sbi	0x0a, 1	; 10
            PORTD &= ~(1<<1);
     b9e:	59 98       	cbi	0x0b, 1	; 11
     ba0:	05 c0       	rjmp	.+10     	; 0xbac <__stack+0xad>
            break;
        case 15:
            DDRD  |= (1<<2);
     ba2:	52 9a       	sbi	0x0a, 2	; 10
            PORTD &= ~(1<<2);
     ba4:	5a 98       	cbi	0x0b, 2	; 11
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <__stack+0xad>
            break;
        case 16:
            DDRD  |= (1<<3);
     ba8:	53 9a       	sbi	0x0a, 3	; 10
            PORTD &= ~(1<<3);
     baa:	5b 98       	cbi	0x0b, 3	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     bac:	80 e1       	ldi	r24, 0x10	; 16
     bae:	8a 95       	dec	r24
     bb0:	f1 f7       	brne	.-4      	; 0xbae <__stack+0xaf>
    PORTB |= 0b00111111;
}

static uint8_t read_rows(void)
{
    return (PINB&(1<<5) ? 0 : (1<<0)) |
     bb2:	83 b1       	in	r24, 0x03	; 3
     bb4:	1c 99       	sbic	0x03, 4	; 3
     bb6:	02 c0       	rjmp	.+4      	; 0xbbc <__stack+0xbd>
     bb8:	22 e0       	ldi	r18, 0x02	; 2
     bba:	01 c0       	rjmp	.+2      	; 0xbbe <__stack+0xbf>
     bbc:	20 e0       	ldi	r18, 0x00	; 0
     bbe:	1b 99       	sbic	0x03, 3	; 3
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <__stack+0xc7>
     bc2:	64 e0       	ldi	r22, 0x04	; 4
     bc4:	01 c0       	rjmp	.+2      	; 0xbc8 <__stack+0xc9>
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	1a 99       	sbic	0x03, 2	; 3
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <__stack+0xd1>
     bcc:	58 e0       	ldi	r21, 0x08	; 8
     bce:	01 c0       	rjmp	.+2      	; 0xbd2 <__stack+0xd3>
     bd0:	50 e0       	ldi	r21, 0x00	; 0
     bd2:	19 99       	sbic	0x03, 1	; 3
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <__stack+0xdb>
     bd6:	40 e1       	ldi	r20, 0x10	; 16
     bd8:	01 c0       	rjmp	.+2      	; 0xbdc <__stack+0xdd>
     bda:	40 e0       	ldi	r20, 0x00	; 0
     bdc:	18 99       	sbic	0x03, 0	; 3
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <__stack+0xe5>
     be0:	30 e2       	ldi	r19, 0x20	; 32
     be2:	01 c0       	rjmp	.+2      	; 0xbe6 <__stack+0xe7>
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	75 e0       	ldi	r23, 0x05	; 5
     bea:	96 95       	lsr	r25
     bec:	87 95       	ror	r24
     bee:	7a 95       	dec	r23
     bf0:	e1 f7       	brne	.-8      	; 0xbea <__stack+0xeb>
     bf2:	a1 e0       	ldi	r26, 0x01	; 1
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	8a 27       	eor	r24, r26
     bf8:	9b 27       	eor	r25, r27
     bfa:	81 70       	andi	r24, 0x01	; 1
     bfc:	28 2b       	or	r18, r24
     bfe:	26 2b       	or	r18, r22
     c00:	25 2b       	or	r18, r21
     c02:	24 2b       	or	r18, r20
     c04:	23 2b       	or	r18, r19
     c06:	7a 2c       	mov	r7, r10
        uint8_t rows = read_rows();
        for (uint8_t row = 0; row < MATRIX_ROWS; row++) {  // 0-5
            bool prev_bit = matrix_debouncing[row] & ((matrix_row_t)1<<col);
            bool curr_bit = rows & (1<<row);
            if (prev_bit != curr_bit) {
                matrix_debouncing[row] ^= ((matrix_row_t)1<<col);
     c08:	72 01       	movw	r14, r4
     c0a:	61 01       	movw	r12, r2
     c0c:	0a 2c       	mov	r0, r10
     c0e:	04 c0       	rjmp	.+8      	; 0xc18 <__stack+0x119>
     c10:	cc 0c       	add	r12, r12
     c12:	dd 1c       	adc	r13, r13
     c14:	ee 1c       	adc	r14, r14
     c16:	ff 1c       	adc	r15, r15
     c18:	0a 94       	dec	r0
     c1a:	d2 f7       	brpl	.-12     	; 0xc10 <__stack+0x111>
     c1c:	08 e2       	ldi	r16, 0x28	; 40
     c1e:	11 e0       	ldi	r17, 0x01	; 1
     c20:	c0 e0       	ldi	r28, 0x00	; 0
     c22:	d0 e0       	ldi	r29, 0x00	; 0
        _delay_us(3);       // without this wait it won't read stable value.
        uint8_t rows = read_rows();
        for (uint8_t row = 0; row < MATRIX_ROWS; row++) {  // 0-5
            bool prev_bit = matrix_debouncing[row] & ((matrix_row_t)1<<col);
            bool curr_bit = rows & (1<<row);
            if (prev_bit != curr_bit) {
     c24:	82 2e       	mov	r8, r18
     c26:	99 24       	eor	r9, r9
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {  // 0-16
        select_col(col);
        _delay_us(3);       // without this wait it won't read stable value.
        uint8_t rows = read_rows();
        for (uint8_t row = 0; row < MATRIX_ROWS; row++) {  // 0-5
            bool prev_bit = matrix_debouncing[row] & ((matrix_row_t)1<<col);
     c28:	f8 01       	movw	r30, r16
     c2a:	40 81       	ld	r20, Z
     c2c:	51 81       	ldd	r21, Z+1	; 0x01
     c2e:	62 81       	ldd	r22, Z+2	; 0x02
     c30:	73 81       	ldd	r23, Z+3	; 0x03
            bool curr_bit = rows & (1<<row);
            if (prev_bit != curr_bit) {
     c32:	db 01       	movw	r26, r22
     c34:	ca 01       	movw	r24, r20
     c36:	07 2c       	mov	r0, r7
     c38:	04 c0       	rjmp	.+8      	; 0xc42 <__stack+0x143>
     c3a:	b6 95       	lsr	r27
     c3c:	a7 95       	ror	r26
     c3e:	97 95       	ror	r25
     c40:	87 95       	ror	r24
     c42:	0a 94       	dec	r0
     c44:	d2 f7       	brpl	.-12     	; 0xc3a <__stack+0x13b>
     c46:	81 70       	andi	r24, 0x01	; 1
     c48:	90 70       	andi	r25, 0x00	; 0
     c4a:	94 01       	movw	r18, r8
     c4c:	0c 2e       	mov	r0, r28
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <__stack+0x155>
     c50:	35 95       	asr	r19
     c52:	27 95       	ror	r18
     c54:	0a 94       	dec	r0
     c56:	e2 f7       	brpl	.-8      	; 0xc50 <__stack+0x151>
     c58:	21 70       	andi	r18, 0x01	; 1
     c5a:	30 70       	andi	r19, 0x00	; 0
     c5c:	82 17       	cp	r24, r18
     c5e:	d9 f1       	breq	.+118    	; 0xcd6 <__stack+0x1d7>
                matrix_debouncing[row] ^= ((matrix_row_t)1<<col);
     c60:	4c 25       	eor	r20, r12
     c62:	5d 25       	eor	r21, r13
     c64:	6e 25       	eor	r22, r14
     c66:	7f 25       	eor	r23, r15
     c68:	d8 01       	movw	r26, r16
     c6a:	4d 93       	st	X+, r20
     c6c:	5d 93       	st	X+, r21
     c6e:	6d 93       	st	X+, r22
     c70:	7c 93       	st	X, r23
     c72:	13 97       	sbiw	r26, 0x03	; 3
                if (debouncing) {
     c74:	80 91 00 01 	lds	r24, 0x0100
     c78:	88 23       	and	r24, r24
     c7a:	59 f1       	breq	.+86     	; 0xcd2 <__stack+0x1d3>
                    dprint("bounce!: "); dprintf("%02X", debouncing); dprintln();
     c7c:	80 91 b7 01 	lds	r24, 0x01B7
     c80:	80 ff       	sbrs	r24, 0
     c82:	04 c0       	rjmp	.+8      	; 0xc8c <__stack+0x18d>
     c84:	89 ec       	ldi	r24, 0xC9	; 201
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
     c8c:	80 91 b7 01 	lds	r24, 0x01B7
     c90:	80 ff       	sbrs	r24, 0
     c92:	17 c0       	rjmp	.+46     	; 0xcc2 <__stack+0x1c3>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <__stack+0x197>
     c96:	00 d0       	rcall	.+0      	; 0xc98 <__stack+0x199>
     c98:	ed b7       	in	r30, 0x3d	; 61
     c9a:	fe b7       	in	r31, 0x3e	; 62
     c9c:	31 96       	adiw	r30, 0x01	; 1
     c9e:	84 ec       	ldi	r24, 0xC4	; 196
     ca0:	91 e0       	ldi	r25, 0x01	; 1
     ca2:	ad b7       	in	r26, 0x3d	; 61
     ca4:	be b7       	in	r27, 0x3e	; 62
     ca6:	12 96       	adiw	r26, 0x02	; 2
     ca8:	9c 93       	st	X, r25
     caa:	8e 93       	st	-X, r24
     cac:	11 97       	sbiw	r26, 0x01	; 1
     cae:	80 91 00 01 	lds	r24, 0x0100
     cb2:	82 83       	std	Z+2, r24	; 0x02
     cb4:	13 82       	std	Z+3, r1	; 0x03
     cb6:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	80 91 b7 01 	lds	r24, 0x01B7
     cc6:	80 ff       	sbrs	r24, 0
     cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <__stack+0x1d3>
     cca:	81 ec       	ldi	r24, 0xC1	; 193
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
                }
                debouncing = DEBOUNCE;
     cd2:	60 92 00 01 	sts	0x0100, r6
     cd6:	21 96       	adiw	r28, 0x01	; 1
     cd8:	0c 5f       	subi	r16, 0xFC	; 252
     cda:	1f 4f       	sbci	r17, 0xFF	; 255
{
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {  // 0-16
        select_col(col);
        _delay_us(3);       // without this wait it won't read stable value.
        uint8_t rows = read_rows();
        for (uint8_t row = 0; row < MATRIX_ROWS; row++) {  // 0-5
     cdc:	c6 30       	cpi	r28, 0x06	; 6
     cde:	d1 05       	cpc	r29, r1
     ce0:	09 f0       	breq	.+2      	; 0xce4 <__stack+0x1e5>
     ce2:	a2 cf       	rjmp	.-188    	; 0xc28 <__stack+0x129>
                    dprint("bounce!: "); dprintf("%02X", debouncing); dprintln();
                }
                debouncing = DEBOUNCE;
            }
        }
        unselect_cols();
     ce4:	0e 94 e7 04 	call	0x9ce	; 0x9ce <unselect_cols>
     ce8:	08 94       	sec
     cea:	a1 1c       	adc	r10, r1
     cec:	b1 1c       	adc	r11, r1
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {  // 0-16
     cee:	91 e1       	ldi	r25, 0x11	; 17
     cf0:	a9 16       	cp	r10, r25
     cf2:	b1 04       	cpc	r11, r1
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <__stack+0x1f9>
     cf6:	1b cf       	rjmp	.-458    	; 0xb2e <__stack+0x2f>
            }
        }
        unselect_cols();
    }

    if (debouncing) {
     cf8:	80 91 00 01 	lds	r24, 0x0100
     cfc:	88 23       	and	r24, r24
     cfe:	09 f4       	brne	.+2      	; 0xd02 <__stack+0x203>
     d00:	6a c0       	rjmp	.+212    	; 0xdd6 <__stack+0x2d7>
        if (--debouncing) {
     d02:	81 50       	subi	r24, 0x01	; 1
     d04:	80 93 00 01 	sts	0x0100, r24
     d08:	88 23       	and	r24, r24
     d0a:	29 f0       	breq	.+10     	; 0xd16 <__stack+0x217>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d0c:	80 ea       	ldi	r24, 0xA0	; 160
     d0e:	9f e0       	ldi	r25, 0x0F	; 15
     d10:	01 97       	sbiw	r24, 0x01	; 1
     d12:	f1 f7       	brne	.-4      	; 0xd10 <__stack+0x211>
     d14:	60 c0       	rjmp	.+192    	; 0xdd6 <__stack+0x2d7>
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
     d16:	80 91 28 01 	lds	r24, 0x0128
     d1a:	90 91 29 01 	lds	r25, 0x0129
     d1e:	a0 91 2a 01 	lds	r26, 0x012A
     d22:	b0 91 2b 01 	lds	r27, 0x012B
     d26:	80 93 10 01 	sts	0x0110, r24
     d2a:	90 93 11 01 	sts	0x0111, r25
     d2e:	a0 93 12 01 	sts	0x0112, r26
     d32:	b0 93 13 01 	sts	0x0113, r27
     d36:	80 91 2c 01 	lds	r24, 0x012C
     d3a:	90 91 2d 01 	lds	r25, 0x012D
     d3e:	a0 91 2e 01 	lds	r26, 0x012E
     d42:	b0 91 2f 01 	lds	r27, 0x012F
     d46:	80 93 14 01 	sts	0x0114, r24
     d4a:	90 93 15 01 	sts	0x0115, r25
     d4e:	a0 93 16 01 	sts	0x0116, r26
     d52:	b0 93 17 01 	sts	0x0117, r27
     d56:	80 91 30 01 	lds	r24, 0x0130
     d5a:	90 91 31 01 	lds	r25, 0x0131
     d5e:	a0 91 32 01 	lds	r26, 0x0132
     d62:	b0 91 33 01 	lds	r27, 0x0133
     d66:	80 93 18 01 	sts	0x0118, r24
     d6a:	90 93 19 01 	sts	0x0119, r25
     d6e:	a0 93 1a 01 	sts	0x011A, r26
     d72:	b0 93 1b 01 	sts	0x011B, r27
     d76:	80 91 34 01 	lds	r24, 0x0134
     d7a:	90 91 35 01 	lds	r25, 0x0135
     d7e:	a0 91 36 01 	lds	r26, 0x0136
     d82:	b0 91 37 01 	lds	r27, 0x0137
     d86:	80 93 1c 01 	sts	0x011C, r24
     d8a:	90 93 1d 01 	sts	0x011D, r25
     d8e:	a0 93 1e 01 	sts	0x011E, r26
     d92:	b0 93 1f 01 	sts	0x011F, r27
     d96:	80 91 38 01 	lds	r24, 0x0138
     d9a:	90 91 39 01 	lds	r25, 0x0139
     d9e:	a0 91 3a 01 	lds	r26, 0x013A
     da2:	b0 91 3b 01 	lds	r27, 0x013B
     da6:	80 93 20 01 	sts	0x0120, r24
     daa:	90 93 21 01 	sts	0x0121, r25
     dae:	a0 93 22 01 	sts	0x0122, r26
     db2:	b0 93 23 01 	sts	0x0123, r27
     db6:	80 91 3c 01 	lds	r24, 0x013C
     dba:	90 91 3d 01 	lds	r25, 0x013D
     dbe:	a0 91 3e 01 	lds	r26, 0x013E
     dc2:	b0 91 3f 01 	lds	r27, 0x013F
     dc6:	80 93 24 01 	sts	0x0124, r24
     dca:	90 93 25 01 	sts	0x0125, r25
     dce:	a0 93 26 01 	sts	0x0126, r26
     dd2:	b0 93 27 01 	sts	0x0127, r27
            }
        }
    }

    return 1;
}
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	ff 90       	pop	r15
     de2:	ef 90       	pop	r14
     de4:	df 90       	pop	r13
     de6:	cf 90       	pop	r12
     de8:	bf 90       	pop	r11
     dea:	af 90       	pop	r10
     dec:	9f 90       	pop	r9
     dee:	8f 90       	pop	r8
     df0:	7f 90       	pop	r7
     df2:	6f 90       	pop	r6
     df4:	5f 90       	pop	r5
     df6:	4f 90       	pop	r4
     df8:	3f 90       	pop	r3
     dfa:	2f 90       	pop	r2
     dfc:	08 95       	ret

00000dfe <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK))
     dfe:	81 ff       	sbrs	r24, 1
     e00:	03 c0       	rjmp	.+6      	; 0xe08 <led_set+0xa>
    {
        // Output high.
        DDRB |= (1<<6);
     e02:	26 9a       	sbi	0x04, 6	; 4
        PORTB |= (1<<6);
     e04:	2e 9a       	sbi	0x05, 6	; 5
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <led_set+0xe>
    }
    else
    {
        // Output low.
        DDRB &= ~(1<<6);
     e08:	26 98       	cbi	0x04, 6	; 4
        PORTB &= ~(1<<6);
     e0a:	2e 98       	cbi	0x05, 6	; 5
    }

    if (usb_led & (1<<USB_LED_SCROLL_LOCK))
     e0c:	82 ff       	sbrs	r24, 2
     e0e:	03 c0       	rjmp	.+6      	; 0xe16 <led_set+0x18>
    {
        // Output high.
        DDRB |= (1<<7);
     e10:	27 9a       	sbi	0x04, 7	; 4
        PORTB |= (1<<7);
     e12:	2f 9a       	sbi	0x05, 7	; 5
     e14:	08 95       	ret
    }
    else
    {
        // Output low.
        DDRB &= ~(1<<7);
     e16:	27 98       	cbi	0x04, 7	; 4
        PORTB &= ~(1<<7);
     e18:	2f 98       	cbi	0x05, 7	; 5
     e1a:	08 95       	ret

00000e1c <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
     e1c:	80 91 44 01 	lds	r24, 0x0144
     e20:	8f 5f       	subi	r24, 0xFF	; 255
     e22:	80 93 44 01 	sts	0x0144, r24
     e26:	62 e3       	ldi	r22, 0x32	; 50
     e28:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__udivmodqi4>
     e2c:	99 23       	and	r25, r25
     e2e:	a9 f5       	brne	.+106    	; 0xe9a <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
     e30:	10 92 44 01 	sts	0x0144, r1

    if (!console_flush) return;
     e34:	80 91 42 01 	lds	r24, 0x0142
     e38:	88 23       	and	r24, r24
     e3a:	79 f1       	breq	.+94     	; 0xe9a <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
     e3c:	80 91 c3 01 	lds	r24, 0x01C3
     e40:	84 30       	cpi	r24, 0x04	; 4
     e42:	49 f5       	brne	.+82     	; 0xe96 <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e44:	90 91 e9 00 	lds	r25, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e48:	80 91 ec 00 	lds	r24, 0x00EC
     e4c:	80 fd       	sbrc	r24, 0
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <EVENT_USB_Device_StartOfFrame+0x38>
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	01 c0       	rjmp	.+2      	; 0xe56 <EVENT_USB_Device_StartOfFrame+0x3a>
     e54:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e56:	9f 70       	andi	r25, 0x0F	; 15
     e58:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     e60:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
     e64:	80 ff       	sbrs	r24, 0
     e66:	14 c0       	rjmp	.+40     	; 0xe90 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     e68:	80 91 ee 00 	lds	r24, 0x00EE
     e6c:	87 fd       	sbrc	r24, 7
     e6e:	03 c0       	rjmp	.+6      	; 0xe76 <EVENT_USB_Device_StartOfFrame+0x5a>
     e70:	0f c0       	rjmp	.+30     	; 0xe90 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     e72:	10 92 f1 00 	sts	0x00F1, r1
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     e76:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
     e7a:	85 fd       	sbrc	r24, 5
     e7c:	fa cf       	rjmp	.-12     	; 0xe72 <EVENT_USB_Device_StartOfFrame+0x56>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e7e:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
     e82:	80 ff       	sbrs	r24, 0
     e84:	05 c0       	rjmp	.+10     	; 0xe90 <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e86:	80 91 e8 00 	lds	r24, 0x00E8
     e8a:	8e 77       	andi	r24, 0x7E	; 126
     e8c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e90:	9f 70       	andi	r25, 0x0F	; 15
     e92:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
     e96:	10 92 42 01 	sts	0x0142, r1
     e9a:	08 95       	ret

00000e9c <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
     e9c:	80 91 41 01 	lds	r24, 0x0141
     ea0:	08 95       	ret

00000ea2 <send_mouse>:
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();
#endif
}
     ea2:	08 95       	ret

00000ea4 <sendchar>:
 * sendchar
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
#define SEND_TIMEOUT 5
int8_t sendchar(uint8_t c)
{
     ea4:	68 2f       	mov	r22, r24
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
     ea6:	8f b7       	in	r24, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	10 92 42 01 	sts	0x0142, r1
     eae:	8f bf       	out	0x3f, r24	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
     eb0:	80 91 c3 01 	lds	r24, 0x01C3
     eb4:	84 30       	cpi	r24, 0x04	; 4
     eb6:	11 f0       	breq	.+4      	; 0xebc <sendchar+0x18>
     eb8:	8f ef       	ldi	r24, 0xFF	; 255
     eba:	08 95       	ret
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     ebc:	90 91 e9 00 	lds	r25, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     ec0:	80 91 ec 00 	lds	r24, 0x00EC
     ec4:	80 fd       	sbrc	r24, 0
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <sendchar+0x28>
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	01 c0       	rjmp	.+2      	; 0xece <sendchar+0x2a>
     ecc:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     ece:	39 2f       	mov	r19, r25
     ed0:	3f 70       	andi	r19, 0x0F	; 15
     ed2:	38 2b       	or	r19, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ed4:	83 e0       	ldi	r24, 0x03	; 3
     ed6:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     eda:	80 91 eb 00 	lds	r24, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
     ede:	80 ff       	sbrs	r24, 0
     ee0:	43 c0       	rjmp	.+134    	; 0xf68 <sendchar+0xc4>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     ee2:	80 91 ee 00 	lds	r24, 0x00EE
     ee6:	87 ff       	sbrs	r24, 7
     ee8:	3f c0       	rjmp	.+126    	; 0xf68 <sendchar+0xc4>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
     eea:	80 91 43 01 	lds	r24, 0x0143
     eee:	88 23       	and	r24, r24
     ef0:	21 f0       	breq	.+8      	; 0xefa <sendchar+0x56>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ef2:	80 91 e8 00 	lds	r24, 0x00E8
     ef6:	85 ff       	sbrs	r24, 5
     ef8:	37 c0       	rjmp	.+110    	; 0xf68 <sendchar+0xc4>
        goto ERROR_EXIT;
    }

    timeouted = false;
     efa:	10 92 43 01 	sts	0x0143, r1
     efe:	25 e0       	ldi	r18, 0x05	; 5
     f00:	40 ea       	ldi	r20, 0xA0	; 160
     f02:	5f e0       	ldi	r21, 0x0F	; 15
     f04:	12 c0       	rjmp	.+36     	; 0xf2a <sendchar+0x86>

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
        if (USB_DeviceState != DEVICE_STATE_Configured) {
     f06:	80 91 c3 01 	lds	r24, 0x01C3
     f0a:	84 30       	cpi	r24, 0x04	; 4
     f0c:	69 f5       	brne	.+90     	; 0xf68 <sendchar+0xc4>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     f0e:	80 91 eb 00 	lds	r24, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
     f12:	85 fd       	sbrc	r24, 5
     f14:	29 c0       	rjmp	.+82     	; 0xf68 <sendchar+0xc4>
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
     f16:	22 23       	and	r18, r18
     f18:	21 f4       	brne	.+8      	; 0xf22 <sendchar+0x7e>
            timeouted = true;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	80 93 43 01 	sts	0x0143, r24
     f20:	23 c0       	rjmp	.+70     	; 0xf68 <sendchar+0xc4>
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
     f22:	21 50       	subi	r18, 0x01	; 1
     f24:	ca 01       	movw	r24, r20
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	f1 f7       	brne	.-4      	; 0xf26 <sendchar+0x82>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f2a:	80 91 e8 00 	lds	r24, 0x00E8
    }

    timeouted = false;

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
     f2e:	85 ff       	sbrs	r24, 5
     f30:	ea cf       	rjmp	.-44     	; 0xf06 <sendchar+0x62>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f32:	60 93 f1 00 	sts	0x00F1, r22
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f36:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
     f3a:	85 fd       	sbrc	r24, 5
     f3c:	0a c0       	rjmp	.+20     	; 0xf52 <sendchar+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f3e:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
     f42:	80 ff       	sbrs	r24, 0
     f44:	fc cf       	rjmp	.-8      	; 0xf3e <sendchar+0x9a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f46:	80 91 e8 00 	lds	r24, 0x00E8
     f4a:	8e 77       	andi	r24, 0x7E	; 126
     f4c:	80 93 e8 00 	sts	0x00E8, r24
     f50:	06 c0       	rjmp	.+12     	; 0xf5e <sendchar+0xba>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
     f52:	9f b7       	in	r25, 0x3f	; 63
     f54:	f8 94       	cli
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	80 93 42 01 	sts	0x0142, r24
     f5c:	9f bf       	out	0x3f, r25	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f5e:	3f 70       	andi	r19, 0x0F	; 15
     f60:	30 93 e9 00 	sts	0x00E9, r19
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	08 95       	ret
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
     f68:	3f 70       	andi	r19, 0x0F	; 15
     f6a:	30 93 e9 00 	sts	0x00E9, r19
     f6e:	8f ef       	ldi	r24, 0xFF	; 255
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
     f70:	08 95       	ret

00000f72 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	00 d0       	rcall	.+0      	; 0xf78 <send_consumer+0x6>
     f78:	0f 92       	push	r0
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	ac 01       	movw	r20, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     f80:	80 91 c3 01 	lds	r24, 0x01C3
     f84:	84 30       	cpi	r24, 0x04	; 4
     f86:	29 f5       	brne	.+74     	; 0xfd2 <send_consumer+0x60>
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	80 93 e9 00 	sts	0x00E9, r24
     f8e:	2f ef       	ldi	r18, 0xFF	; 255
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f90:	95 ed       	ldi	r25, 0xD5	; 213
     f92:	05 c0       	rjmp	.+10     	; 0xf9e <send_consumer+0x2c>
     f94:	89 2f       	mov	r24, r25
     f96:	8a 95       	dec	r24
     f98:	f1 f7       	brne	.-4      	; 0xf96 <send_consumer+0x24>
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
     f9a:	22 23       	and	r18, r18
     f9c:	29 f0       	breq	.+10     	; 0xfa8 <send_consumer+0x36>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f9e:	80 91 e8 00 	lds	r24, 0x00E8
     fa2:	21 50       	subi	r18, 0x01	; 1
     fa4:	85 ff       	sbrs	r24, 5
     fa6:	f6 cf       	rjmp	.-20     	; 0xf94 <send_consumer+0x22>
     fa8:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
     fac:	85 ff       	sbrs	r24, 5
     fae:	11 c0       	rjmp	.+34     	; 0xfd2 <send_consumer+0x60>
        return;

    report_extra_t r = {
        .report_id = REPORT_ID_CONSUMER,
        .usage = data
    };
     fb0:	5b 83       	std	Y+3, r21	; 0x03
     fb2:	4a 83       	std	Y+2, r20	; 0x02
     fb4:	83 e0       	ldi	r24, 0x03	; 3
     fb6:	89 83       	std	Y+1, r24	; 0x01

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    if (!Endpoint_IsReadWriteAllowed()) return;

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
     fb8:	ce 01       	movw	r24, r28
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	63 e0       	ldi	r22, 0x03	; 3
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	40 e0       	ldi	r20, 0x00	; 0
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fc8:	80 91 e8 00 	lds	r24, 0x00E8
     fcc:	8e 77       	andi	r24, 0x7E	; 126
     fce:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <send_system+0x6>
     fe4:	0f 92       	push	r0
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	ac 01       	movw	r20, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
     fec:	80 91 c3 01 	lds	r24, 0x01C3
     ff0:	84 30       	cpi	r24, 0x04	; 4
     ff2:	29 f5       	brne	.+74     	; 0x103e <send_system+0x60>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ff4:	82 e0       	ldi	r24, 0x02	; 2
     ff6:	80 93 e9 00 	sts	0x00E9, r24
     ffa:	2f ef       	ldi	r18, 0xFF	; 255
     ffc:	95 ed       	ldi	r25, 0xD5	; 213
     ffe:	05 c0       	rjmp	.+10     	; 0x100a <send_system+0x2c>
    1000:	89 2f       	mov	r24, r25
    1002:	8a 95       	dec	r24
    1004:	f1 f7       	brne	.-4      	; 0x1002 <send_system+0x24>
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1006:	22 23       	and	r18, r18
    1008:	29 f0       	breq	.+10     	; 0x1014 <send_system+0x36>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    100a:	80 91 e8 00 	lds	r24, 0x00E8
    100e:	21 50       	subi	r18, 0x01	; 1
    1010:	85 ff       	sbrs	r24, 5
    1012:	f6 cf       	rjmp	.-20     	; 0x1000 <send_system+0x22>
    1014:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1018:	85 ff       	sbrs	r24, 5
    101a:	11 c0       	rjmp	.+34     	; 0x103e <send_system+0x60>
        return;

    report_extra_t r = {
        .report_id = REPORT_ID_SYSTEM,
        .usage = data
    };
    101c:	5b 83       	std	Y+3, r21	; 0x03
    101e:	4a 83       	std	Y+2, r20	; 0x02
    1020:	82 e0       	ldi	r24, 0x02	; 2
    1022:	89 83       	std	Y+1, r24	; 0x01

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    if (!Endpoint_IsReadWriteAllowed()) return;

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1024:	ce 01       	movw	r24, r28
    1026:	01 96       	adiw	r24, 0x01	; 1
    1028:	63 e0       	ldi	r22, 0x03	; 3
    102a:	70 e0       	ldi	r23, 0x00	; 0
    102c:	40 e0       	ldi	r20, 0x00	; 0
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1034:	80 91 e8 00 	lds	r24, 0x00E8
    1038:	8e 77       	andi	r24, 0x7E	; 126
    103a:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	18 2f       	mov	r17, r24
    1050:	09 2f       	mov	r16, r25
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1052:	80 91 c3 01 	lds	r24, 0x01C3
    1056:	84 30       	cpi	r24, 0x04	; 4
    1058:	61 f5       	brne	.+88     	; 0x10b2 <send_keyboard+0x68>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	80 93 e9 00 	sts	0x00E9, r24
    1060:	9f ef       	ldi	r25, 0xFF	; 255
    1062:	25 ed       	ldi	r18, 0xD5	; 213
    1064:	05 c0       	rjmp	.+10     	; 0x1070 <send_keyboard+0x26>
    1066:	82 2f       	mov	r24, r18
    1068:	8a 95       	dec	r24
    106a:	f1 f7       	brne	.-4      	; 0x1068 <send_keyboard+0x1e>
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    106c:	99 23       	and	r25, r25
    106e:	29 f0       	breq	.+10     	; 0x107a <send_keyboard+0x30>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1070:	80 91 e8 00 	lds	r24, 0x00E8
    1074:	91 50       	subi	r25, 0x01	; 1
    1076:	85 ff       	sbrs	r24, 5
    1078:	f6 cf       	rjmp	.-20     	; 0x1066 <send_keyboard+0x1c>
    107a:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    107e:	85 ff       	sbrs	r24, 5
    1080:	18 c0       	rjmp	.+48     	; 0x10b2 <send_keyboard+0x68>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1082:	81 2f       	mov	r24, r17
    1084:	90 2f       	mov	r25, r16
    1086:	68 e0       	ldi	r22, 0x08	; 8
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1092:	80 91 e8 00 	lds	r24, 0x00E8
    1096:	8e 77       	andi	r24, 0x7E	; 126
    1098:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    109c:	a5 e4       	ldi	r26, 0x45	; 69
    109e:	b1 e0       	ldi	r27, 0x01	; 1
    10a0:	21 2f       	mov	r18, r17
    10a2:	30 2f       	mov	r19, r16
    10a4:	c9 01       	movw	r24, r18
    10a6:	fc 01       	movw	r30, r24
    10a8:	88 e0       	ldi	r24, 0x08	; 8
    10aa:	01 90       	ld	r0, Z+
    10ac:	0d 92       	st	X+, r0
    10ae:	81 50       	subi	r24, 0x01	; 1
    10b0:	e1 f7       	brne	.-8      	; 0x10aa <send_keyboard+0x60>
}
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	08 95       	ret

000010b8 <EVENT_USB_Device_Suspend>:
    print("[R]");
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    10b8:	8d ef       	ldi	r24, 0xFD	; 253
    10ba:	91 e0       	ldi	r25, 0x01	; 1
    10bc:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
#ifdef SLEEP_LED_ENABLE
    sleep_led_enable();
#endif
}
    10c0:	08 95       	ret

000010c2 <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	92 e0       	ldi	r25, 0x02	; 2
    10c6:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
}
    10ca:	08 95       	ret

000010cc <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    10cc:	85 e0       	ldi	r24, 0x05	; 5
    10ce:	92 e0       	ldi	r25, 0x02	; 2
    10d0:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    10d4:	10 92 c2 01 	sts	0x01C2, r1
        USB_Disable();  // Disable all interrupts
	USB_Controller_Enable();
        USB_INT_Enable(USB_INT_VBUSTI);
    }
*/
}
    10d8:	08 95       	ret

000010da <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    10da:	89 e0       	ldi	r24, 0x09	; 9
    10dc:	92 e0       	ldi	r25, 0x02	; 2
    10de:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    10e2:	80 91 c2 01 	lds	r24, 0x01C2
    10e6:	88 23       	and	r24, r24
    10e8:	49 f4       	brne	.+18     	; 0x10fc <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    10ea:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <USB_Disable>
        USB_Init();
    10ee:	0e 94 33 0c 	call	0x1866	; 0x1866 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    10f2:	80 91 e2 00 	lds	r24, 0x00E2
    10f6:	84 60       	ori	r24, 0x04	; 4
    10f8:	80 93 e2 00 	sts	0x00E2, r24
    10fc:	08 95       	ret

000010fe <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    10fe:	84 b7       	in	r24, 0x34	; 52
    1100:	87 7f       	andi	r24, 0xF7	; 247
    1102:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    1104:	88 e1       	ldi	r24, 0x18	; 24
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	80 93 60 00 	sts	0x0060, r24
    110e:	10 92 60 00 	sts	0x0060, r1
    1112:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    clock_prescale_set(clock_div_1);
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	20 e8       	ldi	r18, 0x80	; 128
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	20 93 61 00 	sts	0x0061, r18
    1122:	80 93 61 00 	sts	0x0061, r24
    1126:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    keyboard_setup();
    1128:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    112c:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <USB_Disable>

    USB_Init();
    1130:	0e 94 33 0c 	call	0x1866	; 0x1866 <USB_Init>
    1134:	80 91 e2 00 	lds	r24, 0x00E2
    1138:	84 60       	ori	r24, 0x04	; 4
    113a:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    113e:	82 e5       	ldi	r24, 0x52	; 82
    1140:	97 e0       	ldi	r25, 0x07	; 7
    1142:	0e 94 2e 1b 	call	0x365c	; 0x365c <print_set_sendchar>
int main(void)
{
    setup_mcu();
    keyboard_setup();
    setup_usb();
    sei();
    1146:	78 94       	sei
    1148:	02 c0       	rjmp	.+4      	; 0x114e <main+0x50>
    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
#if defined(INTERRUPT_CONTROL_ENDPOINT)
        ;
#else
        USB_USBTask();
    114a:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <USB_USBTask>
    keyboard_setup();
    setup_usb();
    sei();

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    114e:	80 91 c3 01 	lds	r24, 0x01C3
    1152:	84 30       	cpi	r24, 0x04	; 4
    1154:	d1 f7       	brne	.-12     	; 0x114a <main+0x4c>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    1156:	88 ee       	ldi	r24, 0xE8	; 232
    1158:	91 e0       	ldi	r25, 0x01	; 1
    115a:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>

    /* init modules */
    keyboard_init();
    115e:	0e 94 3c 10 	call	0x2078	; 0x2078 <keyboard_init>
    host_set_driver(&lufa_driver);
    1162:	82 e0       	ldi	r24, 0x02	; 2
    1164:	91 e0       	ldi	r25, 0x01	; 1
    1166:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    116a:	87 ed       	ldi	r24, 0xD7	; 215
    116c:	91 e0       	ldi	r25, 0x01	; 1
    116e:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    1172:	10 c0       	rjmp	.+32     	; 0x1194 <main+0x96>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
            print("[s]");
    1174:	83 ed       	ldi	r24, 0xD3	; 211
    1176:	91 e0       	ldi	r25, 0x01	; 1
    1178:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
            suspend_power_down();
    117c:	0e 94 92 1b 	call	0x3724	; 0x3724 <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1180:	80 91 c1 01 	lds	r24, 0x01C1
    1184:	88 23       	and	r24, r24
    1186:	31 f0       	breq	.+12     	; 0x1194 <main+0x96>
    1188:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <suspend_wakeup_condition>
    118c:	88 23       	and	r24, r24
    118e:	11 f0       	breq	.+4      	; 0x1194 <main+0x96>
                    USB_Device_SendRemoteWakeup();
    1190:	0e 94 07 0a 	call	0x140e	; 0x140e <USB_Device_SendRemoteWakeup>
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1194:	80 91 c3 01 	lds	r24, 0x01C3
    1198:	85 30       	cpi	r24, 0x05	; 5
    119a:	61 f3       	breq	.-40     	; 0x1174 <main+0x76>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
                    USB_Device_SendRemoteWakeup();
            }
        }

        keyboard_task();
    119c:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
    11a0:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <USB_USBTask>
    11a4:	f7 cf       	rjmp	.-18     	; 0x1194 <main+0x96>

000011a6 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    11a6:	80 91 c5 01 	lds	r24, 0x01C5
    11aa:	83 30       	cpi	r24, 0x03	; 3
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <EVENT_USB_Device_ControlRequest+0xa>
    11ae:	55 c0       	rjmp	.+170    	; 0x125a <EVENT_USB_Device_ControlRequest+0xb4>
    11b0:	84 30       	cpi	r24, 0x04	; 4
    11b2:	30 f4       	brcc	.+12     	; 0x11c0 <EVENT_USB_Device_ControlRequest+0x1a>
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	71 f0       	breq	.+28     	; 0x11d4 <EVENT_USB_Device_ControlRequest+0x2e>
    11b8:	82 30       	cpi	r24, 0x02	; 2
    11ba:	09 f0       	breq	.+2      	; 0x11be <EVENT_USB_Device_ControlRequest+0x18>
    11bc:	af c0       	rjmp	.+350    	; 0x131c <EVENT_USB_Device_ControlRequest+0x176>
    11be:	96 c0       	rjmp	.+300    	; 0x12ec <EVENT_USB_Device_ControlRequest+0x146>
    11c0:	8a 30       	cpi	r24, 0x0A	; 10
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <EVENT_USB_Device_ControlRequest+0x20>
    11c4:	83 c0       	rjmp	.+262    	; 0x12cc <EVENT_USB_Device_ControlRequest+0x126>
    11c6:	8b 30       	cpi	r24, 0x0B	; 11
    11c8:	09 f4       	brne	.+2      	; 0x11cc <EVENT_USB_Device_ControlRequest+0x26>
    11ca:	68 c0       	rjmp	.+208    	; 0x129c <EVENT_USB_Device_ControlRequest+0xf6>
    11cc:	89 30       	cpi	r24, 0x09	; 9
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <EVENT_USB_Device_ControlRequest+0x2c>
    11d0:	a5 c0       	rjmp	.+330    	; 0x131c <EVENT_USB_Device_ControlRequest+0x176>
    11d2:	20 c0       	rjmp	.+64     	; 0x1214 <EVENT_USB_Device_ControlRequest+0x6e>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    11d4:	80 91 c4 01 	lds	r24, 0x01C4
    11d8:	81 3a       	cpi	r24, 0xA1	; 161
    11da:	09 f0       	breq	.+2      	; 0x11de <EVENT_USB_Device_ControlRequest+0x38>
    11dc:	9f c0       	rjmp	.+318    	; 0x131c <EVENT_USB_Device_ControlRequest+0x176>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11de:	80 91 e8 00 	lds	r24, 0x00E8
    11e2:	87 7f       	andi	r24, 0xF7	; 247
    11e4:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    11e8:	80 91 c8 01 	lds	r24, 0x01C8
    11ec:	90 91 c9 01 	lds	r25, 0x01C9
    11f0:	89 2b       	or	r24, r25
    11f2:	21 f4       	brne	.+8      	; 0x11fc <EVENT_USB_Device_ControlRequest+0x56>
    11f4:	85 e4       	ldi	r24, 0x45	; 69
    11f6:	91 e0       	ldi	r25, 0x01	; 1
    11f8:	68 e0       	ldi	r22, 0x08	; 8
    11fa:	03 c0       	rjmp	.+6      	; 0x1202 <EVENT_USB_Device_ControlRequest+0x5c>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	60 e0       	ldi	r22, 0x00	; 0
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	0e 94 1d 0a 	call	0x143a	; 0x143a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1208:	80 91 e8 00 	lds	r24, 0x00E8
    120c:	8b 77       	andi	r24, 0x7B	; 123
    120e:	80 93 e8 00 	sts	0x00E8, r24
    1212:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1214:	80 91 c4 01 	lds	r24, 0x01C4
    1218:	81 32       	cpi	r24, 0x21	; 33
    121a:	09 f0       	breq	.+2      	; 0x121e <EVENT_USB_Device_ControlRequest+0x78>
    121c:	7f c0       	rjmp	.+254    	; 0x131c <EVENT_USB_Device_ControlRequest+0x176>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    121e:	80 91 c8 01 	lds	r24, 0x01C8
    1222:	90 91 c9 01 	lds	r25, 0x01C9
    1226:	89 2b       	or	r24, r25
    1228:	09 f0       	breq	.+2      	; 0x122c <EVENT_USB_Device_ControlRequest+0x86>
    122a:	78 c0       	rjmp	.+240    	; 0x131c <EVENT_USB_Device_ControlRequest+0x176>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    122c:	80 91 e8 00 	lds	r24, 0x00E8
    1230:	87 7f       	andi	r24, 0xF7	; 247
    1232:	80 93 e8 00 	sts	0x00E8, r24
    1236:	05 c0       	rjmp	.+10     	; 0x1242 <EVENT_USB_Device_ControlRequest+0x9c>
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1238:	80 91 c3 01 	lds	r24, 0x01C3
    123c:	88 23       	and	r24, r24
    123e:	09 f4       	brne	.+2      	; 0x1242 <EVENT_USB_Device_ControlRequest+0x9c>
    1240:	6d c0       	rjmp	.+218    	; 0x131c <EVENT_USB_Device_ControlRequest+0x176>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1242:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    1246:	82 ff       	sbrs	r24, 2
    1248:	f7 cf       	rjmp	.-18     	; 0x1238 <EVENT_USB_Device_ControlRequest+0x92>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    124a:	80 91 f1 00 	lds	r24, 0x00F1
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    124e:	80 93 41 01 	sts	0x0141, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1252:	80 91 e8 00 	lds	r24, 0x00E8
    1256:	8b 77       	andi	r24, 0x7B	; 123
    1258:	1c c0       	rjmp	.+56     	; 0x1292 <EVENT_USB_Device_ControlRequest+0xec>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    125a:	80 91 c4 01 	lds	r24, 0x01C4
    125e:	81 3a       	cpi	r24, 0xA1	; 161
    1260:	09 f0       	breq	.+2      	; 0x1264 <EVENT_USB_Device_ControlRequest+0xbe>
    1262:	5c c0       	rjmp	.+184    	; 0x131c <EVENT_USB_Device_ControlRequest+0x176>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1264:	80 91 c8 01 	lds	r24, 0x01C8
    1268:	90 91 c9 01 	lds	r25, 0x01C9
    126c:	89 2b       	or	r24, r25
    126e:	09 f0       	breq	.+2      	; 0x1272 <EVENT_USB_Device_ControlRequest+0xcc>
    1270:	55 c0       	rjmp	.+170    	; 0x131c <EVENT_USB_Device_ControlRequest+0x176>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1272:	80 91 e8 00 	lds	r24, 0x00E8
    1276:	87 7f       	andi	r24, 0xF7	; 247
    1278:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    127c:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    1280:	80 ff       	sbrs	r24, 0
    1282:	fc cf       	rjmp	.-8      	; 0x127c <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    1284:	80 91 01 01 	lds	r24, 0x0101
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1288:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    128c:	80 91 e8 00 	lds	r24, 0x00E8
    1290:	8e 77       	andi	r24, 0x7E	; 126
    1292:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearIN();
                    Endpoint_ClearStatusStage();
    1296:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <Endpoint_ClearStatusStage>
    129a:	08 95       	ret
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    129c:	80 91 c4 01 	lds	r24, 0x01C4
    12a0:	81 32       	cpi	r24, 0x21	; 33
    12a2:	e1 f5       	brne	.+120    	; 0x131c <EVENT_USB_Device_ControlRequest+0x176>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    12a4:	80 91 c8 01 	lds	r24, 0x01C8
    12a8:	90 91 c9 01 	lds	r25, 0x01C9
    12ac:	89 2b       	or	r24, r25
    12ae:	b1 f5       	brne	.+108    	; 0x131c <EVENT_USB_Device_ControlRequest+0x176>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12b0:	80 91 e8 00 	lds	r24, 0x00E8
    12b4:	87 7f       	andi	r24, 0xF7	; 247
    12b6:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    12ba:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    12be:	80 91 c6 01 	lds	r24, 0x01C6
    12c2:	80 93 01 01 	sts	0x0101, r24
                    clear_keyboard();
    12c6:	0e 94 9e 10 	call	0x213c	; 0x213c <clear_keyboard>
    12ca:	08 95       	ret
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    12cc:	80 91 c4 01 	lds	r24, 0x01C4
    12d0:	81 32       	cpi	r24, 0x21	; 33
    12d2:	21 f5       	brne	.+72     	; 0x131c <EVENT_USB_Device_ControlRequest+0x176>
    12d4:	80 91 e8 00 	lds	r24, 0x00E8
    12d8:	87 7f       	andi	r24, 0xF7	; 247
    12da:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    12de:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    12e2:	80 91 c7 01 	lds	r24, 0x01C7
    12e6:	80 93 40 01 	sts	0x0140, r24
    12ea:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    12ec:	80 91 c4 01 	lds	r24, 0x01C4
    12f0:	81 3a       	cpi	r24, 0xA1	; 161
    12f2:	a1 f4       	brne	.+40     	; 0x131c <EVENT_USB_Device_ControlRequest+0x176>
    12f4:	80 91 e8 00 	lds	r24, 0x00E8
    12f8:	87 7f       	andi	r24, 0xF7	; 247
    12fa:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12fe:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    1302:	80 ff       	sbrs	r24, 0
    1304:	fc cf       	rjmp	.-8      	; 0x12fe <EVENT_USB_Device_ControlRequest+0x158>
                Endpoint_Write_8(keyboard_idle);
    1306:	80 91 40 01 	lds	r24, 0x0140
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    130a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    130e:	80 91 e8 00 	lds	r24, 0x00E8
    1312:	8e 77       	andi	r24, 0x7E	; 126
    1314:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    1318:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <Endpoint_ClearStatusStage>
    131c:	08 95       	ret

0000131e <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	61 ec       	ldi	r22, 0xC1	; 193
    1322:	42 e0       	ldi	r20, 0x02	; 2
    1324:	0e 94 47 0b 	call	0x168e	; 0x168e <Endpoint_ConfigureEndpoint_Prv>
#ifdef NKRO_ENABLE
    /* Setup NKRO HID Report Endpoints */
    ConfigSuccess &= ENDPOINT_CONFIG(NKRO_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
                                     NKRO_EPSIZE, ENDPOINT_BANK_SINGLE);
#endif
}
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	61 ec       	ldi	r22, 0xC1	; 193
    132c:	42 e0       	ldi	r20, 0x02	; 2
    132e:	0e 94 47 0b 	call	0x168e	; 0x168e <Endpoint_ConfigureEndpoint_Prv>
    1332:	83 e0       	ldi	r24, 0x03	; 3
    1334:	61 ec       	ldi	r22, 0xC1	; 193
    1336:	42 e2       	ldi	r20, 0x22	; 34
    1338:	0e 94 47 0b 	call	0x168e	; 0x168e <Endpoint_ConfigureEndpoint_Prv>
    133c:	08 95       	ret

0000133e <EVENT_USB_Device_WakeUp>:
#endif
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    133e:	89 ef       	ldi	r24, 0xF9	; 249
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    suspend_wakeup_init();
    1346:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <suspend_wakeup_init>
#ifdef SLEEP_LED_ENABLE
    sleep_led_disable();
    // NOTE: converters may not accept this
    led_set(host_keyboard_leds());
#endif
}
    134a:	08 95       	ret

0000134c <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    134c:	da 01       	movw	r26, r20
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    134e:	93 30       	cpi	r25, 0x03	; 3
    1350:	c1 f0       	breq	.+48     	; 0x1382 <CALLBACK_USB_GetDescriptor+0x36>
    1352:	94 30       	cpi	r25, 0x04	; 4
    1354:	30 f4       	brcc	.+12     	; 0x1362 <CALLBACK_USB_GetDescriptor+0x16>
    1356:	91 30       	cpi	r25, 0x01	; 1
    1358:	51 f0       	breq	.+20     	; 0x136e <CALLBACK_USB_GetDescriptor+0x22>
    135a:	92 30       	cpi	r25, 0x02	; 2
    135c:	09 f0       	breq	.+2      	; 0x1360 <CALLBACK_USB_GetDescriptor+0x14>
    135e:	4f c0       	rjmp	.+158    	; 0x13fe <CALLBACK_USB_GetDescriptor+0xb2>
    1360:	0b c0       	rjmp	.+22     	; 0x1378 <CALLBACK_USB_GetDescriptor+0x2c>
    1362:	91 32       	cpi	r25, 0x21	; 33
    1364:	21 f1       	breq	.+72     	; 0x13ae <CALLBACK_USB_GetDescriptor+0x62>
    1366:	92 32       	cpi	r25, 0x22	; 34
    1368:	09 f0       	breq	.+2      	; 0x136c <CALLBACK_USB_GetDescriptor+0x20>
    136a:	49 c0       	rjmp	.+146    	; 0x13fe <CALLBACK_USB_GetDescriptor+0xb2>
    136c:	32 c0       	rjmp	.+100    	; 0x13d2 <CALLBACK_USB_GetDescriptor+0x86>
    136e:	e2 ea       	ldi	r30, 0xA2	; 162
    1370:	f2 e0       	ldi	r31, 0x02	; 2
    1372:	22 e1       	ldi	r18, 0x12	; 18
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	47 c0       	rjmp	.+142    	; 0x1406 <CALLBACK_USB_GetDescriptor+0xba>
    1378:	e4 eb       	ldi	r30, 0xB4	; 180
    137a:	f2 e0       	ldi	r31, 0x02	; 2
    137c:	2b e5       	ldi	r18, 0x5B	; 91
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	42 c0       	rjmp	.+132    	; 0x1406 <CALLBACK_USB_GetDescriptor+0xba>
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	51 f0       	breq	.+20     	; 0x139a <CALLBACK_USB_GetDescriptor+0x4e>
    1386:	81 30       	cpi	r24, 0x01	; 1
    1388:	20 f0       	brcs	.+8      	; 0x1392 <CALLBACK_USB_GetDescriptor+0x46>
    138a:	82 30       	cpi	r24, 0x02	; 2
    138c:	09 f0       	breq	.+2      	; 0x1390 <CALLBACK_USB_GetDescriptor+0x44>
    138e:	37 c0       	rjmp	.+110    	; 0x13fe <CALLBACK_USB_GetDescriptor+0xb2>
    1390:	08 c0       	rjmp	.+16     	; 0x13a2 <CALLBACK_USB_GetDescriptor+0x56>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1392:	ef e0       	ldi	r30, 0x0F	; 15
    1394:	f3 e0       	ldi	r31, 0x03	; 3
    1396:	84 91       	lpm	r24, Z+
    1398:	07 c0       	rjmp	.+14     	; 0x13a8 <CALLBACK_USB_GetDescriptor+0x5c>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    139a:	e3 e1       	ldi	r30, 0x13	; 19
    139c:	f3 e0       	ldi	r31, 0x03	; 3
    139e:	84 91       	lpm	r24, Z+
    13a0:	03 c0       	rjmp	.+6      	; 0x13a8 <CALLBACK_USB_GetDescriptor+0x5c>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    13a2:	e3 e2       	ldi	r30, 0x23	; 35
    13a4:	f3 e0       	ldi	r31, 0x03	; 3
    13a6:	84 91       	lpm	r24, Z+
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	2c c0       	rjmp	.+88     	; 0x1406 <CALLBACK_USB_GetDescriptor+0xba>
                    break;
            }
            break;
        case HID_DTYPE_HID:
            switch (wIndex) {
    13ae:	61 30       	cpi	r22, 0x01	; 1
    13b0:	41 f0       	breq	.+16     	; 0x13c2 <CALLBACK_USB_GetDescriptor+0x76>
    13b2:	61 30       	cpi	r22, 0x01	; 1
    13b4:	18 f0       	brcs	.+6      	; 0x13bc <CALLBACK_USB_GetDescriptor+0x70>
    13b6:	62 30       	cpi	r22, 0x02	; 2
    13b8:	11 f5       	brne	.+68     	; 0x13fe <CALLBACK_USB_GetDescriptor+0xb2>
    13ba:	08 c0       	rjmp	.+16     	; 0x13cc <CALLBACK_USB_GetDescriptor+0x80>
    13bc:	e6 ec       	ldi	r30, 0xC6	; 198
    13be:	f2 e0       	ldi	r31, 0x02	; 2
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <CALLBACK_USB_GetDescriptor+0x7a>
    13c2:	ef ed       	ldi	r30, 0xDF	; 223
    13c4:	f2 e0       	ldi	r31, 0x02	; 2
    13c6:	29 e0       	ldi	r18, 0x09	; 9
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	1d c0       	rjmp	.+58     	; 0x1406 <CALLBACK_USB_GetDescriptor+0xba>
#endif
#ifdef EXTRAKEY_ENABLE
            case EXTRAKEY_INTERFACE:
                Address = &ConfigurationDescriptor.Extrakey_HID;
                Size    = sizeof(USB_HID_Descriptor_HID_t);
                break;
    13cc:	e8 ef       	ldi	r30, 0xF8	; 248
    13ce:	f2 e0       	ldi	r31, 0x02	; 2
    13d0:	fa cf       	rjmp	.-12     	; 0x13c6 <CALLBACK_USB_GetDescriptor+0x7a>
                break;
#endif
            }
            break;
        case HID_DTYPE_Report:
            switch (wIndex) {
    13d2:	61 30       	cpi	r22, 0x01	; 1
    13d4:	51 f0       	breq	.+20     	; 0x13ea <CALLBACK_USB_GetDescriptor+0x9e>
    13d6:	61 30       	cpi	r22, 0x01	; 1
    13d8:	18 f0       	brcs	.+6      	; 0x13e0 <CALLBACK_USB_GetDescriptor+0x94>
    13da:	62 30       	cpi	r22, 0x02	; 2
    13dc:	81 f4       	brne	.+32     	; 0x13fe <CALLBACK_USB_GetDescriptor+0xb2>
    13de:	0a c0       	rjmp	.+20     	; 0x13f4 <CALLBACK_USB_GetDescriptor+0xa8>
    13e0:	ed e0       	ldi	r30, 0x0D	; 13
    13e2:	f2 e0       	ldi	r31, 0x02	; 2
    13e4:	2f e3       	ldi	r18, 0x3F	; 63
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	0e c0       	rjmp	.+28     	; 0x1406 <CALLBACK_USB_GetDescriptor+0xba>
    13ea:	ec e4       	ldi	r30, 0x4C	; 76
    13ec:	f2 e0       	ldi	r31, 0x02	; 2
    13ee:	26 e3       	ldi	r18, 0x36	; 54
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	09 c0       	rjmp	.+18     	; 0x1406 <CALLBACK_USB_GetDescriptor+0xba>
#endif
#ifdef EXTRAKEY_ENABLE
            case EXTRAKEY_INTERFACE:
                Address = &ExtrakeyReport;
                Size    = sizeof(ExtrakeyReport);
                break;
    13f4:	e2 e8       	ldi	r30, 0x82	; 130
    13f6:	f2 e0       	ldi	r31, 0x02	; 2
    13f8:	20 e2       	ldi	r18, 0x20	; 32
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	04 c0       	rjmp	.+8      	; 0x1406 <CALLBACK_USB_GetDescriptor+0xba>
    13fe:	e0 e0       	ldi	r30, 0x00	; 0
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1406:	ed 93       	st	X+, r30
    1408:	fc 93       	st	X, r31
    return Size;
}
    140a:	c9 01       	movw	r24, r18
    140c:	08 95       	ret

0000140e <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    140e:	80 e1       	ldi	r24, 0x10	; 16
    1410:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1412:	82 e1       	ldi	r24, 0x12	; 18
    1414:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1416:	09 b4       	in	r0, 0x29	; 41
    1418:	00 fe       	sbrs	r0, 0
    141a:	fd cf       	rjmp	.-6      	; 0x1416 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    141c:	80 91 d8 00 	lds	r24, 0x00D8
    1420:	8f 7d       	andi	r24, 0xDF	; 223
    1422:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1426:	80 91 e0 00 	lds	r24, 0x00E0
    142a:	82 60       	ori	r24, 0x02	; 2
    142c:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    1430:	80 91 e0 00 	lds	r24, 0x00E0
    1434:	81 fd       	sbrc	r24, 1
    1436:	fc cf       	rjmp	.-8      	; 0x1430 <USB_Device_SendRemoteWakeup+0x22>
}
    1438:	08 95       	ret

0000143a <Endpoint_Write_Control_Stream_LE>:
    143a:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    143c:	40 91 ca 01 	lds	r20, 0x01CA
    1440:	50 91 cb 01 	lds	r21, 0x01CB
    1444:	46 17       	cp	r20, r22
    1446:	57 07       	cpc	r21, r23
    1448:	18 f4       	brcc	.+6      	; 0x1450 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    144a:	f9 01       	movw	r30, r18
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	43 c0       	rjmp	.+134    	; 0x14d6 <Endpoint_Write_Control_Stream_LE+0x9c>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1450:	61 15       	cp	r22, r1
    1452:	71 05       	cpc	r23, r1
    1454:	11 f0       	breq	.+4      	; 0x145a <Endpoint_Write_Control_Stream_LE+0x20>
    1456:	ab 01       	movw	r20, r22
    1458:	f8 cf       	rjmp	.-16     	; 0x144a <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    145a:	80 91 e8 00 	lds	r24, 0x00E8
    145e:	8e 77       	andi	r24, 0x7E	; 126
    1460:	80 93 e8 00 	sts	0x00E8, r24
    1464:	40 e0       	ldi	r20, 0x00	; 0
    1466:	50 e0       	ldi	r21, 0x00	; 0
    1468:	f0 cf       	rjmp	.-32     	; 0x144a <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    146a:	80 91 c3 01 	lds	r24, 0x01C3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    146e:	88 23       	and	r24, r24
    1470:	09 f4       	brne	.+2      	; 0x1474 <Endpoint_Write_Control_Stream_LE+0x3a>
    1472:	47 c0       	rjmp	.+142    	; 0x1502 <Endpoint_Write_Control_Stream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1474:	85 30       	cpi	r24, 0x05	; 5
    1476:	09 f4       	brne	.+2      	; 0x147a <Endpoint_Write_Control_Stream_LE+0x40>
    1478:	46 c0       	rjmp	.+140    	; 0x1506 <Endpoint_Write_Control_Stream_LE+0xcc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    147a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    147e:	83 fd       	sbrc	r24, 3
    1480:	44 c0       	rjmp	.+136    	; 0x150a <Endpoint_Write_Control_Stream_LE+0xd0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1482:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1486:	82 fd       	sbrc	r24, 2
    1488:	36 c0       	rjmp	.+108    	; 0x14f6 <Endpoint_Write_Control_Stream_LE+0xbc>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    148a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    148e:	80 ff       	sbrs	r24, 0
    1490:	22 c0       	rjmp	.+68     	; 0x14d6 <Endpoint_Write_Control_Stream_LE+0x9c>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1492:	80 91 f3 00 	lds	r24, 0x00F3
    1496:	90 91 f2 00 	lds	r25, 0x00F2
    149a:	78 2f       	mov	r23, r24
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	29 2f       	mov	r18, r25
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	26 2b       	or	r18, r22
    14a4:	37 2b       	or	r19, r23
    14a6:	07 c0       	rjmp	.+14     	; 0x14b6 <Endpoint_Write_Control_Stream_LE+0x7c>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    14a8:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    14aa:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    14ae:	41 50       	subi	r20, 0x01	; 1
    14b0:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    14b2:	2f 5f       	subi	r18, 0xFF	; 255
    14b4:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    14b6:	41 15       	cp	r20, r1
    14b8:	51 05       	cpc	r21, r1
    14ba:	19 f0       	breq	.+6      	; 0x14c2 <Endpoint_Write_Control_Stream_LE+0x88>
    14bc:	28 30       	cpi	r18, 0x08	; 8
    14be:	31 05       	cpc	r19, r1
    14c0:	98 f3       	brcs	.-26     	; 0x14a8 <Endpoint_Write_Control_Stream_LE+0x6e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	28 30       	cpi	r18, 0x08	; 8
    14c6:	31 05       	cpc	r19, r1
    14c8:	09 f4       	brne	.+2      	; 0x14cc <Endpoint_Write_Control_Stream_LE+0x92>
    14ca:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14cc:	80 91 e8 00 	lds	r24, 0x00E8
    14d0:	8e 77       	andi	r24, 0x7E	; 126
    14d2:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    14d6:	41 15       	cp	r20, r1
    14d8:	51 05       	cpc	r21, r1
    14da:	39 f6       	brne	.-114    	; 0x146a <Endpoint_Write_Control_Stream_LE+0x30>
    14dc:	99 23       	and	r25, r25
    14de:	29 f6       	brne	.-118    	; 0x146a <Endpoint_Write_Control_Stream_LE+0x30>
    14e0:	0a c0       	rjmp	.+20     	; 0x14f6 <Endpoint_Write_Control_Stream_LE+0xbc>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    14e2:	80 91 c3 01 	lds	r24, 0x01C3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    14e6:	88 23       	and	r24, r24
    14e8:	61 f0       	breq	.+24     	; 0x1502 <Endpoint_Write_Control_Stream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    14ea:	85 30       	cpi	r24, 0x05	; 5
    14ec:	61 f0       	breq	.+24     	; 0x1506 <Endpoint_Write_Control_Stream_LE+0xcc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    14ee:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    14f2:	83 fd       	sbrc	r24, 3
    14f4:	0a c0       	rjmp	.+20     	; 0x150a <Endpoint_Write_Control_Stream_LE+0xd0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    14f6:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    14fa:	82 ff       	sbrs	r24, 2
    14fc:	f2 cf       	rjmp	.-28     	; 0x14e2 <Endpoint_Write_Control_Stream_LE+0xa8>
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	08 95       	ret
    1502:	82 e0       	ldi	r24, 0x02	; 2
    1504:	08 95       	ret
    1506:	83 e0       	ldi	r24, 0x03	; 3
    1508:	08 95       	ret
    150a:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    150c:	08 95       	ret

0000150e <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    150e:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1510:	40 91 ca 01 	lds	r20, 0x01CA
    1514:	50 91 cb 01 	lds	r21, 0x01CB
    1518:	46 17       	cp	r20, r22
    151a:	57 07       	cpc	r21, r23
    151c:	18 f4       	brcc	.+6      	; 0x1524 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    151e:	f9 01       	movw	r30, r18
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	44 c0       	rjmp	.+136    	; 0x15ac <Endpoint_Write_Control_PStream_LE+0x9e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1524:	61 15       	cp	r22, r1
    1526:	71 05       	cpc	r23, r1
    1528:	11 f0       	breq	.+4      	; 0x152e <Endpoint_Write_Control_PStream_LE+0x20>
    152a:	ab 01       	movw	r20, r22
    152c:	f8 cf       	rjmp	.-16     	; 0x151e <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    152e:	80 91 e8 00 	lds	r24, 0x00E8
    1532:	8e 77       	andi	r24, 0x7E	; 126
    1534:	80 93 e8 00 	sts	0x00E8, r24
    1538:	40 e0       	ldi	r20, 0x00	; 0
    153a:	50 e0       	ldi	r21, 0x00	; 0
    153c:	f0 cf       	rjmp	.-32     	; 0x151e <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    153e:	80 91 c3 01 	lds	r24, 0x01C3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1542:	88 23       	and	r24, r24
    1544:	09 f4       	brne	.+2      	; 0x1548 <Endpoint_Write_Control_PStream_LE+0x3a>
    1546:	48 c0       	rjmp	.+144    	; 0x15d8 <Endpoint_Write_Control_PStream_LE+0xca>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1548:	85 30       	cpi	r24, 0x05	; 5
    154a:	09 f4       	brne	.+2      	; 0x154e <Endpoint_Write_Control_PStream_LE+0x40>
    154c:	47 c0       	rjmp	.+142    	; 0x15dc <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    154e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1552:	83 fd       	sbrc	r24, 3
    1554:	45 c0       	rjmp	.+138    	; 0x15e0 <Endpoint_Write_Control_PStream_LE+0xd2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1556:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    155a:	82 fd       	sbrc	r24, 2
    155c:	37 c0       	rjmp	.+110    	; 0x15cc <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    155e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1562:	80 ff       	sbrs	r24, 0
    1564:	23 c0       	rjmp	.+70     	; 0x15ac <Endpoint_Write_Control_PStream_LE+0x9e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1566:	80 91 f3 00 	lds	r24, 0x00F3
    156a:	90 91 f2 00 	lds	r25, 0x00F2
    156e:	78 2f       	mov	r23, r24
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	29 2f       	mov	r18, r25
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	26 2b       	or	r18, r22
    1578:	37 2b       	or	r19, r23
    157a:	08 c0       	rjmp	.+16     	; 0x158c <Endpoint_Write_Control_PStream_LE+0x7e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    157c:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    157e:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1582:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1584:	41 50       	subi	r20, 0x01	; 1
    1586:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1588:	2f 5f       	subi	r18, 0xFF	; 255
    158a:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    158c:	41 15       	cp	r20, r1
    158e:	51 05       	cpc	r21, r1
    1590:	19 f0       	breq	.+6      	; 0x1598 <Endpoint_Write_Control_PStream_LE+0x8a>
    1592:	28 30       	cpi	r18, 0x08	; 8
    1594:	31 05       	cpc	r19, r1
    1596:	90 f3       	brcs	.-28     	; 0x157c <Endpoint_Write_Control_PStream_LE+0x6e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	28 30       	cpi	r18, 0x08	; 8
    159c:	31 05       	cpc	r19, r1
    159e:	09 f4       	brne	.+2      	; 0x15a2 <Endpoint_Write_Control_PStream_LE+0x94>
    15a0:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15a2:	80 91 e8 00 	lds	r24, 0x00E8
    15a6:	8e 77       	andi	r24, 0x7E	; 126
    15a8:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    15ac:	41 15       	cp	r20, r1
    15ae:	51 05       	cpc	r21, r1
    15b0:	31 f6       	brne	.-116    	; 0x153e <Endpoint_Write_Control_PStream_LE+0x30>
    15b2:	99 23       	and	r25, r25
    15b4:	21 f6       	brne	.-120    	; 0x153e <Endpoint_Write_Control_PStream_LE+0x30>
    15b6:	0a c0       	rjmp	.+20     	; 0x15cc <Endpoint_Write_Control_PStream_LE+0xbe>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    15b8:	80 91 c3 01 	lds	r24, 0x01C3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    15bc:	88 23       	and	r24, r24
    15be:	61 f0       	breq	.+24     	; 0x15d8 <Endpoint_Write_Control_PStream_LE+0xca>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    15c0:	85 30       	cpi	r24, 0x05	; 5
    15c2:	61 f0       	breq	.+24     	; 0x15dc <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    15c4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    15c8:	83 fd       	sbrc	r24, 3
    15ca:	0a c0       	rjmp	.+20     	; 0x15e0 <Endpoint_Write_Control_PStream_LE+0xd2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    15cc:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    15d0:	82 ff       	sbrs	r24, 2
    15d2:	f2 cf       	rjmp	.-28     	; 0x15b8 <Endpoint_Write_Control_PStream_LE+0xaa>
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	08 95       	ret
    15d8:	82 e0       	ldi	r24, 0x02	; 2
    15da:	08 95       	ret
    15dc:	83 e0       	ldi	r24, 0x03	; 3
    15de:	08 95       	ret
    15e0:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    15e2:	08 95       	ret

000015e4 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    15e4:	bf 92       	push	r11
    15e6:	cf 92       	push	r12
    15e8:	df 92       	push	r13
    15ea:	ef 92       	push	r14
    15ec:	ff 92       	push	r15
    15ee:	0f 93       	push	r16
    15f0:	1f 93       	push	r17
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
    15f6:	18 2f       	mov	r17, r24
    15f8:	09 2f       	mov	r16, r25
    15fa:	7b 01       	movw	r14, r22
    15fc:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    15fe:	0e 94 a0 0b 	call	0x1740	; 0x1740 <Endpoint_WaitUntilReady>
    1602:	b8 2e       	mov	r11, r24
    1604:	88 23       	and	r24, r24
    1606:	c1 f5       	brne	.+112    	; 0x1678 <Endpoint_Write_Stream_LE+0x94>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1608:	81 2f       	mov	r24, r17
    160a:	90 2f       	mov	r25, r16
    160c:	9c 01       	movw	r18, r24
    160e:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1610:	c1 14       	cp	r12, r1
    1612:	d1 04       	cpc	r13, r1
    1614:	39 f0       	breq	.+14     	; 0x1624 <Endpoint_Write_Stream_LE+0x40>
	{
		Length -= *BytesProcessed;
    1616:	f6 01       	movw	r30, r12
    1618:	80 81       	ld	r24, Z
    161a:	91 81       	ldd	r25, Z+1	; 0x01
    161c:	e8 1a       	sub	r14, r24
    161e:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1620:	c8 0f       	add	r28, r24
    1622:	d9 1f       	adc	r29, r25
    1624:	00 e0       	ldi	r16, 0x00	; 0
    1626:	10 e0       	ldi	r17, 0x00	; 0
    1628:	24 c0       	rjmp	.+72     	; 0x1672 <Endpoint_Write_Stream_LE+0x8e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    162a:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    162e:	85 fd       	sbrc	r24, 5
    1630:	18 c0       	rjmp	.+48     	; 0x1662 <Endpoint_Write_Stream_LE+0x7e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1632:	80 91 e8 00 	lds	r24, 0x00E8
    1636:	8e 77       	andi	r24, 0x7E	; 126
    1638:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    163c:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
    1640:	c1 14       	cp	r12, r1
    1642:	d1 04       	cpc	r13, r1
    1644:	49 f0       	breq	.+18     	; 0x1658 <Endpoint_Write_Stream_LE+0x74>
			{
				*BytesProcessed += BytesInTransfer;
    1646:	f6 01       	movw	r30, r12
    1648:	80 81       	ld	r24, Z
    164a:	91 81       	ldd	r25, Z+1	; 0x01
    164c:	80 0f       	add	r24, r16
    164e:	91 1f       	adc	r25, r17
    1650:	91 83       	std	Z+1, r25	; 0x01
    1652:	80 83       	st	Z, r24
    1654:	85 e0       	ldi	r24, 0x05	; 5
    1656:	11 c0       	rjmp	.+34     	; 0x167a <Endpoint_Write_Stream_LE+0x96>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1658:	0e 94 a0 0b 	call	0x1740	; 0x1740 <Endpoint_WaitUntilReady>
    165c:	88 23       	and	r24, r24
    165e:	49 f0       	breq	.+18     	; 0x1672 <Endpoint_Write_Stream_LE+0x8e>
    1660:	0c c0       	rjmp	.+24     	; 0x167a <Endpoint_Write_Stream_LE+0x96>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1662:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1664:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1668:	08 94       	sec
    166a:	e1 08       	sbc	r14, r1
    166c:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    166e:	0f 5f       	subi	r16, 0xFF	; 255
    1670:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1672:	e1 14       	cp	r14, r1
    1674:	f1 04       	cpc	r15, r1
    1676:	c9 f6       	brne	.-78     	; 0x162a <Endpoint_Write_Stream_LE+0x46>
    1678:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	1f 91       	pop	r17
    1680:	0f 91       	pop	r16
    1682:	ff 90       	pop	r15
    1684:	ef 90       	pop	r14
    1686:	df 90       	pop	r13
    1688:	cf 90       	pop	r12
    168a:	bf 90       	pop	r11
    168c:	08 95       	ret

0000168e <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
    168e:	38 2f       	mov	r19, r24
    1690:	28 2f       	mov	r18, r24
    1692:	2e c0       	rjmp	.+92     	; 0x16f0 <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1694:	82 2f       	mov	r24, r18
    1696:	8f 70       	andi	r24, 0x0F	; 15
    1698:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    169c:	23 17       	cp	r18, r19
    169e:	21 f4       	brne	.+8      	; 0x16a8 <Endpoint_ConfigureEndpoint_Prv+0x1a>
    16a0:	76 2f       	mov	r23, r22
    16a2:	94 2f       	mov	r25, r20
    16a4:	50 e0       	ldi	r21, 0x00	; 0
    16a6:	06 c0       	rjmp	.+12     	; 0x16b4 <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    16a8:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    16ac:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
    16b0:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    16b4:	91 ff       	sbrs	r25, 1
    16b6:	1b c0       	rjmp	.+54     	; 0x16ee <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    16b8:	80 91 eb 00 	lds	r24, 0x00EB
    16bc:	8e 7f       	andi	r24, 0xFE	; 254
    16be:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    16c2:	80 91 ed 00 	lds	r24, 0x00ED
    16c6:	8d 7f       	andi	r24, 0xFD	; 253
    16c8:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    16cc:	80 91 eb 00 	lds	r24, 0x00EB
    16d0:	81 60       	ori	r24, 0x01	; 1
    16d2:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    16d6:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    16da:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
    16de:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    16e2:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
    16e6:	87 fd       	sbrc	r24, 7
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <Endpoint_ConfigureEndpoint_Prv+0x60>
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    16ee:	2f 5f       	subi	r18, 0xFF	; 255
    16f0:	27 30       	cpi	r18, 0x07	; 7
    16f2:	80 f2       	brcs	.-96     	; 0x1694 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16f4:	3f 70       	andi	r19, 0x0F	; 15
    16f6:	30 93 e9 00 	sts	0x00E9, r19
    16fa:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    16fc:	08 95       	ret

000016fe <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    16fe:	80 91 c4 01 	lds	r24, 0x01C4
    1702:	88 23       	and	r24, r24
    1704:	9c f4       	brge	.+38     	; 0x172c <Endpoint_ClearStatusStage+0x2e>
    1706:	04 c0       	rjmp	.+8      	; 0x1710 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1708:	80 91 c3 01 	lds	r24, 0x01C3
    170c:	88 23       	and	r24, r24
    170e:	b9 f0       	breq	.+46     	; 0x173e <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1710:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1714:	82 ff       	sbrs	r24, 2
    1716:	f8 cf       	rjmp	.-16     	; 0x1708 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1718:	80 91 e8 00 	lds	r24, 0x00E8
    171c:	8b 77       	andi	r24, 0x7B	; 123
    171e:	80 93 e8 00 	sts	0x00E8, r24
    1722:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1724:	80 91 c3 01 	lds	r24, 0x01C3
    1728:	88 23       	and	r24, r24
    172a:	49 f0       	breq	.+18     	; 0x173e <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    172c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1730:	80 ff       	sbrs	r24, 0
    1732:	f8 cf       	rjmp	.-16     	; 0x1724 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1734:	80 91 e8 00 	lds	r24, 0x00E8
    1738:	8e 77       	andi	r24, 0x7E	; 126
    173a:	80 93 e8 00 	sts	0x00E8, r24
    173e:	08 95       	ret

00001740 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1740:	40 91 e4 00 	lds	r20, 0x00E4
    1744:	50 91 e5 00 	lds	r21, 0x00E5
    1748:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    174a:	80 91 ec 00 	lds	r24, 0x00EC
    174e:	80 ff       	sbrs	r24, 0
    1750:	24 c0       	rjmp	.+72     	; 0x179a <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1752:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1756:	80 fd       	sbrc	r24, 0
    1758:	1e c0       	rjmp	.+60     	; 0x1796 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    175a:	80 91 c3 01 	lds	r24, 0x01C3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    175e:	88 23       	and	r24, r24
    1760:	11 f4       	brne	.+4      	; 0x1766 <Endpoint_WaitUntilReady+0x26>
    1762:	82 e0       	ldi	r24, 0x02	; 2
    1764:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1766:	85 30       	cpi	r24, 0x05	; 5
    1768:	11 f4       	brne	.+4      	; 0x176e <Endpoint_WaitUntilReady+0x2e>
    176a:	83 e0       	ldi	r24, 0x03	; 3
    176c:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    176e:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1772:	85 ff       	sbrs	r24, 5
    1774:	02 c0       	rjmp	.+4      	; 0x177a <Endpoint_WaitUntilReady+0x3a>
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	08 95       	ret
    177a:	80 91 e4 00 	lds	r24, 0x00E4
    177e:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1782:	84 17       	cp	r24, r20
    1784:	95 07       	cpc	r25, r21
    1786:	09 f3       	breq	.-62     	; 0x174a <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1788:	22 23       	and	r18, r18
    178a:	11 f4       	brne	.+4      	; 0x1790 <Endpoint_WaitUntilReady+0x50>
    178c:	84 e0       	ldi	r24, 0x04	; 4
    178e:	08 95       	ret
    1790:	21 50       	subi	r18, 0x01	; 1
    1792:	ac 01       	movw	r20, r24
    1794:	da cf       	rjmp	.-76     	; 0x174a <Endpoint_WaitUntilReady+0xa>
    1796:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1798:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    179a:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    179e:	82 ff       	sbrs	r24, 2
    17a0:	dc cf       	rjmp	.-72     	; 0x175a <Endpoint_WaitUntilReady+0x1a>
    17a2:	f9 cf       	rjmp	.-14     	; 0x1796 <Endpoint_WaitUntilReady+0x56>

000017a4 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    17a4:	0e 94 45 0c 	call	0x188a	; 0x188a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    17a8:	0e 94 4d 0c 	call	0x189a	; 0x189a <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    17ac:	e0 ee       	ldi	r30, 0xE0	; 224
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	81 60       	ori	r24, 0x01	; 1
    17b4:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    17b6:	a8 ed       	ldi	r26, 0xD8	; 216
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	8c 91       	ld	r24, X
    17bc:	8f 77       	andi	r24, 0x7F	; 127
    17be:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    17c0:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    17c2:	e7 ed       	ldi	r30, 0xD7	; 215
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	8e 7f       	andi	r24, 0xFE	; 254
    17ca:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    17cc:	8c 91       	ld	r24, X
    17ce:	8f 7e       	andi	r24, 0xEF	; 239
    17d0:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    17d2:	10 92 c2 01 	sts	0x01C2, r1
}
    17d6:	08 95       	ret

000017d8 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    17d8:	ef 92       	push	r14
    17da:	ff 92       	push	r15
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    17e0:	0e 94 45 0c 	call	0x188a	; 0x188a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    17e4:	0e 94 4d 0c 	call	0x189a	; 0x189a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    17e8:	08 ed       	ldi	r16, 0xD8	; 216
    17ea:	10 e0       	ldi	r17, 0x00	; 0
    17ec:	f8 01       	movw	r30, r16
    17ee:	80 81       	ld	r24, Z
    17f0:	8f 77       	andi	r24, 0x7F	; 127
    17f2:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    17f4:	80 81       	ld	r24, Z
    17f6:	80 68       	ori	r24, 0x80	; 128
    17f8:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    17fa:	80 81       	ld	r24, Z
    17fc:	8f 7d       	andi	r24, 0xDF	; 223
    17fe:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1800:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1802:	10 92 c3 01 	sts	0x01C3, r1
	USB_Device_ConfigurationNumber  = 0;
    1806:	10 92 bf 01 	sts	0x01BF, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    180a:	10 92 c1 01 	sts	0x01C1, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    180e:	10 92 c0 01 	sts	0x01C0, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1812:	80 ee       	ldi	r24, 0xE0	; 224
    1814:	e8 2e       	mov	r14, r24
    1816:	f1 2c       	mov	r15, r1
    1818:	f7 01       	movw	r30, r14
    181a:	80 81       	ld	r24, Z
    181c:	8b 7f       	andi	r24, 0xFB	; 251
    181e:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1820:	f8 01       	movw	r30, r16
    1822:	80 81       	ld	r24, Z
    1824:	81 60       	ori	r24, 0x01	; 1
    1826:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	60 e0       	ldi	r22, 0x00	; 0
    182c:	42 e0       	ldi	r20, 0x02	; 2
    182e:	0e 94 47 0b 	call	0x168e	; 0x168e <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1832:	e1 ee       	ldi	r30, 0xE1	; 225
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	8e 7f       	andi	r24, 0xFE	; 254
    183a:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    183c:	e2 ee       	ldi	r30, 0xE2	; 226
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	81 60       	ori	r24, 0x01	; 1
    1844:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1846:	80 81       	ld	r24, Z
    1848:	88 60       	ori	r24, 0x08	; 8
    184a:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    184c:	f7 01       	movw	r30, r14
    184e:	80 81       	ld	r24, Z
    1850:	8e 7f       	andi	r24, 0xFE	; 254
    1852:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1854:	f8 01       	movw	r30, r16
    1856:	80 81       	ld	r24, Z
    1858:	80 61       	ori	r24, 0x10	; 16
    185a:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    185c:	1f 91       	pop	r17
    185e:	0f 91       	pop	r16
    1860:	ff 90       	pop	r15
    1862:	ef 90       	pop	r14
    1864:	08 95       	ret

00001866 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1866:	e8 ed       	ldi	r30, 0xD8	; 216
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	8f 7e       	andi	r24, 0xEF	; 239
    186e:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1870:	e7 ed       	ldi	r30, 0xD7	; 215
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	81 60       	ori	r24, 0x01	; 1
    1878:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    187a:	84 e0       	ldi	r24, 0x04	; 4
    187c:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	80 93 c2 01 	sts	0x01C2, r24

	USB_ResetInterface();
    1884:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <USB_ResetInterface>
}
    1888:	08 95       	ret

0000188a <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    188a:	e8 ed       	ldi	r30, 0xD8	; 216
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	8e 7f       	andi	r24, 0xFE	; 254
    1892:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1894:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    1898:	08 95       	ret

0000189a <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    189a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    189e:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    18a2:	08 95       	ret

000018a4 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    18a4:	1f 92       	push	r1
    18a6:	0f 92       	push	r0
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	0f 92       	push	r0
    18ac:	11 24       	eor	r1, r1
    18ae:	2f 93       	push	r18
    18b0:	3f 93       	push	r19
    18b2:	4f 93       	push	r20
    18b4:	5f 93       	push	r21
    18b6:	6f 93       	push	r22
    18b8:	7f 93       	push	r23
    18ba:	8f 93       	push	r24
    18bc:	9f 93       	push	r25
    18be:	af 93       	push	r26
    18c0:	bf 93       	push	r27
    18c2:	ef 93       	push	r30
    18c4:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    18c6:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    18ca:	82 ff       	sbrs	r24, 2
    18cc:	0b c0       	rjmp	.+22     	; 0x18e4 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    18ce:	80 91 e2 00 	lds	r24, 0x00E2
    18d2:	82 ff       	sbrs	r24, 2
    18d4:	07 c0       	rjmp	.+14     	; 0x18e4 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    18d6:	80 91 e1 00 	lds	r24, 0x00E1
    18da:	8b 7f       	andi	r24, 0xFB	; 251
    18dc:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    18e0:	0e 94 0e 07 	call	0xe1c	; 0xe1c <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    18e4:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    18e8:	80 ff       	sbrs	r24, 0
    18ea:	1f c0       	rjmp	.+62     	; 0x192a <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    18ec:	80 91 d8 00 	lds	r24, 0x00D8
    18f0:	80 ff       	sbrs	r24, 0
    18f2:	1b c0       	rjmp	.+54     	; 0x192a <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    18f4:	80 91 da 00 	lds	r24, 0x00DA
    18f8:	8e 7f       	andi	r24, 0xFE	; 254
    18fa:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    18fe:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1902:	80 ff       	sbrs	r24, 0
    1904:	0d c0       	rjmp	.+26     	; 0x1920 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1906:	80 e1       	ldi	r24, 0x10	; 16
    1908:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    190a:	82 e1       	ldi	r24, 0x12	; 18
    190c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    190e:	09 b4       	in	r0, 0x29	; 41
    1910:	00 fe       	sbrs	r0, 0
    1912:	fd cf       	rjmp	.-6      	; 0x190e <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	80 93 c3 01 	sts	0x01C3, r24
			EVENT_USB_Device_Connect();
    191a:	0e 94 6d 08 	call	0x10da	; 0x10da <EVENT_USB_Device_Connect>
    191e:	05 c0       	rjmp	.+10     	; 0x192a <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1920:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1922:	10 92 c3 01 	sts	0x01C3, r1
			EVENT_USB_Device_Disconnect();
    1926:	0e 94 66 08 	call	0x10cc	; 0x10cc <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    192a:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    192e:	80 ff       	sbrs	r24, 0
    1930:	19 c0       	rjmp	.+50     	; 0x1964 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1932:	80 91 e2 00 	lds	r24, 0x00E2
    1936:	80 ff       	sbrs	r24, 0
    1938:	15 c0       	rjmp	.+42     	; 0x1964 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    193a:	80 91 e2 00 	lds	r24, 0x00E2
    193e:	8e 7f       	andi	r24, 0xFE	; 254
    1940:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1944:	80 91 e2 00 	lds	r24, 0x00E2
    1948:	80 61       	ori	r24, 0x10	; 16
    194a:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    194e:	80 91 d8 00 	lds	r24, 0x00D8
    1952:	80 62       	ori	r24, 0x20	; 32
    1954:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1958:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    195a:	85 e0       	ldi	r24, 0x05	; 5
    195c:	80 93 c3 01 	sts	0x01C3, r24
		EVENT_USB_Device_Suspend();
    1960:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1964:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1968:	84 ff       	sbrs	r24, 4
    196a:	30 c0       	rjmp	.+96     	; 0x19cc <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    196c:	80 91 e2 00 	lds	r24, 0x00E2
    1970:	84 ff       	sbrs	r24, 4
    1972:	2c c0       	rjmp	.+88     	; 0x19cc <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1974:	80 e1       	ldi	r24, 0x10	; 16
    1976:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1978:	82 e1       	ldi	r24, 0x12	; 18
    197a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    197c:	09 b4       	in	r0, 0x29	; 41
    197e:	00 fe       	sbrs	r0, 0
    1980:	fd cf       	rjmp	.-6      	; 0x197c <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1982:	80 91 d8 00 	lds	r24, 0x00D8
    1986:	8f 7d       	andi	r24, 0xDF	; 223
    1988:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    198c:	80 91 e1 00 	lds	r24, 0x00E1
    1990:	8f 7e       	andi	r24, 0xEF	; 239
    1992:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1996:	80 91 e2 00 	lds	r24, 0x00E2
    199a:	8f 7e       	andi	r24, 0xEF	; 239
    199c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    19a0:	80 91 e2 00 	lds	r24, 0x00E2
    19a4:	81 60       	ori	r24, 0x01	; 1
    19a6:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    19aa:	80 91 bf 01 	lds	r24, 0x01BF
    19ae:	88 23       	and	r24, r24
    19b0:	11 f0       	breq	.+4      	; 0x19b6 <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    19b2:	84 e0       	ldi	r24, 0x04	; 4
    19b4:	07 c0       	rjmp	.+14     	; 0x19c4 <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    19b6:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    19ba:	87 fd       	sbrc	r24, 7
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <__vector_10+0x11e>
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	01 c0       	rjmp	.+2      	; 0x19c4 <__vector_10+0x120>
    19c2:	83 e0       	ldi	r24, 0x03	; 3
    19c4:	80 93 c3 01 	sts	0x01C3, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    19c8:	0e 94 9f 09 	call	0x133e	; 0x133e <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    19cc:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    19d0:	83 ff       	sbrs	r24, 3
    19d2:	24 c0       	rjmp	.+72     	; 0x1a1c <__vector_10+0x178>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    19d4:	80 91 e2 00 	lds	r24, 0x00E2
    19d8:	83 ff       	sbrs	r24, 3
    19da:	20 c0       	rjmp	.+64     	; 0x1a1c <__vector_10+0x178>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    19dc:	80 91 e1 00 	lds	r24, 0x00E1
    19e0:	87 7f       	andi	r24, 0xF7	; 247
    19e2:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    19e6:	82 e0       	ldi	r24, 0x02	; 2
    19e8:	80 93 c3 01 	sts	0x01C3, r24
		USB_Device_ConfigurationNumber = 0;
    19ec:	10 92 bf 01 	sts	0x01BF, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    19f0:	80 91 e1 00 	lds	r24, 0x00E1
    19f4:	8e 7f       	andi	r24, 0xFE	; 254
    19f6:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    19fa:	80 91 e2 00 	lds	r24, 0x00E2
    19fe:	8e 7f       	andi	r24, 0xFE	; 254
    1a00:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1a04:	80 91 e2 00 	lds	r24, 0x00E2
    1a08:	80 61       	ori	r24, 0x10	; 16
    1a0a:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	60 e0       	ldi	r22, 0x00	; 0
    1a12:	42 e0       	ldi	r20, 0x02	; 2
    1a14:	0e 94 47 0b 	call	0x168e	; 0x168e <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1a18:	0e 94 61 08 	call	0x10c2	; 0x10c2 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1a1c:	ff 91       	pop	r31
    1a1e:	ef 91       	pop	r30
    1a20:	bf 91       	pop	r27
    1a22:	af 91       	pop	r26
    1a24:	9f 91       	pop	r25
    1a26:	8f 91       	pop	r24
    1a28:	7f 91       	pop	r23
    1a2a:	6f 91       	pop	r22
    1a2c:	5f 91       	pop	r21
    1a2e:	4f 91       	pop	r20
    1a30:	3f 91       	pop	r19
    1a32:	2f 91       	pop	r18
    1a34:	0f 90       	pop	r0
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	0f 90       	pop	r0
    1a3a:	1f 90       	pop	r1
    1a3c:	18 95       	reti

00001a3e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1a3e:	1f 93       	push	r17
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	ac 97       	sbiw	r28, 0x2c	; 44
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	e4 ec       	ldi	r30, 0xC4	; 196
    1a56:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1a58:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1a5c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1a5e:	21 e0       	ldi	r18, 0x01	; 1
    1a60:	ec 3c       	cpi	r30, 0xCC	; 204
    1a62:	f2 07       	cpc	r31, r18
    1a64:	c9 f7       	brne	.-14     	; 0x1a58 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1a66:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a6a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1a6e:	83 ff       	sbrs	r24, 3
    1a70:	3e c1       	rjmp	.+636    	; 0x1cee <USB_Device_ProcessControlRequest+0x2b0>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1a72:	80 91 c4 01 	lds	r24, 0x01C4

		switch (USB_ControlRequest.bRequest)
    1a76:	30 91 c5 01 	lds	r19, 0x01C5
    1a7a:	35 30       	cpi	r19, 0x05	; 5
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <USB_Device_ProcessControlRequest+0x42>
    1a7e:	87 c0       	rjmp	.+270    	; 0x1b8e <USB_Device_ProcessControlRequest+0x150>
    1a80:	36 30       	cpi	r19, 0x06	; 6
    1a82:	40 f4       	brcc	.+16     	; 0x1a94 <USB_Device_ProcessControlRequest+0x56>
    1a84:	31 30       	cpi	r19, 0x01	; 1
    1a86:	c9 f1       	breq	.+114    	; 0x1afa <USB_Device_ProcessControlRequest+0xbc>
    1a88:	31 30       	cpi	r19, 0x01	; 1
    1a8a:	70 f0       	brcs	.+28     	; 0x1aa8 <USB_Device_ProcessControlRequest+0x6a>
    1a8c:	33 30       	cpi	r19, 0x03	; 3
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <USB_Device_ProcessControlRequest+0x54>
    1a90:	2e c1       	rjmp	.+604    	; 0x1cee <USB_Device_ProcessControlRequest+0x2b0>
    1a92:	33 c0       	rjmp	.+102    	; 0x1afa <USB_Device_ProcessControlRequest+0xbc>
    1a94:	38 30       	cpi	r19, 0x08	; 8
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <USB_Device_ProcessControlRequest+0x5c>
    1a98:	f9 c0       	rjmp	.+498    	; 0x1c8c <USB_Device_ProcessControlRequest+0x24e>
    1a9a:	39 30       	cpi	r19, 0x09	; 9
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <USB_Device_ProcessControlRequest+0x62>
    1a9e:	09 c1       	rjmp	.+530    	; 0x1cb2 <USB_Device_ProcessControlRequest+0x274>
    1aa0:	36 30       	cpi	r19, 0x06	; 6
    1aa2:	09 f0       	breq	.+2      	; 0x1aa6 <USB_Device_ProcessControlRequest+0x68>
    1aa4:	24 c1       	rjmp	.+584    	; 0x1cee <USB_Device_ProcessControlRequest+0x2b0>
    1aa6:	97 c0       	rjmp	.+302    	; 0x1bd6 <USB_Device_ProcessControlRequest+0x198>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1aa8:	80 38       	cpi	r24, 0x80	; 128
    1aaa:	21 f0       	breq	.+8      	; 0x1ab4 <USB_Device_ProcessControlRequest+0x76>
    1aac:	82 38       	cpi	r24, 0x82	; 130
    1aae:	09 f0       	breq	.+2      	; 0x1ab2 <USB_Device_ProcessControlRequest+0x74>
    1ab0:	1e c1       	rjmp	.+572    	; 0x1cee <USB_Device_ProcessControlRequest+0x2b0>
    1ab2:	08 c0       	rjmp	.+16     	; 0x1ac4 <USB_Device_ProcessControlRequest+0x86>
    1ab4:	90 91 c0 01 	lds	r25, 0x01C0
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1ab8:	80 91 c1 01 	lds	r24, 0x01C1
    1abc:	88 23       	and	r24, r24
    1abe:	99 f0       	breq	.+38     	; 0x1ae6 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1ac0:	92 60       	ori	r25, 0x02	; 2
    1ac2:	11 c0       	rjmp	.+34     	; 0x1ae6 <USB_Device_ProcessControlRequest+0xa8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ac4:	80 91 c8 01 	lds	r24, 0x01C8
    1ac8:	8f 70       	andi	r24, 0x0F	; 15
    1aca:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1ace:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	25 e0       	ldi	r18, 0x05	; 5
    1ad6:	96 95       	lsr	r25
    1ad8:	87 95       	ror	r24
    1ada:	2a 95       	dec	r18
    1adc:	e1 f7       	brne	.-8      	; 0x1ad6 <USB_Device_ProcessControlRequest+0x98>
    1ade:	98 2f       	mov	r25, r24
    1ae0:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ae2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ae6:	80 91 e8 00 	lds	r24, 0x00E8
    1aea:	87 7f       	andi	r24, 0xF7	; 247
    1aec:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1af0:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    1af4:	10 92 f1 00 	sts	0x00F1, r1
    1af8:	d4 c0       	rjmp	.+424    	; 0x1ca2 <USB_Device_ProcessControlRequest+0x264>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1afa:	88 23       	and	r24, r24
    1afc:	19 f0       	breq	.+6      	; 0x1b04 <USB_Device_ProcessControlRequest+0xc6>
    1afe:	82 30       	cpi	r24, 0x02	; 2
    1b00:	09 f0       	breq	.+2      	; 0x1b04 <USB_Device_ProcessControlRequest+0xc6>
    1b02:	f5 c0       	rjmp	.+490    	; 0x1cee <USB_Device_ProcessControlRequest+0x2b0>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	8f 71       	andi	r24, 0x1F	; 31
    1b08:	90 70       	andi	r25, 0x00	; 0
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	21 f0       	breq	.+8      	; 0x1b16 <USB_Device_ProcessControlRequest+0xd8>
    1b0e:	02 97       	sbiw	r24, 0x02	; 2
    1b10:	09 f0       	breq	.+2      	; 0x1b14 <USB_Device_ProcessControlRequest+0xd6>
    1b12:	ed c0       	rjmp	.+474    	; 0x1cee <USB_Device_ProcessControlRequest+0x2b0>
    1b14:	0c c0       	rjmp	.+24     	; 0x1b2e <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1b16:	80 91 c6 01 	lds	r24, 0x01C6
    1b1a:	81 30       	cpi	r24, 0x01	; 1
    1b1c:	09 f0       	breq	.+2      	; 0x1b20 <USB_Device_ProcessControlRequest+0xe2>
    1b1e:	e7 c0       	rjmp	.+462    	; 0x1cee <USB_Device_ProcessControlRequest+0x2b0>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1b20:	10 92 c1 01 	sts	0x01C1, r1
    1b24:	33 30       	cpi	r19, 0x03	; 3
    1b26:	69 f5       	brne	.+90     	; 0x1b82 <USB_Device_ProcessControlRequest+0x144>
    1b28:	80 93 c1 01 	sts	0x01C1, r24
    1b2c:	2a c0       	rjmp	.+84     	; 0x1b82 <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1b2e:	80 91 c6 01 	lds	r24, 0x01C6
    1b32:	88 23       	and	r24, r24
    1b34:	31 f5       	brne	.+76     	; 0x1b82 <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1b36:	20 91 c8 01 	lds	r18, 0x01C8
    1b3a:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1b3c:	09 f4       	brne	.+2      	; 0x1b40 <USB_Device_ProcessControlRequest+0x102>
    1b3e:	d7 c0       	rjmp	.+430    	; 0x1cee <USB_Device_ProcessControlRequest+0x2b0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b40:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1b44:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1b48:	80 ff       	sbrs	r24, 0
    1b4a:	1b c0       	rjmp	.+54     	; 0x1b82 <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1b4c:	33 30       	cpi	r19, 0x03	; 3
    1b4e:	21 f4       	brne	.+8      	; 0x1b58 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1b50:	80 91 eb 00 	lds	r24, 0x00EB
    1b54:	80 62       	ori	r24, 0x20	; 32
    1b56:	13 c0       	rjmp	.+38     	; 0x1b7e <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1b58:	80 91 eb 00 	lds	r24, 0x00EB
    1b5c:	80 61       	ori	r24, 0x10	; 16
    1b5e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <USB_Device_ProcessControlRequest+0x12e>
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	2a 95       	dec	r18
    1b6e:	e2 f7       	brpl	.-8      	; 0x1b68 <USB_Device_ProcessControlRequest+0x12a>
    1b70:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1b74:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1b78:	80 91 eb 00 	lds	r24, 0x00EB
    1b7c:	88 60       	ori	r24, 0x08	; 8
    1b7e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b82:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b86:	80 91 e8 00 	lds	r24, 0x00E8
    1b8a:	87 7f       	andi	r24, 0xF7	; 247
    1b8c:	8d c0       	rjmp	.+282    	; 0x1ca8 <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1b8e:	88 23       	and	r24, r24
    1b90:	09 f0       	breq	.+2      	; 0x1b94 <USB_Device_ProcessControlRequest+0x156>
    1b92:	ad c0       	rjmp	.+346    	; 0x1cee <USB_Device_ProcessControlRequest+0x2b0>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1b94:	10 91 c6 01 	lds	r17, 0x01C6
    1b98:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1b9a:	80 91 e3 00 	lds	r24, 0x00E3
    1b9e:	80 78       	andi	r24, 0x80	; 128
    1ba0:	81 2b       	or	r24, r17
    1ba2:	80 93 e3 00 	sts	0x00E3, r24
    1ba6:	80 91 e8 00 	lds	r24, 0x00E8
    1baa:	87 7f       	andi	r24, 0xF7	; 247
    1bac:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1bb0:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1bb4:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1bb8:	80 ff       	sbrs	r24, 0
    1bba:	fc cf       	rjmp	.-8      	; 0x1bb4 <USB_Device_ProcessControlRequest+0x176>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1bbc:	80 91 e3 00 	lds	r24, 0x00E3
    1bc0:	80 68       	ori	r24, 0x80	; 128
    1bc2:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1bc6:	11 23       	and	r17, r17
    1bc8:	11 f4       	brne	.+4      	; 0x1bce <USB_Device_ProcessControlRequest+0x190>
    1bca:	82 e0       	ldi	r24, 0x02	; 2
    1bcc:	01 c0       	rjmp	.+2      	; 0x1bd0 <USB_Device_ProcessControlRequest+0x192>
    1bce:	83 e0       	ldi	r24, 0x03	; 3
    1bd0:	80 93 c3 01 	sts	0x01C3, r24
    1bd4:	8c c0       	rjmp	.+280    	; 0x1cee <USB_Device_ProcessControlRequest+0x2b0>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1bd6:	80 58       	subi	r24, 0x80	; 128
    1bd8:	82 30       	cpi	r24, 0x02	; 2
    1bda:	08 f0       	brcs	.+2      	; 0x1bde <USB_Device_ProcessControlRequest+0x1a0>
    1bdc:	88 c0       	rjmp	.+272    	; 0x1cee <USB_Device_ProcessControlRequest+0x2b0>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1bde:	80 91 c6 01 	lds	r24, 0x01C6
    1be2:	90 91 c7 01 	lds	r25, 0x01C7
    1be6:	23 e0       	ldi	r18, 0x03	; 3
    1be8:	8c 3d       	cpi	r24, 0xDC	; 220
    1bea:	92 07       	cpc	r25, r18
    1bec:	09 f0       	breq	.+2      	; 0x1bf0 <USB_Device_ProcessControlRequest+0x1b2>
    1bee:	34 c0       	rjmp	.+104    	; 0x1c58 <USB_Device_ProcessControlRequest+0x21a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1bf0:	83 e0       	ldi	r24, 0x03	; 3
    1bf2:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1bf4:	8a e2       	ldi	r24, 0x2A	; 42
    1bf6:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1bf8:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1bfa:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1bfc:	de 01       	movw	r26, r28
    1bfe:	15 96       	adiw	r26, 0x05	; 5
    1c00:	6e e0       	ldi	r22, 0x0E	; 14
    1c02:	40 e0       	ldi	r20, 0x00	; 0
    1c04:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1c06:	11 e2       	ldi	r17, 0x21	; 33
    1c08:	e6 2f       	mov	r30, r22
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	10 93 57 00 	sts	0x0057, r17
    1c10:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    1c12:	40 ff       	sbrs	r20, 0
    1c14:	03 c0       	rjmp	.+6      	; 0x1c1c <USB_Device_ProcessControlRequest+0x1de>
					{
						SerialByte >>= 4;
    1c16:	82 95       	swap	r24
    1c18:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    1c1a:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1c1c:	8f 70       	andi	r24, 0x0F	; 15
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1c22:	8a 30       	cpi	r24, 0x0A	; 10
    1c24:	18 f0       	brcs	.+6      	; 0x1c2c <USB_Device_ProcessControlRequest+0x1ee>
    1c26:	c9 01       	movw	r24, r18
    1c28:	c7 96       	adiw	r24, 0x37	; 55
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <USB_Device_ProcessControlRequest+0x1f2>
    1c2c:	c9 01       	movw	r24, r18
    1c2e:	c0 96       	adiw	r24, 0x30	; 48
    1c30:	8d 93       	st	X+, r24
    1c32:	9d 93       	st	X+, r25
    1c34:	4f 5f       	subi	r20, 0xFF	; 255
    1c36:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1c38:	44 31       	cpi	r20, 0x14	; 20
    1c3a:	51 05       	cpc	r21, r1
    1c3c:	29 f7       	brne	.-54     	; 0x1c08 <USB_Device_ProcessControlRequest+0x1ca>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1c3e:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1c40:	80 91 e8 00 	lds	r24, 0x00E8
    1c44:	87 7f       	andi	r24, 0xF7	; 247
    1c46:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	03 96       	adiw	r24, 0x03	; 3
    1c4e:	6a e2       	ldi	r22, 0x2A	; 42
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	0e 94 1d 0a 	call	0x143a	; 0x143a <Endpoint_Write_Control_Stream_LE>
    1c56:	14 c0       	rjmp	.+40     	; 0x1c80 <USB_Device_ProcessControlRequest+0x242>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1c58:	60 91 c8 01 	lds	r22, 0x01C8
    1c5c:	ae 01       	movw	r20, r28
    1c5e:	4f 5f       	subi	r20, 0xFF	; 255
    1c60:	5f 4f       	sbci	r21, 0xFF	; 255
    1c62:	0e 94 a6 09 	call	0x134c	; 0x134c <CALLBACK_USB_GetDescriptor>
    1c66:	bc 01       	movw	r22, r24
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	09 f4       	brne	.+2      	; 0x1c6e <USB_Device_ProcessControlRequest+0x230>
    1c6c:	40 c0       	rjmp	.+128    	; 0x1cee <USB_Device_ProcessControlRequest+0x2b0>
    1c6e:	80 91 e8 00 	lds	r24, 0x00E8
    1c72:	87 7f       	andi	r24, 0xF7	; 247
    1c74:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7c:	0e 94 87 0a 	call	0x150e	; 0x150e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1c80:	80 91 e8 00 	lds	r24, 0x00E8
    1c84:	8b 77       	andi	r24, 0x7B	; 123
    1c86:	80 93 e8 00 	sts	0x00E8, r24
    1c8a:	31 c0       	rjmp	.+98     	; 0x1cee <USB_Device_ProcessControlRequest+0x2b0>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1c8c:	80 38       	cpi	r24, 0x80	; 128
    1c8e:	79 f5       	brne	.+94     	; 0x1cee <USB_Device_ProcessControlRequest+0x2b0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1c90:	80 91 e8 00 	lds	r24, 0x00E8
    1c94:	87 7f       	andi	r24, 0xF7	; 247
    1c96:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1c9a:	80 91 bf 01 	lds	r24, 0x01BF
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1c9e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ca2:	80 91 e8 00 	lds	r24, 0x00E8
    1ca6:	8e 77       	andi	r24, 0x7E	; 126
    1ca8:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1cac:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <Endpoint_ClearStatusStage>
    1cb0:	1e c0       	rjmp	.+60     	; 0x1cee <USB_Device_ProcessControlRequest+0x2b0>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1cb2:	88 23       	and	r24, r24
    1cb4:	e1 f4       	brne	.+56     	; 0x1cee <USB_Device_ProcessControlRequest+0x2b0>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1cb6:	90 91 c6 01 	lds	r25, 0x01C6
    1cba:	92 30       	cpi	r25, 0x02	; 2
    1cbc:	c0 f4       	brcc	.+48     	; 0x1cee <USB_Device_ProcessControlRequest+0x2b0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1cbe:	80 91 e8 00 	lds	r24, 0x00E8
    1cc2:	87 7f       	andi	r24, 0xF7	; 247
    1cc4:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1cc8:	90 93 bf 01 	sts	0x01BF, r25

	Endpoint_ClearStatusStage();
    1ccc:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1cd0:	80 91 bf 01 	lds	r24, 0x01BF
    1cd4:	88 23       	and	r24, r24
    1cd6:	31 f4       	brne	.+12     	; 0x1ce4 <USB_Device_ProcessControlRequest+0x2a6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1cd8:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1cdc:	87 fd       	sbrc	r24, 7
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <USB_Device_ProcessControlRequest+0x2a6>
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	01 c0       	rjmp	.+2      	; 0x1ce6 <USB_Device_ProcessControlRequest+0x2a8>
    1ce4:	84 e0       	ldi	r24, 0x04	; 4
    1ce6:	80 93 c3 01 	sts	0x01C3, r24

	EVENT_USB_Device_ConfigurationChanged();
    1cea:	0e 94 8f 09 	call	0x131e	; 0x131e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1cee:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1cf2:	83 ff       	sbrs	r24, 3
    1cf4:	0a c0       	rjmp	.+20     	; 0x1d0a <USB_Device_ProcessControlRequest+0x2cc>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1cf6:	80 91 e8 00 	lds	r24, 0x00E8
    1cfa:	87 7f       	andi	r24, 0xF7	; 247
    1cfc:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1d00:	80 91 eb 00 	lds	r24, 0x00EB
    1d04:	80 62       	ori	r24, 0x20	; 32
    1d06:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1d0a:	ac 96       	adiw	r28, 0x2c	; 44
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	de bf       	out	0x3e, r29	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	1f 91       	pop	r17
    1d1c:	08 95       	ret

00001d1e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1d1e:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1d20:	80 91 c3 01 	lds	r24, 0x01C3
    1d24:	88 23       	and	r24, r24
    1d26:	79 f0       	breq	.+30     	; 0x1d46 <USB_USBTask+0x28>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1d28:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1d2c:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d30:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d34:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1d38:	83 ff       	sbrs	r24, 3
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <USB_USBTask+0x22>
	  USB_Device_ProcessControlRequest();
    1d3c:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d40:	1f 70       	andi	r17, 0x0F	; 15
    1d42:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1d46:	1f 91       	pop	r17
    1d48:	08 95       	ret

00001d4a <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    1d4a:	90 93 52 01 	sts	0x0152, r25
    1d4e:	80 93 51 01 	sts	0x0151, r24
}
    1d52:	08 95       	ret

00001d54 <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    1d54:	e0 91 51 01 	lds	r30, 0x0151
    1d58:	f0 91 52 01 	lds	r31, 0x0152
    1d5c:	30 97       	sbiw	r30, 0x00	; 0
    1d5e:	11 f4       	brne	.+4      	; 0x1d64 <host_keyboard_leds+0x10>
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	08 95       	ret
    return (*driver->keyboard_leds)();
    1d64:	01 90       	ld	r0, Z+
    1d66:	f0 81       	ld	r31, Z
    1d68:	e0 2d       	mov	r30, r0
    1d6a:	09 95       	icall
}
    1d6c:	08 95       	ret

00001d6e <host_system_send>:
    if (!driver) return;
    (*driver->send_mouse)(report);
}

void host_system_send(uint16_t report)
{
    1d6e:	9c 01       	movw	r18, r24
    if (report == last_system_report) return;
    1d70:	80 91 4f 01 	lds	r24, 0x014F
    1d74:	90 91 50 01 	lds	r25, 0x0150
    1d78:	28 17       	cp	r18, r24
    1d7a:	39 07       	cpc	r19, r25
    1d7c:	79 f0       	breq	.+30     	; 0x1d9c <host_system_send+0x2e>
    last_system_report = report;
    1d7e:	30 93 50 01 	sts	0x0150, r19
    1d82:	20 93 4f 01 	sts	0x014F, r18

    if (!driver) return;
    1d86:	e0 91 51 01 	lds	r30, 0x0151
    1d8a:	f0 91 52 01 	lds	r31, 0x0152
    1d8e:	30 97       	sbiw	r30, 0x00	; 0
    1d90:	29 f0       	breq	.+10     	; 0x1d9c <host_system_send+0x2e>
    (*driver->send_system)(report);
    1d92:	06 80       	ldd	r0, Z+6	; 0x06
    1d94:	f7 81       	ldd	r31, Z+7	; 0x07
    1d96:	e0 2d       	mov	r30, r0
    1d98:	c9 01       	movw	r24, r18
    1d9a:	09 95       	icall
    1d9c:	08 95       	ret

00001d9e <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    1d9e:	9c 01       	movw	r18, r24
    if (report == last_consumer_report) return;
    1da0:	80 91 4d 01 	lds	r24, 0x014D
    1da4:	90 91 4e 01 	lds	r25, 0x014E
    1da8:	28 17       	cp	r18, r24
    1daa:	39 07       	cpc	r19, r25
    1dac:	79 f0       	breq	.+30     	; 0x1dcc <host_consumer_send+0x2e>
    last_consumer_report = report;
    1dae:	30 93 4e 01 	sts	0x014E, r19
    1db2:	20 93 4d 01 	sts	0x014D, r18

    if (!driver) return;
    1db6:	e0 91 51 01 	lds	r30, 0x0151
    1dba:	f0 91 52 01 	lds	r31, 0x0152
    1dbe:	30 97       	sbiw	r30, 0x00	; 0
    1dc0:	29 f0       	breq	.+10     	; 0x1dcc <host_consumer_send+0x2e>
    (*driver->send_consumer)(report);
    1dc2:	00 84       	ldd	r0, Z+8	; 0x08
    1dc4:	f1 85       	ldd	r31, Z+9	; 0x09
    1dc6:	e0 2d       	mov	r30, r0
    1dc8:	c9 01       	movw	r24, r18
    1dca:	09 95       	icall
    1dcc:	08 95       	ret

00001dce <host_keyboard_send>:
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    1dce:	ef 92       	push	r14
    1dd0:	ff 92       	push	r15
    1dd2:	0f 93       	push	r16
    1dd4:	1f 93       	push	r17
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
    1dda:	18 2f       	mov	r17, r24
    1ddc:	09 2f       	mov	r16, r25
    if (!driver) return;
    1dde:	e0 91 51 01 	lds	r30, 0x0151
    1de2:	f0 91 52 01 	lds	r31, 0x0152
    1de6:	30 97       	sbiw	r30, 0x00	; 0
    1de8:	d9 f1       	breq	.+118    	; 0x1e60 <host_keyboard_send+0x92>
    (*driver->send_keyboard)(report);
    1dea:	02 80       	ldd	r0, Z+2	; 0x02
    1dec:	f3 81       	ldd	r31, Z+3	; 0x03
    1dee:	e0 2d       	mov	r30, r0
    1df0:	09 95       	icall

    if (debug_keyboard) {
    1df2:	80 91 b7 01 	lds	r24, 0x01B7
    1df6:	82 ff       	sbrs	r24, 2
    1df8:	33 c0       	rjmp	.+102    	; 0x1e60 <host_keyboard_send+0x92>
        dprint("keyboard_report: ");
    1dfa:	80 ff       	sbrs	r24, 0
    1dfc:	04 c0       	rjmp	.+8      	; 0x1e06 <host_keyboard_send+0x38>
    1dfe:	8d e3       	ldi	r24, 0x3D	; 61
    1e00:	93 e0       	ldi	r25, 0x03	; 3
    1e02:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    1e06:	81 2f       	mov	r24, r17
    1e08:	90 2f       	mov	r25, r16
    1e0a:	9c 01       	movw	r18, r24
    1e0c:	e9 01       	movw	r28, r18
    1e0e:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    1e10:	87 e3       	ldi	r24, 0x37	; 55
    1e12:	e8 2e       	mov	r14, r24
    1e14:	83 e0       	ldi	r24, 0x03	; 3
    1e16:	f8 2e       	mov	r15, r24
    1e18:	80 91 b7 01 	lds	r24, 0x01B7
    1e1c:	80 ff       	sbrs	r24, 0
    1e1e:	14 c0       	rjmp	.+40     	; 0x1e48 <host_keyboard_send+0x7a>
    1e20:	00 d0       	rcall	.+0      	; 0x1e22 <host_keyboard_send+0x54>
    1e22:	00 d0       	rcall	.+0      	; 0x1e24 <host_keyboard_send+0x56>
    1e24:	ed b7       	in	r30, 0x3d	; 61
    1e26:	fe b7       	in	r31, 0x3e	; 62
    1e28:	31 96       	adiw	r30, 0x01	; 1
    1e2a:	ad b7       	in	r26, 0x3d	; 61
    1e2c:	be b7       	in	r27, 0x3e	; 62
    1e2e:	12 96       	adiw	r26, 0x02	; 2
    1e30:	fc 92       	st	X, r15
    1e32:	ee 92       	st	-X, r14
    1e34:	11 97       	sbiw	r26, 0x01	; 1
    1e36:	88 81       	ld	r24, Y
    1e38:	82 83       	std	Z+2, r24	; 0x02
    1e3a:	13 82       	std	Z+3, r1	; 0x03
    1e3c:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    1e48:	1f 5f       	subi	r17, 0xFF	; 255
    1e4a:	21 96       	adiw	r28, 0x01	; 1
    1e4c:	18 30       	cpi	r17, 0x08	; 8
    1e4e:	21 f7       	brne	.-56     	; 0x1e18 <host_keyboard_send+0x4a>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    1e50:	80 91 b7 01 	lds	r24, 0x01B7
    1e54:	80 ff       	sbrs	r24, 0
    1e56:	04 c0       	rjmp	.+8      	; 0x1e60 <host_keyboard_send+0x92>
    1e58:	85 e3       	ldi	r24, 0x35	; 53
    1e5a:	93 e0       	ldi	r25, 0x03	; 3
    1e5c:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    }
}
    1e60:	df 91       	pop	r29
    1e62:	cf 91       	pop	r28
    1e64:	1f 91       	pop	r17
    1e66:	0f 91       	pop	r16
    1e68:	ff 90       	pop	r15
    1e6a:	ef 90       	pop	r14
    1e6c:	08 95       	ret

00001e6e <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    1e6e:	08 95       	ret

00001e70 <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    1e70:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <matrix_setup>
}
    1e74:	08 95       	ret

00001e76 <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    1e76:	1f 93       	push	r17
    1e78:	18 2f       	mov	r17, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    1e7a:	80 91 b7 01 	lds	r24, 0x01B7
    1e7e:	82 ff       	sbrs	r24, 2
    1e80:	27 c0       	rjmp	.+78     	; 0x1ed0 <keyboard_set_leds+0x5a>
    1e82:	80 ff       	sbrs	r24, 0
    1e84:	04 c0       	rjmp	.+8      	; 0x1e8e <keyboard_set_leds+0x18>
    1e86:	86 e5       	ldi	r24, 0x56	; 86
    1e88:	93 e0       	ldi	r25, 0x03	; 3
    1e8a:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    1e8e:	80 91 b7 01 	lds	r24, 0x01B7
    1e92:	80 ff       	sbrs	r24, 0
    1e94:	15 c0       	rjmp	.+42     	; 0x1ec0 <keyboard_set_leds+0x4a>
    1e96:	00 d0       	rcall	.+0      	; 0x1e98 <keyboard_set_leds+0x22>
    1e98:	00 d0       	rcall	.+0      	; 0x1e9a <keyboard_set_leds+0x24>
    1e9a:	ed b7       	in	r30, 0x3d	; 61
    1e9c:	fe b7       	in	r31, 0x3e	; 62
    1e9e:	31 96       	adiw	r30, 0x01	; 1
    1ea0:	81 e5       	ldi	r24, 0x51	; 81
    1ea2:	93 e0       	ldi	r25, 0x03	; 3
    1ea4:	ad b7       	in	r26, 0x3d	; 61
    1ea6:	be b7       	in	r27, 0x3e	; 62
    1ea8:	12 96       	adiw	r26, 0x02	; 2
    1eaa:	9c 93       	st	X, r25
    1eac:	8e 93       	st	-X, r24
    1eae:	11 97       	sbiw	r26, 0x01	; 1
    1eb0:	12 83       	std	Z+2, r17	; 0x02
    1eb2:	13 82       	std	Z+3, r1	; 0x03
    1eb4:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	80 91 b7 01 	lds	r24, 0x01B7
    1ec4:	80 ff       	sbrs	r24, 0
    1ec6:	04 c0       	rjmp	.+8      	; 0x1ed0 <keyboard_set_leds+0x5a>
    1ec8:	8f e4       	ldi	r24, 0x4F	; 79
    1eca:	93 e0       	ldi	r25, 0x03	; 3
    1ecc:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    led_set(leds);
    1ed0:	81 2f       	mov	r24, r17
    1ed2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <led_set>
}
    1ed6:	1f 91       	pop	r17
    1ed8:	08 95       	ret

00001eda <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    1eda:	2f 92       	push	r2
    1edc:	3f 92       	push	r3
    1ede:	4f 92       	push	r4
    1ee0:	5f 92       	push	r5
    1ee2:	6f 92       	push	r6
    1ee4:	7f 92       	push	r7
    1ee6:	8f 92       	push	r8
    1ee8:	9f 92       	push	r9
    1eea:	af 92       	push	r10
    1eec:	bf 92       	push	r11
    1eee:	cf 92       	push	r12
    1ef0:	df 92       	push	r13
    1ef2:	ef 92       	push	r14
    1ef4:	ff 92       	push	r15
    1ef6:	0f 93       	push	r16
    1ef8:	1f 93       	push	r17
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	2a 97       	sbiw	r28, 0x0a	; 10
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    1f0e:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <matrix_scan>
    1f12:	94 e5       	ldi	r25, 0x54	; 84
    1f14:	49 2e       	mov	r4, r25
    1f16:	91 e0       	ldi	r25, 0x01	; 1
    1f18:	59 2e       	mov	r5, r25
    1f1a:	66 24       	eor	r6, r6
    1f1c:	77 24       	eor	r7, r7
    1f1e:	26 2c       	mov	r2, r6
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    1f20:	86 2d       	mov	r24, r6
    1f22:	0e 94 da 04 	call	0x9b4	; 0x9b4 <matrix_get_row>
    1f26:	5b 01       	movw	r10, r22
    1f28:	6c 01       	movw	r12, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    1f2a:	f2 01       	movw	r30, r4
    1f2c:	e0 80       	ld	r14, Z
    1f2e:	f1 80       	ldd	r15, Z+1	; 0x01
    1f30:	02 81       	ldd	r16, Z+2	; 0x02
    1f32:	13 81       	ldd	r17, Z+3	; 0x03
    1f34:	e6 26       	eor	r14, r22
    1f36:	f7 26       	eor	r15, r23
    1f38:	08 27       	eor	r16, r24
    1f3a:	19 27       	eor	r17, r25
        if (matrix_change) {
    1f3c:	e1 14       	cp	r14, r1
    1f3e:	f1 04       	cpc	r15, r1
    1f40:	01 05       	cpc	r16, r1
    1f42:	11 05       	cpc	r17, r1
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <keyboard_task+0x6e>
    1f46:	57 c0       	rjmp	.+174    	; 0x1ff6 <keyboard_task+0x11c>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    1f48:	80 91 b7 01 	lds	r24, 0x01B7
    1f4c:	81 ff       	sbrs	r24, 1
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <keyboard_task+0x7a>
    1f50:	0e 94 38 05 	call	0xa70	; 0xa70 <matrix_print>
    1f54:	88 24       	eor	r8, r8
    1f56:	99 24       	eor	r9, r9
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    1f58:	d8 01       	movw	r26, r16
    1f5a:	c7 01       	movw	r24, r14
    1f5c:	08 2c       	mov	r0, r8
    1f5e:	04 c0       	rjmp	.+8      	; 0x1f68 <keyboard_task+0x8e>
    1f60:	b6 95       	lsr	r27
    1f62:	a7 95       	ror	r26
    1f64:	97 95       	ror	r25
    1f66:	87 95       	ror	r24
    1f68:	0a 94       	dec	r0
    1f6a:	d2 f7       	brpl	.-12     	; 0x1f60 <keyboard_task+0x86>
    1f6c:	81 70       	andi	r24, 0x01	; 1
    1f6e:	90 70       	andi	r25, 0x00	; 0
    1f70:	89 2b       	or	r24, r25
    1f72:	c9 f1       	breq	.+114    	; 0x1fe6 <keyboard_task+0x10c>
                    action_exec((keyevent_t){
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
    1f74:	0e 94 07 1c 	call	0x380e	; 0x380e <timer_read>
    1f78:	89 82       	std	Y+1, r8	; 0x01
    1f7a:	2a 82       	std	Y+2, r2	; 0x02
    1f7c:	08 2c       	mov	r0, r8
    1f7e:	04 c0       	rjmp	.+8      	; 0x1f88 <keyboard_task+0xae>
    1f80:	d6 94       	lsr	r13
    1f82:	c7 94       	ror	r12
    1f84:	b7 94       	ror	r11
    1f86:	a7 94       	ror	r10
    1f88:	0a 94       	dec	r0
    1f8a:	d2 f7       	brpl	.-12     	; 0x1f80 <keyboard_task+0xa6>
    1f8c:	b5 01       	movw	r22, r10
    1f8e:	61 70       	andi	r22, 0x01	; 1
    1f90:	70 70       	andi	r23, 0x00	; 0
    1f92:	6b 83       	std	Y+3, r22	; 0x03
    1f94:	81 60       	ori	r24, 0x01	; 1
    1f96:	9d 83       	std	Y+5, r25	; 0x05
    1f98:	8c 83       	std	Y+4, r24	; 0x04
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    1f9a:	48 2d       	mov	r20, r8
    1f9c:	52 2d       	mov	r21, r2
    1f9e:	78 2f       	mov	r23, r24
    1fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa2:	0e 94 b4 13 	call	0x2768	; 0x2768 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    1fa6:	f3 01       	movw	r30, r6
    1fa8:	ee 0f       	add	r30, r30
    1faa:	ff 1f       	adc	r31, r31
    1fac:	ee 0f       	add	r30, r30
    1fae:	ff 1f       	adc	r31, r31
    1fb0:	ec 5a       	subi	r30, 0xAC	; 172
    1fb2:	fe 4f       	sbci	r31, 0xFE	; 254
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	a0 e0       	ldi	r26, 0x00	; 0
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	08 2c       	mov	r0, r8
    1fbe:	04 c0       	rjmp	.+8      	; 0x1fc8 <keyboard_task+0xee>
    1fc0:	88 0f       	add	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	aa 1f       	adc	r26, r26
    1fc6:	bb 1f       	adc	r27, r27
    1fc8:	0a 94       	dec	r0
    1fca:	d2 f7       	brpl	.-12     	; 0x1fc0 <keyboard_task+0xe6>
    1fcc:	20 81       	ld	r18, Z
    1fce:	31 81       	ldd	r19, Z+1	; 0x01
    1fd0:	42 81       	ldd	r20, Z+2	; 0x02
    1fd2:	53 81       	ldd	r21, Z+3	; 0x03
    1fd4:	82 27       	eor	r24, r18
    1fd6:	93 27       	eor	r25, r19
    1fd8:	a4 27       	eor	r26, r20
    1fda:	b5 27       	eor	r27, r21
    1fdc:	80 83       	st	Z, r24
    1fde:	91 83       	std	Z+1, r25	; 0x01
    1fe0:	a2 83       	std	Z+2, r26	; 0x02
    1fe2:	b3 83       	std	Z+3, r27	; 0x03
    1fe4:	24 c0       	rjmp	.+72     	; 0x202e <keyboard_task+0x154>
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    1fe6:	08 94       	sec
    1fe8:	81 1c       	adc	r8, r1
    1fea:	91 1c       	adc	r9, r1
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    1fec:	f1 e1       	ldi	r31, 0x11	; 17
    1fee:	8f 16       	cp	r8, r31
    1ff0:	91 04       	cpc	r9, r1
    1ff2:	09 f0       	breq	.+2      	; 0x1ff6 <keyboard_task+0x11c>
    1ff4:	b1 cf       	rjmp	.-158    	; 0x1f58 <keyboard_task+0x7e>
    1ff6:	08 94       	sec
    1ff8:	61 1c       	adc	r6, r1
    1ffa:	71 1c       	adc	r7, r1
    1ffc:	84 e0       	ldi	r24, 0x04	; 4
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	48 0e       	add	r4, r24
    2002:	59 1e       	adc	r5, r25
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2004:	96 e0       	ldi	r25, 0x06	; 6
    2006:	69 16       	cp	r6, r25
    2008:	71 04       	cpc	r7, r1
    200a:	09 f0       	breq	.+2      	; 0x200e <keyboard_task+0x134>
    200c:	88 cf       	rjmp	.-240    	; 0x1f1e <keyboard_task+0x44>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    200e:	0e 94 07 1c 	call	0x380e	; 0x380e <timer_read>
    2012:	2f ef       	ldi	r18, 0xFF	; 255
    2014:	2e 83       	std	Y+6, r18	; 0x06
    2016:	2f 83       	std	Y+7, r18	; 0x07
    2018:	18 86       	std	Y+8, r1	; 0x08
    201a:	81 60       	ori	r24, 0x01	; 1
    201c:	78 2f       	mov	r23, r24
    201e:	9a 87       	std	Y+10, r25	; 0x0a
    2020:	89 87       	std	Y+9, r24	; 0x09
    2022:	4f ef       	ldi	r20, 0xFF	; 255
    2024:	5f ef       	ldi	r21, 0xFF	; 255
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	8a 85       	ldd	r24, Y+10	; 0x0a
    202a:	0e 94 b4 13 	call	0x2768	; 0x2768 <action_exec>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    202e:	10 91 53 01 	lds	r17, 0x0153
    2032:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <host_keyboard_leds>
    2036:	18 17       	cp	r17, r24
    2038:	31 f0       	breq	.+12     	; 0x2046 <keyboard_task+0x16c>
        led_status = host_keyboard_leds();
    203a:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <host_keyboard_leds>
    203e:	80 93 53 01 	sts	0x0153, r24
        keyboard_set_leds(led_status);
    2042:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <keyboard_set_leds>
    }
}
    2046:	2a 96       	adiw	r28, 0x0a	; 10
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	f8 94       	cli
    204c:	de bf       	out	0x3e, r29	; 62
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	cd bf       	out	0x3d, r28	; 61
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	1f 91       	pop	r17
    2058:	0f 91       	pop	r16
    205a:	ff 90       	pop	r15
    205c:	ef 90       	pop	r14
    205e:	df 90       	pop	r13
    2060:	cf 90       	pop	r12
    2062:	bf 90       	pop	r11
    2064:	af 90       	pop	r10
    2066:	9f 90       	pop	r9
    2068:	8f 90       	pop	r8
    206a:	7f 90       	pop	r7
    206c:	6f 90       	pop	r6
    206e:	5f 90       	pop	r5
    2070:	4f 90       	pop	r4
    2072:	3f 90       	pop	r3
    2074:	2f 90       	pop	r2
    2076:	08 95       	ret

00002078 <keyboard_init>:
    matrix_setup();
}

void keyboard_init(void)
{
    timer_init();
    2078:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <timer_init>
    matrix_init();
    207c:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    2080:	0e 94 a2 1c 	call	0x3944	; 0x3944 <bootmagic>
#endif

#ifdef BACKLIGHT_ENABLE
    backlight_init();
#endif
}
    2084:	08 95       	ret

00002086 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	00 d0       	rcall	.+0      	; 0x208c <debug_event+0x6>
    208c:	00 d0       	rcall	.+0      	; 0x208e <debug_event+0x8>
    208e:	0f 92       	push	r0
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	cf 91       	pop	r28
    20a0:	df 91       	pop	r29
    20a2:	08 95       	ret

000020a4 <debug_record>:

void debug_record(keyrecord_t record)
{
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	00 d0       	rcall	.+0      	; 0x20aa <debug_record+0x6>
    20aa:	00 d0       	rcall	.+0      	; 0x20ac <debug_record+0x8>
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <debug_record+0xa>
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    20b2:	26 96       	adiw	r28, 0x06	; 6
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	f8 94       	cli
    20b8:	de bf       	out	0x3e, r29	; 62
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	cd bf       	out	0x3d, r28	; 61
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	08 95       	ret

000020c4 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    20c4:	0e 94 2b 18 	call	0x3056	; 0x3056 <layer_switch_get_action>
    20c8:	48 2f       	mov	r20, r24

    switch (action.kind.id) {
    20ca:	89 2f       	mov	r24, r25
    20cc:	82 95       	swap	r24
    20ce:	8f 70       	andi	r24, 0x0F	; 15
    20d0:	28 2f       	mov	r18, r24
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	2c 30       	cpi	r18, 0x0C	; 12
    20d6:	31 05       	cpc	r19, r1
    20d8:	4c f4       	brge	.+18     	; 0x20ec <is_tap_key+0x28>
    20da:	2a 30       	cpi	r18, 0x0A	; 10
    20dc:	31 05       	cpc	r19, r1
    20de:	6c f4       	brge	.+26     	; 0x20fa <is_tap_key+0x36>
    20e0:	22 50       	subi	r18, 0x02	; 2
    20e2:	30 40       	sbci	r19, 0x00	; 0
    20e4:	22 30       	cpi	r18, 0x02	; 2
    20e6:	31 05       	cpc	r19, r1
    20e8:	c0 f4       	brcc	.+48     	; 0x211a <is_tap_key+0x56>
    20ea:	07 c0       	rjmp	.+14     	; 0x20fa <is_tap_key+0x36>
    20ec:	2c 30       	cpi	r18, 0x0C	; 12
    20ee:	31 05       	cpc	r19, r1
    20f0:	51 f0       	breq	.+20     	; 0x2106 <is_tap_key+0x42>
    20f2:	2f 30       	cpi	r18, 0x0F	; 15
    20f4:	31 05       	cpc	r19, r1
    20f6:	89 f4       	brne	.+34     	; 0x211a <is_tap_key+0x56>
    20f8:	06 c0       	rjmp	.+12     	; 0x2106 <is_tap_key+0x42>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    20fa:	40 3e       	cpi	r20, 0xE0	; 224
    20fc:	10 f0       	brcs	.+4      	; 0x2102 <is_tap_key+0x3e>
    20fe:	40 3f       	cpi	r20, 0xF0	; 240
    2100:	61 f4       	brne	.+24     	; 0x211a <is_tap_key+0x56>
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	08 95       	ret
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2106:	9f 70       	andi	r25, 0x0F	; 15
    2108:	89 2f       	mov	r24, r25
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	23 e0       	ldi	r18, 0x03	; 3
    210e:	96 95       	lsr	r25
    2110:	87 95       	ror	r24
    2112:	2a 95       	dec	r18
    2114:	e1 f7       	brne	.-8      	; 0x210e <is_tap_key+0x4a>
    2116:	81 70       	andi	r24, 0x01	; 1
    2118:	08 95       	ret
    211a:	80 e0       	ldi	r24, 0x00	; 0
            return false;
    }
    return false;
}
    211c:	08 95       	ret

0000211e <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    211e:	0e 94 c1 19 	call	0x3382	; 0x3382 <clear_weak_mods>
    clear_keys();
    2122:	0e 94 93 19 	call	0x3326	; 0x3326 <clear_keys>
    send_keyboard_report();
    2126:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    mousekey_send();
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <host_system_send>
    host_consumer_send(0);
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <host_consumer_send>
#endif
}
    213a:	08 95       	ret

0000213c <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    213c:	0e 94 b1 19 	call	0x3362	; 0x3362 <clear_mods>
    clear_keyboard_but_mods();
    2140:	0e 94 8f 10 	call	0x211e	; 0x211e <clear_keyboard_but_mods>
}
    2144:	08 95       	ret

00002146 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2146:	88 23       	and	r24, r24
    2148:	21 f0       	breq	.+8      	; 0x2152 <unregister_mods+0xc>
        del_mods(mods);
    214a:	0e 94 aa 19 	call	0x3354	; 0x3354 <del_mods>
        send_keyboard_report();
    214e:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <send_keyboard_report>
    2152:	08 95       	ret

00002154 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2154:	88 23       	and	r24, r24
    2156:	21 f0       	breq	.+8      	; 0x2160 <register_mods+0xc>
        add_mods(mods);
    2158:	0e 94 a4 19 	call	0x3348	; 0x3348 <add_mods>
        send_keyboard_report();
    215c:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <send_keyboard_report>
    2160:	08 95       	ret

00002162 <unregister_code>:
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}

void unregister_code(uint8_t code)
{
    2162:	28 2f       	mov	r18, r24
    if (code == KC_NO) {
    2164:	88 23       	and	r24, r24
    2166:	39 f1       	breq	.+78     	; 0x21b6 <unregister_code+0x54>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2168:	84 50       	subi	r24, 0x04	; 4
    216a:	81 3a       	cpi	r24, 0xA1	; 161
    216c:	20 f4       	brcc	.+8      	; 0x2176 <unregister_code+0x14>
        del_key(code);
    216e:	82 2f       	mov	r24, r18
    2170:	0e 94 80 19 	call	0x3300	; 0x3300 <del_key>
    2174:	0d c0       	rjmp	.+26     	; 0x2190 <unregister_code+0x2e>
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2176:	82 2f       	mov	r24, r18
    2178:	80 5e       	subi	r24, 0xE0	; 224
    217a:	88 30       	cpi	r24, 0x08	; 8
    217c:	60 f4       	brcc	.+24     	; 0x2196 <unregister_code+0x34>
        del_mods(MOD_BIT(code));
    217e:	27 70       	andi	r18, 0x07	; 7
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	01 c0       	rjmp	.+2      	; 0x2188 <unregister_code+0x26>
    2186:	88 0f       	add	r24, r24
    2188:	2a 95       	dec	r18
    218a:	ea f7       	brpl	.-6      	; 0x2186 <unregister_code+0x24>
    218c:	0e 94 aa 19 	call	0x3354	; 0x3354 <del_mods>
        send_keyboard_report();
    2190:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <send_keyboard_report>
    2194:	08 95       	ret
    }
    else if IS_SYSTEM(code) {
    2196:	82 2f       	mov	r24, r18
    2198:	85 5a       	subi	r24, 0xA5	; 165
    219a:	83 30       	cpi	r24, 0x03	; 3
    219c:	28 f4       	brcc	.+10     	; 0x21a8 <unregister_code+0x46>
        host_system_send(0);
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <host_system_send>
    21a6:	08 95       	ret
    }
    else if IS_CONSUMER(code) {
    21a8:	28 5a       	subi	r18, 0xA8	; 168
    21aa:	23 31       	cpi	r18, 0x13	; 19
    21ac:	20 f4       	brcc	.+8      	; 0x21b6 <unregister_code+0x54>
        host_consumer_send(0);
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <host_consumer_send>
    21b6:	08 95       	ret

000021b8 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    21b8:	1f 93       	push	r17
    21ba:	18 2f       	mov	r17, r24
    if (code == KC_NO) {
    21bc:	88 23       	and	r24, r24
    21be:	09 f4       	brne	.+2      	; 0x21c2 <register_code+0xa>
    21c0:	a7 c0       	rjmp	.+334    	; 0x2310 <register_code+0x158>
        del_key(KC_SCROLLLOCK);
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    21c2:	84 50       	subi	r24, 0x04	; 4
    21c4:	81 3a       	cpi	r24, 0xA1	; 161
    21c6:	50 f4       	brcc	.+20     	; 0x21dc <register_code+0x24>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    21c8:	81 2f       	mov	r24, r17
    21ca:	0e 94 94 21 	call	0x4328	; 0x4328 <command_proc>
    21ce:	88 23       	and	r24, r24
    21d0:	09 f0       	breq	.+2      	; 0x21d4 <register_code+0x1c>
    21d2:	9e c0       	rjmp	.+316    	; 0x2310 <register_code+0x158>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    21d4:	81 2f       	mov	r24, r17
    21d6:	0e 94 62 19 	call	0x32c4	; 0x32c4 <add_key>
    21da:	0d c0       	rjmp	.+26     	; 0x21f6 <register_code+0x3e>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    21dc:	81 2f       	mov	r24, r17
    21de:	80 5e       	subi	r24, 0xE0	; 224
    21e0:	88 30       	cpi	r24, 0x08	; 8
    21e2:	60 f4       	brcc	.+24     	; 0x21fc <register_code+0x44>
        add_mods(MOD_BIT(code));
    21e4:	17 70       	andi	r17, 0x07	; 7
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	01 c0       	rjmp	.+2      	; 0x21ee <register_code+0x36>
    21ec:	88 0f       	add	r24, r24
    21ee:	1a 95       	dec	r17
    21f0:	ea f7       	brpl	.-6      	; 0x21ec <register_code+0x34>
    21f2:	0e 94 a4 19 	call	0x3348	; 0x3348 <add_mods>
        send_keyboard_report();
    21f6:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <send_keyboard_report>
    21fa:	8a c0       	rjmp	.+276    	; 0x2310 <register_code+0x158>
    }
    else if IS_SYSTEM(code) {
    21fc:	81 2f       	mov	r24, r17
    21fe:	85 5a       	subi	r24, 0xA5	; 165
    2200:	83 30       	cpi	r24, 0x03	; 3
    2202:	a0 f4       	brcc	.+40     	; 0x222c <register_code+0x74>
        host_system_send(KEYCODE2SYSTEM(code));
    2204:	15 3a       	cpi	r17, 0xA5	; 165
    2206:	19 f4       	brne	.+6      	; 0x220e <register_code+0x56>
    2208:	81 e8       	ldi	r24, 0x81	; 129
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	0c c0       	rjmp	.+24     	; 0x2226 <register_code+0x6e>
    220e:	16 3a       	cpi	r17, 0xA6	; 166
    2210:	19 f4       	brne	.+6      	; 0x2218 <register_code+0x60>
    2212:	82 e8       	ldi	r24, 0x82	; 130
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	07 c0       	rjmp	.+14     	; 0x2226 <register_code+0x6e>
    2218:	17 3a       	cpi	r17, 0xA7	; 167
    221a:	19 f0       	breq	.+6      	; 0x2222 <register_code+0x6a>
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	02 c0       	rjmp	.+4      	; 0x2226 <register_code+0x6e>
    2222:	83 e8       	ldi	r24, 0x83	; 131
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <host_system_send>
    222a:	72 c0       	rjmp	.+228    	; 0x2310 <register_code+0x158>
    }
    else if IS_CONSUMER(code) {
    222c:	81 2f       	mov	r24, r17
    222e:	88 5a       	subi	r24, 0xA8	; 168
    2230:	83 31       	cpi	r24, 0x13	; 19
    2232:	08 f0       	brcs	.+2      	; 0x2236 <register_code+0x7e>
    2234:	6d c0       	rjmp	.+218    	; 0x2310 <register_code+0x158>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2236:	18 3a       	cpi	r17, 0xA8	; 168
    2238:	19 f4       	brne	.+6      	; 0x2240 <register_code+0x88>
    223a:	82 ee       	ldi	r24, 0xE2	; 226
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	66 c0       	rjmp	.+204    	; 0x230c <register_code+0x154>
    2240:	19 3a       	cpi	r17, 0xA9	; 169
    2242:	19 f4       	brne	.+6      	; 0x224a <register_code+0x92>
    2244:	89 ee       	ldi	r24, 0xE9	; 233
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	61 c0       	rjmp	.+194    	; 0x230c <register_code+0x154>
    224a:	1a 3a       	cpi	r17, 0xAA	; 170
    224c:	19 f4       	brne	.+6      	; 0x2254 <register_code+0x9c>
    224e:	8a ee       	ldi	r24, 0xEA	; 234
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	5c c0       	rjmp	.+184    	; 0x230c <register_code+0x154>
    2254:	1b 3a       	cpi	r17, 0xAB	; 171
    2256:	19 f4       	brne	.+6      	; 0x225e <register_code+0xa6>
    2258:	85 eb       	ldi	r24, 0xB5	; 181
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	57 c0       	rjmp	.+174    	; 0x230c <register_code+0x154>
    225e:	1c 3a       	cpi	r17, 0xAC	; 172
    2260:	19 f4       	brne	.+6      	; 0x2268 <register_code+0xb0>
    2262:	86 eb       	ldi	r24, 0xB6	; 182
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	52 c0       	rjmp	.+164    	; 0x230c <register_code+0x154>
    2268:	1b 3b       	cpi	r17, 0xBB	; 187
    226a:	19 f4       	brne	.+6      	; 0x2272 <register_code+0xba>
    226c:	83 eb       	ldi	r24, 0xB3	; 179
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	4d c0       	rjmp	.+154    	; 0x230c <register_code+0x154>
    2272:	1c 3b       	cpi	r17, 0xBC	; 188
    2274:	19 f4       	brne	.+6      	; 0x227c <register_code+0xc4>
    2276:	84 eb       	ldi	r24, 0xB4	; 180
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	48 c0       	rjmp	.+144    	; 0x230c <register_code+0x154>
    227c:	1d 3a       	cpi	r17, 0xAD	; 173
    227e:	19 f4       	brne	.+6      	; 0x2286 <register_code+0xce>
    2280:	87 eb       	ldi	r24, 0xB7	; 183
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	43 c0       	rjmp	.+134    	; 0x230c <register_code+0x154>
    2286:	10 3b       	cpi	r17, 0xB0	; 176
    2288:	19 f4       	brne	.+6      	; 0x2290 <register_code+0xd8>
    228a:	8c ec       	ldi	r24, 0xCC	; 204
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	3e c0       	rjmp	.+124    	; 0x230c <register_code+0x154>
    2290:	1e 3a       	cpi	r17, 0xAE	; 174
    2292:	19 f4       	brne	.+6      	; 0x229a <register_code+0xe2>
    2294:	8d ec       	ldi	r24, 0xCD	; 205
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	39 c0       	rjmp	.+114    	; 0x230c <register_code+0x154>
    229a:	1f 3a       	cpi	r17, 0xAF	; 175
    229c:	19 f4       	brne	.+6      	; 0x22a4 <register_code+0xec>
    229e:	83 e8       	ldi	r24, 0x83	; 131
    22a0:	91 e0       	ldi	r25, 0x01	; 1
    22a2:	34 c0       	rjmp	.+104    	; 0x230c <register_code+0x154>
    22a4:	11 3b       	cpi	r17, 0xB1	; 177
    22a6:	19 f4       	brne	.+6      	; 0x22ae <register_code+0xf6>
    22a8:	8a e8       	ldi	r24, 0x8A	; 138
    22aa:	91 e0       	ldi	r25, 0x01	; 1
    22ac:	2f c0       	rjmp	.+94     	; 0x230c <register_code+0x154>
    22ae:	12 3b       	cpi	r17, 0xB2	; 178
    22b0:	19 f4       	brne	.+6      	; 0x22b8 <register_code+0x100>
    22b2:	82 e9       	ldi	r24, 0x92	; 146
    22b4:	91 e0       	ldi	r25, 0x01	; 1
    22b6:	2a c0       	rjmp	.+84     	; 0x230c <register_code+0x154>
    22b8:	13 3b       	cpi	r17, 0xB3	; 179
    22ba:	19 f4       	brne	.+6      	; 0x22c2 <register_code+0x10a>
    22bc:	84 e9       	ldi	r24, 0x94	; 148
    22be:	91 e0       	ldi	r25, 0x01	; 1
    22c0:	25 c0       	rjmp	.+74     	; 0x230c <register_code+0x154>
    22c2:	14 3b       	cpi	r17, 0xB4	; 180
    22c4:	19 f4       	brne	.+6      	; 0x22cc <register_code+0x114>
    22c6:	81 e2       	ldi	r24, 0x21	; 33
    22c8:	92 e0       	ldi	r25, 0x02	; 2
    22ca:	20 c0       	rjmp	.+64     	; 0x230c <register_code+0x154>
    22cc:	15 3b       	cpi	r17, 0xB5	; 181
    22ce:	19 f4       	brne	.+6      	; 0x22d6 <register_code+0x11e>
    22d0:	83 e2       	ldi	r24, 0x23	; 35
    22d2:	92 e0       	ldi	r25, 0x02	; 2
    22d4:	1b c0       	rjmp	.+54     	; 0x230c <register_code+0x154>
    22d6:	16 3b       	cpi	r17, 0xB6	; 182
    22d8:	19 f4       	brne	.+6      	; 0x22e0 <register_code+0x128>
    22da:	84 e2       	ldi	r24, 0x24	; 36
    22dc:	92 e0       	ldi	r25, 0x02	; 2
    22de:	16 c0       	rjmp	.+44     	; 0x230c <register_code+0x154>
    22e0:	17 3b       	cpi	r17, 0xB7	; 183
    22e2:	19 f4       	brne	.+6      	; 0x22ea <register_code+0x132>
    22e4:	85 e2       	ldi	r24, 0x25	; 37
    22e6:	92 e0       	ldi	r25, 0x02	; 2
    22e8:	11 c0       	rjmp	.+34     	; 0x230c <register_code+0x154>
    22ea:	18 3b       	cpi	r17, 0xB8	; 184
    22ec:	19 f4       	brne	.+6      	; 0x22f4 <register_code+0x13c>
    22ee:	86 e2       	ldi	r24, 0x26	; 38
    22f0:	92 e0       	ldi	r25, 0x02	; 2
    22f2:	0c c0       	rjmp	.+24     	; 0x230c <register_code+0x154>
    22f4:	19 3b       	cpi	r17, 0xB9	; 185
    22f6:	19 f4       	brne	.+6      	; 0x22fe <register_code+0x146>
    22f8:	87 e2       	ldi	r24, 0x27	; 39
    22fa:	92 e0       	ldi	r25, 0x02	; 2
    22fc:	07 c0       	rjmp	.+14     	; 0x230c <register_code+0x154>
    22fe:	1a 3b       	cpi	r17, 0xBA	; 186
    2300:	19 f0       	breq	.+6      	; 0x2308 <register_code+0x150>
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	02 c0       	rjmp	.+4      	; 0x230c <register_code+0x154>
    2308:	8a e2       	ldi	r24, 0x2A	; 42
    230a:	92 e0       	ldi	r25, 0x02	; 2
    230c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <host_consumer_send>
    }
}
    2310:	1f 91       	pop	r17
    2312:	08 95       	ret

00002314 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    2314:	af 92       	push	r10
    2316:	bf 92       	push	r11
    2318:	cf 92       	push	r12
    231a:	df 92       	push	r13
    231c:	ef 92       	push	r14
    231e:	ff 92       	push	r15
    2320:	0f 93       	push	r16
    2322:	1f 93       	push	r17
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	2a 97       	sbiw	r28, 0x0a	; 10
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	f8 94       	cli
    2332:	de bf       	out	0x3e, r29	; 62
    2334:	0f be       	out	0x3f, r0	; 63
    2336:	cd bf       	out	0x3d, r28	; 61
    2338:	5c 01       	movw	r10, r24
    keyevent_t event = record->event;
    233a:	de 01       	movw	r26, r28
    233c:	11 96       	adiw	r26, 0x01	; 1
    233e:	fc 01       	movw	r30, r24
    2340:	85 e0       	ldi	r24, 0x05	; 5
    2342:	01 90       	ld	r0, Z+
    2344:	0d 92       	st	X+, r0
    2346:	81 50       	subi	r24, 0x01	; 1
    2348:	e1 f7       	brne	.-8      	; 0x2342 <process_action+0x2e>
    234a:	0b 81       	ldd	r16, Y+3	; 0x03
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    234c:	f5 01       	movw	r30, r10
    234e:	f5 80       	ldd	r15, Z+5	; 0x05
    2350:	f2 94       	swap	r15
    2352:	4f e0       	ldi	r20, 0x0F	; 15
    2354:	f4 22       	and	r15, r20
#endif

    if (IS_NOEVENT(event)) { return; }
    2356:	de 01       	movw	r26, r28
    2358:	16 96       	adiw	r26, 0x06	; 6
    235a:	fe 01       	movw	r30, r28
    235c:	31 96       	adiw	r30, 0x01	; 1
    235e:	85 e0       	ldi	r24, 0x05	; 5
    2360:	01 90       	ld	r0, Z+
    2362:	0d 92       	st	X+, r0
    2364:	81 50       	subi	r24, 0x01	; 1
    2366:	e1 f7       	brne	.-8      	; 0x2360 <process_action+0x4c>
    2368:	3e 81       	ldd	r19, Y+6	; 0x06
    236a:	2f 81       	ldd	r18, Y+7	; 0x07

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    236c:	89 85       	ldd	r24, Y+9	; 0x09
    236e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2370:	89 2b       	or	r24, r25
    2372:	09 f4       	brne	.+2      	; 0x2376 <process_action+0x62>
    2374:	e8 c1       	rjmp	.+976    	; 0x2746 <process_action+0x432>
    2376:	2f 3f       	cpi	r18, 0xFF	; 255
    2378:	09 f0       	breq	.+2      	; 0x237c <process_action+0x68>
    237a:	bc c1       	rjmp	.+888    	; 0x26f4 <process_action+0x3e0>
    237c:	3f 3f       	cpi	r19, 0xFF	; 255
    237e:	09 f0       	breq	.+2      	; 0x2382 <process_action+0x6e>
    2380:	b9 c1       	rjmp	.+882    	; 0x26f4 <process_action+0x3e0>
    2382:	e1 c1       	rjmp	.+962    	; 0x2746 <process_action+0x432>
    2384:	8d 2d       	mov	r24, r13
    2386:	8f 70       	andi	r24, 0x0F	; 15
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
                                                                action.key.mods<<4;
    2388:	22 23       	and	r18, r18
    238a:	11 f4       	brne	.+4      	; 0x2390 <process_action+0x7c>
    238c:	18 2f       	mov	r17, r24
    238e:	03 c0       	rjmp	.+6      	; 0x2396 <process_action+0x82>
    2390:	18 2f       	mov	r17, r24
    2392:	12 95       	swap	r17
    2394:	10 7f       	andi	r17, 0xF0	; 240
                if (event.pressed) {
    2396:	00 23       	and	r16, r16
    2398:	49 f0       	breq	.+18     	; 0x23ac <process_action+0x98>
                    if (mods) {
    239a:	11 23       	and	r17, r17
    239c:	09 f4       	brne	.+2      	; 0x23a0 <process_action+0x8c>
    239e:	84 c1       	rjmp	.+776    	; 0x26a8 <process_action+0x394>
                        add_weak_mods(mods);
    23a0:	81 2f       	mov	r24, r17
    23a2:	0e 94 b4 19 	call	0x3368	; 0x3368 <add_weak_mods>
                        send_keyboard_report();
    23a6:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <send_keyboard_report>
    23aa:	7e c1       	rjmp	.+764    	; 0x26a8 <process_action+0x394>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    23ac:	8c 2d       	mov	r24, r12
    23ae:	0e 94 b1 10 	call	0x2162	; 0x2162 <unregister_code>
                    if (mods) {
    23b2:	11 23       	and	r17, r17
    23b4:	09 f4       	brne	.+2      	; 0x23b8 <process_action+0xa4>
    23b6:	c7 c1       	rjmp	.+910    	; 0x2746 <process_action+0x432>
                        del_weak_mods(mods);
    23b8:	81 2f       	mov	r24, r17
    23ba:	0e 94 ba 19 	call	0x3374	; 0x3374 <del_weak_mods>
                        send_keyboard_report();
    23be:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <send_keyboard_report>
    23c2:	c1 c1       	rjmp	.+898    	; 0x2746 <process_action+0x432>
    23c4:	8d 2d       	mov	r24, r13
    23c6:	8f 70       	andi	r24, 0x0F	; 15
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
                                                                    action.key.mods<<4;
    23c8:	20 32       	cpi	r18, 0x20	; 32
    23ca:	11 f4       	brne	.+4      	; 0x23d0 <process_action+0xbc>
    23cc:	18 2f       	mov	r17, r24
    23ce:	03 c0       	rjmp	.+6      	; 0x23d6 <process_action+0xc2>
    23d0:	18 2f       	mov	r17, r24
    23d2:	12 95       	swap	r17
    23d4:	10 7f       	andi	r17, 0xF0	; 240
                switch (action.layer_tap.code) {
    23d6:	cc 20       	and	r12, r12
    23d8:	21 f0       	breq	.+8      	; 0x23e2 <process_action+0xce>
    23da:	f1 e0       	ldi	r31, 0x01	; 1
    23dc:	cf 16       	cp	r12, r31
    23de:	29 f5       	brne	.+74     	; 0x242a <process_action+0x116>
    23e0:	14 c0       	rjmp	.+40     	; 0x240a <process_action+0xf6>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    23e2:	00 23       	and	r16, r16
    23e4:	49 f0       	breq	.+18     	; 0x23f8 <process_action+0xe4>
                            if (tap_count == 0) {
    23e6:	ff 20       	and	r15, r15
    23e8:	51 f1       	breq	.+84     	; 0x243e <process_action+0x12a>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    23ea:	21 e0       	ldi	r18, 0x01	; 1
    23ec:	f2 16       	cp	r15, r18
    23ee:	39 f5       	brne	.+78     	; 0x243e <process_action+0x12a>
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    23f0:	81 2f       	mov	r24, r17
    23f2:	0e 94 c4 19 	call	0x3388	; 0x3388 <set_oneshot_mods>
    23f6:	a7 c1       	rjmp	.+846    	; 0x2746 <process_action+0x432>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    23f8:	ff 20       	and	r15, r15
    23fa:	21 f0       	breq	.+8      	; 0x2404 <process_action+0xf0>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	f8 16       	cp	r15, r24
    2400:	09 f4       	brne	.+2      	; 0x2404 <process_action+0xf0>
    2402:	a1 c1       	rjmp	.+834    	; 0x2746 <process_action+0x432>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    2404:	0e 94 c7 19 	call	0x338e	; 0x338e <clear_oneshot_mods>
    2408:	23 c1       	rjmp	.+582    	; 0x2650 <process_action+0x33c>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    240a:	00 23       	and	r16, r16
    240c:	49 f0       	breq	.+18     	; 0x2420 <process_action+0x10c>
                            if (tap_count <= TAPPING_TOGGLE) {
    240e:	e5 e0       	ldi	r30, 0x05	; 5
    2410:	ef 15       	cp	r30, r15
    2412:	08 f4       	brcc	.+2      	; 0x2416 <process_action+0x102>
    2414:	98 c1       	rjmp	.+816    	; 0x2746 <process_action+0x432>
                                if (mods & get_mods()) {
    2416:	0e 94 a1 19 	call	0x3342	; 0x3342 <get_mods>
    241a:	81 23       	and	r24, r17
    241c:	81 f0       	breq	.+32     	; 0x243e <process_action+0x12a>
    241e:	18 c1       	rjmp	.+560    	; 0x2650 <process_action+0x33c>
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2420:	f4 e0       	ldi	r31, 0x04	; 4
    2422:	ff 15       	cp	r31, r15
    2424:	08 f4       	brcc	.+2      	; 0x2428 <process_action+0x114>
    2426:	8f c1       	rjmp	.+798    	; 0x2746 <process_action+0x432>
    2428:	13 c1       	rjmp	.+550    	; 0x2650 <process_action+0x33c>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    242a:	00 23       	and	r16, r16
    242c:	61 f0       	breq	.+24     	; 0x2446 <process_action+0x132>
                            if (tap_count > 0) {
    242e:	ff 20       	and	r15, r15
    2430:	31 f0       	breq	.+12     	; 0x243e <process_action+0x12a>
                                if (record->tap.interrupted) {
    2432:	f5 01       	movw	r30, r10
    2434:	85 81       	ldd	r24, Z+5	; 0x05
    2436:	80 ff       	sbrs	r24, 0
    2438:	37 c1       	rjmp	.+622    	; 0x26a8 <process_action+0x394>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    243a:	8f 70       	andi	r24, 0x0F	; 15
    243c:	85 83       	std	Z+5, r24	; 0x05
                                    register_mods(mods);
    243e:	81 2f       	mov	r24, r17
    2440:	0e 94 aa 10 	call	0x2154	; 0x2154 <register_mods>
    2444:	80 c1       	rjmp	.+768    	; 0x2746 <process_action+0x432>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2446:	ff 20       	and	r15, r15
    2448:	09 f4       	brne	.+2      	; 0x244c <process_action+0x138>
    244a:	02 c1       	rjmp	.+516    	; 0x2650 <process_action+0x33c>
    244c:	38 c1       	rjmp	.+624    	; 0x26be <process_action+0x3aa>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    244e:	8d 2d       	mov	r24, r13
    2450:	86 95       	lsr	r24
    2452:	86 95       	lsr	r24
    2454:	83 70       	andi	r24, 0x03	; 3
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	21 f0       	breq	.+8      	; 0x2464 <process_action+0x150>
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	09 f0       	breq	.+2      	; 0x2462 <process_action+0x14e>
    2460:	72 c1       	rjmp	.+740    	; 0x2746 <process_action+0x432>
    2462:	0a c0       	rjmp	.+20     	; 0x2478 <process_action+0x164>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2464:	00 23       	and	r16, r16
    2466:	19 f0       	breq	.+6      	; 0x246e <process_action+0x15a>
                        host_system_send(action.usage.code);
    2468:	c6 01       	movw	r24, r12
    246a:	93 70       	andi	r25, 0x03	; 3
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <process_action+0x15e>
                    } else {
                        host_system_send(0);
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <host_system_send>
    2476:	67 c1       	rjmp	.+718    	; 0x2746 <process_action+0x432>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2478:	00 23       	and	r16, r16
    247a:	19 f0       	breq	.+6      	; 0x2482 <process_action+0x16e>
                        host_consumer_send(action.usage.code);
    247c:	c6 01       	movw	r24, r12
    247e:	93 70       	andi	r25, 0x03	; 3
    2480:	02 c0       	rjmp	.+4      	; 0x2486 <process_action+0x172>
                    } else {
                        host_consumer_send(0);
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <host_consumer_send>
    248a:	5d c1       	rjmp	.+698    	; 0x2746 <process_action+0x432>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    248c:	8d 2d       	mov	r24, r13
    248e:	83 70       	andi	r24, 0x03	; 3
    2490:	09 f0       	breq	.+2      	; 0x2494 <process_action+0x180>
    2492:	5e c0       	rjmp	.+188    	; 0x2550 <process_action+0x23c>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2494:	00 23       	and	r16, r16
    2496:	09 f0       	breq	.+2      	; 0x249a <process_action+0x186>
    2498:	56 c1       	rjmp	.+684    	; 0x2746 <process_action+0x432>
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    249a:	2c 2d       	mov	r18, r12
    249c:	22 95       	swap	r18
    249e:	26 95       	lsr	r18
    24a0:	27 70       	andi	r18, 0x07	; 7
    24a2:	22 0f       	add	r18, r18
    24a4:	22 0f       	add	r18, r18
    24a6:	8c 2d       	mov	r24, r12
    24a8:	8f 70       	andi	r24, 0x0F	; 15
    24aa:	e8 2e       	mov	r14, r24
    24ac:	ff 24       	eor	r15, r15
    24ae:	00 e0       	ldi	r16, 0x00	; 0
    24b0:	10 e0       	ldi	r17, 0x00	; 0
    24b2:	02 2e       	mov	r0, r18
    24b4:	04 c0       	rjmp	.+8      	; 0x24be <process_action+0x1aa>
    24b6:	ee 0c       	add	r14, r14
    24b8:	ff 1c       	adc	r15, r15
    24ba:	00 1f       	adc	r16, r16
    24bc:	11 1f       	adc	r17, r17
    24be:	0a 94       	dec	r0
    24c0:	d2 f7       	brpl	.-12     	; 0x24b6 <process_action+0x1a2>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    24c2:	c4 fc       	sbrc	r12, 4
    24c4:	05 c0       	rjmp	.+10     	; 0x24d0 <process_action+0x1bc>
    24c6:	60 e0       	ldi	r22, 0x00	; 0
    24c8:	70 e0       	ldi	r23, 0x00	; 0
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	0f c0       	rjmp	.+30     	; 0x24ee <process_action+0x1da>
    24d0:	6f e0       	ldi	r22, 0x0F	; 15
    24d2:	70 e0       	ldi	r23, 0x00	; 0
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	04 c0       	rjmp	.+8      	; 0x24e2 <process_action+0x1ce>
    24da:	66 0f       	add	r22, r22
    24dc:	77 1f       	adc	r23, r23
    24de:	88 1f       	adc	r24, r24
    24e0:	99 1f       	adc	r25, r25
    24e2:	2a 95       	dec	r18
    24e4:	d2 f7       	brpl	.-12     	; 0x24da <process_action+0x1c6>
    24e6:	60 95       	com	r22
    24e8:	70 95       	com	r23
    24ea:	80 95       	com	r24
    24ec:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    24ee:	d6 94       	lsr	r13
    24f0:	d6 94       	lsr	r13
    24f2:	f3 e0       	ldi	r31, 0x03	; 3
    24f4:	df 22       	and	r13, r31
    24f6:	4d 2d       	mov	r20, r13
    24f8:	50 e0       	ldi	r21, 0x00	; 0
    24fa:	41 30       	cpi	r20, 0x01	; 1
    24fc:	51 05       	cpc	r21, r1
    24fe:	a9 f0       	breq	.+42     	; 0x252a <process_action+0x216>
    2500:	42 30       	cpi	r20, 0x02	; 2
    2502:	51 05       	cpc	r21, r1
    2504:	1c f4       	brge	.+6      	; 0x250c <process_action+0x1f8>
    2506:	45 2b       	or	r20, r21
    2508:	49 f0       	breq	.+18     	; 0x251c <process_action+0x208>
    250a:	1d c1       	rjmp	.+570    	; 0x2746 <process_action+0x432>
    250c:	42 30       	cpi	r20, 0x02	; 2
    250e:	51 05       	cpc	r21, r1
    2510:	89 f0       	breq	.+34     	; 0x2534 <process_action+0x220>
    2512:	43 30       	cpi	r20, 0x03	; 3
    2514:	51 05       	cpc	r21, r1
    2516:	09 f0       	breq	.+2      	; 0x251a <process_action+0x206>
    2518:	16 c1       	rjmp	.+556    	; 0x2746 <process_action+0x432>
    251a:	13 c0       	rjmp	.+38     	; 0x2542 <process_action+0x22e>
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    251c:	6e 29       	or	r22, r14
    251e:	7f 29       	or	r23, r15
    2520:	80 2b       	or	r24, r16
    2522:	91 2b       	or	r25, r17
    2524:	0e 94 3d 19 	call	0x327a	; 0x327a <default_layer_and>
    2528:	0e c1       	rjmp	.+540    	; 0x2746 <process_action+0x432>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
    252a:	6e 29       	or	r22, r14
    252c:	7f 29       	or	r23, r15
    252e:	80 2b       	or	r24, r16
    2530:	91 2b       	or	r25, r17
    2532:	0b c0       	rjmp	.+22     	; 0x254a <process_action+0x236>
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2534:	6e 29       	or	r22, r14
    2536:	7f 29       	or	r23, r15
    2538:	80 2b       	or	r24, r16
    253a:	91 2b       	or	r25, r17
    253c:	0e 94 2c 19 	call	0x3258	; 0x3258 <default_layer_xor>
    2540:	02 c1       	rjmp	.+516    	; 0x2746 <process_action+0x432>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2542:	0e 94 3d 19 	call	0x327a	; 0x327a <default_layer_and>
    2546:	c8 01       	movw	r24, r16
    2548:	b7 01       	movw	r22, r14
    254a:	0e 94 4e 19 	call	0x329c	; 0x329c <default_layer_or>
    254e:	fb c0       	rjmp	.+502    	; 0x2746 <process_action+0x432>
    2550:	90 e0       	ldi	r25, 0x00	; 0
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2552:	00 23       	and	r16, r16
    2554:	11 f4       	brne	.+4      	; 0x255a <process_action+0x246>
    2556:	96 95       	lsr	r25
    2558:	87 95       	ror	r24
    255a:	81 70       	andi	r24, 0x01	; 1
    255c:	09 f4       	brne	.+2      	; 0x2560 <process_action+0x24c>
    255e:	f3 c0       	rjmp	.+486    	; 0x2746 <process_action+0x432>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2560:	2c 2d       	mov	r18, r12
    2562:	22 95       	swap	r18
    2564:	26 95       	lsr	r18
    2566:	27 70       	andi	r18, 0x07	; 7
    2568:	22 0f       	add	r18, r18
    256a:	22 0f       	add	r18, r18
    256c:	8c 2d       	mov	r24, r12
    256e:	8f 70       	andi	r24, 0x0F	; 15
    2570:	e8 2e       	mov	r14, r24
    2572:	ff 24       	eor	r15, r15
    2574:	00 e0       	ldi	r16, 0x00	; 0
    2576:	10 e0       	ldi	r17, 0x00	; 0
    2578:	02 2e       	mov	r0, r18
    257a:	04 c0       	rjmp	.+8      	; 0x2584 <process_action+0x270>
    257c:	ee 0c       	add	r14, r14
    257e:	ff 1c       	adc	r15, r15
    2580:	00 1f       	adc	r16, r16
    2582:	11 1f       	adc	r17, r17
    2584:	0a 94       	dec	r0
    2586:	d2 f7       	brpl	.-12     	; 0x257c <process_action+0x268>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2588:	c4 fc       	sbrc	r12, 4
    258a:	05 c0       	rjmp	.+10     	; 0x2596 <process_action+0x282>
    258c:	60 e0       	ldi	r22, 0x00	; 0
    258e:	70 e0       	ldi	r23, 0x00	; 0
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	0f c0       	rjmp	.+30     	; 0x25b4 <process_action+0x2a0>
    2596:	6f e0       	ldi	r22, 0x0F	; 15
    2598:	70 e0       	ldi	r23, 0x00	; 0
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	04 c0       	rjmp	.+8      	; 0x25a8 <process_action+0x294>
    25a0:	66 0f       	add	r22, r22
    25a2:	77 1f       	adc	r23, r23
    25a4:	88 1f       	adc	r24, r24
    25a6:	99 1f       	adc	r25, r25
    25a8:	2a 95       	dec	r18
    25aa:	d2 f7       	brpl	.-12     	; 0x25a0 <process_action+0x28c>
    25ac:	60 95       	com	r22
    25ae:	70 95       	com	r23
    25b0:	80 95       	com	r24
    25b2:	90 95       	com	r25
                    switch (action.layer_bitop.op) {
    25b4:	d6 94       	lsr	r13
    25b6:	d6 94       	lsr	r13
    25b8:	23 e0       	ldi	r18, 0x03	; 3
    25ba:	d2 22       	and	r13, r18
    25bc:	4d 2d       	mov	r20, r13
    25be:	50 e0       	ldi	r21, 0x00	; 0
    25c0:	41 30       	cpi	r20, 0x01	; 1
    25c2:	51 05       	cpc	r21, r1
    25c4:	a9 f0       	breq	.+42     	; 0x25f0 <process_action+0x2dc>
    25c6:	42 30       	cpi	r20, 0x02	; 2
    25c8:	51 05       	cpc	r21, r1
    25ca:	1c f4       	brge	.+6      	; 0x25d2 <process_action+0x2be>
    25cc:	45 2b       	or	r20, r21
    25ce:	49 f0       	breq	.+18     	; 0x25e2 <process_action+0x2ce>
    25d0:	ba c0       	rjmp	.+372    	; 0x2746 <process_action+0x432>
    25d2:	42 30       	cpi	r20, 0x02	; 2
    25d4:	51 05       	cpc	r21, r1
    25d6:	89 f0       	breq	.+34     	; 0x25fa <process_action+0x2e6>
    25d8:	43 30       	cpi	r20, 0x03	; 3
    25da:	51 05       	cpc	r21, r1
    25dc:	09 f0       	breq	.+2      	; 0x25e0 <process_action+0x2cc>
    25de:	b3 c0       	rjmp	.+358    	; 0x2746 <process_action+0x432>
    25e0:	13 c0       	rjmp	.+38     	; 0x2608 <process_action+0x2f4>
                        case OP_BIT_AND: layer_and(bits | mask); break;
    25e2:	6e 29       	or	r22, r14
    25e4:	7f 29       	or	r23, r15
    25e6:	80 2b       	or	r24, r16
    25e8:	91 2b       	or	r25, r17
    25ea:	0e 94 90 18 	call	0x3120	; 0x3120 <layer_and>
    25ee:	ab c0       	rjmp	.+342    	; 0x2746 <process_action+0x432>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
    25f0:	6e 29       	or	r22, r14
    25f2:	7f 29       	or	r23, r15
    25f4:	80 2b       	or	r24, r16
    25f6:	91 2b       	or	r25, r17
    25f8:	0b c0       	rjmp	.+22     	; 0x2610 <process_action+0x2fc>
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    25fa:	6e 29       	or	r22, r14
    25fc:	7f 29       	or	r23, r15
    25fe:	80 2b       	or	r24, r16
    2600:	91 2b       	or	r25, r17
    2602:	0e 94 7f 18 	call	0x30fe	; 0x30fe <layer_xor>
    2606:	9f c0       	rjmp	.+318    	; 0x2746 <process_action+0x432>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2608:	0e 94 90 18 	call	0x3120	; 0x3120 <layer_and>
    260c:	c8 01       	movw	r24, r16
    260e:	b7 01       	movw	r22, r14
    2610:	0e 94 a1 18 	call	0x3142	; 0x3142 <layer_or>
    2614:	98 c0       	rjmp	.+304    	; 0x2746 <process_action+0x432>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2616:	80 ef       	ldi	r24, 0xF0	; 240
    2618:	c8 16       	cp	r12, r24
    261a:	f1 f0       	breq	.+60     	; 0x2658 <process_action+0x344>
    261c:	8c 15       	cp	r24, r12
    261e:	20 f0       	brcs	.+8      	; 0x2628 <process_action+0x314>
    2620:	e0 ee       	ldi	r30, 0xE0	; 224
    2622:	ce 16       	cp	r12, r30
    2624:	e8 f1       	brcs	.+122    	; 0x26a0 <process_action+0x38c>
    2626:	09 c0       	rjmp	.+18     	; 0x263a <process_action+0x326>
    2628:	f2 ef       	ldi	r31, 0xF2	; 242
    262a:	cf 16       	cp	r12, r31
    262c:	51 f1       	breq	.+84     	; 0x2682 <process_action+0x36e>
    262e:	cf 16       	cp	r12, r31
    2630:	18 f1       	brcs	.+70     	; 0x2678 <process_action+0x364>
    2632:	23 ef       	ldi	r18, 0xF3	; 243
    2634:	c2 16       	cp	r12, r18
    2636:	a1 f5       	brne	.+104    	; 0x26a0 <process_action+0x38c>
    2638:	29 c0       	rjmp	.+82     	; 0x268c <process_action+0x378>
    263a:	1c 2d       	mov	r17, r12
    263c:	1f 70       	andi	r17, 0x0F	; 15
    263e:	8d 2d       	mov	r24, r13
    2640:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2642:	00 23       	and	r16, r16
    2644:	19 f0       	breq	.+6      	; 0x264c <process_action+0x338>
                        layer_on(action.layer_tap.val);
    2646:	0e 94 ee 18 	call	0x31dc	; 0x31dc <layer_on>
    264a:	f9 ce       	rjmp	.-526    	; 0x243e <process_action+0x12a>
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
    264c:	0e 94 ce 18 	call	0x319c	; 0x319c <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2650:	81 2f       	mov	r24, r17
    2652:	0e 94 a3 10 	call	0x2146	; 0x2146 <unregister_mods>
    2656:	77 c0       	rjmp	.+238    	; 0x2746 <process_action+0x432>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2658:	00 23       	and	r16, r16
    265a:	29 f0       	breq	.+10     	; 0x2666 <process_action+0x352>
                        if (tap_count < TAPPING_TOGGLE) {
    265c:	84 e0       	ldi	r24, 0x04	; 4
    265e:	8f 15       	cp	r24, r15
    2660:	08 f4       	brcc	.+2      	; 0x2664 <process_action+0x350>
    2662:	71 c0       	rjmp	.+226    	; 0x2746 <process_action+0x432>
    2664:	04 c0       	rjmp	.+8      	; 0x266e <process_action+0x35a>
                            layer_invert(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2666:	e5 e0       	ldi	r30, 0x05	; 5
    2668:	ef 15       	cp	r30, r15
    266a:	08 f4       	brcc	.+2      	; 0x266e <process_action+0x35a>
    266c:	6c c0       	rjmp	.+216    	; 0x2746 <process_action+0x432>
                            layer_invert(action.layer_tap.val);
    266e:	8d 2d       	mov	r24, r13
    2670:	8f 71       	andi	r24, 0x1F	; 31
    2672:	0e 94 b2 18 	call	0x3164	; 0x3164 <layer_invert>
    2676:	67 c0       	rjmp	.+206    	; 0x2746 <process_action+0x432>
    2678:	8d 2d       	mov	r24, r13
    267a:	8f 71       	andi	r24, 0x1F	; 31
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    267c:	00 23       	and	r16, r16
    267e:	29 f1       	breq	.+74     	; 0x26ca <process_action+0x3b6>
    2680:	19 c0       	rjmp	.+50     	; 0x26b4 <process_action+0x3a0>
    2682:	8d 2d       	mov	r24, r13
    2684:	8f 71       	andi	r24, 0x1F	; 31
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2686:	00 23       	and	r16, r16
    2688:	a9 f0       	breq	.+42     	; 0x26b4 <process_action+0x3a0>
    268a:	1f c0       	rjmp	.+62     	; 0x26ca <process_action+0x3b6>
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    268c:	00 23       	and	r16, r16
    268e:	29 f0       	breq	.+10     	; 0x269a <process_action+0x386>
    2690:	8d 2d       	mov	r24, r13
    2692:	8f 71       	andi	r24, 0x1F	; 31
    2694:	0e 94 0a 19 	call	0x3214	; 0x3214 <layer_move>
    2698:	56 c0       	rjmp	.+172    	; 0x2746 <process_action+0x432>
    269a:	0e 94 1a 19 	call	0x3234	; 0x3234 <layer_clear>
    269e:	53 c0       	rjmp	.+166    	; 0x2746 <process_action+0x432>
                                    layer_clear();
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    26a0:	00 23       	and	r16, r16
    26a2:	59 f0       	breq	.+22     	; 0x26ba <process_action+0x3a6>
                        if (tap_count > 0) {
    26a4:	ff 20       	and	r15, r15
    26a6:	21 f0       	breq	.+8      	; 0x26b0 <process_action+0x39c>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    26a8:	8c 2d       	mov	r24, r12
    26aa:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <register_code>
    26ae:	4b c0       	rjmp	.+150    	; 0x2746 <process_action+0x432>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
    26b0:	8d 2d       	mov	r24, r13
    26b2:	8f 71       	andi	r24, 0x1F	; 31
    26b4:	0e 94 ee 18 	call	0x31dc	; 0x31dc <layer_on>
    26b8:	46 c0       	rjmp	.+140    	; 0x2746 <process_action+0x432>
                        }
                    } else {
                        if (tap_count > 0) {
    26ba:	ff 20       	and	r15, r15
    26bc:	21 f0       	breq	.+8      	; 0x26c6 <process_action+0x3b2>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    26be:	8c 2d       	mov	r24, r12
    26c0:	0e 94 b1 10 	call	0x2162	; 0x2162 <unregister_code>
    26c4:	40 c0       	rjmp	.+128    	; 0x2746 <process_action+0x432>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
                            layer_off(action.layer_tap.val);
    26c6:	8d 2d       	mov	r24, r13
    26c8:	8f 71       	andi	r24, 0x1F	; 31
    26ca:	0e 94 ce 18 	call	0x319c	; 0x319c <layer_off>
    26ce:	3b c0       	rjmp	.+118    	; 0x2746 <process_action+0x432>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    26d0:	ff e0       	ldi	r31, 0x0F	; 15
    26d2:	df 22       	and	r13, r31
    26d4:	c5 01       	movw	r24, r10
    26d6:	6c 2d       	mov	r22, r12
    26d8:	4d 2d       	mov	r20, r13
    26da:	0e 94 01 1a 	call	0x3402	; 0x3402 <action_get_macro>
    26de:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <action_macro_play>
    26e2:	31 c0       	rjmp	.+98     	; 0x2746 <process_action+0x432>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    26e4:	2f e0       	ldi	r18, 0x0F	; 15
    26e6:	d2 22       	and	r13, r18
    26e8:	c5 01       	movw	r24, r10
    26ea:	6c 2d       	mov	r22, r12
    26ec:	4d 2d       	mov	r20, r13
    26ee:	0e 94 04 1a 	call	0x3408	; 0x3408 <action_function>
    26f2:	29 c0       	rjmp	.+82     	; 0x2746 <process_action+0x432>
    uint8_t tap_count = record->tap.count;
#endif

    if (IS_NOEVENT(event)) { return; }

    action_t action = layer_switch_get_action(event.key);
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	9a 81       	ldd	r25, Y+2	; 0x02
    26f8:	0e 94 2b 18 	call	0x3056	; 0x3056 <layer_switch_get_action>
    26fc:	6c 01       	movw	r12, r24
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    26fe:	0e 94 2a 18 	call	0x3054	; 0x3054 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    2702:	0e 94 29 18 	call	0x3052	; 0x3052 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    2706:	8d 2d       	mov	r24, r13
    2708:	82 95       	swap	r24
    270a:	8f 70       	andi	r24, 0x0F	; 15
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	84 30       	cpi	r24, 0x04	; 4
    2710:	91 05       	cpc	r25, r1
    2712:	09 f4       	brne	.+2      	; 0x2716 <process_action+0x402>
    2714:	9c ce       	rjmp	.-712    	; 0x244e <process_action+0x13a>
    2716:	85 30       	cpi	r24, 0x05	; 5
    2718:	91 05       	cpc	r25, r1
    271a:	34 f4       	brge	.+12     	; 0x2728 <process_action+0x414>
    271c:	2d 2d       	mov	r18, r13
    271e:	20 7f       	andi	r18, 0xF0	; 240
    2720:	02 97       	sbiw	r24, 0x02	; 2
    2722:	0c f4       	brge	.+2      	; 0x2726 <process_action+0x412>
    2724:	2f ce       	rjmp	.-930    	; 0x2384 <process_action+0x70>
    2726:	4e ce       	rjmp	.-868    	; 0x23c4 <process_action+0xb0>
    2728:	8c 30       	cpi	r24, 0x0C	; 12
    272a:	91 05       	cpc	r25, r1
    272c:	3c f4       	brge	.+14     	; 0x273c <process_action+0x428>
    272e:	8a 30       	cpi	r24, 0x0A	; 10
    2730:	91 05       	cpc	r25, r1
    2732:	0c f0       	brlt	.+2      	; 0x2736 <process_action+0x422>
    2734:	70 cf       	rjmp	.-288    	; 0x2616 <process_action+0x302>
    2736:	08 97       	sbiw	r24, 0x08	; 8
    2738:	31 f4       	brne	.+12     	; 0x2746 <process_action+0x432>
    273a:	a8 ce       	rjmp	.-688    	; 0x248c <process_action+0x178>
    273c:	8c 30       	cpi	r24, 0x0C	; 12
    273e:	91 05       	cpc	r25, r1
    2740:	39 f2       	breq	.-114    	; 0x26d0 <process_action+0x3bc>
    2742:	0f 97       	sbiw	r24, 0x0f	; 15
    2744:	79 f2       	breq	.-98     	; 0x26e4 <process_action+0x3d0>
            break;
#endif
        default:
            break;
    }
}
    2746:	2a 96       	adiw	r28, 0x0a	; 10
    2748:	0f b6       	in	r0, 0x3f	; 63
    274a:	f8 94       	cli
    274c:	de bf       	out	0x3e, r29	; 62
    274e:	0f be       	out	0x3f, r0	; 63
    2750:	cd bf       	out	0x3d, r28	; 61
    2752:	cf 91       	pop	r28
    2754:	df 91       	pop	r29
    2756:	1f 91       	pop	r17
    2758:	0f 91       	pop	r16
    275a:	ff 90       	pop	r15
    275c:	ef 90       	pop	r14
    275e:	df 90       	pop	r13
    2760:	cf 90       	pop	r12
    2762:	bf 90       	pop	r11
    2764:	af 90       	pop	r10
    2766:	08 95       	ret

00002768 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2768:	df 93       	push	r29
    276a:	cf 93       	push	r28
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	2b 97       	sbiw	r28, 0x0b	; 11
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
    277c:	34 2f       	mov	r19, r20
    277e:	4f 83       	std	Y+7, r20	; 0x07
    2780:	25 2f       	mov	r18, r21
    2782:	58 87       	std	Y+8, r21	; 0x08
    2784:	69 87       	std	Y+9, r22	; 0x09
    2786:	7a 87       	std	Y+10, r23	; 0x0a
    2788:	8b 87       	std	Y+11, r24	; 0x0b
    278a:	47 2f       	mov	r20, r23
    278c:	58 2f       	mov	r21, r24
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    278e:	fe 01       	movw	r30, r28
    2790:	31 96       	adiw	r30, 0x01	; 1
    2792:	86 e0       	ldi	r24, 0x06	; 6
    2794:	df 01       	movw	r26, r30
    2796:	1d 92       	st	X+, r1
    2798:	8a 95       	dec	r24
    279a:	e9 f7       	brne	.-6      	; 0x2796 <action_exec+0x2e>
    279c:	6b 83       	std	Y+3, r22	; 0x03
    279e:	39 83       	std	Y+1, r19	; 0x01
    27a0:	2a 83       	std	Y+2, r18	; 0x02
    27a2:	4c 83       	std	Y+4, r20	; 0x04
    27a4:	5d 83       	std	Y+5, r21	; 0x05

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    27a6:	43 2f       	mov	r20, r19
    27a8:	52 2f       	mov	r21, r18
    27aa:	8d 81       	ldd	r24, Y+5	; 0x05
    27ac:	9e 81       	ldd	r25, Y+6	; 0x06
    27ae:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    27b2:	2b 96       	adiw	r28, 0x0b	; 11
    27b4:	0f b6       	in	r0, 0x3f	; 63
    27b6:	f8 94       	cli
    27b8:	de bf       	out	0x3e, r29	; 62
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	cd bf       	out	0x3d, r28	; 61
    27be:	cf 91       	pop	r28
    27c0:	df 91       	pop	r29
    27c2:	08 95       	ret

000027c4 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    27c4:	0f 93       	push	r16
    27c6:	1f 93       	push	r17
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    27c8:	00 91 73 01 	lds	r16, 0x0173
    27cc:	15 c0       	rjmp	.+42     	; 0x27f8 <debug_waiting_buffer+0x34>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    27ce:	10 e0       	ldi	r17, 0x00	; 0
    27d0:	f8 01       	movw	r30, r16
    27d2:	ee 0f       	add	r30, r30
    27d4:	ff 1f       	adc	r31, r31
    27d6:	e0 0f       	add	r30, r16
    27d8:	f1 1f       	adc	r31, r17
    27da:	ee 0f       	add	r30, r30
    27dc:	ff 1f       	adc	r31, r31
    27de:	ec 58       	subi	r30, 0x8C	; 140
    27e0:	fe 4f       	sbci	r31, 0xFE	; 254
    27e2:	40 81       	ld	r20, Z
    27e4:	51 81       	ldd	r21, Z+1	; 0x01
    27e6:	62 81       	ldd	r22, Z+2	; 0x02
    27e8:	73 81       	ldd	r23, Z+3	; 0x03
    27ea:	84 81       	ldd	r24, Z+4	; 0x04
    27ec:	95 81       	ldd	r25, Z+5	; 0x05
    27ee:	0e 94 52 10 	call	0x20a4	; 0x20a4 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    27f2:	0f 5f       	subi	r16, 0xFF	; 255
    27f4:	1f 4f       	sbci	r17, 0xFF	; 255
    27f6:	07 70       	andi	r16, 0x07	; 7
    27f8:	80 91 72 01 	lds	r24, 0x0172
    27fc:	08 17       	cp	r16, r24
    27fe:	39 f7       	brne	.-50     	; 0x27ce <debug_waiting_buffer+0xa>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2800:	1f 91       	pop	r17
    2802:	0f 91       	pop	r16
    2804:	08 95       	ret

00002806 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2806:	40 91 6c 01 	lds	r20, 0x016C
    280a:	50 91 6d 01 	lds	r21, 0x016D
    280e:	60 91 6e 01 	lds	r22, 0x016E
    2812:	70 91 6f 01 	lds	r23, 0x016F
    2816:	80 91 70 01 	lds	r24, 0x0170
    281a:	90 91 71 01 	lds	r25, 0x0171
    281e:	0e 94 52 10 	call	0x20a4	; 0x20a4 <debug_record>
}
    2822:	08 95       	ret

00002824 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    2824:	0f 93       	push	r16
    2826:	1f 93       	push	r17
    2828:	cf 93       	push	r28
    282a:	df 93       	push	r29
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    282c:	80 91 71 01 	lds	r24, 0x0171
    2830:	82 95       	swap	r24
    2832:	8f 70       	andi	r24, 0x0F	; 15
    2834:	09 f0       	breq	.+2      	; 0x2838 <waiting_buffer_scan_tap+0x14>
    2836:	6d c0       	rjmp	.+218    	; 0x2912 <waiting_buffer_scan_tap+0xee>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2838:	80 91 6e 01 	lds	r24, 0x016E
    283c:	88 23       	and	r24, r24
    283e:	09 f4       	brne	.+2      	; 0x2842 <waiting_buffer_scan_tap+0x1e>
    2840:	68 c0       	rjmp	.+208    	; 0x2912 <waiting_buffer_scan_tap+0xee>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2842:	60 91 73 01 	lds	r22, 0x0173
    2846:	00 91 72 01 	lds	r16, 0x0172
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    284a:	40 91 6f 01 	lds	r20, 0x016F
    284e:	50 91 70 01 	lds	r21, 0x0170
    2852:	10 91 6d 01 	lds	r17, 0x016D
    2856:	70 91 6c 01 	lds	r23, 0x016C
    285a:	ea 01       	movw	r28, r20
    285c:	c0 95       	com	r28
    285e:	d0 95       	com	r29
    2860:	55 c0       	rjmp	.+170    	; 0x290c <waiting_buffer_scan_tap+0xe8>
    2862:	41 15       	cp	r20, r1
    2864:	51 05       	cpc	r21, r1
    2866:	09 f4       	brne	.+2      	; 0x286a <waiting_buffer_scan_tap+0x46>
    2868:	4f c0       	rjmp	.+158    	; 0x2908 <waiting_buffer_scan_tap+0xe4>
    286a:	1f 3f       	cpi	r17, 0xFF	; 255
    286c:	49 f4       	brne	.+18     	; 0x2880 <waiting_buffer_scan_tap+0x5c>
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	7f 3f       	cpi	r23, 0xFF	; 255
    2874:	11 f4       	brne	.+4      	; 0x287a <waiting_buffer_scan_tap+0x56>
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	88 23       	and	r24, r24
    287c:	09 f0       	breq	.+2      	; 0x2880 <waiting_buffer_scan_tap+0x5c>
    287e:	44 c0       	rjmp	.+136    	; 0x2908 <waiting_buffer_scan_tap+0xe4>
    2880:	26 2f       	mov	r18, r22
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	f9 01       	movw	r30, r18
    2886:	ee 0f       	add	r30, r30
    2888:	ff 1f       	adc	r31, r31
    288a:	e2 0f       	add	r30, r18
    288c:	f3 1f       	adc	r31, r19
    288e:	df 01       	movw	r26, r30
    2890:	aa 0f       	add	r26, r26
    2892:	bb 1f       	adc	r27, r27
    2894:	ac 58       	subi	r26, 0x8C	; 140
    2896:	be 4f       	sbci	r27, 0xFE	; 254
    2898:	11 96       	adiw	r26, 0x01	; 1
    289a:	8c 91       	ld	r24, X
    289c:	11 97       	sbiw	r26, 0x01	; 1
    289e:	18 17       	cp	r17, r24
    28a0:	99 f5       	brne	.+102    	; 0x2908 <waiting_buffer_scan_tap+0xe4>
    28a2:	8c 91       	ld	r24, X
    28a4:	78 17       	cp	r23, r24
    28a6:	81 f5       	brne	.+96     	; 0x2908 <waiting_buffer_scan_tap+0xe4>
    28a8:	ee 0f       	add	r30, r30
    28aa:	ff 1f       	adc	r31, r31
    28ac:	ea 58       	subi	r30, 0x8A	; 138
    28ae:	fe 4f       	sbci	r31, 0xFE	; 254
    28b0:	80 81       	ld	r24, Z
    28b2:	88 23       	and	r24, r24
    28b4:	49 f5       	brne	.+82     	; 0x2908 <waiting_buffer_scan_tap+0xe4>
    28b6:	13 96       	adiw	r26, 0x03	; 3
    28b8:	8d 91       	ld	r24, X+
    28ba:	9c 91       	ld	r25, X
    28bc:	14 97       	sbiw	r26, 0x04	; 4
    28be:	84 17       	cp	r24, r20
    28c0:	95 07       	cpc	r25, r21
    28c2:	18 f0       	brcs	.+6      	; 0x28ca <waiting_buffer_scan_tap+0xa6>
    28c4:	84 1b       	sub	r24, r20
    28c6:	95 0b       	sbc	r25, r21
    28c8:	02 c0       	rjmp	.+4      	; 0x28ce <waiting_buffer_scan_tap+0xaa>
    28ca:	8c 0f       	add	r24, r28
    28cc:	9d 1f       	adc	r25, r29
    28ce:	88 3c       	cpi	r24, 0xC8	; 200
    28d0:	91 05       	cpc	r25, r1
    28d2:	d0 f4       	brcc	.+52     	; 0x2908 <waiting_buffer_scan_tap+0xe4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
            tapping_key.tap.count = 1;
    28d4:	80 91 71 01 	lds	r24, 0x0171
    28d8:	8f 70       	andi	r24, 0x0F	; 15
    28da:	80 61       	ori	r24, 0x10	; 16
    28dc:	80 93 71 01 	sts	0x0171, r24
            waiting_buffer[i].tap.count = 1;
    28e0:	f9 01       	movw	r30, r18
    28e2:	ee 0f       	add	r30, r30
    28e4:	ff 1f       	adc	r31, r31
    28e6:	e2 0f       	add	r30, r18
    28e8:	f3 1f       	adc	r31, r19
    28ea:	ee 0f       	add	r30, r30
    28ec:	ff 1f       	adc	r31, r31
    28ee:	e7 58       	subi	r30, 0x87	; 135
    28f0:	fe 4f       	sbci	r31, 0xFE	; 254
    28f2:	80 81       	ld	r24, Z
    28f4:	8f 70       	andi	r24, 0x0F	; 15
    28f6:	80 61       	ori	r24, 0x10	; 16
    28f8:	80 83       	st	Z, r24
            process_action(&tapping_key);
    28fa:	8c e6       	ldi	r24, 0x6C	; 108
    28fc:	91 e0       	ldi	r25, 0x01	; 1
    28fe:	0e 94 8a 11 	call	0x2314	; 0x2314 <process_action>

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    2902:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <debug_waiting_buffer>
    2906:	05 c0       	rjmp	.+10     	; 0x2912 <waiting_buffer_scan_tap+0xee>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2908:	6f 5f       	subi	r22, 0xFF	; 255
    290a:	67 70       	andi	r22, 0x07	; 7
    290c:	60 17       	cp	r22, r16
    290e:	09 f0       	breq	.+2      	; 0x2912 <waiting_buffer_scan_tap+0xee>
    2910:	a8 cf       	rjmp	.-176    	; 0x2862 <waiting_buffer_scan_tap+0x3e>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2912:	df 91       	pop	r29
    2914:	cf 91       	pop	r28
    2916:	1f 91       	pop	r17
    2918:	0f 91       	pop	r16
    291a:	08 95       	ret

0000291c <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    291c:	df 92       	push	r13
    291e:	ef 92       	push	r14
    2920:	ff 92       	push	r15
    2922:	0f 93       	push	r16
    2924:	1f 93       	push	r17
    2926:	df 93       	push	r29
    2928:	cf 93       	push	r28
    292a:	cd b7       	in	r28, 0x3d	; 61
    292c:	de b7       	in	r29, 0x3e	; 62
    292e:	6b 97       	sbiw	r28, 0x1b	; 27
    2930:	0f b6       	in	r0, 0x3f	; 63
    2932:	f8 94       	cli
    2934:	de bf       	out	0x3e, r29	; 62
    2936:	0f be       	out	0x3f, r0	; 63
    2938:	cd bf       	out	0x3d, r28	; 61
    293a:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    293c:	dc 01       	movw	r26, r24
    293e:	12 96       	adiw	r26, 0x02	; 2
    2940:	dc 90       	ld	r13, X
    2942:	12 97       	sbiw	r26, 0x02	; 2
    2944:	4c 91       	ld	r20, X
    2946:	11 96       	adiw	r26, 0x01	; 1
    2948:	5c 91       	ld	r21, X
    294a:	11 97       	sbiw	r26, 0x01	; 1
    294c:	13 96       	adiw	r26, 0x03	; 3
    294e:	ed 90       	ld	r14, X+
    2950:	fc 90       	ld	r15, X
    2952:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2954:	20 91 6f 01 	lds	r18, 0x016F
    2958:	30 91 70 01 	lds	r19, 0x0170
    295c:	60 91 6d 01 	lds	r22, 0x016D
    2960:	70 91 6c 01 	lds	r23, 0x016C
    2964:	21 15       	cp	r18, r1
    2966:	31 05       	cpc	r19, r1
    2968:	09 f4       	brne	.+2      	; 0x296c <process_tapping+0x50>
    296a:	db c1       	rjmp	.+950    	; 0x2d22 <process_tapping+0x406>
    296c:	6f 3f       	cpi	r22, 0xFF	; 255
    296e:	09 f0       	breq	.+2      	; 0x2972 <process_tapping+0x56>
    2970:	03 c2       	rjmp	.+1030   	; 0x2d78 <process_tapping+0x45c>
    2972:	7f 3f       	cpi	r23, 0xFF	; 255
    2974:	09 f0       	breq	.+2      	; 0x2978 <process_tapping+0x5c>
    2976:	00 c2       	rjmp	.+1024   	; 0x2d78 <process_tapping+0x45c>
    2978:	d4 c1       	rjmp	.+936    	; 0x2d22 <process_tapping+0x406>
        if (WITHIN_TAPPING_TERM(event)) {
    297a:	e2 16       	cp	r14, r18
    297c:	f3 06       	cpc	r15, r19
    297e:	40 f0       	brcs	.+16     	; 0x2990 <process_tapping+0x74>
    2980:	c7 01       	movw	r24, r14
    2982:	82 1b       	sub	r24, r18
    2984:	93 0b       	sbc	r25, r19
    2986:	88 3c       	cpi	r24, 0xC8	; 200
    2988:	91 05       	cpc	r25, r1
    298a:	08 f0       	brcs	.+2      	; 0x298e <process_tapping+0x72>
    298c:	ee c0       	rjmp	.+476    	; 0x2b6a <process_tapping+0x24e>
    298e:	08 c0       	rjmp	.+16     	; 0x29a0 <process_tapping+0x84>
    2990:	20 95       	com	r18
    2992:	30 95       	com	r19
    2994:	2e 0d       	add	r18, r14
    2996:	3f 1d       	adc	r19, r15
    2998:	28 3c       	cpi	r18, 0xC8	; 200
    299a:	31 05       	cpc	r19, r1
    299c:	08 f0       	brcs	.+2      	; 0x29a0 <process_tapping+0x84>
    299e:	e5 c0       	rjmp	.+458    	; 0x2b6a <process_tapping+0x24e>
            if (tapping_key.tap.count == 0) {
    29a0:	80 91 71 01 	lds	r24, 0x0171
    29a4:	80 7f       	andi	r24, 0xF0	; 240
    29a6:	09 f0       	breq	.+2      	; 0x29aa <process_tapping+0x8e>
    29a8:	95 c0       	rjmp	.+298    	; 0x2ad4 <process_tapping+0x1b8>
    29aa:	6f 3f       	cpi	r22, 0xFF	; 255
    29ac:	09 f0       	breq	.+2      	; 0x29b0 <process_tapping+0x94>
    29ae:	ea c1       	rjmp	.+980    	; 0x2d84 <process_tapping+0x468>
    29b0:	7f 3f       	cpi	r23, 0xFF	; 255
    29b2:	09 f0       	breq	.+2      	; 0x29b6 <process_tapping+0x9a>
    29b4:	e7 c1       	rjmp	.+974    	; 0x2d84 <process_tapping+0x468>
    29b6:	15 c0       	rjmp	.+42     	; 0x29e2 <process_tapping+0xc6>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    29b8:	74 17       	cp	r23, r20
    29ba:	99 f4       	brne	.+38     	; 0x29e2 <process_tapping+0xc6>
    29bc:	dd 20       	and	r13, r13
    29be:	89 f4       	brne	.+34     	; 0x29e2 <process_tapping+0xc6>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    29c0:	80 91 71 01 	lds	r24, 0x0171
    29c4:	8f 70       	andi	r24, 0x0F	; 15
    29c6:	80 61       	ori	r24, 0x10	; 16
    29c8:	80 93 71 01 	sts	0x0171, r24
                    debug_tapping_key();
    29cc:	0e 94 03 14 	call	0x2806	; 0x2806 <debug_tapping_key>
                    process_action(&tapping_key);
    29d0:	8c e6       	ldi	r24, 0x6C	; 108
    29d2:	91 e0       	ldi	r25, 0x01	; 1
    29d4:	0e 94 8a 11 	call	0x2314	; 0x2314 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    29d8:	80 91 71 01 	lds	r24, 0x0171
    29dc:	f8 01       	movw	r30, r16
    29de:	85 83       	std	Z+5, r24	; 0x05
    29e0:	bc c1       	rjmp	.+888    	; 0x2d5a <process_tapping+0x43e>
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    29e2:	fd 82       	std	Y+5, r15	; 0x05
    29e4:	ec 82       	std	Y+4, r14	; 0x04
    29e6:	5a 83       	std	Y+2, r21	; 0x02
    29e8:	49 83       	std	Y+1, r20	; 0x01
    29ea:	db 82       	std	Y+3, r13	; 0x03
    29ec:	de 01       	movw	r26, r28
    29ee:	16 96       	adiw	r26, 0x06	; 6
    29f0:	fe 01       	movw	r30, r28
    29f2:	31 96       	adiw	r30, 0x01	; 1
    29f4:	85 e0       	ldi	r24, 0x05	; 5
    29f6:	01 90       	ld	r0, Z+
    29f8:	0d 92       	st	X+, r0
    29fa:	81 50       	subi	r24, 0x01	; 1
    29fc:	e1 f7       	brne	.-8      	; 0x29f6 <process_tapping+0xda>
    29fe:	68 85       	ldd	r22, Y+8	; 0x08
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2a00:	de 01       	movw	r26, r28
    2a02:	1b 96       	adiw	r26, 0x0b	; 11
    2a04:	fe 01       	movw	r30, r28
    2a06:	36 96       	adiw	r30, 0x06	; 6
    2a08:	85 e0       	ldi	r24, 0x05	; 5
    2a0a:	01 90       	ld	r0, Z+
    2a0c:	0d 92       	st	X+, r0
    2a0e:	81 50       	subi	r24, 0x01	; 1
    2a10:	e1 f7       	brne	.-8      	; 0x2a0a <process_tapping+0xee>
    2a12:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a14:	3b 85       	ldd	r19, Y+11	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2a16:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a18:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a1a:	89 2b       	or	r24, r25
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <process_tapping+0x104>
    2a1e:	51 c0       	rjmp	.+162    	; 0x2ac2 <process_tapping+0x1a6>
    2a20:	2f 3f       	cpi	r18, 0xFF	; 255
    2a22:	09 f0       	breq	.+2      	; 0x2a26 <process_tapping+0x10a>
    2a24:	b3 c1       	rjmp	.+870    	; 0x2d8c <process_tapping+0x470>
    2a26:	3f 3f       	cpi	r19, 0xFF	; 255
    2a28:	09 f0       	breq	.+2      	; 0x2a2c <process_tapping+0x110>
    2a2a:	b0 c1       	rjmp	.+864    	; 0x2d8c <process_tapping+0x470>
    2a2c:	4a c0       	rjmp	.+148    	; 0x2ac2 <process_tapping+0x1a6>
    2a2e:	fd 82       	std	Y+5, r15	; 0x05
    2a30:	ec 82       	std	Y+4, r14	; 0x04
    2a32:	5a 83       	std	Y+2, r21	; 0x02
    2a34:	49 83       	std	Y+1, r20	; 0x01
    2a36:	db 82       	std	Y+3, r13	; 0x03
    2a38:	de 01       	movw	r26, r28
    2a3a:	1b 96       	adiw	r26, 0x0b	; 11
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	31 96       	adiw	r30, 0x01	; 1
    2a40:	85 e0       	ldi	r24, 0x05	; 5
    2a42:	01 90       	ld	r0, Z+
    2a44:	0d 92       	st	X+, r0
    2a46:	81 50       	subi	r24, 0x01	; 1
    2a48:	e1 f7       	brne	.-8      	; 0x2a42 <process_tapping+0x126>
    2a4a:	fc 84       	ldd	r15, Y+12	; 0x0c
    2a4c:	7b 85       	ldd	r23, Y+11	; 0x0b
    2a4e:	6d 85       	ldd	r22, Y+13	; 0x0d
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2a50:	80 91 73 01 	lds	r24, 0x0173
    2a54:	90 91 72 01 	lds	r25, 0x0172
    2a58:	1f c0       	rjmp	.+62     	; 0x2a98 <process_tapping+0x17c>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	f9 01       	movw	r30, r18
    2a60:	ee 0f       	add	r30, r30
    2a62:	ff 1f       	adc	r31, r31
    2a64:	e2 0f       	add	r30, r18
    2a66:	f3 1f       	adc	r31, r19
    2a68:	df 01       	movw	r26, r30
    2a6a:	aa 0f       	add	r26, r26
    2a6c:	bb 1f       	adc	r27, r27
    2a6e:	ac 58       	subi	r26, 0x8C	; 140
    2a70:	be 4f       	sbci	r27, 0xFE	; 254
    2a72:	11 96       	adiw	r26, 0x01	; 1
    2a74:	8c 91       	ld	r24, X
    2a76:	11 97       	sbiw	r26, 0x01	; 1
    2a78:	f8 16       	cp	r15, r24
    2a7a:	51 f4       	brne	.+20     	; 0x2a90 <process_tapping+0x174>
    2a7c:	8c 91       	ld	r24, X
    2a7e:	78 17       	cp	r23, r24
    2a80:	39 f4       	brne	.+14     	; 0x2a90 <process_tapping+0x174>
    2a82:	ee 0f       	add	r30, r30
    2a84:	ff 1f       	adc	r31, r31
    2a86:	ea 58       	subi	r30, 0x8A	; 138
    2a88:	fe 4f       	sbci	r31, 0xFE	; 254
    2a8a:	80 81       	ld	r24, Z
    2a8c:	68 17       	cp	r22, r24
    2a8e:	c9 f4       	brne	.+50     	; 0x2ac2 <process_tapping+0x1a6>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2a90:	2f 5f       	subi	r18, 0xFF	; 255
    2a92:	3f 4f       	sbci	r19, 0xFF	; 255
    2a94:	82 2f       	mov	r24, r18
    2a96:	87 70       	andi	r24, 0x07	; 7
    2a98:	89 17       	cp	r24, r25
    2a9a:	f9 f6       	brne	.-66     	; 0x2a5a <process_tapping+0x13e>
    2a9c:	8d c1       	rjmp	.+794    	; 0x2db8 <process_tapping+0x49c>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    2a9e:	9f 70       	andi	r25, 0x0F	; 15
    2aa0:	59 f0       	breq	.+22     	; 0x2ab8 <process_tapping+0x19c>
    2aa2:	44 23       	and	r20, r20
    2aa4:	49 f4       	brne	.+18     	; 0x2ab8 <process_tapping+0x19c>
    2aa6:	59 c1       	rjmp	.+690    	; 0x2d5a <process_tapping+0x43e>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    2aa8:	9f 70       	andi	r25, 0x0F	; 15
    2aaa:	31 f0       	breq	.+12     	; 0x2ab8 <process_tapping+0x19c>
    2aac:	d8 01       	movw	r26, r16
    2aae:	15 96       	adiw	r26, 0x05	; 5
    2ab0:	8c 91       	ld	r24, X
    2ab2:	80 7f       	andi	r24, 0xF0	; 240
    2ab4:	09 f4       	brne	.+2      	; 0x2ab8 <process_tapping+0x19c>
    2ab6:	51 c1       	rjmp	.+674    	; 0x2d5a <process_tapping+0x43e>
                            if (IS_MOD(action.key.code)) return false;
    2ab8:	40 5e       	subi	r20, 0xE0	; 224
    2aba:	48 30       	cpi	r20, 0x08	; 8
    2abc:	08 f4       	brcc	.+2      	; 0x2ac0 <process_tapping+0x1a4>
    2abe:	4d c1       	rjmp	.+666    	; 0x2d5a <process_tapping+0x43e>
    2ac0:	48 c1       	rjmp	.+656    	; 0x2d52 <process_tapping+0x436>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    2ac2:	dd 20       	and	r13, r13
    2ac4:	09 f4       	brne	.+2      	; 0x2ac8 <process_tapping+0x1ac>
    2ac6:	49 c1       	rjmp	.+658    	; 0x2d5a <process_tapping+0x43e>
                        tapping_key.tap.interrupted = true;
    2ac8:	80 91 71 01 	lds	r24, 0x0171
    2acc:	81 60       	ori	r24, 0x01	; 1
    2ace:	80 93 71 01 	sts	0x0171, r24
    2ad2:	43 c1       	rjmp	.+646    	; 0x2d5a <process_tapping+0x43e>
    2ad4:	6f 3f       	cpi	r22, 0xFF	; 255
    2ad6:	09 f0       	breq	.+2      	; 0x2ada <process_tapping+0x1be>
    2ad8:	5d c1       	rjmp	.+698    	; 0x2d94 <process_tapping+0x478>
    2ada:	7f 3f       	cpi	r23, 0xFF	; 255
    2adc:	09 f0       	breq	.+2      	; 0x2ae0 <process_tapping+0x1c4>
    2ade:	5a c1       	rjmp	.+692    	; 0x2d94 <process_tapping+0x478>
    2ae0:	14 c0       	rjmp	.+40     	; 0x2b0a <process_tapping+0x1ee>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2ae2:	74 17       	cp	r23, r20
    2ae4:	91 f4       	brne	.+36     	; 0x2b0a <process_tapping+0x1ee>
    2ae6:	dd 20       	and	r13, r13
    2ae8:	81 f4       	brne	.+32     	; 0x2b0a <process_tapping+0x1ee>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    2aea:	80 91 71 01 	lds	r24, 0x0171
    2aee:	f8 01       	movw	r30, r16
    2af0:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    2af2:	c8 01       	movw	r24, r16
    2af4:	0e 94 8a 11 	call	0x2314	; 0x2314 <process_action>
                    tapping_key = *keyp;
    2af8:	ac e6       	ldi	r26, 0x6C	; 108
    2afa:	b1 e0       	ldi	r27, 0x01	; 1
    2afc:	f8 01       	movw	r30, r16
    2afe:	86 e0       	ldi	r24, 0x06	; 6
    2b00:	01 90       	ld	r0, Z+
    2b02:	0d 92       	st	X+, r0
    2b04:	81 50       	subi	r24, 0x01	; 1
    2b06:	e1 f7       	brne	.-8      	; 0x2b00 <process_tapping+0x1e4>
    2b08:	20 c1       	rjmp	.+576    	; 0x2d4a <process_tapping+0x42e>
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2b0a:	5a 83       	std	Y+2, r21	; 0x02
    2b0c:	49 83       	std	Y+1, r20	; 0x01
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	9a 81       	ldd	r25, Y+2	; 0x02
    2b12:	0e 94 62 10 	call	0x20c4	; 0x20c4 <is_tap_key>
    2b16:	88 23       	and	r24, r24
    2b18:	09 f4       	brne	.+2      	; 0x2b1c <process_tapping+0x200>
    2b1a:	1b c1       	rjmp	.+566    	; 0x2d52 <process_tapping+0x436>
    2b1c:	dd 20       	and	r13, r13
    2b1e:	09 f4       	brne	.+2      	; 0x2b22 <process_tapping+0x206>
    2b20:	18 c1       	rjmp	.+560    	; 0x2d52 <process_tapping+0x436>
                    if (tapping_key.tap.count > 1) {
    2b22:	30 91 71 01 	lds	r19, 0x0171
    2b26:	83 2f       	mov	r24, r19
    2b28:	82 95       	swap	r24
    2b2a:	8f 70       	andi	r24, 0x0F	; 15
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	02 97       	sbiw	r24, 0x02	; 2
    2b30:	9c f0       	brlt	.+38     	; 0x2b58 <process_tapping+0x23c>
                        process_action(&(keyrecord_t){
                                .tap = tapping_key.tap,
                                .event.key = tapping_key.event.key,
                                .event.time = event.time,
                                .event.pressed = false
                        });
    2b32:	90 91 6d 01 	lds	r25, 0x016D
    2b36:	20 91 6c 01 	lds	r18, 0x016C
    2b3a:	fe 01       	movw	r30, r28
    2b3c:	70 96       	adiw	r30, 0x10	; 16
    2b3e:	86 e0       	ldi	r24, 0x06	; 6
    2b40:	df 01       	movw	r26, r30
    2b42:	1d 92       	st	X+, r1
    2b44:	8a 95       	dec	r24
    2b46:	e9 f7       	brne	.-6      	; 0x2b42 <process_tapping+0x226>
    2b48:	99 8b       	std	Y+17, r25	; 0x11
    2b4a:	28 8b       	std	Y+16, r18	; 0x10
    2b4c:	fc 8a       	std	Y+20, r15	; 0x14
    2b4e:	eb 8a       	std	Y+19, r14	; 0x13
    2b50:	3d 8b       	std	Y+21, r19	; 0x15
                }
                else if (is_tap_key(event.key) && event.pressed) {
                    if (tapping_key.tap.count > 1) {
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2b52:	cf 01       	movw	r24, r30
    2b54:	0e 94 8a 11 	call	0x2314	; 0x2314 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    2b58:	ac e6       	ldi	r26, 0x6C	; 108
    2b5a:	b1 e0       	ldi	r27, 0x01	; 1
    2b5c:	f8 01       	movw	r30, r16
    2b5e:	86 e0       	ldi	r24, 0x06	; 6
    2b60:	01 90       	ld	r0, Z+
    2b62:	0d 92       	st	X+, r0
    2b64:	81 50       	subi	r24, 0x01	; 1
    2b66:	e1 f7       	brne	.-8      	; 0x2b60 <process_tapping+0x244>
    2b68:	ee c0       	rjmp	.+476    	; 0x2d46 <process_tapping+0x42a>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    2b6a:	80 91 71 01 	lds	r24, 0x0171
    2b6e:	80 7f       	andi	r24, 0xF0	; 240
    2b70:	a9 f4       	brne	.+42     	; 0x2b9c <process_tapping+0x280>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    2b72:	7e 2d       	mov	r23, r14
    2b74:	fd 82       	std	Y+5, r15	; 0x05
    2b76:	ec 82       	std	Y+4, r14	; 0x04
    2b78:	5a 83       	std	Y+2, r21	; 0x02
    2b7a:	49 83       	std	Y+1, r20	; 0x01
    2b7c:	db 82       	std	Y+3, r13	; 0x03
    2b7e:	6d 2d       	mov	r22, r13
    2b80:	8d 81       	ldd	r24, Y+5	; 0x05
    2b82:	0e 94 43 10 	call	0x2086	; 0x2086 <debug_event>
                process_action(&tapping_key);
    2b86:	0c e6       	ldi	r16, 0x6C	; 108
    2b88:	11 e0       	ldi	r17, 0x01	; 1
    2b8a:	c8 01       	movw	r24, r16
    2b8c:	0e 94 8a 11 	call	0x2314	; 0x2314 <process_action>
                tapping_key = (keyrecord_t){};
    2b90:	86 e0       	ldi	r24, 0x06	; 6
    2b92:	f8 01       	movw	r30, r16
    2b94:	11 92       	st	Z+, r1
    2b96:	8a 95       	dec	r24
    2b98:	e9 f7       	brne	.-6      	; 0x2b94 <process_tapping+0x278>
    2b9a:	c0 c0       	rjmp	.+384    	; 0x2d1c <process_tapping+0x400>
    2b9c:	6f 3f       	cpi	r22, 0xFF	; 255
    2b9e:	09 f0       	breq	.+2      	; 0x2ba2 <process_tapping+0x286>
    2ba0:	fd c0       	rjmp	.+506    	; 0x2d9c <process_tapping+0x480>
    2ba2:	7f 3f       	cpi	r23, 0xFF	; 255
    2ba4:	09 f0       	breq	.+2      	; 0x2ba8 <process_tapping+0x28c>
    2ba6:	fa c0       	rjmp	.+500    	; 0x2d9c <process_tapping+0x480>
    2ba8:	14 c0       	rjmp	.+40     	; 0x2bd2 <process_tapping+0x2b6>
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2baa:	74 17       	cp	r23, r20
    2bac:	91 f4       	brne	.+36     	; 0x2bd2 <process_tapping+0x2b6>
    2bae:	dd 20       	and	r13, r13
    2bb0:	81 f4       	brne	.+32     	; 0x2bd2 <process_tapping+0x2b6>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    2bb2:	80 91 71 01 	lds	r24, 0x0171
    2bb6:	d8 01       	movw	r26, r16
    2bb8:	15 96       	adiw	r26, 0x05	; 5
    2bba:	8c 93       	st	X, r24
                    process_action(keyp);
    2bbc:	c8 01       	movw	r24, r16
    2bbe:	0e 94 8a 11 	call	0x2314	; 0x2314 <process_action>
                    tapping_key = (keyrecord_t){};
    2bc2:	ec e6       	ldi	r30, 0x6C	; 108
    2bc4:	f1 e0       	ldi	r31, 0x01	; 1
    2bc6:	86 e0       	ldi	r24, 0x06	; 6
    2bc8:	df 01       	movw	r26, r30
    2bca:	1d 92       	st	X+, r1
    2bcc:	8a 95       	dec	r24
    2bce:	e9 f7       	brne	.-6      	; 0x2bca <process_tapping+0x2ae>
    2bd0:	be c0       	rjmp	.+380    	; 0x2d4e <process_tapping+0x432>
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2bd2:	5a 83       	std	Y+2, r21	; 0x02
    2bd4:	49 83       	std	Y+1, r20	; 0x01
    2bd6:	89 81       	ldd	r24, Y+1	; 0x01
    2bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bda:	0e 94 62 10 	call	0x20c4	; 0x20c4 <is_tap_key>
    2bde:	88 23       	and	r24, r24
    2be0:	09 f4       	brne	.+2      	; 0x2be4 <process_tapping+0x2c8>
    2be2:	b7 c0       	rjmp	.+366    	; 0x2d52 <process_tapping+0x436>
    2be4:	dd 20       	and	r13, r13
    2be6:	09 f4       	brne	.+2      	; 0x2bea <process_tapping+0x2ce>
    2be8:	b4 c0       	rjmp	.+360    	; 0x2d52 <process_tapping+0x436>
                    if (tapping_key.tap.count > 1) {
    2bea:	30 91 71 01 	lds	r19, 0x0171
    2bee:	83 2f       	mov	r24, r19
    2bf0:	82 95       	swap	r24
    2bf2:	8f 70       	andi	r24, 0x0F	; 15
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	02 97       	sbiw	r24, 0x02	; 2
    2bf8:	9c f0       	brlt	.+38     	; 0x2c20 <process_tapping+0x304>
                        process_action(&(keyrecord_t){
                                .tap = tapping_key.tap,
                                .event.key = tapping_key.event.key,
                                .event.time = event.time,
                                .event.pressed = false
                        });
    2bfa:	90 91 6d 01 	lds	r25, 0x016D
    2bfe:	20 91 6c 01 	lds	r18, 0x016C
    2c02:	fe 01       	movw	r30, r28
    2c04:	76 96       	adiw	r30, 0x16	; 22
    2c06:	86 e0       	ldi	r24, 0x06	; 6
    2c08:	df 01       	movw	r26, r30
    2c0a:	1d 92       	st	X+, r1
    2c0c:	8a 95       	dec	r24
    2c0e:	e9 f7       	brne	.-6      	; 0x2c0a <process_tapping+0x2ee>
    2c10:	9f 8b       	std	Y+23, r25	; 0x17
    2c12:	2e 8b       	std	Y+22, r18	; 0x16
    2c14:	fa 8e       	std	Y+26, r15	; 0x1a
    2c16:	e9 8e       	std	Y+25, r14	; 0x19
    2c18:	3b 8f       	std	Y+27, r19	; 0x1b
                }
                else if (is_tap_key(event.key) && event.pressed) {
                    if (tapping_key.tap.count > 1) {
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2c1a:	cf 01       	movw	r24, r30
    2c1c:	0e 94 8a 11 	call	0x2314	; 0x2314 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    2c20:	ac e6       	ldi	r26, 0x6C	; 108
    2c22:	b1 e0       	ldi	r27, 0x01	; 1
    2c24:	f8 01       	movw	r30, r16
    2c26:	86 e0       	ldi	r24, 0x06	; 6
    2c28:	01 90       	ld	r0, Z+
    2c2a:	0d 92       	st	X+, r0
    2c2c:	81 50       	subi	r24, 0x01	; 1
    2c2e:	e1 f7       	brne	.-8      	; 0x2c28 <process_tapping+0x30c>
    2c30:	8a c0       	rjmp	.+276    	; 0x2d46 <process_tapping+0x42a>
    2c32:	6f 3f       	cpi	r22, 0xFF	; 255
    2c34:	09 f0       	breq	.+2      	; 0x2c38 <process_tapping+0x31c>
    2c36:	b6 c0       	rjmp	.+364    	; 0x2da4 <process_tapping+0x488>
    2c38:	7f 3f       	cpi	r23, 0xFF	; 255
    2c3a:	09 f0       	breq	.+2      	; 0x2c3e <process_tapping+0x322>
    2c3c:	b3 c0       	rjmp	.+358    	; 0x2da4 <process_tapping+0x488>
    2c3e:	71 c0       	rjmp	.+226    	; 0x2d22 <process_tapping+0x406>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    2c40:	e2 16       	cp	r14, r18
    2c42:	f3 06       	cpc	r15, r19
    2c44:	40 f0       	brcs	.+16     	; 0x2c56 <process_tapping+0x33a>
    2c46:	c7 01       	movw	r24, r14
    2c48:	82 1b       	sub	r24, r18
    2c4a:	93 0b       	sbc	r25, r19
    2c4c:	88 3c       	cpi	r24, 0xC8	; 200
    2c4e:	91 05       	cpc	r25, r1
    2c50:	08 f0       	brcs	.+2      	; 0x2c54 <process_tapping+0x338>
    2c52:	53 c0       	rjmp	.+166    	; 0x2cfa <process_tapping+0x3de>
    2c54:	08 c0       	rjmp	.+16     	; 0x2c66 <process_tapping+0x34a>
    2c56:	20 95       	com	r18
    2c58:	30 95       	com	r19
    2c5a:	2e 0d       	add	r18, r14
    2c5c:	3f 1d       	adc	r19, r15
    2c5e:	28 3c       	cpi	r18, 0xC8	; 200
    2c60:	31 05       	cpc	r19, r1
    2c62:	08 f0       	brcs	.+2      	; 0x2c66 <process_tapping+0x34a>
    2c64:	4a c0       	rjmp	.+148    	; 0x2cfa <process_tapping+0x3de>
            if (event.pressed) {
    2c66:	dd 20       	and	r13, r13
    2c68:	09 f4       	brne	.+2      	; 0x2c6c <process_tapping+0x350>
    2c6a:	73 c0       	rjmp	.+230    	; 0x2d52 <process_tapping+0x436>
    2c6c:	6f 3f       	cpi	r22, 0xFF	; 255
    2c6e:	09 f0       	breq	.+2      	; 0x2c72 <process_tapping+0x356>
    2c70:	9f c0       	rjmp	.+318    	; 0x2db0 <process_tapping+0x494>
    2c72:	7f 3f       	cpi	r23, 0xFF	; 255
    2c74:	09 f0       	breq	.+2      	; 0x2c78 <process_tapping+0x35c>
    2c76:	9c c0       	rjmp	.+312    	; 0x2db0 <process_tapping+0x494>
    2c78:	29 c0       	rjmp	.+82     	; 0x2ccc <process_tapping+0x3b0>
                if (IS_TAPPING_KEY(event.key)) {
    2c7a:	74 17       	cp	r23, r20
    2c7c:	39 f5       	brne	.+78     	; 0x2ccc <process_tapping+0x3b0>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    2c7e:	90 91 71 01 	lds	r25, 0x0171
    2c82:	90 fd       	sbrc	r25, 0
    2c84:	1a c0       	rjmp	.+52     	; 0x2cba <process_tapping+0x39e>
    2c86:	89 2f       	mov	r24, r25
    2c88:	82 95       	swap	r24
    2c8a:	8f 70       	andi	r24, 0x0F	; 15
    2c8c:	b1 f0       	breq	.+44     	; 0x2cba <process_tapping+0x39e>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    2c8e:	f8 01       	movw	r30, r16
    2c90:	95 83       	std	Z+5, r25	; 0x05
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    2c92:	8f 30       	cpi	r24, 0x0F	; 15
    2c94:	31 f0       	breq	.+12     	; 0x2ca2 <process_tapping+0x386>
    2c96:	8f 5f       	subi	r24, 0xFF	; 255
    2c98:	82 95       	swap	r24
    2c9a:	80 7f       	andi	r24, 0xF0	; 240
    2c9c:	9f 70       	andi	r25, 0x0F	; 15
    2c9e:	98 2b       	or	r25, r24
    2ca0:	95 83       	std	Z+5, r25	; 0x05
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    2ca2:	c8 01       	movw	r24, r16
    2ca4:	0e 94 8a 11 	call	0x2314	; 0x2314 <process_action>
                        tapping_key = *keyp;
    2ca8:	ac e6       	ldi	r26, 0x6C	; 108
    2caa:	b1 e0       	ldi	r27, 0x01	; 1
    2cac:	f8 01       	movw	r30, r16
    2cae:	86 e0       	ldi	r24, 0x06	; 6
    2cb0:	01 90       	ld	r0, Z+
    2cb2:	0d 92       	st	X+, r0
    2cb4:	81 50       	subi	r24, 0x01	; 1
    2cb6:	e1 f7       	brne	.-8      	; 0x2cb0 <process_tapping+0x394>
    2cb8:	48 c0       	rjmp	.+144    	; 0x2d4a <process_tapping+0x42e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    2cba:	ac e6       	ldi	r26, 0x6C	; 108
    2cbc:	b1 e0       	ldi	r27, 0x01	; 1
    2cbe:	f8 01       	movw	r30, r16
    2cc0:	86 e0       	ldi	r24, 0x06	; 6
    2cc2:	01 90       	ld	r0, Z+
    2cc4:	0d 92       	st	X+, r0
    2cc6:	81 50       	subi	r24, 0x01	; 1
    2cc8:	e1 f7       	brne	.-8      	; 0x2cc2 <process_tapping+0x3a6>
    2cca:	41 c0       	rjmp	.+130    	; 0x2d4e <process_tapping+0x432>
                        return true;
                    }
                } else if (is_tap_key(event.key)) {
    2ccc:	5a 83       	std	Y+2, r21	; 0x02
    2cce:	49 83       	std	Y+1, r20	; 0x01
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
    2cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd4:	0e 94 62 10 	call	0x20c4	; 0x20c4 <is_tap_key>
    2cd8:	88 23       	and	r24, r24
    2cda:	49 f0       	breq	.+18     	; 0x2cee <process_tapping+0x3d2>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    2cdc:	ac e6       	ldi	r26, 0x6C	; 108
    2cde:	b1 e0       	ldi	r27, 0x01	; 1
    2ce0:	f8 01       	movw	r30, r16
    2ce2:	86 e0       	ldi	r24, 0x06	; 6
    2ce4:	01 90       	ld	r0, Z+
    2ce6:	0d 92       	st	X+, r0
    2ce8:	81 50       	subi	r24, 0x01	; 1
    2cea:	e1 f7       	brne	.-8      	; 0x2ce4 <process_tapping+0x3c8>
    2cec:	2c c0       	rjmp	.+88     	; 0x2d46 <process_tapping+0x42a>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    2cee:	80 91 71 01 	lds	r24, 0x0171
    2cf2:	81 60       	ori	r24, 0x01	; 1
    2cf4:	80 93 71 01 	sts	0x0171, r24
    2cf8:	2c c0       	rjmp	.+88     	; 0x2d52 <process_tapping+0x436>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    2cfa:	7e 2d       	mov	r23, r14
    2cfc:	fd 82       	std	Y+5, r15	; 0x05
    2cfe:	ec 82       	std	Y+4, r14	; 0x04
    2d00:	5a 83       	std	Y+2, r21	; 0x02
    2d02:	49 83       	std	Y+1, r20	; 0x01
    2d04:	db 82       	std	Y+3, r13	; 0x03
    2d06:	6d 2d       	mov	r22, r13
    2d08:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0a:	0e 94 43 10 	call	0x2086	; 0x2086 <debug_event>
            tapping_key = (keyrecord_t){};
    2d0e:	ec e6       	ldi	r30, 0x6C	; 108
    2d10:	f1 e0       	ldi	r31, 0x01	; 1
    2d12:	86 e0       	ldi	r24, 0x06	; 6
    2d14:	df 01       	movw	r26, r30
    2d16:	1d 92       	st	X+, r1
    2d18:	8a 95       	dec	r24
    2d1a:	e9 f7       	brne	.-6      	; 0x2d16 <process_tapping+0x3fa>
            debug_tapping_key();
    2d1c:	0e 94 03 14 	call	0x2806	; 0x2806 <debug_tapping_key>
    2d20:	1c c0       	rjmp	.+56     	; 0x2d5a <process_tapping+0x43e>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    2d22:	dd 20       	and	r13, r13
    2d24:	b1 f0       	breq	.+44     	; 0x2d52 <process_tapping+0x436>
    2d26:	5a 83       	std	Y+2, r21	; 0x02
    2d28:	49 83       	std	Y+1, r20	; 0x01
    2d2a:	89 81       	ldd	r24, Y+1	; 0x01
    2d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d2e:	0e 94 62 10 	call	0x20c4	; 0x20c4 <is_tap_key>
    2d32:	88 23       	and	r24, r24
    2d34:	71 f0       	breq	.+28     	; 0x2d52 <process_tapping+0x436>
            debug("Tapping: Start(Press tap key).\n");
            tapping_key = *keyp;
    2d36:	ac e6       	ldi	r26, 0x6C	; 108
    2d38:	b1 e0       	ldi	r27, 0x01	; 1
    2d3a:	f8 01       	movw	r30, r16
    2d3c:	86 e0       	ldi	r24, 0x06	; 6
    2d3e:	01 90       	ld	r0, Z+
    2d40:	0d 92       	st	X+, r0
    2d42:	81 50       	subi	r24, 0x01	; 1
    2d44:	e1 f7       	brne	.-8      	; 0x2d3e <process_tapping+0x422>
            waiting_buffer_scan_tap();
    2d46:	0e 94 12 14 	call	0x2824	; 0x2824 <waiting_buffer_scan_tap>
            debug_tapping_key();
    2d4a:	0e 94 03 14 	call	0x2806	; 0x2806 <debug_tapping_key>
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	05 c0       	rjmp	.+10     	; 0x2d5c <process_tapping+0x440>
            return true;
        } else {
            process_action(keyp);
    2d52:	c8 01       	movw	r24, r16
    2d54:	0e 94 8a 11 	call	0x2314	; 0x2314 <process_action>
    2d58:	fa cf       	rjmp	.-12     	; 0x2d4e <process_tapping+0x432>
            return true;
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
}
    2d5c:	6b 96       	adiw	r28, 0x1b	; 27
    2d5e:	0f b6       	in	r0, 0x3f	; 63
    2d60:	f8 94       	cli
    2d62:	de bf       	out	0x3e, r29	; 62
    2d64:	0f be       	out	0x3f, r0	; 63
    2d66:	cd bf       	out	0x3d, r28	; 61
    2d68:	cf 91       	pop	r28
    2d6a:	df 91       	pop	r29
    2d6c:	1f 91       	pop	r17
    2d6e:	0f 91       	pop	r16
    2d70:	ff 90       	pop	r15
    2d72:	ef 90       	pop	r14
    2d74:	df 90       	pop	r13
    2d76:	08 95       	ret
bool process_tapping(keyrecord_t *keyp)
{
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2d78:	80 91 6e 01 	lds	r24, 0x016E
    2d7c:	88 23       	and	r24, r24
    2d7e:	09 f4       	brne	.+2      	; 0x2d82 <process_tapping+0x466>
    2d80:	58 cf       	rjmp	.-336    	; 0x2c32 <process_tapping+0x316>
    2d82:	fb cd       	rjmp	.-1034   	; 0x297a <process_tapping+0x5e>
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2d84:	65 17       	cp	r22, r21
    2d86:	09 f0       	breq	.+2      	; 0x2d8a <process_tapping+0x46e>
    2d88:	2c ce       	rjmp	.-936    	; 0x29e2 <process_tapping+0xc6>
    2d8a:	16 ce       	rjmp	.-980    	; 0x29b8 <process_tapping+0x9c>
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2d8c:	61 30       	cpi	r22, 0x01	; 1
    2d8e:	09 f4       	brne	.+2      	; 0x2d92 <process_tapping+0x476>
    2d90:	98 ce       	rjmp	.-720    	; 0x2ac2 <process_tapping+0x1a6>
    2d92:	4d ce       	rjmp	.-870    	; 0x2a2e <process_tapping+0x112>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2d94:	65 17       	cp	r22, r21
    2d96:	09 f0       	breq	.+2      	; 0x2d9a <process_tapping+0x47e>
    2d98:	b8 ce       	rjmp	.-656    	; 0x2b0a <process_tapping+0x1ee>
    2d9a:	a3 ce       	rjmp	.-698    	; 0x2ae2 <process_tapping+0x1c6>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2d9c:	65 17       	cp	r22, r21
    2d9e:	09 f0       	breq	.+2      	; 0x2da2 <process_tapping+0x486>
    2da0:	18 cf       	rjmp	.-464    	; 0x2bd2 <process_tapping+0x2b6>
    2da2:	03 cf       	rjmp	.-506    	; 0x2baa <process_tapping+0x28e>
                    process_action(keyp);
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
    2da4:	80 91 6e 01 	lds	r24, 0x016E
    2da8:	88 23       	and	r24, r24
    2daa:	09 f0       	breq	.+2      	; 0x2dae <process_tapping+0x492>
    2dac:	ba cf       	rjmp	.-140    	; 0x2d22 <process_tapping+0x406>
    2dae:	48 cf       	rjmp	.-368    	; 0x2c40 <process_tapping+0x324>
        if (WITHIN_TAPPING_TERM(event)) {
            if (event.pressed) {
                if (IS_TAPPING_KEY(event.key)) {
    2db0:	65 17       	cp	r22, r21
    2db2:	09 f0       	breq	.+2      	; 0x2db6 <process_tapping+0x49a>
    2db4:	8b cf       	rjmp	.-234    	; 0x2ccc <process_tapping+0x3b0>
    2db6:	61 cf       	rjmp	.-318    	; 0x2c7a <process_tapping+0x35e>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    2db8:	5a 83       	std	Y+2, r21	; 0x02
    2dba:	49 83       	std	Y+1, r20	; 0x01
    2dbc:	89 81       	ldd	r24, Y+1	; 0x01
    2dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc0:	0e 94 2b 18 	call	0x3056	; 0x3056 <layer_switch_get_action>
    2dc4:	48 2f       	mov	r20, r24
                    switch (action.kind.id) {
    2dc6:	89 2f       	mov	r24, r25
    2dc8:	82 95       	swap	r24
    2dca:	8f 70       	andi	r24, 0x0F	; 15
    2dcc:	28 2f       	mov	r18, r24
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	22 30       	cpi	r18, 0x02	; 2
    2dd2:	31 05       	cpc	r19, r1
    2dd4:	0c f4       	brge	.+2      	; 0x2dd8 <process_tapping+0x4bc>
    2dd6:	63 ce       	rjmp	.-826    	; 0x2a9e <process_tapping+0x182>
    2dd8:	24 30       	cpi	r18, 0x04	; 4
    2dda:	31 05       	cpc	r19, r1
    2ddc:	0c f0       	brlt	.+2      	; 0x2de0 <process_tapping+0x4c4>
    2dde:	b9 cf       	rjmp	.-142    	; 0x2d52 <process_tapping+0x436>
    2de0:	63 ce       	rjmp	.-826    	; 0x2aa8 <process_tapping+0x18c>

00002de2 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    2de2:	0f 93       	push	r16
    2de4:	1f 93       	push	r17
    2de6:	df 93       	push	r29
    2de8:	cf 93       	push	r28
    2dea:	cd b7       	in	r28, 0x3d	; 61
    2dec:	de b7       	in	r29, 0x3e	; 62
    2dee:	2c 97       	sbiw	r28, 0x0c	; 12
    2df0:	0f b6       	in	r0, 0x3f	; 63
    2df2:	f8 94       	cli
    2df4:	de bf       	out	0x3e, r29	; 62
    2df6:	0f be       	out	0x3f, r0	; 63
    2df8:	cd bf       	out	0x3d, r28	; 61
    2dfa:	4f 83       	std	Y+7, r20	; 0x07
    2dfc:	58 87       	std	Y+8, r21	; 0x08
    2dfe:	69 87       	std	Y+9, r22	; 0x09
    2e00:	7a 87       	std	Y+10, r23	; 0x0a
    2e02:	8b 87       	std	Y+11, r24	; 0x0b
    2e04:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    2e06:	8e 01       	movw	r16, r28
    2e08:	09 5f       	subi	r16, 0xF9	; 249
    2e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e0c:	c8 01       	movw	r24, r16
    2e0e:	0e 94 8e 14 	call	0x291c	; 0x291c <process_tapping>
    2e12:	88 23       	and	r24, r24
    2e14:	d9 f0       	breq	.+54     	; 0x2e4c <action_tapping_process+0x6a>
        if (!IS_NOEVENT(record.event)) {
    2e16:	28 85       	ldd	r18, Y+8	; 0x08
    2e18:	3f 81       	ldd	r19, Y+7	; 0x07
    2e1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e1e:	89 2b       	or	r24, r25
    2e20:	09 f4       	brne	.+2      	; 0x2e24 <action_tapping_process+0x42>
    2e22:	6b c0       	rjmp	.+214    	; 0x2efa <action_tapping_process+0x118>
    2e24:	2f 3f       	cpi	r18, 0xFF	; 255
    2e26:	49 f4       	brne	.+18     	; 0x2e3a <action_tapping_process+0x58>
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	3f 3f       	cpi	r19, 0xFF	; 255
    2e2e:	11 f4       	brne	.+4      	; 0x2e34 <action_tapping_process+0x52>
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	88 23       	and	r24, r24
    2e36:	09 f0       	breq	.+2      	; 0x2e3a <action_tapping_process+0x58>
    2e38:	60 c0       	rjmp	.+192    	; 0x2efa <action_tapping_process+0x118>
            debug("processed: "); debug_record(record); debug("\n");
    2e3a:	4f 81       	ldd	r20, Y+7	; 0x07
    2e3c:	58 85       	ldd	r21, Y+8	; 0x08
    2e3e:	69 85       	ldd	r22, Y+9	; 0x09
    2e40:	7a 85       	ldd	r23, Y+10	; 0x0a
    2e42:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e44:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e46:	0e 94 52 10 	call	0x20a4	; 0x20a4 <debug_record>
    2e4a:	57 c0       	rjmp	.+174    	; 0x2efa <action_tapping_process+0x118>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
    2e4c:	de 01       	movw	r26, r28
    2e4e:	11 96       	adiw	r26, 0x01	; 1
    2e50:	f8 01       	movw	r30, r16
    2e52:	86 e0       	ldi	r24, 0x06	; 6
    2e54:	01 90       	ld	r0, Z+
    2e56:	0d 92       	st	X+, r0
    2e58:	81 50       	subi	r24, 0x01	; 1
    2e5a:	e1 f7       	brne	.-8      	; 0x2e54 <action_tapping_process+0x72>
    2e5c:	f9 81       	ldd	r31, Y+1	; 0x01
    2e5e:	ea 81       	ldd	r30, Y+2	; 0x02
    2e60:	4c 81       	ldd	r20, Y+4	; 0x04
    2e62:	5d 81       	ldd	r21, Y+5	; 0x05
    2e64:	41 15       	cp	r20, r1
    2e66:	51 05       	cpc	r21, r1
    2e68:	09 f4       	brne	.+2      	; 0x2e6c <action_tapping_process+0x8a>
    2e6a:	47 c0       	rjmp	.+142    	; 0x2efa <action_tapping_process+0x118>
    2e6c:	ef 3f       	cpi	r30, 0xFF	; 255
    2e6e:	09 f0       	breq	.+2      	; 0x2e72 <action_tapping_process+0x90>
    2e70:	4c c0       	rjmp	.+152    	; 0x2f0a <action_tapping_process+0x128>
    2e72:	ff 3f       	cpi	r31, 0xFF	; 255
    2e74:	09 f0       	breq	.+2      	; 0x2e78 <action_tapping_process+0x96>
    2e76:	49 c0       	rjmp	.+146    	; 0x2f0a <action_tapping_process+0x128>
    2e78:	40 c0       	rjmp	.+128    	; 0x2efa <action_tapping_process+0x118>
    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    2e7a:	f9 83       	std	Y+1, r31	; 0x01
    2e7c:	ea 83       	std	Y+2, r30	; 0x02
    2e7e:	5d 83       	std	Y+5, r21	; 0x05
    2e80:	4c 83       	std	Y+4, r20	; 0x04
    2e82:	f9 01       	movw	r30, r18
    2e84:	ee 0f       	add	r30, r30
    2e86:	ff 1f       	adc	r31, r31
    2e88:	e2 0f       	add	r30, r18
    2e8a:	f3 1f       	adc	r31, r19
    2e8c:	ee 0f       	add	r30, r30
    2e8e:	ff 1f       	adc	r31, r31
    2e90:	ec 58       	subi	r30, 0x8C	; 140
    2e92:	fe 4f       	sbci	r31, 0xFE	; 254
    2e94:	de 01       	movw	r26, r28
    2e96:	11 96       	adiw	r26, 0x01	; 1
    2e98:	86 e0       	ldi	r24, 0x06	; 6
    2e9a:	0d 90       	ld	r0, X+
    2e9c:	01 92       	st	Z+, r0
    2e9e:	81 50       	subi	r24, 0x01	; 1
    2ea0:	e1 f7       	brne	.-8      	; 0x2e9a <action_tapping_process+0xb8>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    2ea2:	60 93 72 01 	sts	0x0172, r22

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    2ea6:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <debug_waiting_buffer>
    2eaa:	27 c0       	rjmp	.+78     	; 0x2efa <action_tapping_process+0x118>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    2eac:	91 9f       	mul	r25, r17
    2eae:	c0 01       	movw	r24, r0
    2eb0:	11 24       	eor	r1, r1
    2eb2:	8c 58       	subi	r24, 0x8C	; 140
    2eb4:	9e 4f       	sbci	r25, 0xFE	; 254
    2eb6:	0e 94 8e 14 	call	0x291c	; 0x291c <process_tapping>
    2eba:	88 23       	and	r24, r24
    2ebc:	09 f4       	brne	.+2      	; 0x2ec0 <action_tapping_process+0xde>
    2ebe:	45 c0       	rjmp	.+138    	; 0x2f4a <action_tapping_process+0x168>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    2ec0:	80 91 73 01 	lds	r24, 0x0173
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	fc 01       	movw	r30, r24
    2ec8:	ee 0f       	add	r30, r30
    2eca:	ff 1f       	adc	r31, r31
    2ecc:	e8 0f       	add	r30, r24
    2ece:	f9 1f       	adc	r31, r25
    2ed0:	ee 0f       	add	r30, r30
    2ed2:	ff 1f       	adc	r31, r31
    2ed4:	ec 58       	subi	r30, 0x8C	; 140
    2ed6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed8:	40 81       	ld	r20, Z
    2eda:	51 81       	ldd	r21, Z+1	; 0x01
    2edc:	62 81       	ldd	r22, Z+2	; 0x02
    2ede:	73 81       	ldd	r23, Z+3	; 0x03
    2ee0:	84 81       	ldd	r24, Z+4	; 0x04
    2ee2:	95 81       	ldd	r25, Z+5	; 0x05
    2ee4:	0e 94 52 10 	call	0x20a4	; 0x20a4 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    2ee8:	80 91 73 01 	lds	r24, 0x0173
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	01 96       	adiw	r24, 0x01	; 1
    2ef0:	87 70       	andi	r24, 0x07	; 7
    2ef2:	90 70       	andi	r25, 0x00	; 0
    2ef4:	80 93 73 01 	sts	0x0173, r24
    2ef8:	01 c0       	rjmp	.+2      	; 0x2efc <action_tapping_process+0x11a>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    2efa:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    2efc:	90 91 73 01 	lds	r25, 0x0173
    2f00:	80 91 72 01 	lds	r24, 0x0172
    2f04:	98 17       	cp	r25, r24
    2f06:	91 f6       	brne	.-92     	; 0x2eac <action_tapping_process+0xca>
    2f08:	20 c0       	rjmp	.+64     	; 0x2f4a <action_tapping_process+0x168>
{
    if (IS_NOEVENT(record.event)) {
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    2f0a:	80 91 72 01 	lds	r24, 0x0172
    2f0e:	28 2f       	mov	r18, r24
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	2f 5f       	subi	r18, 0xFF	; 255
    2f14:	3f 4f       	sbci	r19, 0xFF	; 255
    2f16:	b9 01       	movw	r22, r18
    2f18:	67 70       	andi	r22, 0x07	; 7
    2f1a:	70 70       	andi	r23, 0x00	; 0
    2f1c:	21 50       	subi	r18, 0x01	; 1
    2f1e:	30 40       	sbci	r19, 0x00	; 0
    2f20:	80 91 73 01 	lds	r24, 0x0173
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	68 17       	cp	r22, r24
    2f28:	79 07       	cpc	r23, r25
    2f2a:	09 f0       	breq	.+2      	; 0x2f2e <action_tapping_process+0x14c>
    2f2c:	a6 cf       	rjmp	.-180    	; 0x2e7a <action_tapping_process+0x98>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    2f2e:	0e 94 9e 10 	call	0x213c	; 0x213c <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    2f32:	10 92 72 01 	sts	0x0172, r1
    waiting_buffer_tail = 0;
    2f36:	10 92 73 01 	sts	0x0173, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    2f3a:	ec e6       	ldi	r30, 0x6C	; 108
    2f3c:	f1 e0       	ldi	r31, 0x01	; 1
    2f3e:	86 e0       	ldi	r24, 0x06	; 6
    2f40:	df 01       	movw	r26, r30
    2f42:	1d 92       	st	X+, r1
    2f44:	8a 95       	dec	r24
    2f46:	e9 f7       	brne	.-6      	; 0x2f42 <action_tapping_process+0x160>
    2f48:	d8 cf       	rjmp	.-80     	; 0x2efa <action_tapping_process+0x118>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    2f4a:	2c 96       	adiw	r28, 0x0c	; 12
    2f4c:	0f b6       	in	r0, 0x3f	; 63
    2f4e:	f8 94       	cli
    2f50:	de bf       	out	0x3e, r29	; 62
    2f52:	0f be       	out	0x3f, r0	; 63
    2f54:	cd bf       	out	0x3d, r28	; 61
    2f56:	cf 91       	pop	r28
    2f58:	df 91       	pop	r29
    2f5a:	1f 91       	pop	r17
    2f5c:	0f 91       	pop	r16
    2f5e:	08 95       	ret

00002f60 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    2f60:	cf 92       	push	r12
    2f62:	df 92       	push	r13
    2f64:	ef 92       	push	r14
    2f66:	ff 92       	push	r15
    2f68:	1f 93       	push	r17
    2f6a:	cf 93       	push	r28
    2f6c:	df 93       	push	r29
    2f6e:	ec 01       	movw	r28, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    2f70:	00 97       	sbiw	r24, 0x00	; 0
    2f72:	09 f4       	brne	.+2      	; 0x2f76 <action_macro_play+0x16>
    2f74:	66 c0       	rjmp	.+204    	; 0x3042 <action_macro_play+0xe2>
    2f76:	10 e0       	ldi	r17, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f78:	90 ea       	ldi	r25, 0xA0	; 160
    2f7a:	c9 2e       	mov	r12, r25
    2f7c:	9f e0       	ldi	r25, 0x0F	; 15
    2f7e:	d9 2e       	mov	r13, r25
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	e8 2e       	mov	r14, r24
    2f84:	f1 2c       	mov	r15, r1
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    2f86:	fe 01       	movw	r30, r28
    2f88:	21 96       	adiw	r28, 0x01	; 1
    2f8a:	94 91       	lpm	r25, Z+
    2f8c:	94 37       	cpi	r25, 0x74	; 116
    2f8e:	48 f4       	brcc	.+18     	; 0x2fa2 <action_macro_play+0x42>
    2f90:	94 30       	cpi	r25, 0x04	; 4
    2f92:	08 f0       	brcs	.+2      	; 0x2f96 <action_macro_play+0x36>
    2f94:	44 c0       	rjmp	.+136    	; 0x301e <action_macro_play+0xbe>
    2f96:	91 30       	cpi	r25, 0x01	; 1
    2f98:	79 f0       	breq	.+30     	; 0x2fb8 <action_macro_play+0x58>
    2f9a:	92 30       	cpi	r25, 0x02	; 2
    2f9c:	09 f0       	breq	.+2      	; 0x2fa0 <action_macro_play+0x40>
    2f9e:	51 c0       	rjmp	.+162    	; 0x3042 <action_macro_play+0xe2>
    2fa0:	1b c0       	rjmp	.+54     	; 0x2fd8 <action_macro_play+0x78>
    2fa2:	95 37       	cpi	r25, 0x75	; 117
    2fa4:	09 f4       	brne	.+2      	; 0x2fa8 <action_macro_play+0x48>
    2fa6:	37 c0       	rjmp	.+110    	; 0x3016 <action_macro_play+0xb6>
    2fa8:	95 37       	cpi	r25, 0x75	; 117
    2faa:	50 f1       	brcs	.+84     	; 0x3000 <action_macro_play+0xa0>
    2fac:	89 2f       	mov	r24, r25
    2fae:	84 58       	subi	r24, 0x84	; 132
    2fb0:	80 37       	cpi	r24, 0x70	; 112
    2fb2:	08 f0       	brcs	.+2      	; 0x2fb6 <action_macro_play+0x56>
    2fb4:	46 c0       	rjmp	.+140    	; 0x3042 <action_macro_play+0xe2>
    2fb6:	37 c0       	rjmp	.+110    	; 0x3026 <action_macro_play+0xc6>
            case KEY_DOWN:
                MACRO_READ();
    2fb8:	fe 01       	movw	r30, r28
    2fba:	21 96       	adiw	r28, 0x01	; 1
    2fbc:	94 91       	lpm	r25, Z+
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    2fbe:	89 2f       	mov	r24, r25
    2fc0:	80 5e       	subi	r24, 0xE0	; 224
    2fc2:	88 30       	cpi	r24, 0x08	; 8
    2fc4:	60 f5       	brcc	.+88     	; 0x301e <action_macro_play+0xbe>
                    add_weak_mods(MOD_BIT(macro));
    2fc6:	97 70       	andi	r25, 0x07	; 7
    2fc8:	8e 2d       	mov	r24, r14
    2fca:	01 c0       	rjmp	.+2      	; 0x2fce <action_macro_play+0x6e>
    2fcc:	88 0f       	add	r24, r24
    2fce:	9a 95       	dec	r25
    2fd0:	ea f7       	brpl	.-6      	; 0x2fcc <action_macro_play+0x6c>
    2fd2:	0e 94 b4 19 	call	0x3368	; 0x3368 <add_weak_mods>
    2fd6:	0f c0       	rjmp	.+30     	; 0x2ff6 <action_macro_play+0x96>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    2fd8:	fe 01       	movw	r30, r28
    2fda:	21 96       	adiw	r28, 0x01	; 1
    2fdc:	94 91       	lpm	r25, Z+
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    2fde:	89 2f       	mov	r24, r25
    2fe0:	80 5e       	subi	r24, 0xE0	; 224
    2fe2:	88 30       	cpi	r24, 0x08	; 8
    2fe4:	58 f4       	brcc	.+22     	; 0x2ffc <action_macro_play+0x9c>
                    del_weak_mods(MOD_BIT(macro));
    2fe6:	97 70       	andi	r25, 0x07	; 7
    2fe8:	8e 2d       	mov	r24, r14
    2fea:	01 c0       	rjmp	.+2      	; 0x2fee <action_macro_play+0x8e>
    2fec:	88 0f       	add	r24, r24
    2fee:	9a 95       	dec	r25
    2ff0:	ea f7       	brpl	.-6      	; 0x2fec <action_macro_play+0x8c>
    2ff2:	0e 94 ba 19 	call	0x3374	; 0x3374 <del_weak_mods>
                    send_keyboard_report();
    2ff6:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <send_keyboard_report>
    2ffa:	19 c0       	rjmp	.+50     	; 0x302e <action_macro_play+0xce>
                } else {
                    unregister_code(macro);
    2ffc:	89 2f       	mov	r24, r25
    2ffe:	15 c0       	rjmp	.+42     	; 0x302a <action_macro_play+0xca>
                }
                break;
            case WAIT:
                MACRO_READ();
    3000:	fe 01       	movw	r30, r28
    3002:	24 91       	lpm	r18, Z+
    3004:	04 c0       	rjmp	.+8      	; 0x300e <action_macro_play+0xae>
    3006:	c6 01       	movw	r24, r12
    3008:	01 97       	sbiw	r24, 0x01	; 1
    300a:	f1 f7       	brne	.-4      	; 0x3008 <action_macro_play+0xa8>
    300c:	21 50       	subi	r18, 0x01	; 1
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    300e:	22 23       	and	r18, r18
    3010:	d1 f7       	brne	.-12     	; 0x3006 <action_macro_play+0xa6>
                } else {
                    unregister_code(macro);
                }
                break;
            case WAIT:
                MACRO_READ();
    3012:	21 96       	adiw	r28, 0x01	; 1
    3014:	0c c0       	rjmp	.+24     	; 0x302e <action_macro_play+0xce>
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
                break;
            case INTERVAL:
                interval = MACRO_READ();
    3016:	fe 01       	movw	r30, r28
    3018:	21 96       	adiw	r28, 0x01	; 1
    301a:	14 91       	lpm	r17, Z+
    301c:	08 c0       	rjmp	.+16     	; 0x302e <action_macro_play+0xce>
                dprintf("INTERVAL(%u)\n", interval);
                break;
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    301e:	89 2f       	mov	r24, r25
    3020:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <register_code>
    3024:	04 c0       	rjmp	.+8      	; 0x302e <action_macro_play+0xce>
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    3026:	89 2f       	mov	r24, r25
    3028:	8f 77       	andi	r24, 0x7F	; 127
    302a:	0e 94 b1 10 	call	0x2162	; 0x2162 <unregister_code>
    302e:	21 2f       	mov	r18, r17
    3030:	04 c0       	rjmp	.+8      	; 0x303a <action_macro_play+0xda>
    3032:	c6 01       	movw	r24, r12
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	f1 f7       	brne	.-4      	; 0x3034 <action_macro_play+0xd4>
    3038:	21 50       	subi	r18, 0x01	; 1
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    303a:	22 23       	and	r18, r18
    303c:	09 f4       	brne	.+2      	; 0x3040 <action_macro_play+0xe0>
    303e:	a3 cf       	rjmp	.-186    	; 0x2f86 <action_macro_play+0x26>
    3040:	f8 cf       	rjmp	.-16     	; 0x3032 <action_macro_play+0xd2>
    }
}
    3042:	df 91       	pop	r29
    3044:	cf 91       	pop	r28
    3046:	1f 91       	pop	r17
    3048:	ff 90       	pop	r15
    304a:	ef 90       	pop	r14
    304c:	df 90       	pop	r13
    304e:	cf 90       	pop	r12
    3050:	08 95       	ret

00003052 <default_layer_debug>:
}

void default_layer_debug(void)
{
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}
    3052:	08 95       	ret

00003054 <layer_debug>:
}

void layer_debug(void)
{
    dprintf("%08lX(%u)", layer_state, biton32(layer_state));
}
    3054:	08 95       	ret

00003056 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    3056:	cf 92       	push	r12
    3058:	df 92       	push	r13
    305a:	ef 92       	push	r14
    305c:	ff 92       	push	r15
    305e:	0f 93       	push	r16
    3060:	1f 93       	push	r17
    3062:	cf 93       	push	r28
    3064:	df 93       	push	r29
    3066:	6c 01       	movw	r12, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    3068:	e0 90 a4 01 	lds	r14, 0x01A4
    306c:	f0 90 a5 01 	lds	r15, 0x01A5
    3070:	00 91 a6 01 	lds	r16, 0x01A6
    3074:	10 91 a7 01 	lds	r17, 0x01A7
    3078:	80 91 a8 01 	lds	r24, 0x01A8
    307c:	90 91 a9 01 	lds	r25, 0x01A9
    3080:	a0 91 aa 01 	lds	r26, 0x01AA
    3084:	b0 91 ab 01 	lds	r27, 0x01AB
    3088:	e8 2a       	or	r14, r24
    308a:	f9 2a       	or	r15, r25
    308c:	0a 2b       	or	r16, r26
    308e:	1b 2b       	or	r17, r27
    3090:	cf e1       	ldi	r28, 0x1F	; 31
    3092:	d0 e0       	ldi	r29, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    3094:	d8 01       	movw	r26, r16
    3096:	c7 01       	movw	r24, r14
    3098:	0c 2e       	mov	r0, r28
    309a:	04 c0       	rjmp	.+8      	; 0x30a4 <layer_switch_get_action+0x4e>
    309c:	b6 95       	lsr	r27
    309e:	a7 95       	ror	r26
    30a0:	97 95       	ror	r25
    30a2:	87 95       	ror	r24
    30a4:	0a 94       	dec	r0
    30a6:	d2 f7       	brpl	.-12     	; 0x309c <layer_switch_get_action+0x46>
    30a8:	81 70       	andi	r24, 0x01	; 1
    30aa:	90 70       	andi	r25, 0x00	; 0
    30ac:	89 2b       	or	r24, r25
    30ae:	41 f0       	breq	.+16     	; 0x30c0 <layer_switch_get_action+0x6a>
            action = action_for_key(i, key);
    30b0:	8c 2f       	mov	r24, r28
    30b2:	b6 01       	movw	r22, r12
    30b4:	0e 94 b3 1a 	call	0x3566	; 0x3566 <action_for_key>
    30b8:	9c 01       	movw	r18, r24
            if (action.code != ACTION_TRANSPARENT) {
    30ba:	81 30       	cpi	r24, 0x01	; 1
    30bc:	91 05       	cpc	r25, r1
    30be:	51 f4       	brne	.+20     	; 0x30d4 <layer_switch_get_action+0x7e>
                return action;
    30c0:	21 97       	sbiw	r28, 0x01	; 1
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
    30c2:	8f ef       	ldi	r24, 0xFF	; 255
    30c4:	cf 3f       	cpi	r28, 0xFF	; 255
    30c6:	d8 07       	cpc	r29, r24
    30c8:	29 f7       	brne	.-54     	; 0x3094 <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	b6 01       	movw	r22, r12
    30ce:	0e 94 b3 1a 	call	0x3566	; 0x3566 <action_for_key>
    30d2:	9c 01       	movw	r18, r24
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    30d4:	82 2f       	mov	r24, r18
    30d6:	df 91       	pop	r29
    30d8:	cf 91       	pop	r28
    30da:	1f 91       	pop	r17
    30dc:	0f 91       	pop	r16
    30de:	ff 90       	pop	r15
    30e0:	ef 90       	pop	r14
    30e2:	df 90       	pop	r13
    30e4:	cf 90       	pop	r12
    30e6:	08 95       	ret

000030e8 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    30e8:	60 93 a8 01 	sts	0x01A8, r22
    30ec:	70 93 a9 01 	sts	0x01A9, r23
    30f0:	80 93 aa 01 	sts	0x01AA, r24
    30f4:	90 93 ab 01 	sts	0x01AB, r25
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    30f8:	0e 94 8f 10 	call	0x211e	; 0x211e <clear_keyboard_but_mods>
}
    30fc:	08 95       	ret

000030fe <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    30fe:	9b 01       	movw	r18, r22
    3100:	ac 01       	movw	r20, r24
    layer_state_set(layer_state ^ state);
    3102:	60 91 a8 01 	lds	r22, 0x01A8
    3106:	70 91 a9 01 	lds	r23, 0x01A9
    310a:	80 91 aa 01 	lds	r24, 0x01AA
    310e:	90 91 ab 01 	lds	r25, 0x01AB
    3112:	62 27       	eor	r22, r18
    3114:	73 27       	eor	r23, r19
    3116:	84 27       	eor	r24, r20
    3118:	95 27       	eor	r25, r21
    311a:	0e 94 74 18 	call	0x30e8	; 0x30e8 <layer_state_set>
}
    311e:	08 95       	ret

00003120 <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    3120:	9b 01       	movw	r18, r22
    3122:	ac 01       	movw	r20, r24
    layer_state_set(layer_state & state);
    3124:	60 91 a8 01 	lds	r22, 0x01A8
    3128:	70 91 a9 01 	lds	r23, 0x01A9
    312c:	80 91 aa 01 	lds	r24, 0x01AA
    3130:	90 91 ab 01 	lds	r25, 0x01AB
    3134:	62 23       	and	r22, r18
    3136:	73 23       	and	r23, r19
    3138:	84 23       	and	r24, r20
    313a:	95 23       	and	r25, r21
    313c:	0e 94 74 18 	call	0x30e8	; 0x30e8 <layer_state_set>
}
    3140:	08 95       	ret

00003142 <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    3142:	9b 01       	movw	r18, r22
    3144:	ac 01       	movw	r20, r24
    layer_state_set(layer_state | state);
    3146:	60 91 a8 01 	lds	r22, 0x01A8
    314a:	70 91 a9 01 	lds	r23, 0x01A9
    314e:	80 91 aa 01 	lds	r24, 0x01AA
    3152:	90 91 ab 01 	lds	r25, 0x01AB
    3156:	62 2b       	or	r22, r18
    3158:	73 2b       	or	r23, r19
    315a:	84 2b       	or	r24, r20
    315c:	95 2b       	or	r25, r21
    315e:	0e 94 74 18 	call	0x30e8	; 0x30e8 <layer_state_set>
}
    3162:	08 95       	ret

00003164 <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    3164:	21 e0       	ldi	r18, 0x01	; 1
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	40 e0       	ldi	r20, 0x00	; 0
    316a:	50 e0       	ldi	r21, 0x00	; 0
    316c:	04 c0       	rjmp	.+8      	; 0x3176 <layer_invert+0x12>
    316e:	22 0f       	add	r18, r18
    3170:	33 1f       	adc	r19, r19
    3172:	44 1f       	adc	r20, r20
    3174:	55 1f       	adc	r21, r21
    3176:	8a 95       	dec	r24
    3178:	d2 f7       	brpl	.-12     	; 0x316e <layer_invert+0xa>
    317a:	80 91 a8 01 	lds	r24, 0x01A8
    317e:	90 91 a9 01 	lds	r25, 0x01A9
    3182:	a0 91 aa 01 	lds	r26, 0x01AA
    3186:	b0 91 ab 01 	lds	r27, 0x01AB
    318a:	28 27       	eor	r18, r24
    318c:	39 27       	eor	r19, r25
    318e:	4a 27       	eor	r20, r26
    3190:	5b 27       	eor	r21, r27
    3192:	ca 01       	movw	r24, r20
    3194:	b9 01       	movw	r22, r18
    3196:	0e 94 74 18 	call	0x30e8	; 0x30e8 <layer_state_set>
}
    319a:	08 95       	ret

0000319c <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    319c:	21 e0       	ldi	r18, 0x01	; 1
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	40 e0       	ldi	r20, 0x00	; 0
    31a2:	50 e0       	ldi	r21, 0x00	; 0
    31a4:	04 c0       	rjmp	.+8      	; 0x31ae <layer_off+0x12>
    31a6:	22 0f       	add	r18, r18
    31a8:	33 1f       	adc	r19, r19
    31aa:	44 1f       	adc	r20, r20
    31ac:	55 1f       	adc	r21, r21
    31ae:	8a 95       	dec	r24
    31b0:	d2 f7       	brpl	.-12     	; 0x31a6 <layer_off+0xa>
    31b2:	20 95       	com	r18
    31b4:	30 95       	com	r19
    31b6:	40 95       	com	r20
    31b8:	50 95       	com	r21
    31ba:	80 91 a8 01 	lds	r24, 0x01A8
    31be:	90 91 a9 01 	lds	r25, 0x01A9
    31c2:	a0 91 aa 01 	lds	r26, 0x01AA
    31c6:	b0 91 ab 01 	lds	r27, 0x01AB
    31ca:	28 23       	and	r18, r24
    31cc:	39 23       	and	r19, r25
    31ce:	4a 23       	and	r20, r26
    31d0:	5b 23       	and	r21, r27
    31d2:	ca 01       	movw	r24, r20
    31d4:	b9 01       	movw	r22, r18
    31d6:	0e 94 74 18 	call	0x30e8	; 0x30e8 <layer_state_set>
}
    31da:	08 95       	ret

000031dc <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    31dc:	21 e0       	ldi	r18, 0x01	; 1
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	40 e0       	ldi	r20, 0x00	; 0
    31e2:	50 e0       	ldi	r21, 0x00	; 0
    31e4:	04 c0       	rjmp	.+8      	; 0x31ee <layer_on+0x12>
    31e6:	22 0f       	add	r18, r18
    31e8:	33 1f       	adc	r19, r19
    31ea:	44 1f       	adc	r20, r20
    31ec:	55 1f       	adc	r21, r21
    31ee:	8a 95       	dec	r24
    31f0:	d2 f7       	brpl	.-12     	; 0x31e6 <layer_on+0xa>
    31f2:	80 91 a8 01 	lds	r24, 0x01A8
    31f6:	90 91 a9 01 	lds	r25, 0x01A9
    31fa:	a0 91 aa 01 	lds	r26, 0x01AA
    31fe:	b0 91 ab 01 	lds	r27, 0x01AB
    3202:	28 2b       	or	r18, r24
    3204:	39 2b       	or	r19, r25
    3206:	4a 2b       	or	r20, r26
    3208:	5b 2b       	or	r21, r27
    320a:	ca 01       	movw	r24, r20
    320c:	b9 01       	movw	r22, r18
    320e:	0e 94 74 18 	call	0x30e8	; 0x30e8 <layer_state_set>
}
    3212:	08 95       	ret

00003214 <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    3214:	21 e0       	ldi	r18, 0x01	; 1
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	40 e0       	ldi	r20, 0x00	; 0
    321a:	50 e0       	ldi	r21, 0x00	; 0
    321c:	04 c0       	rjmp	.+8      	; 0x3226 <layer_move+0x12>
    321e:	22 0f       	add	r18, r18
    3220:	33 1f       	adc	r19, r19
    3222:	44 1f       	adc	r20, r20
    3224:	55 1f       	adc	r21, r21
    3226:	8a 95       	dec	r24
    3228:	d2 f7       	brpl	.-12     	; 0x321e <layer_move+0xa>
    322a:	ca 01       	movw	r24, r20
    322c:	b9 01       	movw	r22, r18
    322e:	0e 94 74 18 	call	0x30e8	; 0x30e8 <layer_state_set>
}
    3232:	08 95       	ret

00003234 <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    3234:	60 e0       	ldi	r22, 0x00	; 0
    3236:	70 e0       	ldi	r23, 0x00	; 0
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	0e 94 74 18 	call	0x30e8	; 0x30e8 <layer_state_set>
}
    3240:	08 95       	ret

00003242 <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3242:	60 93 a4 01 	sts	0x01A4, r22
    3246:	70 93 a5 01 	sts	0x01A5, r23
    324a:	80 93 a6 01 	sts	0x01A6, r24
    324e:	90 93 a7 01 	sts	0x01A7, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3252:	0e 94 8f 10 	call	0x211e	; 0x211e <clear_keyboard_but_mods>
}
    3256:	08 95       	ret

00003258 <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    3258:	9b 01       	movw	r18, r22
    325a:	ac 01       	movw	r20, r24
    default_layer_state_set(default_layer_state ^ state);
    325c:	60 91 a4 01 	lds	r22, 0x01A4
    3260:	70 91 a5 01 	lds	r23, 0x01A5
    3264:	80 91 a6 01 	lds	r24, 0x01A6
    3268:	90 91 a7 01 	lds	r25, 0x01A7
    326c:	62 27       	eor	r22, r18
    326e:	73 27       	eor	r23, r19
    3270:	84 27       	eor	r24, r20
    3272:	95 27       	eor	r25, r21
    3274:	0e 94 21 19 	call	0x3242	; 0x3242 <default_layer_state_set>
}
    3278:	08 95       	ret

0000327a <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    327a:	9b 01       	movw	r18, r22
    327c:	ac 01       	movw	r20, r24
    default_layer_state_set(default_layer_state & state);
    327e:	60 91 a4 01 	lds	r22, 0x01A4
    3282:	70 91 a5 01 	lds	r23, 0x01A5
    3286:	80 91 a6 01 	lds	r24, 0x01A6
    328a:	90 91 a7 01 	lds	r25, 0x01A7
    328e:	62 23       	and	r22, r18
    3290:	73 23       	and	r23, r19
    3292:	84 23       	and	r24, r20
    3294:	95 23       	and	r25, r21
    3296:	0e 94 21 19 	call	0x3242	; 0x3242 <default_layer_state_set>
}
    329a:	08 95       	ret

0000329c <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    329c:	9b 01       	movw	r18, r22
    329e:	ac 01       	movw	r20, r24
    default_layer_state_set(default_layer_state | state);
    32a0:	60 91 a4 01 	lds	r22, 0x01A4
    32a4:	70 91 a5 01 	lds	r23, 0x01A5
    32a8:	80 91 a6 01 	lds	r24, 0x01A6
    32ac:	90 91 a7 01 	lds	r25, 0x01A7
    32b0:	62 2b       	or	r22, r18
    32b2:	73 2b       	or	r23, r19
    32b4:	84 2b       	or	r24, r20
    32b6:	95 2b       	or	r25, r21
    32b8:	0e 94 21 19 	call	0x3242	; 0x3242 <default_layer_state_set>
}
    32bc:	08 95       	ret

000032be <default_layer_set>:
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
    default_layer_state_set(state);
    32be:	0e 94 21 19 	call	0x3242	; 0x3242 <default_layer_state_set>
}
    32c2:	08 95       	ret

000032c4 <add_key>:
    host_keyboard_send(keyboard_report);
}

/* key */
void add_key(uint8_t key)
{
    32c4:	38 2f       	mov	r19, r24
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    32c6:	a0 91 0c 01 	lds	r26, 0x010C
    32ca:	b0 91 0d 01 	lds	r27, 0x010D
    32ce:	fd 01       	movw	r30, r26
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	8f ef       	ldi	r24, 0xFF	; 255
    32d4:	92 81       	ldd	r25, Z+2	; 0x02
    32d6:	93 17       	cp	r25, r19
    32d8:	91 f0       	breq	.+36     	; 0x32fe <add_key+0x3a>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    32da:	8f 3f       	cpi	r24, 0xFF	; 255
    32dc:	19 f4       	brne	.+6      	; 0x32e4 <add_key+0x20>
    32de:	99 23       	and	r25, r25
    32e0:	09 f4       	brne	.+2      	; 0x32e4 <add_key+0x20>
    32e2:	82 2f       	mov	r24, r18
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    32e4:	2f 5f       	subi	r18, 0xFF	; 255
    32e6:	31 96       	adiw	r30, 0x01	; 1
    32e8:	26 30       	cpi	r18, 0x06	; 6
    32ea:	a1 f7       	brne	.-24     	; 0x32d4 <add_key+0x10>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    32ec:	8f 3f       	cpi	r24, 0xFF	; 255
    32ee:	39 f0       	breq	.+14     	; 0x32fe <add_key+0x3a>
            keyboard_report->keys[empty] = code;
    32f0:	99 27       	eor	r25, r25
    32f2:	87 fd       	sbrc	r24, 7
    32f4:	90 95       	com	r25
    32f6:	a8 0f       	add	r26, r24
    32f8:	b9 1f       	adc	r27, r25
    32fa:	12 96       	adiw	r26, 0x02	; 2
    32fc:	3c 93       	st	X, r19
    32fe:	08 95       	ret

00003300 <del_key>:
#endif
    add_key_byte(key);
}

void del_key(uint8_t key)
{
    3300:	98 2f       	mov	r25, r24
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3306:	e0 91 0c 01 	lds	r30, 0x010C
    330a:	f0 91 0d 01 	lds	r31, 0x010D
    330e:	e2 0f       	add	r30, r18
    3310:	f3 1f       	adc	r31, r19
    3312:	82 81       	ldd	r24, Z+2	; 0x02
    3314:	89 17       	cp	r24, r25
    3316:	09 f4       	brne	.+2      	; 0x331a <del_key+0x1a>
            keyboard_report->keys[i] = 0;
    3318:	12 82       	std	Z+2, r1	; 0x02
    331a:	2f 5f       	subi	r18, 0xFF	; 255
    331c:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    331e:	26 30       	cpi	r18, 0x06	; 6
    3320:	31 05       	cpc	r19, r1
    3322:	89 f7       	brne	.-30     	; 0x3306 <del_key+0x6>
        del_key_bit(key);
        return;
    }
#endif
    del_key_byte(key);
}
    3324:	08 95       	ret

00003326 <clear_keys>:

void clear_keys(void)
{
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    332a:	e0 91 0c 01 	lds	r30, 0x010C
    332e:	f0 91 0d 01 	lds	r31, 0x010D
    3332:	e8 0f       	add	r30, r24
    3334:	f9 1f       	adc	r31, r25
    3336:	10 82       	st	Z, r1
    3338:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    333a:	88 30       	cpi	r24, 0x08	; 8
    333c:	91 05       	cpc	r25, r1
    333e:	a9 f7       	brne	.-22     	; 0x332a <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3340:	08 95       	ret

00003342 <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    3342:	80 91 b4 01 	lds	r24, 0x01B4
    3346:	08 95       	ret

00003348 <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    3348:	90 91 b4 01 	lds	r25, 0x01B4
    334c:	98 2b       	or	r25, r24
    334e:	90 93 b4 01 	sts	0x01B4, r25
    3352:	08 95       	ret

00003354 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3354:	80 95       	com	r24
    3356:	90 91 b4 01 	lds	r25, 0x01B4
    335a:	98 23       	and	r25, r24
    335c:	90 93 b4 01 	sts	0x01B4, r25
    3360:	08 95       	ret

00003362 <clear_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
    3362:	10 92 b4 01 	sts	0x01B4, r1
    3366:	08 95       	ret

00003368 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3368:	90 91 b6 01 	lds	r25, 0x01B6
    336c:	98 2b       	or	r25, r24
    336e:	90 93 b6 01 	sts	0x01B6, r25
    3372:	08 95       	ret

00003374 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3374:	80 95       	com	r24
    3376:	90 91 b6 01 	lds	r25, 0x01B6
    337a:	98 23       	and	r25, r24
    337c:	90 93 b6 01 	sts	0x01B6, r25
    3380:	08 95       	ret

00003382 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    3382:	10 92 b6 01 	sts	0x01B6, r1
    3386:	08 95       	ret

00003388 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3388:	80 93 b5 01 	sts	0x01B5, r24
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = timer_read();
#endif
}
    338c:	08 95       	ret

0000338e <clear_oneshot_mods>:
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    338e:	10 92 b5 01 	sts	0x01B5, r1
#if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
    oneshot_time = 0;
#endif
}
    3392:	08 95       	ret

00003394 <has_anykey>:

/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    3394:	e0 91 0c 01 	lds	r30, 0x010C
    3398:	f0 91 0d 01 	lds	r31, 0x010D
    339c:	91 e0       	ldi	r25, 0x01	; 1
    339e:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    33a0:	81 81       	ldd	r24, Z+1	; 0x01
    33a2:	81 11       	cpse	r24, r1
            cnt++;
    33a4:	2f 5f       	subi	r18, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    33a6:	9f 5f       	subi	r25, 0xFF	; 255
    33a8:	31 96       	adiw	r30, 0x01	; 1
    33aa:	98 30       	cpi	r25, 0x08	; 8
    33ac:	c9 f7       	brne	.-14     	; 0x33a0 <has_anykey+0xc>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    33ae:	82 2f       	mov	r24, r18
    33b0:	08 95       	ret

000033b2 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    33b2:	e0 91 0c 01 	lds	r30, 0x010C
    33b6:	f0 91 0d 01 	lds	r31, 0x010D
    33ba:	80 91 b4 01 	lds	r24, 0x01B4
    33be:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    33c0:	e0 91 0c 01 	lds	r30, 0x010C
    33c4:	f0 91 0d 01 	lds	r31, 0x010D
    33c8:	80 81       	ld	r24, Z
    33ca:	90 91 b6 01 	lds	r25, 0x01B6
    33ce:	89 2b       	or	r24, r25
    33d0:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    33d2:	90 91 b5 01 	lds	r25, 0x01B5
    33d6:	99 23       	and	r25, r25
    33d8:	69 f0       	breq	.+26     	; 0x33f4 <send_keyboard_report+0x42>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    33da:	e0 91 0c 01 	lds	r30, 0x010C
    33de:	f0 91 0d 01 	lds	r31, 0x010D
    33e2:	80 81       	ld	r24, Z
    33e4:	89 2b       	or	r24, r25
    33e6:	80 83       	st	Z, r24
        if (has_anykey()) {
    33e8:	0e 94 ca 19 	call	0x3394	; 0x3394 <has_anykey>
    33ec:	88 23       	and	r24, r24
    33ee:	11 f0       	breq	.+4      	; 0x33f4 <send_keyboard_report+0x42>
            clear_oneshot_mods();
    33f0:	0e 94 c7 19 	call	0x338e	; 0x338e <clear_oneshot_mods>
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    33f4:	80 91 0c 01 	lds	r24, 0x010C
    33f8:	90 91 0d 01 	lds	r25, 0x010D
    33fc:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <host_keyboard_send>
}
    3400:	08 95       	ret

00003402 <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    3402:	80 e0       	ldi	r24, 0x00	; 0
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	08 95       	ret

00003408 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
}
    3408:	08 95       	ret

0000340a <keycode_to_action>:



/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    340a:	28 2f       	mov	r18, r24
    action_t action;
    switch (keycode) {
    340c:	8d 3b       	cpi	r24, 0xBD	; 189
    340e:	50 f4       	brcc	.+20     	; 0x3424 <keycode_to_action+0x1a>
    3410:	88 3a       	cpi	r24, 0xA8	; 168
    3412:	28 f5       	brcc	.+74     	; 0x345e <keycode_to_action+0x54>
    3414:	85 3a       	cpi	r24, 0xA5	; 165
    3416:	b0 f4       	brcc	.+44     	; 0x3444 <keycode_to_action+0x3a>
    3418:	84 30       	cpi	r24, 0x04	; 4
    341a:	80 f4       	brcc	.+32     	; 0x343c <keycode_to_action+0x32>
    341c:	81 30       	cpi	r24, 0x01	; 1
    341e:	09 f0       	breq	.+2      	; 0x3422 <keycode_to_action+0x18>
    3420:	9e c0       	rjmp	.+316    	; 0x355e <keycode_to_action+0x154>
    3422:	8c c0       	rjmp	.+280    	; 0x353c <keycode_to_action+0x132>
    3424:	88 3e       	cpi	r24, 0xE8	; 232
    3426:	30 f4       	brcc	.+12     	; 0x3434 <keycode_to_action+0x2a>
    3428:	80 3e       	cpi	r24, 0xE0	; 224
    342a:	40 f4       	brcc	.+16     	; 0x343c <keycode_to_action+0x32>
    342c:	8f 3b       	cpi	r24, 0xBF	; 191
    342e:	09 f0       	breq	.+2      	; 0x3432 <keycode_to_action+0x28>
    3430:	96 c0       	rjmp	.+300    	; 0x355e <keycode_to_action+0x154>
    3432:	87 c0       	rjmp	.+270    	; 0x3542 <keycode_to_action+0x138>
    3434:	80 3f       	cpi	r24, 0xF0	; 240
    3436:	08 f4       	brcc	.+2      	; 0x343a <keycode_to_action+0x30>
    3438:	92 c0       	rjmp	.+292    	; 0x355e <keycode_to_action+0x154>
    343a:	7d c0       	rjmp	.+250    	; 0x3536 <keycode_to_action+0x12c>
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    343c:	82 2f       	mov	r24, r18
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	9c 01       	movw	r18, r24
    3442:	8f c0       	rjmp	.+286    	; 0x3562 <keycode_to_action+0x158>
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3444:	85 3a       	cpi	r24, 0xA5	; 165
    3446:	19 f4       	brne	.+6      	; 0x344e <keycode_to_action+0x44>
    3448:	21 e8       	ldi	r18, 0x81	; 129
    344a:	30 e4       	ldi	r19, 0x40	; 64
    344c:	8a c0       	rjmp	.+276    	; 0x3562 <keycode_to_action+0x158>
    344e:	86 3a       	cpi	r24, 0xA6	; 166
    3450:	19 f0       	breq	.+6      	; 0x3458 <keycode_to_action+0x4e>
    3452:	23 e8       	ldi	r18, 0x83	; 131
    3454:	30 e4       	ldi	r19, 0x40	; 64
    3456:	85 c0       	rjmp	.+266    	; 0x3562 <keycode_to_action+0x158>
    3458:	22 e8       	ldi	r18, 0x82	; 130
    345a:	30 e4       	ldi	r19, 0x40	; 64
    345c:	82 c0       	rjmp	.+260    	; 0x3562 <keycode_to_action+0x158>
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    345e:	88 3a       	cpi	r24, 0xA8	; 168
    3460:	19 f4       	brne	.+6      	; 0x3468 <keycode_to_action+0x5e>
    3462:	22 ee       	ldi	r18, 0xE2	; 226
    3464:	34 e4       	ldi	r19, 0x44	; 68
    3466:	7d c0       	rjmp	.+250    	; 0x3562 <keycode_to_action+0x158>
    3468:	89 3a       	cpi	r24, 0xA9	; 169
    346a:	19 f4       	brne	.+6      	; 0x3472 <keycode_to_action+0x68>
    346c:	29 ee       	ldi	r18, 0xE9	; 233
    346e:	34 e4       	ldi	r19, 0x44	; 68
    3470:	78 c0       	rjmp	.+240    	; 0x3562 <keycode_to_action+0x158>
    3472:	8a 3a       	cpi	r24, 0xAA	; 170
    3474:	19 f4       	brne	.+6      	; 0x347c <keycode_to_action+0x72>
    3476:	2a ee       	ldi	r18, 0xEA	; 234
    3478:	34 e4       	ldi	r19, 0x44	; 68
    347a:	73 c0       	rjmp	.+230    	; 0x3562 <keycode_to_action+0x158>
    347c:	8b 3a       	cpi	r24, 0xAB	; 171
    347e:	19 f4       	brne	.+6      	; 0x3486 <keycode_to_action+0x7c>
    3480:	25 eb       	ldi	r18, 0xB5	; 181
    3482:	34 e4       	ldi	r19, 0x44	; 68
    3484:	6e c0       	rjmp	.+220    	; 0x3562 <keycode_to_action+0x158>
    3486:	8c 3a       	cpi	r24, 0xAC	; 172
    3488:	19 f4       	brne	.+6      	; 0x3490 <keycode_to_action+0x86>
    348a:	26 eb       	ldi	r18, 0xB6	; 182
    348c:	34 e4       	ldi	r19, 0x44	; 68
    348e:	69 c0       	rjmp	.+210    	; 0x3562 <keycode_to_action+0x158>
    3490:	8b 3b       	cpi	r24, 0xBB	; 187
    3492:	19 f4       	brne	.+6      	; 0x349a <keycode_to_action+0x90>
    3494:	23 eb       	ldi	r18, 0xB3	; 179
    3496:	34 e4       	ldi	r19, 0x44	; 68
    3498:	64 c0       	rjmp	.+200    	; 0x3562 <keycode_to_action+0x158>
    349a:	8c 3b       	cpi	r24, 0xBC	; 188
    349c:	19 f4       	brne	.+6      	; 0x34a4 <keycode_to_action+0x9a>
    349e:	24 eb       	ldi	r18, 0xB4	; 180
    34a0:	34 e4       	ldi	r19, 0x44	; 68
    34a2:	5f c0       	rjmp	.+190    	; 0x3562 <keycode_to_action+0x158>
    34a4:	8d 3a       	cpi	r24, 0xAD	; 173
    34a6:	19 f4       	brne	.+6      	; 0x34ae <keycode_to_action+0xa4>
    34a8:	27 eb       	ldi	r18, 0xB7	; 183
    34aa:	34 e4       	ldi	r19, 0x44	; 68
    34ac:	5a c0       	rjmp	.+180    	; 0x3562 <keycode_to_action+0x158>
    34ae:	80 3b       	cpi	r24, 0xB0	; 176
    34b0:	19 f4       	brne	.+6      	; 0x34b8 <keycode_to_action+0xae>
    34b2:	2c ec       	ldi	r18, 0xCC	; 204
    34b4:	34 e4       	ldi	r19, 0x44	; 68
    34b6:	55 c0       	rjmp	.+170    	; 0x3562 <keycode_to_action+0x158>
    34b8:	8e 3a       	cpi	r24, 0xAE	; 174
    34ba:	19 f4       	brne	.+6      	; 0x34c2 <keycode_to_action+0xb8>
    34bc:	2d ec       	ldi	r18, 0xCD	; 205
    34be:	34 e4       	ldi	r19, 0x44	; 68
    34c0:	50 c0       	rjmp	.+160    	; 0x3562 <keycode_to_action+0x158>
    34c2:	8f 3a       	cpi	r24, 0xAF	; 175
    34c4:	19 f4       	brne	.+6      	; 0x34cc <keycode_to_action+0xc2>
    34c6:	23 e8       	ldi	r18, 0x83	; 131
    34c8:	35 e4       	ldi	r19, 0x45	; 69
    34ca:	4b c0       	rjmp	.+150    	; 0x3562 <keycode_to_action+0x158>
    34cc:	81 3b       	cpi	r24, 0xB1	; 177
    34ce:	19 f4       	brne	.+6      	; 0x34d6 <keycode_to_action+0xcc>
    34d0:	2a e8       	ldi	r18, 0x8A	; 138
    34d2:	35 e4       	ldi	r19, 0x45	; 69
    34d4:	46 c0       	rjmp	.+140    	; 0x3562 <keycode_to_action+0x158>
    34d6:	82 3b       	cpi	r24, 0xB2	; 178
    34d8:	19 f4       	brne	.+6      	; 0x34e0 <keycode_to_action+0xd6>
    34da:	22 e9       	ldi	r18, 0x92	; 146
    34dc:	35 e4       	ldi	r19, 0x45	; 69
    34de:	41 c0       	rjmp	.+130    	; 0x3562 <keycode_to_action+0x158>
    34e0:	83 3b       	cpi	r24, 0xB3	; 179
    34e2:	19 f4       	brne	.+6      	; 0x34ea <keycode_to_action+0xe0>
    34e4:	24 e9       	ldi	r18, 0x94	; 148
    34e6:	35 e4       	ldi	r19, 0x45	; 69
    34e8:	3c c0       	rjmp	.+120    	; 0x3562 <keycode_to_action+0x158>
    34ea:	84 3b       	cpi	r24, 0xB4	; 180
    34ec:	19 f4       	brne	.+6      	; 0x34f4 <keycode_to_action+0xea>
    34ee:	21 e2       	ldi	r18, 0x21	; 33
    34f0:	36 e4       	ldi	r19, 0x46	; 70
    34f2:	37 c0       	rjmp	.+110    	; 0x3562 <keycode_to_action+0x158>
    34f4:	85 3b       	cpi	r24, 0xB5	; 181
    34f6:	19 f4       	brne	.+6      	; 0x34fe <keycode_to_action+0xf4>
    34f8:	23 e2       	ldi	r18, 0x23	; 35
    34fa:	36 e4       	ldi	r19, 0x46	; 70
    34fc:	32 c0       	rjmp	.+100    	; 0x3562 <keycode_to_action+0x158>
    34fe:	86 3b       	cpi	r24, 0xB6	; 182
    3500:	19 f4       	brne	.+6      	; 0x3508 <keycode_to_action+0xfe>
    3502:	24 e2       	ldi	r18, 0x24	; 36
    3504:	36 e4       	ldi	r19, 0x46	; 70
    3506:	2d c0       	rjmp	.+90     	; 0x3562 <keycode_to_action+0x158>
    3508:	87 3b       	cpi	r24, 0xB7	; 183
    350a:	19 f4       	brne	.+6      	; 0x3512 <keycode_to_action+0x108>
    350c:	25 e2       	ldi	r18, 0x25	; 37
    350e:	36 e4       	ldi	r19, 0x46	; 70
    3510:	28 c0       	rjmp	.+80     	; 0x3562 <keycode_to_action+0x158>
    3512:	88 3b       	cpi	r24, 0xB8	; 184
    3514:	19 f4       	brne	.+6      	; 0x351c <keycode_to_action+0x112>
    3516:	26 e2       	ldi	r18, 0x26	; 38
    3518:	36 e4       	ldi	r19, 0x46	; 70
    351a:	23 c0       	rjmp	.+70     	; 0x3562 <keycode_to_action+0x158>
    351c:	89 3b       	cpi	r24, 0xB9	; 185
    351e:	19 f4       	brne	.+6      	; 0x3526 <keycode_to_action+0x11c>
    3520:	27 e2       	ldi	r18, 0x27	; 39
    3522:	36 e4       	ldi	r19, 0x46	; 70
    3524:	1e c0       	rjmp	.+60     	; 0x3562 <keycode_to_action+0x158>
    3526:	8a 3b       	cpi	r24, 0xBA	; 186
    3528:	19 f0       	breq	.+6      	; 0x3530 <keycode_to_action+0x126>
    352a:	20 e0       	ldi	r18, 0x00	; 0
    352c:	34 e4       	ldi	r19, 0x44	; 68
    352e:	19 c0       	rjmp	.+50     	; 0x3562 <keycode_to_action+0x158>
    3530:	2a e2       	ldi	r18, 0x2A	; 42
    3532:	36 e4       	ldi	r19, 0x46	; 70
    3534:	16 c0       	rjmp	.+44     	; 0x3562 <keycode_to_action+0x158>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	30 65       	ori	r19, 0x50	; 80
    353a:	13 c0       	rjmp	.+38     	; 0x3562 <keycode_to_action+0x158>
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    353c:	21 e0       	ldi	r18, 0x01	; 1
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	10 c0       	rjmp	.+32     	; 0x3562 <keycode_to_action+0x158>
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    3542:	0e 94 9e 10 	call	0x213c	; 0x213c <clear_keyboard>
    3546:	84 ef       	ldi	r24, 0xF4	; 244
    3548:	91 e0       	ldi	r25, 0x01	; 1
    354a:	20 e9       	ldi	r18, 0x90	; 144
    354c:	31 e0       	ldi	r19, 0x01	; 1
    354e:	f9 01       	movw	r30, r18
    3550:	31 97       	sbiw	r30, 0x01	; 1
    3552:	f1 f7       	brne	.-4      	; 0x3550 <keycode_to_action+0x146>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3554:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3556:	d9 f7       	brne	.-10     	; 0x354e <keycode_to_action+0x144>
            wait_ms(50);
            bootloader_jump(); // not return
    3558:	0e 94 39 1c 	call	0x3872	; 0x3872 <bootloader_jump>
    355c:	02 c0       	rjmp	.+4      	; 0x3562 <keycode_to_action+0x158>
            break;
        default:
            action.code = ACTION_NO;
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
            break;
    }
    return action;
}
    3562:	c9 01       	movw	r24, r18
    3564:	08 95       	ret

00003566 <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3566:	0e 94 b0 04 	call	0x960	; 0x960 <keymap_key_to_keycode>
    switch (keycode) {
    356a:	80 3e       	cpi	r24, 0xE0	; 224
    356c:	b0 f4       	brcc	.+44     	; 0x359a <action_for_key+0x34>
    356e:	80 3c       	cpi	r24, 0xC0	; 192
    3570:	20 f5       	brcc	.+72     	; 0x35ba <action_for_key+0x54>
    3572:	81 33       	cpi	r24, 0x31	; 49
    3574:	09 f4       	brne	.+2      	; 0x3578 <action_for_key+0x12>
    3576:	60 c0       	rjmp	.+192    	; 0x3638 <action_for_key+0xd2>
    3578:	82 33       	cpi	r24, 0x32	; 50
    357a:	38 f4       	brcc	.+14     	; 0x358a <action_for_key+0x24>
    357c:	89 32       	cpi	r24, 0x29	; 41
    357e:	09 f4       	brne	.+2      	; 0x3582 <action_for_key+0x1c>
    3580:	53 c0       	rjmp	.+166    	; 0x3628 <action_for_key+0xc2>
    3582:	8a 32       	cpi	r24, 0x2A	; 42
    3584:	09 f0       	breq	.+2      	; 0x3588 <action_for_key+0x22>
    3586:	67 c0       	rjmp	.+206    	; 0x3656 <action_for_key+0xf0>
    3588:	5c c0       	rjmp	.+184    	; 0x3642 <action_for_key+0xdc>
    358a:	89 33       	cpi	r24, 0x39	; 57
    358c:	c9 f0       	breq	.+50     	; 0x35c0 <action_for_key+0x5a>
    358e:	82 38       	cpi	r24, 0x82	; 130
    3590:	b9 f0       	breq	.+46     	; 0x35c0 <action_for_key+0x5a>
    3592:	85 33       	cpi	r24, 0x35	; 53
    3594:	09 f0       	breq	.+2      	; 0x3598 <action_for_key+0x32>
    3596:	5f c0       	rjmp	.+190    	; 0x3656 <action_for_key+0xf0>
    3598:	42 c0       	rjmp	.+132    	; 0x361e <action_for_key+0xb8>
    359a:	83 3e       	cpi	r24, 0xE3	; 227
    359c:	29 f1       	breq	.+74     	; 0x35e8 <action_for_key+0x82>
    359e:	84 3e       	cpi	r24, 0xE4	; 228
    35a0:	30 f4       	brcc	.+12     	; 0x35ae <action_for_key+0x48>
    35a2:	80 3e       	cpi	r24, 0xE0	; 224
    35a4:	a1 f0       	breq	.+40     	; 0x35ce <action_for_key+0x68>
    35a6:	82 3e       	cpi	r24, 0xE2	; 226
    35a8:	09 f0       	breq	.+2      	; 0x35ac <action_for_key+0x46>
    35aa:	55 c0       	rjmp	.+170    	; 0x3656 <action_for_key+0xf0>
    35ac:	18 c0       	rjmp	.+48     	; 0x35de <action_for_key+0x78>
    35ae:	86 3e       	cpi	r24, 0xE6	; 230
    35b0:	29 f1       	breq	.+74     	; 0x35fc <action_for_key+0x96>
    35b2:	87 3e       	cpi	r24, 0xE7	; 231
    35b4:	09 f0       	breq	.+2      	; 0x35b8 <action_for_key+0x52>
    35b6:	4f c0       	rjmp	.+158    	; 0x3656 <action_for_key+0xf0>
    35b8:	26 c0       	rjmp	.+76     	; 0x3606 <action_for_key+0xa0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    35ba:	0e 94 cf 04 	call	0x99e	; 0x99e <keymap_fn_to_action>
    35be:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    35c0:	90 91 be 01 	lds	r25, 0x01BE
    35c4:	90 fd       	sbrc	r25, 0
    35c6:	09 c0       	rjmp	.+18     	; 0x35da <action_for_key+0x74>
    35c8:	91 fd       	sbrc	r25, 1
    35ca:	07 c0       	rjmp	.+14     	; 0x35da <action_for_key+0x74>
    35cc:	41 c0       	rjmp	.+130    	; 0x3650 <action_for_key+0xea>
                return keycode_to_action(KC_LCTL);
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    35ce:	80 91 be 01 	lds	r24, 0x01BE
    35d2:	80 ff       	sbrs	r24, 0
    35d4:	02 c0       	rjmp	.+4      	; 0x35da <action_for_key+0x74>
                return keycode_to_action(KC_CAPSLOCK);
    35d6:	89 e3       	ldi	r24, 0x39	; 57
    35d8:	3b c0       	rjmp	.+118    	; 0x3650 <action_for_key+0xea>
            }
            return keycode_to_action(KC_LCTL);
    35da:	80 ee       	ldi	r24, 0xE0	; 224
    35dc:	39 c0       	rjmp	.+114    	; 0x3650 <action_for_key+0xea>
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    35de:	80 91 be 01 	lds	r24, 0x01BE
    35e2:	82 fd       	sbrc	r24, 2
    35e4:	07 c0       	rjmp	.+14     	; 0x35f4 <action_for_key+0x8e>
    35e6:	04 c0       	rjmp	.+8      	; 0x35f0 <action_for_key+0x8a>
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    35e8:	80 91 be 01 	lds	r24, 0x01BE
    35ec:	82 ff       	sbrs	r24, 2
    35ee:	02 c0       	rjmp	.+4      	; 0x35f4 <action_for_key+0x8e>
                return keycode_to_action(KC_LALT);
    35f0:	82 ee       	ldi	r24, 0xE2	; 226
    35f2:	2e c0       	rjmp	.+92     	; 0x3650 <action_for_key+0xea>
            }
            if (keymap_config.no_gui) {
    35f4:	84 fd       	sbrc	r24, 4
    35f6:	0f c0       	rjmp	.+30     	; 0x3616 <action_for_key+0xb0>
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
    35f8:	83 ee       	ldi	r24, 0xE3	; 227
    35fa:	2a c0       	rjmp	.+84     	; 0x3650 <action_for_key+0xea>
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    35fc:	80 91 be 01 	lds	r24, 0x01BE
    3600:	83 fd       	sbrc	r24, 3
    3602:	07 c0       	rjmp	.+14     	; 0x3612 <action_for_key+0xac>
    3604:	04 c0       	rjmp	.+8      	; 0x360e <action_for_key+0xa8>
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3606:	80 91 be 01 	lds	r24, 0x01BE
    360a:	83 ff       	sbrs	r24, 3
    360c:	02 c0       	rjmp	.+4      	; 0x3612 <action_for_key+0xac>
                return keycode_to_action(KC_RALT);
    360e:	86 ee       	ldi	r24, 0xE6	; 230
    3610:	1f c0       	rjmp	.+62     	; 0x3650 <action_for_key+0xea>
            }
            if (keymap_config.no_gui) {
    3612:	84 ff       	sbrs	r24, 4
    3614:	02 c0       	rjmp	.+4      	; 0x361a <action_for_key+0xb4>
                return keycode_to_action(ACTION_NO);
    3616:	80 e0       	ldi	r24, 0x00	; 0
    3618:	1b c0       	rjmp	.+54     	; 0x3650 <action_for_key+0xea>
            }
            return keycode_to_action(KC_RGUI);
    361a:	87 ee       	ldi	r24, 0xE7	; 231
    361c:	19 c0       	rjmp	.+50     	; 0x3650 <action_for_key+0xea>
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    361e:	80 91 be 01 	lds	r24, 0x01BE
    3622:	85 ff       	sbrs	r24, 5
    3624:	05 c0       	rjmp	.+10     	; 0x3630 <action_for_key+0xca>
    3626:	06 c0       	rjmp	.+12     	; 0x3634 <action_for_key+0xce>
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3628:	80 91 be 01 	lds	r24, 0x01BE
    362c:	85 ff       	sbrs	r24, 5
    362e:	02 c0       	rjmp	.+4      	; 0x3634 <action_for_key+0xce>
                return keycode_to_action(KC_GRAVE);
    3630:	85 e3       	ldi	r24, 0x35	; 53
    3632:	0e c0       	rjmp	.+28     	; 0x3650 <action_for_key+0xea>
            }
            return keycode_to_action(KC_ESC);
    3634:	89 e2       	ldi	r24, 0x29	; 41
    3636:	0c c0       	rjmp	.+24     	; 0x3650 <action_for_key+0xea>
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3638:	80 91 be 01 	lds	r24, 0x01BE
    363c:	86 ff       	sbrs	r24, 6
    363e:	05 c0       	rjmp	.+10     	; 0x364a <action_for_key+0xe4>
    3640:	06 c0       	rjmp	.+12     	; 0x364e <action_for_key+0xe8>
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3642:	80 91 be 01 	lds	r24, 0x01BE
    3646:	86 ff       	sbrs	r24, 6
    3648:	02 c0       	rjmp	.+4      	; 0x364e <action_for_key+0xe8>
                return keycode_to_action(KC_BSLASH);
    364a:	81 e3       	ldi	r24, 0x31	; 49
    364c:	01 c0       	rjmp	.+2      	; 0x3650 <action_for_key+0xea>
            }
            return keycode_to_action(KC_BSPACE);
    364e:	8a e2       	ldi	r24, 0x2A	; 42
    3650:	0e 94 05 1a 	call	0x340a	; 0x340a <keycode_to_action>
    3654:	08 95       	ret
#endif
        default:
            return keycode_to_action(keycode);
    3656:	0e 94 05 1a 	call	0x340a	; 0x340a <keycode_to_action>
    }
}
    365a:	08 95       	ret

0000365c <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    365c:	90 93 0f 01 	sts	0x010F, r25
    3660:	80 93 0e 01 	sts	0x010E, r24
}
    3664:	08 95       	ret

00003666 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3666:	28 2f       	mov	r18, r24
    3668:	22 95       	swap	r18
    366a:	2f 70       	andi	r18, 0x0F	; 15
    366c:	82 95       	swap	r24
    366e:	80 7f       	andi	r24, 0xF0	; 240
    3670:	28 2b       	or	r18, r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	c9 01       	movw	r24, r18
    3676:	8c 7c       	andi	r24, 0xCC	; 204
    3678:	90 70       	andi	r25, 0x00	; 0
    367a:	95 95       	asr	r25
    367c:	87 95       	ror	r24
    367e:	95 95       	asr	r25
    3680:	87 95       	ror	r24
    3682:	23 73       	andi	r18, 0x33	; 51
    3684:	30 70       	andi	r19, 0x00	; 0
    3686:	22 0f       	add	r18, r18
    3688:	33 1f       	adc	r19, r19
    368a:	22 0f       	add	r18, r18
    368c:	33 1f       	adc	r19, r19
    368e:	82 2b       	or	r24, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3690:	28 2f       	mov	r18, r24
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	c9 01       	movw	r24, r18
    3696:	8a 7a       	andi	r24, 0xAA	; 170
    3698:	90 70       	andi	r25, 0x00	; 0
    369a:	95 95       	asr	r25
    369c:	87 95       	ror	r24
    369e:	25 75       	andi	r18, 0x55	; 85
    36a0:	30 70       	andi	r19, 0x00	; 0
    36a2:	22 0f       	add	r18, r18
    36a4:	33 1f       	adc	r19, r19
    return bits;
}
    36a6:	82 2b       	or	r24, r18
    36a8:	08 95       	ret

000036aa <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    36aa:	0f 93       	push	r16
    36ac:	1f 93       	push	r17
    36ae:	19 2f       	mov	r17, r25
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    36b0:	0e 94 33 1b 	call	0x3666	; 0x3666 <bitrev>
    36b4:	08 2f       	mov	r16, r24
    36b6:	81 2f       	mov	r24, r17
    36b8:	0e 94 33 1b 	call	0x3666	; 0x3666 <bitrev>
    36bc:	50 2f       	mov	r21, r16
    36be:	40 e0       	ldi	r20, 0x00	; 0
    36c0:	28 2f       	mov	r18, r24
    36c2:	30 e0       	ldi	r19, 0x00	; 0
    36c4:	24 2b       	or	r18, r20
    36c6:	35 2b       	or	r19, r21
    return bits;
}
    36c8:	c9 01       	movw	r24, r18
    36ca:	1f 91       	pop	r17
    36cc:	0f 91       	pop	r16
    36ce:	08 95       	ret

000036d0 <bitrev32>:

uint32_t bitrev32(uint32_t bits)
{
    36d0:	af 92       	push	r10
    36d2:	bf 92       	push	r11
    36d4:	cf 92       	push	r12
    36d6:	df 92       	push	r13
    36d8:	ef 92       	push	r14
    36da:	ff 92       	push	r15
    36dc:	0f 93       	push	r16
    36de:	1f 93       	push	r17
    36e0:	7b 01       	movw	r14, r22
    36e2:	8c 01       	movw	r16, r24
    bits = (uint32_t)bitrev16(bits & 0x0000ffff)<<16 | bitrev16((bits & 0xffff0000)>>16);
    36e4:	cb 01       	movw	r24, r22
    36e6:	0e 94 55 1b 	call	0x36aa	; 0x36aa <bitrev16>
    36ea:	5c 01       	movw	r10, r24
    36ec:	78 01       	movw	r14, r16
    36ee:	00 27       	eor	r16, r16
    36f0:	11 27       	eor	r17, r17
    36f2:	c7 01       	movw	r24, r14
    36f4:	0e 94 55 1b 	call	0x36aa	; 0x36aa <bitrev16>
    36f8:	cc 24       	eor	r12, r12
    36fa:	dd 24       	eor	r13, r13
    36fc:	65 01       	movw	r12, r10
    36fe:	bb 24       	eor	r11, r11
    3700:	aa 24       	eor	r10, r10
    3702:	a0 e0       	ldi	r26, 0x00	; 0
    3704:	b0 e0       	ldi	r27, 0x00	; 0
    3706:	a8 2a       	or	r10, r24
    3708:	b9 2a       	or	r11, r25
    370a:	ca 2a       	or	r12, r26
    370c:	db 2a       	or	r13, r27
    return bits;
}
    370e:	b5 01       	movw	r22, r10
    3710:	c6 01       	movw	r24, r12
    3712:	1f 91       	pop	r17
    3714:	0f 91       	pop	r16
    3716:	ff 90       	pop	r15
    3718:	ef 90       	pop	r14
    371a:	df 90       	pop	r13
    371c:	cf 90       	pop	r12
    371e:	bf 90       	pop	r11
    3720:	af 90       	pop	r10
    3722:	08 95       	ret

00003724 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3724:	80 91 c3 01 	lds	r24, 0x01C3
    3728:	84 30       	cpi	r24, 0x04	; 4
    372a:	09 f1       	breq	.+66     	; 0x376e <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    372c:	10 92 b8 01 	sts	0x01B8, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3730:	20 e4       	ldi	r18, 0x40	; 64
    3732:	88 e1       	ldi	r24, 0x18	; 24
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	0f b6       	in	r0, 0x3f	; 63
    3738:	f8 94       	cli
    373a:	a8 95       	wdr
    373c:	80 93 60 00 	sts	0x0060, r24
    3740:	0f be       	out	0x3f, r0	; 63
    3742:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3746:	83 b7       	in	r24, 0x33	; 51
    3748:	81 7f       	andi	r24, 0xF1	; 241
    374a:	84 60       	ori	r24, 0x04	; 4
    374c:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    374e:	83 b7       	in	r24, 0x33	; 51
    3750:	81 60       	ori	r24, 0x01	; 1
    3752:	83 bf       	out	0x33, r24	; 51
    sei();
    3754:	78 94       	sei
    sleep_cpu();
    3756:	88 95       	sleep
    sleep_disable();
    3758:	83 b7       	in	r24, 0x33	; 51
    375a:	8e 7f       	andi	r24, 0xFE	; 254
    375c:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    375e:	88 e1       	ldi	r24, 0x18	; 24
    3760:	0f b6       	in	r0, 0x3f	; 63
    3762:	f8 94       	cli
    3764:	80 93 60 00 	sts	0x0060, r24
    3768:	10 92 60 00 	sts	0x0060, r1
    376c:	0f be       	out	0x3f, r0	; 63
    376e:	08 95       	ret

00003770 <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    3770:	08 95       	ret

00003772 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    3772:	08 95       	ret

00003774 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3774:	1f 92       	push	r1
    3776:	0f 92       	push	r0
    3778:	0f b6       	in	r0, 0x3f	; 63
    377a:	0f 92       	push	r0
    377c:	11 24       	eor	r1, r1
    377e:	8f 93       	push	r24
    3780:	9f 93       	push	r25
    3782:	af 93       	push	r26
    3784:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3786:	80 91 b8 01 	lds	r24, 0x01B8
    378a:	88 23       	and	r24, r24
    378c:	99 f4       	brne	.+38     	; 0x37b4 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    378e:	80 91 b9 01 	lds	r24, 0x01B9
    3792:	90 91 ba 01 	lds	r25, 0x01BA
    3796:	a0 91 bb 01 	lds	r26, 0x01BB
    379a:	b0 91 bc 01 	lds	r27, 0x01BC
    379e:	41 96       	adiw	r24, 0x11	; 17
    37a0:	a1 1d       	adc	r26, r1
    37a2:	b1 1d       	adc	r27, r1
    37a4:	80 93 b9 01 	sts	0x01B9, r24
    37a8:	90 93 ba 01 	sts	0x01BA, r25
    37ac:	a0 93 bb 01 	sts	0x01BB, r26
    37b0:	b0 93 bc 01 	sts	0x01BC, r27
            break;
        default:
            ;
    }
}
    37b4:	bf 91       	pop	r27
    37b6:	af 91       	pop	r26
    37b8:	9f 91       	pop	r25
    37ba:	8f 91       	pop	r24
    37bc:	0f 90       	pop	r0
    37be:	0f be       	out	0x3f, r0	; 63
    37c0:	0f 90       	pop	r0
    37c2:	1f 90       	pop	r1
    37c4:	18 95       	reti

000037c6 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    37c6:	0e 94 9e 10 	call	0x213c	; 0x213c <clear_keyboard>
#ifdef BACKLIGHT_ENABLE
    backlight_init();
#endif
}
    37ca:	08 95       	ret

000037cc <suspend_wakeup_condition>:
}

__attribute__ ((weak)) void matrix_power_up(void) {}
__attribute__ ((weak)) void matrix_power_down(void) {}
bool suspend_wakeup_condition(void)
{
    37cc:	1f 93       	push	r17
    matrix_power_up();
    37ce:	0e 94 b8 1b 	call	0x3770	; 0x3770 <matrix_power_up>
    matrix_scan();
    37d2:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <matrix_scan>
    matrix_power_down();
    37d6:	0e 94 b9 1b 	call	0x3772	; 0x3772 <matrix_power_down>
    37da:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    37dc:	81 2f       	mov	r24, r17
    37de:	0e 94 da 04 	call	0x9b4	; 0x9b4 <matrix_get_row>
    37e2:	61 15       	cp	r22, r1
    37e4:	71 05       	cpc	r23, r1
    37e6:	81 05       	cpc	r24, r1
    37e8:	91 05       	cpc	r25, r1
    37ea:	11 f0       	breq	.+4      	; 0x37f0 <suspend_wakeup_condition+0x24>
    37ec:	81 e0       	ldi	r24, 0x01	; 1
    37ee:	04 c0       	rjmp	.+8      	; 0x37f8 <suspend_wakeup_condition+0x2c>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    37f0:	1f 5f       	subi	r17, 0xFF	; 255
    37f2:	16 30       	cpi	r17, 0x06	; 6
    37f4:	99 f7       	brne	.-26     	; 0x37dc <suspend_wakeup_condition+0x10>
    37f6:	80 e0       	ldi	r24, 0x00	; 0
        if (matrix_get_row(r)) return true;
    }
    return false;
}
    37f8:	1f 91       	pop	r17
    37fa:	08 95       	ret

000037fc <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    37fc:	82 e0       	ldi	r24, 0x02	; 2
    37fe:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3800:	93 e0       	ldi	r25, 0x03	; 3
    3802:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3804:	9a ef       	ldi	r25, 0xFA	; 250
    3806:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    3808:	80 93 6e 00 	sts	0x006E, r24
}
    380c:	08 95       	ret

0000380e <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    380e:	8f b7       	in	r24, 0x3f	; 63
    cli();
    3810:	f8 94       	cli
    t = timer_count;
    3812:	20 91 b9 01 	lds	r18, 0x01B9
    3816:	30 91 ba 01 	lds	r19, 0x01BA
    381a:	40 91 bb 01 	lds	r20, 0x01BB
    381e:	50 91 bc 01 	lds	r21, 0x01BC
    SREG = sreg;
    3822:	8f bf       	out	0x3f, r24	; 63

    return (t & 0xFFFF);
}
    3824:	c9 01       	movw	r24, r18
    3826:	08 95       	ret

00003828 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3828:	1f 92       	push	r1
    382a:	0f 92       	push	r0
    382c:	0f b6       	in	r0, 0x3f	; 63
    382e:	0f 92       	push	r0
    3830:	11 24       	eor	r1, r1
    3832:	8f 93       	push	r24
    3834:	9f 93       	push	r25
    3836:	af 93       	push	r26
    3838:	bf 93       	push	r27
    timer_count++;
    383a:	80 91 b9 01 	lds	r24, 0x01B9
    383e:	90 91 ba 01 	lds	r25, 0x01BA
    3842:	a0 91 bb 01 	lds	r26, 0x01BB
    3846:	b0 91 bc 01 	lds	r27, 0x01BC
    384a:	01 96       	adiw	r24, 0x01	; 1
    384c:	a1 1d       	adc	r26, r1
    384e:	b1 1d       	adc	r27, r1
    3850:	80 93 b9 01 	sts	0x01B9, r24
    3854:	90 93 ba 01 	sts	0x01BA, r25
    3858:	a0 93 bb 01 	sts	0x01BB, r26
    385c:	b0 93 bc 01 	sts	0x01BC, r27
}
    3860:	bf 91       	pop	r27
    3862:	af 91       	pop	r26
    3864:	9f 91       	pop	r25
    3866:	8f 91       	pop	r24
    3868:	0f 90       	pop	r0
    386a:	0f be       	out	0x3f, r0	; 63
    386c:	0f 90       	pop	r0
    386e:	1f 90       	pop	r1
    3870:	18 95       	reti

00003872 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3872:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <USB_Disable>
    cli();
    3876:	f8 94       	cli
    3878:	80 e2       	ldi	r24, 0x20	; 32
    387a:	9e e4       	ldi	r25, 0x4E	; 78
    387c:	20 e9       	ldi	r18, 0x90	; 144
    387e:	31 e0       	ldi	r19, 0x01	; 1
    3880:	f9 01       	movw	r30, r18
    3882:	31 97       	sbiw	r30, 0x01	; 1
    3884:	f1 f7       	brne	.-4      	; 0x3882 <bootloader_jump+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3886:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3888:	d9 f7       	brne	.-10     	; 0x3880 <bootloader_jump+0xe>
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    388a:	87 e0       	ldi	r24, 0x07	; 7
    388c:	90 eb       	ldi	r25, 0xB0	; 176
    388e:	a7 e0       	ldi	r26, 0x07	; 7
    3890:	b0 eb       	ldi	r27, 0xB0	; 176
    3892:	80 93 cc 01 	sts	0x01CC, r24
    3896:	90 93 cd 01 	sts	0x01CD, r25
    389a:	a0 93 ce 01 	sts	0x01CE, r26
    389e:	b0 93 cf 01 	sts	0x01CF, r27
    wdt_enable(WDTO_250MS);
    38a2:	2c e0       	ldi	r18, 0x0C	; 12
    38a4:	88 e1       	ldi	r24, 0x18	; 24
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	0f b6       	in	r0, 0x3f	; 63
    38aa:	f8 94       	cli
    38ac:	a8 95       	wdr
    38ae:	80 93 60 00 	sts	0x0060, r24
    38b2:	0f be       	out	0x3f, r0	; 63
    38b4:	20 93 60 00 	sts	0x0060, r18
    38b8:	ff cf       	rjmp	.-2      	; 0x38b8 <bootloader_jump+0x46>

000038ba <scan_keycode>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_keycode(uint8_t keycode)
{
    38ba:	cf 92       	push	r12
    38bc:	df 92       	push	r13
    38be:	ef 92       	push	r14
    38c0:	ff 92       	push	r15
    38c2:	0f 93       	push	r16
    38c4:	1f 93       	push	r17
    38c6:	cf 93       	push	r28
    38c8:	df 93       	push	r29
    38ca:	08 2f       	mov	r16, r24
    38cc:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
    38ce:	81 2f       	mov	r24, r17
    38d0:	0e 94 da 04 	call	0x9b4	; 0x9b4 <matrix_get_row>
    38d4:	6b 01       	movw	r12, r22
    38d6:	7c 01       	movw	r14, r24
    38d8:	c0 e0       	ldi	r28, 0x00	; 0
    38da:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    38dc:	d7 01       	movw	r26, r14
    38de:	c6 01       	movw	r24, r12
    38e0:	0c 2e       	mov	r0, r28
    38e2:	04 c0       	rjmp	.+8      	; 0x38ec <scan_keycode+0x32>
    38e4:	b6 95       	lsr	r27
    38e6:	a7 95       	ror	r26
    38e8:	97 95       	ror	r25
    38ea:	87 95       	ror	r24
    38ec:	0a 94       	dec	r0
    38ee:	d2 f7       	brpl	.-12     	; 0x38e4 <scan_keycode+0x2a>
    38f0:	81 70       	andi	r24, 0x01	; 1
    38f2:	90 70       	andi	r25, 0x00	; 0
    38f4:	89 2b       	or	r24, r25
    38f6:	49 f0       	breq	.+18     	; 0x390a <scan_keycode+0x50>
                if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
    38f8:	80 e0       	ldi	r24, 0x00	; 0
    38fa:	6c 2f       	mov	r22, r28
    38fc:	71 2f       	mov	r23, r17
    38fe:	0e 94 b0 04 	call	0x960	; 0x960 <keymap_key_to_keycode>
    3902:	08 17       	cp	r16, r24
    3904:	11 f4       	brne	.+4      	; 0x390a <scan_keycode+0x50>
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	08 c0       	rjmp	.+16     	; 0x391a <scan_keycode+0x60>
    390a:	21 96       	adiw	r28, 0x01	; 1

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    390c:	c1 31       	cpi	r28, 0x11	; 17
    390e:	d1 05       	cpc	r29, r1
    3910:	29 f7       	brne	.-54     	; 0x38dc <scan_keycode+0x22>
    }
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3912:	1f 5f       	subi	r17, 0xFF	; 255
    3914:	16 30       	cpi	r17, 0x06	; 6
    3916:	d9 f6       	brne	.-74     	; 0x38ce <scan_keycode+0x14>
    3918:	80 e0       	ldi	r24, 0x00	; 0
                }
            }
        }
    }
    return false;
}
    391a:	df 91       	pop	r29
    391c:	cf 91       	pop	r28
    391e:	1f 91       	pop	r17
    3920:	0f 91       	pop	r16
    3922:	ff 90       	pop	r15
    3924:	ef 90       	pop	r14
    3926:	df 90       	pop	r13
    3928:	cf 90       	pop	r12
    392a:	08 95       	ret

0000392c <bootmagic_scan_keycode>:

bool bootmagic_scan_keycode(uint8_t keycode)
{
    392c:	1f 93       	push	r17
    392e:	18 2f       	mov	r17, r24
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
    3930:	8c e2       	ldi	r24, 0x2C	; 44
    3932:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <scan_keycode>
    3936:	88 23       	and	r24, r24
    3938:	19 f0       	breq	.+6      	; 0x3940 <bootmagic_scan_keycode+0x14>

    return scan_keycode(keycode);
    393a:	81 2f       	mov	r24, r17
    393c:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <scan_keycode>
}
    3940:	1f 91       	pop	r17
    3942:	08 95       	ret

00003944 <bootmagic>:
#include "eeconfig.h"
#include "bootmagic.h"


void bootmagic(void)
{
    3944:	1f 93       	push	r17
    3946:	cf 93       	push	r28
    3948:	df 93       	push	r29
    /* check signature */
    if (!eeconfig_is_enabled()) {
    394a:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <eeconfig_is_enabled>
    394e:	88 23       	and	r24, r24
    3950:	11 f4       	brne	.+4      	; 0x3956 <bootmagic+0x12>
        eeconfig_init();
    3952:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("boogmagic scan: ... ");
    3956:	80 e7       	ldi	r24, 0x70	; 112
    3958:	93 e0       	ldi	r25, 0x03	; 3
    395a:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    395e:	14 e6       	ldi	r17, 0x64	; 100
    3960:	c0 e4       	ldi	r28, 0x40	; 64
    3962:	dc e9       	ldi	r29, 0x9C	; 156
    3964:	05 c0       	rjmp	.+10     	; 0x3970 <bootmagic+0x2c>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); _delay_ms(10); }
    3966:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <matrix_scan>
    396a:	ce 01       	movw	r24, r28
    396c:	01 97       	sbiw	r24, 0x01	; 1
    396e:	f1 f7       	brne	.-4      	; 0x396c <bootmagic+0x28>
    3970:	11 50       	subi	r17, 0x01	; 1
    3972:	c8 f7       	brcc	.-14     	; 0x3966 <bootmagic+0x22>
    print("done.\n");
    3974:	89 e6       	ldi	r24, 0x69	; 105
    3976:	93 e0       	ldi	r25, 0x03	; 3
    3978:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
    397c:	89 e2       	ldi	r24, 0x29	; 41
    397e:	0e 94 96 1c 	call	0x392c	; 0x392c <bootmagic_scan_keycode>
    3982:	88 23       	and	r24, r24
    3984:	09 f0       	breq	.+2      	; 0x3988 <bootmagic+0x44>
    3986:	28 c1       	rjmp	.+592    	; 0x3bd8 <bootmagic+0x294>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    3988:	8a e2       	ldi	r24, 0x2A	; 42
    398a:	0e 94 96 1c 	call	0x392c	; 0x392c <bootmagic_scan_keycode>
    398e:	88 23       	and	r24, r24
    3990:	11 f0       	breq	.+4      	; 0x3996 <bootmagic+0x52>
        eeconfig_init();
    3992:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
    3996:	85 e0       	ldi	r24, 0x05	; 5
    3998:	0e 94 96 1c 	call	0x392c	; 0x392c <bootmagic_scan_keycode>
    399c:	88 23       	and	r24, r24
    399e:	11 f0       	breq	.+4      	; 0x39a4 <bootmagic+0x60>
        bootloader_jump();
    39a0:	0e 94 39 1c 	call	0x3872	; 0x3872 <bootloader_jump>
    }

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    39a4:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <eeconfig_read_debug>
    39a8:	80 93 b7 01 	sts	0x01B7, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    39ac:	87 e0       	ldi	r24, 0x07	; 7
    39ae:	0e 94 96 1c 	call	0x392c	; 0x392c <bootmagic_scan_keycode>
    39b2:	88 23       	and	r24, r24
    39b4:	b9 f1       	breq	.+110    	; 0x3a24 <bootmagic+0xe0>
        if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    39b6:	8b e1       	ldi	r24, 0x1B	; 27
    39b8:	0e 94 96 1c 	call	0x392c	; 0x392c <bootmagic_scan_keycode>
    39bc:	88 23       	and	r24, r24
    39be:	49 f0       	breq	.+18     	; 0x39d2 <bootmagic+0x8e>
            debug_config.matrix = !debug_config.matrix;
    39c0:	90 91 b7 01 	lds	r25, 0x01B7
    39c4:	89 2f       	mov	r24, r25
    39c6:	86 95       	lsr	r24
    39c8:	80 95       	com	r24
    39ca:	81 70       	andi	r24, 0x01	; 1
    39cc:	88 0f       	add	r24, r24
    39ce:	9d 7f       	andi	r25, 0xFD	; 253
    39d0:	26 c0       	rjmp	.+76     	; 0x3a1e <bootmagic+0xda>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    39d2:	8e e0       	ldi	r24, 0x0E	; 14
    39d4:	0e 94 96 1c 	call	0x392c	; 0x392c <bootmagic_scan_keycode>
    39d8:	88 23       	and	r24, r24
    39da:	59 f0       	breq	.+22     	; 0x39f2 <bootmagic+0xae>
            debug_config.keyboard = !debug_config.keyboard;
    39dc:	90 91 b7 01 	lds	r25, 0x01B7
    39e0:	89 2f       	mov	r24, r25
    39e2:	86 95       	lsr	r24
    39e4:	86 95       	lsr	r24
    39e6:	80 95       	com	r24
    39e8:	81 70       	andi	r24, 0x01	; 1
    39ea:	88 0f       	add	r24, r24
    39ec:	88 0f       	add	r24, r24
    39ee:	9b 7f       	andi	r25, 0xFB	; 251
    39f0:	16 c0       	rjmp	.+44     	; 0x3a1e <bootmagic+0xda>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    39f2:	80 e1       	ldi	r24, 0x10	; 16
    39f4:	0e 94 96 1c 	call	0x392c	; 0x392c <bootmagic_scan_keycode>
    39f8:	90 91 b7 01 	lds	r25, 0x01B7
    39fc:	88 23       	and	r24, r24
    39fe:	59 f0       	breq	.+22     	; 0x3a16 <bootmagic+0xd2>
            debug_config.mouse = !debug_config.mouse;
    3a00:	89 2f       	mov	r24, r25
    3a02:	86 95       	lsr	r24
    3a04:	86 95       	lsr	r24
    3a06:	86 95       	lsr	r24
    3a08:	80 95       	com	r24
    3a0a:	81 70       	andi	r24, 0x01	; 1
    3a0c:	88 0f       	add	r24, r24
    3a0e:	88 0f       	add	r24, r24
    3a10:	88 0f       	add	r24, r24
    3a12:	97 7f       	andi	r25, 0xF7	; 247
    3a14:	04 c0       	rjmp	.+8      	; 0x3a1e <bootmagic+0xda>
        } else {
            debug_config.enable = !debug_config.enable;
    3a16:	89 2f       	mov	r24, r25
    3a18:	80 95       	com	r24
    3a1a:	81 70       	andi	r24, 0x01	; 1
    3a1c:	9e 7f       	andi	r25, 0xFE	; 254
    3a1e:	98 2b       	or	r25, r24
    3a20:	90 93 b7 01 	sts	0x01B7, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    3a24:	80 91 b7 01 	lds	r24, 0x01B7
    3a28:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    3a2c:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <eeconfig_read_keymap>
    3a30:	80 93 be 01 	sts	0x01BE, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    3a34:	80 ee       	ldi	r24, 0xE0	; 224
    3a36:	0e 94 96 1c 	call	0x392c	; 0x392c <bootmagic_scan_keycode>
    3a3a:	88 23       	and	r24, r24
    3a3c:	49 f0       	breq	.+18     	; 0x3a50 <bootmagic+0x10c>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    3a3e:	80 91 be 01 	lds	r24, 0x01BE
    3a42:	98 2f       	mov	r25, r24
    3a44:	90 95       	com	r25
    3a46:	91 70       	andi	r25, 0x01	; 1
    3a48:	8e 7f       	andi	r24, 0xFE	; 254
    3a4a:	89 2b       	or	r24, r25
    3a4c:	80 93 be 01 	sts	0x01BE, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    3a50:	89 e3       	ldi	r24, 0x39	; 57
    3a52:	0e 94 96 1c 	call	0x392c	; 0x392c <bootmagic_scan_keycode>
    3a56:	88 23       	and	r24, r24
    3a58:	59 f0       	breq	.+22     	; 0x3a70 <bootmagic+0x12c>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    3a5a:	90 91 be 01 	lds	r25, 0x01BE
    3a5e:	89 2f       	mov	r24, r25
    3a60:	86 95       	lsr	r24
    3a62:	80 95       	com	r24
    3a64:	81 70       	andi	r24, 0x01	; 1
    3a66:	88 0f       	add	r24, r24
    3a68:	9d 7f       	andi	r25, 0xFD	; 253
    3a6a:	98 2b       	or	r25, r24
    3a6c:	90 93 be 01 	sts	0x01BE, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    3a70:	82 ee       	ldi	r24, 0xE2	; 226
    3a72:	0e 94 96 1c 	call	0x392c	; 0x392c <bootmagic_scan_keycode>
    3a76:	88 23       	and	r24, r24
    3a78:	69 f0       	breq	.+26     	; 0x3a94 <bootmagic+0x150>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    3a7a:	90 91 be 01 	lds	r25, 0x01BE
    3a7e:	89 2f       	mov	r24, r25
    3a80:	86 95       	lsr	r24
    3a82:	86 95       	lsr	r24
    3a84:	80 95       	com	r24
    3a86:	81 70       	andi	r24, 0x01	; 1
    3a88:	88 0f       	add	r24, r24
    3a8a:	88 0f       	add	r24, r24
    3a8c:	9b 7f       	andi	r25, 0xFB	; 251
    3a8e:	98 2b       	or	r25, r24
    3a90:	90 93 be 01 	sts	0x01BE, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    3a94:	86 ee       	ldi	r24, 0xE6	; 230
    3a96:	0e 94 96 1c 	call	0x392c	; 0x392c <bootmagic_scan_keycode>
    3a9a:	88 23       	and	r24, r24
    3a9c:	79 f0       	breq	.+30     	; 0x3abc <bootmagic+0x178>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    3a9e:	90 91 be 01 	lds	r25, 0x01BE
    3aa2:	89 2f       	mov	r24, r25
    3aa4:	86 95       	lsr	r24
    3aa6:	86 95       	lsr	r24
    3aa8:	86 95       	lsr	r24
    3aaa:	80 95       	com	r24
    3aac:	81 70       	andi	r24, 0x01	; 1
    3aae:	88 0f       	add	r24, r24
    3ab0:	88 0f       	add	r24, r24
    3ab2:	88 0f       	add	r24, r24
    3ab4:	97 7f       	andi	r25, 0xF7	; 247
    3ab6:	98 2b       	or	r25, r24
    3ab8:	90 93 be 01 	sts	0x01BE, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
    3abc:	83 ee       	ldi	r24, 0xE3	; 227
    3abe:	0e 94 96 1c 	call	0x392c	; 0x392c <bootmagic_scan_keycode>
    3ac2:	88 23       	and	r24, r24
    3ac4:	69 f0       	breq	.+26     	; 0x3ae0 <bootmagic+0x19c>
        keymap_config.no_gui = !keymap_config.no_gui;
    3ac6:	90 91 be 01 	lds	r25, 0x01BE
    3aca:	89 2f       	mov	r24, r25
    3acc:	82 95       	swap	r24
    3ace:	8f 70       	andi	r24, 0x0F	; 15
    3ad0:	80 95       	com	r24
    3ad2:	81 70       	andi	r24, 0x01	; 1
    3ad4:	82 95       	swap	r24
    3ad6:	80 7f       	andi	r24, 0xF0	; 240
    3ad8:	9f 7e       	andi	r25, 0xEF	; 239
    3ada:	98 2b       	or	r25, r24
    3adc:	90 93 be 01 	sts	0x01BE, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    3ae0:	85 e3       	ldi	r24, 0x35	; 53
    3ae2:	0e 94 96 1c 	call	0x392c	; 0x392c <bootmagic_scan_keycode>
    3ae6:	88 23       	and	r24, r24
    3ae8:	79 f0       	breq	.+30     	; 0x3b08 <bootmagic+0x1c4>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    3aea:	90 91 be 01 	lds	r25, 0x01BE
    3aee:	89 2f       	mov	r24, r25
    3af0:	82 95       	swap	r24
    3af2:	86 95       	lsr	r24
    3af4:	87 70       	andi	r24, 0x07	; 7
    3af6:	80 95       	com	r24
    3af8:	81 70       	andi	r24, 0x01	; 1
    3afa:	82 95       	swap	r24
    3afc:	88 0f       	add	r24, r24
    3afe:	80 7e       	andi	r24, 0xE0	; 224
    3b00:	9f 7d       	andi	r25, 0xDF	; 223
    3b02:	98 2b       	or	r25, r24
    3b04:	90 93 be 01 	sts	0x01BE, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    3b08:	81 e3       	ldi	r24, 0x31	; 49
    3b0a:	0e 94 96 1c 	call	0x392c	; 0x392c <bootmagic_scan_keycode>
    3b0e:	88 23       	and	r24, r24
    3b10:	89 f0       	breq	.+34     	; 0x3b34 <bootmagic+0x1f0>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    3b12:	90 91 be 01 	lds	r25, 0x01BE
    3b16:	89 2f       	mov	r24, r25
    3b18:	82 95       	swap	r24
    3b1a:	86 95       	lsr	r24
    3b1c:	86 95       	lsr	r24
    3b1e:	83 70       	andi	r24, 0x03	; 3
    3b20:	80 95       	com	r24
    3b22:	81 70       	andi	r24, 0x01	; 1
    3b24:	82 95       	swap	r24
    3b26:	88 0f       	add	r24, r24
    3b28:	88 0f       	add	r24, r24
    3b2a:	80 7c       	andi	r24, 0xC0	; 192
    3b2c:	9f 7b       	andi	r25, 0xBF	; 191
    3b2e:	98 2b       	or	r25, r24
    3b30:	90 93 be 01 	sts	0x01BE, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
    3b34:	81 e1       	ldi	r24, 0x11	; 17
    3b36:	0e 94 96 1c 	call	0x392c	; 0x392c <bootmagic_scan_keycode>
    3b3a:	88 23       	and	r24, r24
    3b3c:	79 f0       	breq	.+30     	; 0x3b5c <bootmagic+0x218>
        keymap_config.nkro = !keymap_config.nkro;
    3b3e:	80 91 be 01 	lds	r24, 0x01BE
    3b42:	98 2f       	mov	r25, r24
    3b44:	99 1f       	adc	r25, r25
    3b46:	99 27       	eor	r25, r25
    3b48:	99 1f       	adc	r25, r25
    3b4a:	21 e0       	ldi	r18, 0x01	; 1
    3b4c:	92 27       	eor	r25, r18
    3b4e:	97 95       	ror	r25
    3b50:	99 27       	eor	r25, r25
    3b52:	97 95       	ror	r25
    3b54:	8f 77       	andi	r24, 0x7F	; 127
    3b56:	89 2b       	or	r24, r25
    3b58:	80 93 be 01 	sts	0x01BE, r24
    }
    eeconfig_write_keymap(keymap_config.raw);
    3b5c:	80 91 be 01 	lds	r24, 0x01BE
    3b60:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <eeconfig_write_keymap>
    keyboard_nkro = keymap_config.nkro;
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    3b64:	87 e2       	ldi	r24, 0x27	; 39
    3b66:	0e 94 96 1c 	call	0x392c	; 0x392c <bootmagic_scan_keycode>
    3b6a:	18 2f       	mov	r17, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    3b6c:	8e e1       	ldi	r24, 0x1E	; 30
    3b6e:	0e 94 96 1c 	call	0x392c	; 0x392c <bootmagic_scan_keycode>
    3b72:	81 11       	cpse	r24, r1
    3b74:	12 60       	ori	r17, 0x02	; 2
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    3b76:	8f e1       	ldi	r24, 0x1F	; 31
    3b78:	0e 94 96 1c 	call	0x392c	; 0x392c <bootmagic_scan_keycode>
    3b7c:	81 11       	cpse	r24, r1
    3b7e:	14 60       	ori	r17, 0x04	; 4
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    3b80:	80 e2       	ldi	r24, 0x20	; 32
    3b82:	0e 94 96 1c 	call	0x392c	; 0x392c <bootmagic_scan_keycode>
    3b86:	81 11       	cpse	r24, r1
    3b88:	18 60       	ori	r17, 0x08	; 8
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    3b8a:	81 e2       	ldi	r24, 0x21	; 33
    3b8c:	0e 94 96 1c 	call	0x392c	; 0x392c <bootmagic_scan_keycode>
    3b90:	81 11       	cpse	r24, r1
    3b92:	10 61       	ori	r17, 0x10	; 16
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    3b94:	82 e2       	ldi	r24, 0x22	; 34
    3b96:	0e 94 96 1c 	call	0x392c	; 0x392c <bootmagic_scan_keycode>
    3b9a:	81 11       	cpse	r24, r1
    3b9c:	10 62       	ori	r17, 0x20	; 32
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    3b9e:	83 e2       	ldi	r24, 0x23	; 35
    3ba0:	0e 94 96 1c 	call	0x392c	; 0x392c <bootmagic_scan_keycode>
    3ba4:	81 11       	cpse	r24, r1
    3ba6:	10 64       	ori	r17, 0x40	; 64
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    3ba8:	84 e2       	ldi	r24, 0x24	; 36
    3baa:	0e 94 96 1c 	call	0x392c	; 0x392c <bootmagic_scan_keycode>
    3bae:	81 11       	cpse	r24, r1
    3bb0:	10 68       	ori	r17, 0x80	; 128
    if (default_layer) {
    3bb2:	11 23       	and	r17, r17
    3bb4:	41 f0       	breq	.+16     	; 0x3bc6 <bootmagic+0x282>
        eeconfig_write_default_layer(default_layer);
    3bb6:	81 2f       	mov	r24, r17
    3bb8:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    3bbc:	61 2f       	mov	r22, r17
    3bbe:	70 e0       	ldi	r23, 0x00	; 0
    3bc0:	80 e0       	ldi	r24, 0x00	; 0
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	07 c0       	rjmp	.+14     	; 0x3bd4 <bootmagic+0x290>
    } else {
        default_layer = eeconfig_read_default_layer();
    3bc6:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	a0 e0       	ldi	r26, 0x00	; 0
    3bce:	b0 e0       	ldi	r27, 0x00	; 0
    3bd0:	bc 01       	movw	r22, r24
    3bd2:	cd 01       	movw	r24, r26
    3bd4:	0e 94 5f 19 	call	0x32be	; 0x32be <default_layer_set>
    }
}
    3bd8:	df 91       	pop	r29
    3bda:	cf 91       	pop	r28
    3bdc:	1f 91       	pop	r17
    3bde:	08 95       	ret

00003be0 <eeconfig_write_keymap>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    3be0:	68 2f       	mov	r22, r24
    3be2:	84 e0       	ldi	r24, 0x04	; 4
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__eewr_byte_m32u4>
    3bea:	08 95       	ret

00003bec <eeconfig_write_default_layer>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    3bec:	68 2f       	mov	r22, r24
    3bee:	83 e0       	ldi	r24, 0x03	; 3
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__eewr_byte_m32u4>
    3bf6:	08 95       	ret

00003bf8 <eeconfig_write_debug>:
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
}

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    3bf8:	68 2f       	mov	r22, r24
    3bfa:	82 e0       	ldi	r24, 0x02	; 2
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__eewr_byte_m32u4>
    3c02:	08 95       	ret

00003c04 <eeconfig_read_keymap>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    3c04:	84 e0       	ldi	r24, 0x04	; 4
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__eerd_byte_m32u4>
    3c0c:	08 95       	ret

00003c0e <eeconfig_read_default_layer>:
}

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    3c0e:	83 e0       	ldi	r24, 0x03	; 3
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__eerd_byte_m32u4>
    3c16:	08 95       	ret

00003c18 <eeconfig_read_debug>:
bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
}

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    3c18:	82 e0       	ldi	r24, 0x02	; 2
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <__eerd_byte_m32u4>
    3c20:	08 95       	ret

00003c22 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    3c22:	80 e0       	ldi	r24, 0x00	; 0
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <__eerd_word_m32u4>
    3c2a:	20 e0       	ldi	r18, 0x00	; 0
    3c2c:	8d 5e       	subi	r24, 0xED	; 237
    3c2e:	9e 4f       	sbci	r25, 0xFE	; 254
    3c30:	09 f4       	brne	.+2      	; 0x3c34 <eeconfig_is_enabled+0x12>
    3c32:	21 e0       	ldi	r18, 0x01	; 1
}
    3c34:	82 2f       	mov	r24, r18
    3c36:	08 95       	ret

00003c38 <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    3c38:	80 e0       	ldi	r24, 0x00	; 0
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	6d ee       	ldi	r22, 0xED	; 237
    3c3e:	7e ef       	ldi	r23, 0xFE	; 254
    3c40:	0e 94 05 22 	call	0x440a	; 0x440a <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    3c44:	82 e0       	ldi	r24, 0x02	; 2
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	60 e0       	ldi	r22, 0x00	; 0
    3c4a:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    3c4e:	83 e0       	ldi	r24, 0x03	; 3
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	60 e0       	ldi	r22, 0x00	; 0
    3c54:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    3c58:	84 e0       	ldi	r24, 0x04	; 4
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	60 e0       	ldi	r22, 0x00	; 0
    3c5e:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    3c62:	85 e0       	ldi	r24, 0x05	; 5
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	60 e0       	ldi	r22, 0x00	; 0
    3c68:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__eewr_byte_m32u4>
#ifdef BACKLIGHT_ENABLE
    eeprom_write_byte(EECONFIG_BACKLIGHT,      0);
#endif
}
    3c6c:	08 95       	ret

00003c6e <command_extra>:
/* This allows to define extra commands. return false when not processed. */
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    return false;
}
    3c6e:	80 e0       	ldi	r24, 0x00	; 0
    3c70:	08 95       	ret

00003c72 <command_console_extra>:

bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    return false;
}
    3c72:	80 e0       	ldi	r24, 0x00	; 0
    3c74:	08 95       	ret

00003c76 <command_console_help>:
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    3c76:	82 e5       	ldi	r24, 0x52	; 82
    3c78:	97 e0       	ldi	r25, 0x07	; 7
    3c7a:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
          "ESC/q:	quit\n"
#ifdef MOUSEKEY_ENABLE
          "m:	mousekey\n"
#endif
    );
}
    3c7e:	08 95       	ret

00003c80 <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    3c80:	1f 93       	push	r17
    3c82:	18 2f       	mov	r17, r24
    xprintf("L%d\n", layer);
    3c84:	00 d0       	rcall	.+0      	; 0x3c86 <switch_default_layer+0x6>
    3c86:	00 d0       	rcall	.+0      	; 0x3c88 <switch_default_layer+0x8>
    3c88:	ed b7       	in	r30, 0x3d	; 61
    3c8a:	fe b7       	in	r31, 0x3e	; 62
    3c8c:	31 96       	adiw	r30, 0x01	; 1
    3c8e:	8d e6       	ldi	r24, 0x6D	; 109
    3c90:	97 e0       	ldi	r25, 0x07	; 7
    3c92:	ad b7       	in	r26, 0x3d	; 61
    3c94:	be b7       	in	r27, 0x3e	; 62
    3c96:	12 96       	adiw	r26, 0x02	; 2
    3c98:	9c 93       	st	X, r25
    3c9a:	8e 93       	st	-X, r24
    3c9c:	11 97       	sbiw	r26, 0x01	; 1
    3c9e:	12 83       	std	Z+2, r17	; 0x02
    3ca0:	13 82       	std	Z+3, r1	; 0x03
    3ca2:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
    default_layer_set(1UL<<layer);
    3ca6:	0f 90       	pop	r0
    3ca8:	0f 90       	pop	r0
    3caa:	0f 90       	pop	r0
    3cac:	0f 90       	pop	r0
    3cae:	61 e0       	ldi	r22, 0x01	; 1
    3cb0:	70 e0       	ldi	r23, 0x00	; 0
    3cb2:	80 e0       	ldi	r24, 0x00	; 0
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	04 c0       	rjmp	.+8      	; 0x3cc0 <switch_default_layer+0x40>
    3cb8:	66 0f       	add	r22, r22
    3cba:	77 1f       	adc	r23, r23
    3cbc:	88 1f       	adc	r24, r24
    3cbe:	99 1f       	adc	r25, r25
    3cc0:	1a 95       	dec	r17
    3cc2:	d2 f7       	brpl	.-12     	; 0x3cb8 <switch_default_layer+0x38>
    3cc4:	0e 94 5f 19 	call	0x32be	; 0x32be <default_layer_set>
    clear_keyboard();
    3cc8:	0e 94 9e 10 	call	0x213c	; 0x213c <clear_keyboard>
}
    3ccc:	1f 91       	pop	r17
    3cce:	08 95       	ret

00003cd0 <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    3cd0:	1f 93       	push	r17
    static host_driver_t *host_driver = 0;
    switch (code) {
    3cd2:	87 32       	cpi	r24, 0x27	; 39
    3cd4:	38 f5       	brcc	.+78     	; 0x3d24 <command_common+0x54>
    3cd6:	8e 31       	cpi	r24, 0x1E	; 30
    3cd8:	08 f0       	brcs	.+2      	; 0x3cdc <command_common+0xc>
    3cda:	19 c3       	rjmp	.+1586   	; 0x430e <command_common+0x63e>
    3cdc:	8e 30       	cpi	r24, 0x0E	; 14
    3cde:	09 f4       	brne	.+2      	; 0x3ce2 <command_common+0x12>
    3ce0:	73 c2       	rjmp	.+1254   	; 0x41c8 <command_common+0x4f8>
    3ce2:	8f 30       	cpi	r24, 0x0F	; 15
    3ce4:	78 f4       	brcc	.+30     	; 0x3d04 <command_common+0x34>
    3ce6:	87 30       	cpi	r24, 0x07	; 7
    3ce8:	09 f4       	brne	.+2      	; 0x3cec <command_common+0x1c>
    3cea:	44 c2       	rjmp	.+1160   	; 0x4174 <command_common+0x4a4>
    3cec:	88 30       	cpi	r24, 0x08	; 8
    3cee:	20 f4       	brcc	.+8      	; 0x3cf8 <command_common+0x28>
    3cf0:	86 30       	cpi	r24, 0x06	; 6
    3cf2:	09 f0       	breq	.+2      	; 0x3cf6 <command_common+0x26>
    3cf4:	12 c3       	rjmp	.+1572   	; 0x431a <command_common+0x64a>
    3cf6:	1d c2       	rjmp	.+1082   	; 0x4132 <command_common+0x462>
    3cf8:	88 30       	cpi	r24, 0x08	; 8
    3cfa:	81 f1       	breq	.+96     	; 0x3d5c <command_common+0x8c>
    3cfc:	8b 30       	cpi	r24, 0x0B	; 11
    3cfe:	09 f0       	breq	.+2      	; 0x3d02 <command_common+0x32>
    3d00:	0c c3       	rjmp	.+1560   	; 0x431a <command_common+0x64a>
    3d02:	11 c2       	rjmp	.+1058   	; 0x4126 <command_common+0x456>
    3d04:	86 31       	cpi	r24, 0x16	; 22
    3d06:	09 f4       	brne	.+2      	; 0x3d0a <command_common+0x3a>
    3d08:	a4 c2       	rjmp	.+1352   	; 0x4252 <command_common+0x582>
    3d0a:	87 31       	cpi	r24, 0x17	; 23
    3d0c:	20 f4       	brcc	.+8      	; 0x3d16 <command_common+0x46>
    3d0e:	80 31       	cpi	r24, 0x10	; 16
    3d10:	09 f0       	breq	.+2      	; 0x3d14 <command_common+0x44>
    3d12:	03 c3       	rjmp	.+1542   	; 0x431a <command_common+0x64a>
    3d14:	6f c2       	rjmp	.+1246   	; 0x41f4 <command_common+0x524>
    3d16:	89 31       	cpi	r24, 0x19	; 25
    3d18:	09 f4       	brne	.+2      	; 0x3d1c <command_common+0x4c>
    3d1a:	84 c2       	rjmp	.+1288   	; 0x4224 <command_common+0x554>
    3d1c:	8b 31       	cpi	r24, 0x1B	; 27
    3d1e:	09 f0       	breq	.+2      	; 0x3d22 <command_common+0x52>
    3d20:	fc c2       	rjmp	.+1528   	; 0x431a <command_common+0x64a>
    3d22:	37 c2       	rjmp	.+1134   	; 0x4192 <command_common+0x4c2>
    3d24:	88 33       	cpi	r24, 0x38	; 56
    3d26:	09 f4       	brne	.+2      	; 0x3d2a <command_common+0x5a>
    3d28:	fe c1       	rjmp	.+1020   	; 0x4126 <command_common+0x456>
    3d2a:	89 33       	cpi	r24, 0x39	; 57
    3d2c:	50 f4       	brcc	.+20     	; 0x3d42 <command_common+0x72>
    3d2e:	89 32       	cpi	r24, 0x29	; 41
    3d30:	09 f4       	brne	.+2      	; 0x3d34 <command_common+0x64>
    3d32:	eb c2       	rjmp	.+1494   	; 0x430a <command_common+0x63a>
    3d34:	85 33       	cpi	r24, 0x35	; 53
    3d36:	09 f4       	brne	.+2      	; 0x3d3a <command_common+0x6a>
    3d38:	e8 c2       	rjmp	.+1488   	; 0x430a <command_common+0x63a>
    3d3a:	87 32       	cpi	r24, 0x27	; 39
    3d3c:	09 f0       	breq	.+2      	; 0x3d40 <command_common+0x70>
    3d3e:	ed c2       	rjmp	.+1498   	; 0x431a <command_common+0x64a>
    3d40:	e4 c2       	rjmp	.+1480   	; 0x430a <command_common+0x63a>
    3d42:	83 34       	cpi	r24, 0x43	; 67
    3d44:	09 f4       	brne	.+2      	; 0x3d48 <command_common+0x78>
    3d46:	e1 c2       	rjmp	.+1474   	; 0x430a <command_common+0x63a>
    3d48:	84 34       	cpi	r24, 0x44	; 68
    3d4a:	20 f4       	brcc	.+8      	; 0x3d54 <command_common+0x84>
    3d4c:	8a 33       	cpi	r24, 0x3A	; 58
    3d4e:	08 f4       	brcc	.+2      	; 0x3d52 <command_common+0x82>
    3d50:	e4 c2       	rjmp	.+1480   	; 0x431a <command_common+0x64a>
    3d52:	df c2       	rjmp	.+1470   	; 0x4312 <command_common+0x642>
    3d54:	88 34       	cpi	r24, 0x48	; 72
    3d56:	09 f0       	breq	.+2      	; 0x3d5a <command_common+0x8a>
    3d58:	e0 c2       	rjmp	.+1472   	; 0x431a <command_common+0x64a>
    3d5a:	fa c1       	rjmp	.+1012   	; 0x4150 <command_common+0x480>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    3d5c:	87 e6       	ldi	r24, 0x67	; 103
    3d5e:	95 e0       	ldi	r25, 0x05	; 5
    3d60:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    3d64:	85 ea       	ldi	r24, 0xA5	; 165
    3d66:	96 e0       	ldi	r25, 0x06	; 6
    3d68:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    3d6c:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <eeconfig_read_default_layer>
    3d70:	00 d0       	rcall	.+0      	; 0x3d72 <command_common+0xa2>
    3d72:	00 d0       	rcall	.+0      	; 0x3d74 <command_common+0xa4>
    3d74:	ed b7       	in	r30, 0x3d	; 61
    3d76:	fe b7       	in	r31, 0x3e	; 62
    3d78:	31 96       	adiw	r30, 0x01	; 1
    3d7a:	22 ea       	ldi	r18, 0xA2	; 162
    3d7c:	36 e0       	ldi	r19, 0x06	; 6
    3d7e:	ad b7       	in	r26, 0x3d	; 61
    3d80:	be b7       	in	r27, 0x3e	; 62
    3d82:	12 96       	adiw	r26, 0x02	; 2
    3d84:	3c 93       	st	X, r19
    3d86:	2e 93       	st	-X, r18
    3d88:	11 97       	sbiw	r26, 0x01	; 1
    3d8a:	82 83       	std	Z+2, r24	; 0x02
    3d8c:	13 82       	std	Z+3, r1	; 0x03
    3d8e:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
    3d92:	0f 90       	pop	r0
    3d94:	0f 90       	pop	r0
    3d96:	0f 90       	pop	r0
    3d98:	0f 90       	pop	r0
    3d9a:	80 ea       	ldi	r24, 0xA0	; 160
    3d9c:	96 e0       	ldi	r25, 0x06	; 6
    3d9e:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    3da2:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <eeconfig_read_debug>
    3da6:	18 2f       	mov	r17, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    3da8:	8d e8       	ldi	r24, 0x8D	; 141
    3daa:	96 e0       	ldi	r25, 0x06	; 6
    3dac:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    3db0:	00 d0       	rcall	.+0      	; 0x3db2 <command_common+0xe2>
    3db2:	00 d0       	rcall	.+0      	; 0x3db4 <command_common+0xe4>
    3db4:	ed b7       	in	r30, 0x3d	; 61
    3db6:	fe b7       	in	r31, 0x3e	; 62
    3db8:	31 96       	adiw	r30, 0x01	; 1
    3dba:	88 e8       	ldi	r24, 0x88	; 136
    3dbc:	96 e0       	ldi	r25, 0x06	; 6
    3dbe:	ad b7       	in	r26, 0x3d	; 61
    3dc0:	be b7       	in	r27, 0x3e	; 62
    3dc2:	12 96       	adiw	r26, 0x02	; 2
    3dc4:	9c 93       	st	X, r25
    3dc6:	8e 93       	st	-X, r24
    3dc8:	11 97       	sbiw	r26, 0x01	; 1
    3dca:	12 83       	std	Z+2, r17	; 0x02
    3dcc:	13 82       	std	Z+3, r1	; 0x03
    3dce:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
    3dd2:	0f 90       	pop	r0
    3dd4:	0f 90       	pop	r0
    3dd6:	0f 90       	pop	r0
    3dd8:	0f 90       	pop	r0
    3dda:	86 e8       	ldi	r24, 0x86	; 134
    3ddc:	96 e0       	ldi	r25, 0x06	; 6
    3dde:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    3de2:	8c e7       	ldi	r24, 0x7C	; 124
    3de4:	96 e0       	ldi	r25, 0x06	; 6
    3de6:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    3dea:	00 d0       	rcall	.+0      	; 0x3dec <command_common+0x11c>
    3dec:	00 d0       	rcall	.+0      	; 0x3dee <command_common+0x11e>
    3dee:	ed b7       	in	r30, 0x3d	; 61
    3df0:	fe b7       	in	r31, 0x3e	; 62
    3df2:	31 96       	adiw	r30, 0x01	; 1
    3df4:	89 e7       	ldi	r24, 0x79	; 121
    3df6:	96 e0       	ldi	r25, 0x06	; 6
    3df8:	ad b7       	in	r26, 0x3d	; 61
    3dfa:	be b7       	in	r27, 0x3e	; 62
    3dfc:	12 96       	adiw	r26, 0x02	; 2
    3dfe:	9c 93       	st	X, r25
    3e00:	8e 93       	st	-X, r24
    3e02:	11 97       	sbiw	r26, 0x01	; 1
    3e04:	81 2f       	mov	r24, r17
    3e06:	81 70       	andi	r24, 0x01	; 1
    3e08:	82 83       	std	Z+2, r24	; 0x02
    3e0a:	13 82       	std	Z+3, r1	; 0x03
    3e0c:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
    3e10:	0f 90       	pop	r0
    3e12:	0f 90       	pop	r0
    3e14:	0f 90       	pop	r0
    3e16:	0f 90       	pop	r0
    3e18:	87 e7       	ldi	r24, 0x77	; 119
    3e1a:	96 e0       	ldi	r25, 0x06	; 6
    3e1c:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    3e20:	8d e6       	ldi	r24, 0x6D	; 109
    3e22:	96 e0       	ldi	r25, 0x06	; 6
    3e24:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    3e28:	00 d0       	rcall	.+0      	; 0x3e2a <command_common+0x15a>
    3e2a:	00 d0       	rcall	.+0      	; 0x3e2c <command_common+0x15c>
    3e2c:	ed b7       	in	r30, 0x3d	; 61
    3e2e:	fe b7       	in	r31, 0x3e	; 62
    3e30:	31 96       	adiw	r30, 0x01	; 1
    3e32:	8a e6       	ldi	r24, 0x6A	; 106
    3e34:	96 e0       	ldi	r25, 0x06	; 6
    3e36:	ad b7       	in	r26, 0x3d	; 61
    3e38:	be b7       	in	r27, 0x3e	; 62
    3e3a:	12 96       	adiw	r26, 0x02	; 2
    3e3c:	9c 93       	st	X, r25
    3e3e:	8e 93       	st	-X, r24
    3e40:	11 97       	sbiw	r26, 0x01	; 1
    3e42:	81 2f       	mov	r24, r17
    3e44:	86 95       	lsr	r24
    3e46:	81 70       	andi	r24, 0x01	; 1
    3e48:	82 83       	std	Z+2, r24	; 0x02
    3e4a:	13 82       	std	Z+3, r1	; 0x03
    3e4c:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
    3e50:	0f 90       	pop	r0
    3e52:	0f 90       	pop	r0
    3e54:	0f 90       	pop	r0
    3e56:	0f 90       	pop	r0
    3e58:	88 e6       	ldi	r24, 0x68	; 104
    3e5a:	96 e0       	ldi	r25, 0x06	; 6
    3e5c:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    3e60:	8c e5       	ldi	r24, 0x5C	; 92
    3e62:	96 e0       	ldi	r25, 0x06	; 6
    3e64:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    3e68:	00 d0       	rcall	.+0      	; 0x3e6a <command_common+0x19a>
    3e6a:	00 d0       	rcall	.+0      	; 0x3e6c <command_common+0x19c>
    3e6c:	ed b7       	in	r30, 0x3d	; 61
    3e6e:	fe b7       	in	r31, 0x3e	; 62
    3e70:	31 96       	adiw	r30, 0x01	; 1
    3e72:	89 e5       	ldi	r24, 0x59	; 89
    3e74:	96 e0       	ldi	r25, 0x06	; 6
    3e76:	ad b7       	in	r26, 0x3d	; 61
    3e78:	be b7       	in	r27, 0x3e	; 62
    3e7a:	12 96       	adiw	r26, 0x02	; 2
    3e7c:	9c 93       	st	X, r25
    3e7e:	8e 93       	st	-X, r24
    3e80:	11 97       	sbiw	r26, 0x01	; 1
    3e82:	16 95       	lsr	r17
    3e84:	16 95       	lsr	r17
    3e86:	81 2f       	mov	r24, r17
    3e88:	81 70       	andi	r24, 0x01	; 1
    3e8a:	82 83       	std	Z+2, r24	; 0x02
    3e8c:	13 82       	std	Z+3, r1	; 0x03
    3e8e:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
    3e92:	0f 90       	pop	r0
    3e94:	0f 90       	pop	r0
    3e96:	0f 90       	pop	r0
    3e98:	0f 90       	pop	r0
    3e9a:	87 e5       	ldi	r24, 0x57	; 87
    3e9c:	96 e0       	ldi	r25, 0x06	; 6
    3e9e:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    3ea2:	8e e4       	ldi	r24, 0x4E	; 78
    3ea4:	96 e0       	ldi	r25, 0x06	; 6
    3ea6:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    3eaa:	00 d0       	rcall	.+0      	; 0x3eac <command_common+0x1dc>
    3eac:	00 d0       	rcall	.+0      	; 0x3eae <command_common+0x1de>
    3eae:	ed b7       	in	r30, 0x3d	; 61
    3eb0:	fe b7       	in	r31, 0x3e	; 62
    3eb2:	31 96       	adiw	r30, 0x01	; 1
    3eb4:	8b e4       	ldi	r24, 0x4B	; 75
    3eb6:	96 e0       	ldi	r25, 0x06	; 6
    3eb8:	ad b7       	in	r26, 0x3d	; 61
    3eba:	be b7       	in	r27, 0x3e	; 62
    3ebc:	12 96       	adiw	r26, 0x02	; 2
    3ebe:	9c 93       	st	X, r25
    3ec0:	8e 93       	st	-X, r24
    3ec2:	11 97       	sbiw	r26, 0x01	; 1
    3ec4:	16 95       	lsr	r17
    3ec6:	11 70       	andi	r17, 0x01	; 1
    3ec8:	12 83       	std	Z+2, r17	; 0x02
    3eca:	13 82       	std	Z+3, r1	; 0x03
    3ecc:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
    3ed0:	0f 90       	pop	r0
    3ed2:	0f 90       	pop	r0
    3ed4:	0f 90       	pop	r0
    3ed6:	0f 90       	pop	r0
    3ed8:	89 e4       	ldi	r24, 0x49	; 73
    3eda:	96 e0       	ldi	r25, 0x06	; 6
    3edc:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    3ee0:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <eeconfig_read_keymap>
    3ee4:	18 2f       	mov	r17, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    3ee6:	85 e3       	ldi	r24, 0x35	; 53
    3ee8:	96 e0       	ldi	r25, 0x06	; 6
    3eea:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    3eee:	00 d0       	rcall	.+0      	; 0x3ef0 <command_common+0x220>
    3ef0:	00 d0       	rcall	.+0      	; 0x3ef2 <command_common+0x222>
    3ef2:	ed b7       	in	r30, 0x3d	; 61
    3ef4:	fe b7       	in	r31, 0x3e	; 62
    3ef6:	31 96       	adiw	r30, 0x01	; 1
    3ef8:	80 e3       	ldi	r24, 0x30	; 48
    3efa:	96 e0       	ldi	r25, 0x06	; 6
    3efc:	ad b7       	in	r26, 0x3d	; 61
    3efe:	be b7       	in	r27, 0x3e	; 62
    3f00:	12 96       	adiw	r26, 0x02	; 2
    3f02:	9c 93       	st	X, r25
    3f04:	8e 93       	st	-X, r24
    3f06:	11 97       	sbiw	r26, 0x01	; 1
    3f08:	12 83       	std	Z+2, r17	; 0x02
    3f0a:	13 82       	std	Z+3, r1	; 0x03
    3f0c:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
    3f10:	0f 90       	pop	r0
    3f12:	0f 90       	pop	r0
    3f14:	0f 90       	pop	r0
    3f16:	0f 90       	pop	r0
    3f18:	8e e2       	ldi	r24, 0x2E	; 46
    3f1a:	96 e0       	ldi	r25, 0x06	; 6
    3f1c:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    3f20:	85 e1       	ldi	r24, 0x15	; 21
    3f22:	96 e0       	ldi	r25, 0x06	; 6
    3f24:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    3f28:	00 d0       	rcall	.+0      	; 0x3f2a <command_common+0x25a>
    3f2a:	00 d0       	rcall	.+0      	; 0x3f2c <command_common+0x25c>
    3f2c:	ed b7       	in	r30, 0x3d	; 61
    3f2e:	fe b7       	in	r31, 0x3e	; 62
    3f30:	31 96       	adiw	r30, 0x01	; 1
    3f32:	82 e1       	ldi	r24, 0x12	; 18
    3f34:	96 e0       	ldi	r25, 0x06	; 6
    3f36:	ad b7       	in	r26, 0x3d	; 61
    3f38:	be b7       	in	r27, 0x3e	; 62
    3f3a:	12 96       	adiw	r26, 0x02	; 2
    3f3c:	9c 93       	st	X, r25
    3f3e:	8e 93       	st	-X, r24
    3f40:	11 97       	sbiw	r26, 0x01	; 1
    3f42:	81 2f       	mov	r24, r17
    3f44:	81 70       	andi	r24, 0x01	; 1
    3f46:	82 83       	std	Z+2, r24	; 0x02
    3f48:	13 82       	std	Z+3, r1	; 0x03
    3f4a:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
    3f4e:	0f 90       	pop	r0
    3f50:	0f 90       	pop	r0
    3f52:	0f 90       	pop	r0
    3f54:	0f 90       	pop	r0
    3f56:	80 e1       	ldi	r24, 0x10	; 16
    3f58:	96 e0       	ldi	r25, 0x06	; 6
    3f5a:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    3f5e:	89 ef       	ldi	r24, 0xF9	; 249
    3f60:	95 e0       	ldi	r25, 0x05	; 5
    3f62:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    3f66:	00 d0       	rcall	.+0      	; 0x3f68 <command_common+0x298>
    3f68:	00 d0       	rcall	.+0      	; 0x3f6a <command_common+0x29a>
    3f6a:	ed b7       	in	r30, 0x3d	; 61
    3f6c:	fe b7       	in	r31, 0x3e	; 62
    3f6e:	31 96       	adiw	r30, 0x01	; 1
    3f70:	86 ef       	ldi	r24, 0xF6	; 246
    3f72:	95 e0       	ldi	r25, 0x05	; 5
    3f74:	ad b7       	in	r26, 0x3d	; 61
    3f76:	be b7       	in	r27, 0x3e	; 62
    3f78:	12 96       	adiw	r26, 0x02	; 2
    3f7a:	9c 93       	st	X, r25
    3f7c:	8e 93       	st	-X, r24
    3f7e:	11 97       	sbiw	r26, 0x01	; 1
    3f80:	81 2f       	mov	r24, r17
    3f82:	86 95       	lsr	r24
    3f84:	81 70       	andi	r24, 0x01	; 1
    3f86:	82 83       	std	Z+2, r24	; 0x02
    3f88:	13 82       	std	Z+3, r1	; 0x03
    3f8a:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
    3f8e:	0f 90       	pop	r0
    3f90:	0f 90       	pop	r0
    3f92:	0f 90       	pop	r0
    3f94:	0f 90       	pop	r0
    3f96:	84 ef       	ldi	r24, 0xF4	; 244
    3f98:	95 e0       	ldi	r25, 0x05	; 5
    3f9a:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    3f9e:	82 ee       	ldi	r24, 0xE2	; 226
    3fa0:	95 e0       	ldi	r25, 0x05	; 5
    3fa2:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    3fa6:	00 d0       	rcall	.+0      	; 0x3fa8 <command_common+0x2d8>
    3fa8:	00 d0       	rcall	.+0      	; 0x3faa <command_common+0x2da>
    3faa:	ed b7       	in	r30, 0x3d	; 61
    3fac:	fe b7       	in	r31, 0x3e	; 62
    3fae:	31 96       	adiw	r30, 0x01	; 1
    3fb0:	8f ed       	ldi	r24, 0xDF	; 223
    3fb2:	95 e0       	ldi	r25, 0x05	; 5
    3fb4:	ad b7       	in	r26, 0x3d	; 61
    3fb6:	be b7       	in	r27, 0x3e	; 62
    3fb8:	12 96       	adiw	r26, 0x02	; 2
    3fba:	9c 93       	st	X, r25
    3fbc:	8e 93       	st	-X, r24
    3fbe:	11 97       	sbiw	r26, 0x01	; 1
    3fc0:	81 2f       	mov	r24, r17
    3fc2:	86 95       	lsr	r24
    3fc4:	86 95       	lsr	r24
    3fc6:	81 70       	andi	r24, 0x01	; 1
    3fc8:	82 83       	std	Z+2, r24	; 0x02
    3fca:	13 82       	std	Z+3, r1	; 0x03
    3fcc:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
    3fd0:	0f 90       	pop	r0
    3fd2:	0f 90       	pop	r0
    3fd4:	0f 90       	pop	r0
    3fd6:	0f 90       	pop	r0
    3fd8:	8d ed       	ldi	r24, 0xDD	; 221
    3fda:	95 e0       	ldi	r25, 0x05	; 5
    3fdc:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    3fe0:	8b ec       	ldi	r24, 0xCB	; 203
    3fe2:	95 e0       	ldi	r25, 0x05	; 5
    3fe4:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    3fe8:	00 d0       	rcall	.+0      	; 0x3fea <command_common+0x31a>
    3fea:	00 d0       	rcall	.+0      	; 0x3fec <command_common+0x31c>
    3fec:	ed b7       	in	r30, 0x3d	; 61
    3fee:	fe b7       	in	r31, 0x3e	; 62
    3ff0:	31 96       	adiw	r30, 0x01	; 1
    3ff2:	88 ec       	ldi	r24, 0xC8	; 200
    3ff4:	95 e0       	ldi	r25, 0x05	; 5
    3ff6:	ad b7       	in	r26, 0x3d	; 61
    3ff8:	be b7       	in	r27, 0x3e	; 62
    3ffa:	12 96       	adiw	r26, 0x02	; 2
    3ffc:	9c 93       	st	X, r25
    3ffe:	8e 93       	st	-X, r24
    4000:	11 97       	sbiw	r26, 0x01	; 1
    4002:	81 2f       	mov	r24, r17
    4004:	86 95       	lsr	r24
    4006:	86 95       	lsr	r24
    4008:	86 95       	lsr	r24
    400a:	81 70       	andi	r24, 0x01	; 1
    400c:	82 83       	std	Z+2, r24	; 0x02
    400e:	13 82       	std	Z+3, r1	; 0x03
    4010:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
    4014:	0f 90       	pop	r0
    4016:	0f 90       	pop	r0
    4018:	0f 90       	pop	r0
    401a:	0f 90       	pop	r0
    401c:	86 ec       	ldi	r24, 0xC6	; 198
    401e:	95 e0       	ldi	r25, 0x05	; 5
    4020:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4024:	8c eb       	ldi	r24, 0xBC	; 188
    4026:	95 e0       	ldi	r25, 0x05	; 5
    4028:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    402c:	00 d0       	rcall	.+0      	; 0x402e <command_common+0x35e>
    402e:	00 d0       	rcall	.+0      	; 0x4030 <command_common+0x360>
    4030:	ed b7       	in	r30, 0x3d	; 61
    4032:	fe b7       	in	r31, 0x3e	; 62
    4034:	31 96       	adiw	r30, 0x01	; 1
    4036:	89 eb       	ldi	r24, 0xB9	; 185
    4038:	95 e0       	ldi	r25, 0x05	; 5
    403a:	ad b7       	in	r26, 0x3d	; 61
    403c:	be b7       	in	r27, 0x3e	; 62
    403e:	12 96       	adiw	r26, 0x02	; 2
    4040:	9c 93       	st	X, r25
    4042:	8e 93       	st	-X, r24
    4044:	11 97       	sbiw	r26, 0x01	; 1
    4046:	81 2f       	mov	r24, r17
    4048:	82 95       	swap	r24
    404a:	81 70       	andi	r24, 0x01	; 1
    404c:	82 83       	std	Z+2, r24	; 0x02
    404e:	13 82       	std	Z+3, r1	; 0x03
    4050:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
    4054:	0f 90       	pop	r0
    4056:	0f 90       	pop	r0
    4058:	0f 90       	pop	r0
    405a:	0f 90       	pop	r0
    405c:	87 eb       	ldi	r24, 0xB7	; 183
    405e:	95 e0       	ldi	r25, 0x05	; 5
    4060:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4064:	85 ea       	ldi	r24, 0xA5	; 165
    4066:	95 e0       	ldi	r25, 0x05	; 5
    4068:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    406c:	00 d0       	rcall	.+0      	; 0x406e <command_common+0x39e>
    406e:	00 d0       	rcall	.+0      	; 0x4070 <command_common+0x3a0>
    4070:	ed b7       	in	r30, 0x3d	; 61
    4072:	fe b7       	in	r31, 0x3e	; 62
    4074:	31 96       	adiw	r30, 0x01	; 1
    4076:	82 ea       	ldi	r24, 0xA2	; 162
    4078:	95 e0       	ldi	r25, 0x05	; 5
    407a:	ad b7       	in	r26, 0x3d	; 61
    407c:	be b7       	in	r27, 0x3e	; 62
    407e:	12 96       	adiw	r26, 0x02	; 2
    4080:	9c 93       	st	X, r25
    4082:	8e 93       	st	-X, r24
    4084:	11 97       	sbiw	r26, 0x01	; 1
    4086:	81 2f       	mov	r24, r17
    4088:	82 95       	swap	r24
    408a:	86 95       	lsr	r24
    408c:	81 70       	andi	r24, 0x01	; 1
    408e:	82 83       	std	Z+2, r24	; 0x02
    4090:	13 82       	std	Z+3, r1	; 0x03
    4092:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
    4096:	0f 90       	pop	r0
    4098:	0f 90       	pop	r0
    409a:	0f 90       	pop	r0
    409c:	0f 90       	pop	r0
    409e:	80 ea       	ldi	r24, 0xA0	; 160
    40a0:	95 e0       	ldi	r25, 0x05	; 5
    40a2:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    40a6:	84 e8       	ldi	r24, 0x84	; 132
    40a8:	95 e0       	ldi	r25, 0x05	; 5
    40aa:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    40ae:	00 d0       	rcall	.+0      	; 0x40b0 <command_common+0x3e0>
    40b0:	00 d0       	rcall	.+0      	; 0x40b2 <command_common+0x3e2>
    40b2:	ed b7       	in	r30, 0x3d	; 61
    40b4:	fe b7       	in	r31, 0x3e	; 62
    40b6:	31 96       	adiw	r30, 0x01	; 1
    40b8:	81 e8       	ldi	r24, 0x81	; 129
    40ba:	95 e0       	ldi	r25, 0x05	; 5
    40bc:	ad b7       	in	r26, 0x3d	; 61
    40be:	be b7       	in	r27, 0x3e	; 62
    40c0:	12 96       	adiw	r26, 0x02	; 2
    40c2:	9c 93       	st	X, r25
    40c4:	8e 93       	st	-X, r24
    40c6:	11 97       	sbiw	r26, 0x01	; 1
    40c8:	12 95       	swap	r17
    40ca:	16 95       	lsr	r17
    40cc:	16 95       	lsr	r17
    40ce:	13 70       	andi	r17, 0x03	; 3
    40d0:	81 2f       	mov	r24, r17
    40d2:	81 70       	andi	r24, 0x01	; 1
    40d4:	82 83       	std	Z+2, r24	; 0x02
    40d6:	13 82       	std	Z+3, r1	; 0x03
    40d8:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
    40dc:	0f 90       	pop	r0
    40de:	0f 90       	pop	r0
    40e0:	0f 90       	pop	r0
    40e2:	0f 90       	pop	r0
    40e4:	8f e7       	ldi	r24, 0x7F	; 127
    40e6:	95 e0       	ldi	r25, 0x05	; 5
    40e8:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    40ec:	87 e7       	ldi	r24, 0x77	; 119
    40ee:	95 e0       	ldi	r25, 0x05	; 5
    40f0:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    40f4:	00 d0       	rcall	.+0      	; 0x40f6 <command_common+0x426>
    40f6:	00 d0       	rcall	.+0      	; 0x40f8 <command_common+0x428>
    40f8:	ed b7       	in	r30, 0x3d	; 61
    40fa:	fe b7       	in	r31, 0x3e	; 62
    40fc:	31 96       	adiw	r30, 0x01	; 1
    40fe:	84 e7       	ldi	r24, 0x74	; 116
    4100:	95 e0       	ldi	r25, 0x05	; 5
    4102:	ad b7       	in	r26, 0x3d	; 61
    4104:	be b7       	in	r27, 0x3e	; 62
    4106:	12 96       	adiw	r26, 0x02	; 2
    4108:	9c 93       	st	X, r25
    410a:	8e 93       	st	-X, r24
    410c:	11 97       	sbiw	r26, 0x01	; 1
    410e:	16 95       	lsr	r17
    4110:	12 83       	std	Z+2, r17	; 0x02
    4112:	13 82       	std	Z+3, r1	; 0x03
    4114:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
    4118:	0f 90       	pop	r0
    411a:	0f 90       	pop	r0
    411c:	0f 90       	pop	r0
    411e:	0f 90       	pop	r0
    4120:	82 e7       	ldi	r24, 0x72	; 114
    4122:	95 e0       	ldi	r25, 0x05	; 5
    4124:	02 c0       	rjmp	.+4      	; 0x412a <command_common+0x45a>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    4126:	85 eb       	ldi	r24, 0xB5	; 181
    4128:	96 e0       	ldi	r25, 0x06	; 6
    412a:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    412e:	81 e0       	ldi	r24, 0x01	; 1
    4130:	f9 c0       	rjmp	.+498    	; 0x4324 <command_common+0x654>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    4132:	80 91 b7 01 	lds	r24, 0x01B7
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    4136:	80 7f       	andi	r24, 0xF0	; 240
    4138:	80 93 b7 01 	sts	0x01B7, r24
            command_console_help();
    413c:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <command_console_help>
            print("C> ");
    4140:	83 e6       	ldi	r24, 0x63	; 99
    4142:	95 e0       	ldi	r25, 0x05	; 5
    4144:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
            command_state = CONSOLE;
    4148:	81 e0       	ldi	r24, 0x01	; 1
    414a:	80 93 bd 01 	sts	0x01BD, r24
    414e:	ea c0       	rjmp	.+468    	; 0x4324 <command_common+0x654>
            break;
        case KC_PAUSE:
            clear_keyboard();
    4150:	0e 94 9e 10 	call	0x213c	; 0x213c <clear_keyboard>
            print("\n\nbootloader... ");
    4154:	82 e5       	ldi	r24, 0x52	; 82
    4156:	95 e0       	ldi	r25, 0x05	; 5
    4158:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    415c:	80 e1       	ldi	r24, 0x10	; 16
    415e:	97 e2       	ldi	r25, 0x27	; 39
    4160:	20 e9       	ldi	r18, 0x90	; 144
    4162:	31 e0       	ldi	r19, 0x01	; 1
    4164:	f9 01       	movw	r30, r18
    4166:	31 97       	sbiw	r30, 0x01	; 1
    4168:	f1 f7       	brne	.-4      	; 0x4166 <command_common+0x496>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    416a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    416c:	d9 f7       	brne	.-10     	; 0x4164 <command_common+0x494>
            _delay_ms(1000);
            bootloader_jump(); // not return
    416e:	0e 94 39 1c 	call	0x3872	; 0x3872 <bootloader_jump>
    4172:	dd cf       	rjmp	.-70     	; 0x412e <command_common+0x45e>
            break;
        case KC_D:
            if (debug_enable) {
    4174:	80 91 b7 01 	lds	r24, 0x01B7
    4178:	80 ff       	sbrs	r24, 0
    417a:	08 c0       	rjmp	.+16     	; 0x418c <command_common+0x4bc>
                print("\ndebug: off\n");
    417c:	85 e4       	ldi	r24, 0x45	; 69
    417e:	95 e0       	ldi	r25, 0x05	; 5
    4180:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
                debug_matrix   = false;
    4184:	80 91 b7 01 	lds	r24, 0x01B7
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    4188:	80 7f       	andi	r24, 0xF0	; 240
    418a:	18 c0       	rjmp	.+48     	; 0x41bc <command_common+0x4ec>
            } else {
                print("\ndebug: on\n");
    418c:	89 e3       	ldi	r24, 0x39	; 57
    418e:	95 e0       	ldi	r25, 0x05	; 5
    4190:	10 c0       	rjmp	.+32     	; 0x41b2 <command_common+0x4e2>
                debug_enable   = true;
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    4192:	80 91 b7 01 	lds	r24, 0x01B7
    4196:	98 2f       	mov	r25, r24
    4198:	96 95       	lsr	r25
    419a:	90 95       	com	r25
    419c:	91 70       	andi	r25, 0x01	; 1
    419e:	29 2f       	mov	r18, r25
    41a0:	22 0f       	add	r18, r18
    41a2:	8d 7f       	andi	r24, 0xFD	; 253
    41a4:	82 2b       	or	r24, r18
    41a6:	80 93 b7 01 	sts	0x01B7, r24
            if (debug_matrix) {
    41aa:	99 23       	and	r25, r25
    41ac:	51 f0       	breq	.+20     	; 0x41c2 <command_common+0x4f2>
                print("\nmatrix: on\n");
    41ae:	8c e2       	ldi	r24, 0x2C	; 44
    41b0:	95 e0       	ldi	r25, 0x05	; 5
    41b2:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
                debug_enable = true;
    41b6:	80 91 b7 01 	lds	r24, 0x01B7
    41ba:	81 60       	ori	r24, 0x01	; 1
    41bc:	80 93 b7 01 	sts	0x01B7, r24
    41c0:	b6 cf       	rjmp	.-148    	; 0x412e <command_common+0x45e>
            } else {
                print("\nmatrix: off\n");
    41c2:	8e e1       	ldi	r24, 0x1E	; 30
    41c4:	95 e0       	ldi	r25, 0x05	; 5
    41c6:	b1 cf       	rjmp	.-158    	; 0x412a <command_common+0x45a>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    41c8:	80 91 b7 01 	lds	r24, 0x01B7
    41cc:	98 2f       	mov	r25, r24
    41ce:	96 95       	lsr	r25
    41d0:	96 95       	lsr	r25
    41d2:	90 95       	com	r25
    41d4:	91 70       	andi	r25, 0x01	; 1
    41d6:	29 2f       	mov	r18, r25
    41d8:	22 0f       	add	r18, r18
    41da:	22 0f       	add	r18, r18
    41dc:	8b 7f       	andi	r24, 0xFB	; 251
    41de:	82 2b       	or	r24, r18
    41e0:	80 93 b7 01 	sts	0x01B7, r24
            if (debug_keyboard) {
    41e4:	99 23       	and	r25, r25
    41e6:	19 f0       	breq	.+6      	; 0x41ee <command_common+0x51e>
                print("\nkeyboard: on\n");
    41e8:	8f e0       	ldi	r24, 0x0F	; 15
    41ea:	95 e0       	ldi	r25, 0x05	; 5
    41ec:	e2 cf       	rjmp	.-60     	; 0x41b2 <command_common+0x4e2>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    41ee:	8f ef       	ldi	r24, 0xFF	; 255
    41f0:	94 e0       	ldi	r25, 0x04	; 4
    41f2:	9b cf       	rjmp	.-202    	; 0x412a <command_common+0x45a>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    41f4:	80 91 b7 01 	lds	r24, 0x01B7
    41f8:	98 2f       	mov	r25, r24
    41fa:	96 95       	lsr	r25
    41fc:	96 95       	lsr	r25
    41fe:	96 95       	lsr	r25
    4200:	90 95       	com	r25
    4202:	91 70       	andi	r25, 0x01	; 1
    4204:	29 2f       	mov	r18, r25
    4206:	22 0f       	add	r18, r18
    4208:	22 0f       	add	r18, r18
    420a:	22 0f       	add	r18, r18
    420c:	87 7f       	andi	r24, 0xF7	; 247
    420e:	82 2b       	or	r24, r18
    4210:	80 93 b7 01 	sts	0x01B7, r24
            if (debug_mouse) {
    4214:	99 23       	and	r25, r25
    4216:	19 f0       	breq	.+6      	; 0x421e <command_common+0x54e>
                print("\nmouse: on\n");
    4218:	83 ef       	ldi	r24, 0xF3	; 243
    421a:	94 e0       	ldi	r25, 0x04	; 4
    421c:	ca cf       	rjmp	.-108    	; 0x41b2 <command_common+0x4e2>
                debug_enable = true;
            } else {
                print("\nmouse: off\n");
    421e:	86 ee       	ldi	r24, 0xE6	; 230
    4220:	94 e0       	ldi	r25, 0x04	; 4
    4222:	83 cf       	rjmp	.-250    	; 0x412a <command_common+0x45a>
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    4224:	87 ed       	ldi	r24, 0xD7	; 215
    4226:	94 e0       	ldi	r25, 0x04	; 4
    4228:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    422c:	8b ea       	ldi	r24, 0xAB	; 171
    422e:	94 e0       	ldi	r25, 0x04	; 4
    4230:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4234:	85 e7       	ldi	r24, 0x75	; 117
    4236:	94 e0       	ldi	r25, 0x04	; 4
    4238:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    423c:	8e e4       	ldi	r24, 0x4E	; 78
    423e:	94 e0       	ldi	r25, 0x04	; 4
    4240:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
            /* build options */
            print("OPTIONS:"
    4244:	88 e1       	ldi	r24, 0x18	; 24
    4246:	94 e0       	ldi	r25, 0x04	; 4
    4248:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    424c:	8d ee       	ldi	r24, 0xED	; 237
    424e:	93 e0       	ldi	r25, 0x03	; 3
    4250:	6c cf       	rjmp	.-296    	; 0x412a <command_common+0x45a>
                  " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
                  " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
            break;
        case KC_S:
            print("\n\t- Status -\n");
    4252:	8f ed       	ldi	r24, 0xDF	; 223
    4254:	93 e0       	ldi	r25, 0x03	; 3
    4256:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
            print_val_hex8(host_keyboard_leds());
    425a:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <host_keyboard_leds>
    425e:	00 d0       	rcall	.+0      	; 0x4260 <command_common+0x590>
    4260:	00 d0       	rcall	.+0      	; 0x4262 <command_common+0x592>
    4262:	ed b7       	in	r30, 0x3d	; 61
    4264:	fe b7       	in	r31, 0x3e	; 62
    4266:	31 96       	adiw	r30, 0x01	; 1
    4268:	25 ec       	ldi	r18, 0xC5	; 197
    426a:	33 e0       	ldi	r19, 0x03	; 3
    426c:	ad b7       	in	r26, 0x3d	; 61
    426e:	be b7       	in	r27, 0x3e	; 62
    4270:	12 96       	adiw	r26, 0x02	; 2
    4272:	3c 93       	st	X, r19
    4274:	2e 93       	st	-X, r18
    4276:	11 97       	sbiw	r26, 0x01	; 1
    4278:	82 83       	std	Z+2, r24	; 0x02
    427a:	13 82       	std	Z+3, r1	; 0x03
    427c:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
            print_val_hex8(keyboard_protocol);
    4280:	ed b7       	in	r30, 0x3d	; 61
    4282:	fe b7       	in	r31, 0x3e	; 62
    4284:	31 96       	adiw	r30, 0x01	; 1
    4286:	8e ea       	ldi	r24, 0xAE	; 174
    4288:	93 e0       	ldi	r25, 0x03	; 3
    428a:	ad b7       	in	r26, 0x3d	; 61
    428c:	be b7       	in	r27, 0x3e	; 62
    428e:	12 96       	adiw	r26, 0x02	; 2
    4290:	9c 93       	st	X, r25
    4292:	8e 93       	st	-X, r24
    4294:	11 97       	sbiw	r26, 0x01	; 1
    4296:	80 91 01 01 	lds	r24, 0x0101
    429a:	82 83       	std	Z+2, r24	; 0x02
    429c:	13 82       	std	Z+3, r1	; 0x03
    429e:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
            print_val_hex8(keyboard_idle);
    42a2:	ed b7       	in	r30, 0x3d	; 61
    42a4:	fe b7       	in	r31, 0x3e	; 62
    42a6:	31 96       	adiw	r30, 0x01	; 1
    42a8:	8b e9       	ldi	r24, 0x9B	; 155
    42aa:	93 e0       	ldi	r25, 0x03	; 3
    42ac:	ad b7       	in	r26, 0x3d	; 61
    42ae:	be b7       	in	r27, 0x3e	; 62
    42b0:	12 96       	adiw	r26, 0x02	; 2
    42b2:	9c 93       	st	X, r25
    42b4:	8e 93       	st	-X, r24
    42b6:	11 97       	sbiw	r26, 0x01	; 1
    42b8:	80 91 40 01 	lds	r24, 0x0140
    42bc:	82 83       	std	Z+2, r24	; 0x02
    42be:	13 82       	std	Z+3, r1	; 0x03
    42c0:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
#endif
            print_val_hex32(timer_count);
    42c4:	20 91 b9 01 	lds	r18, 0x01B9
    42c8:	30 91 ba 01 	lds	r19, 0x01BA
    42cc:	40 91 bb 01 	lds	r20, 0x01BB
    42d0:	50 91 bc 01 	lds	r21, 0x01BC
    42d4:	00 d0       	rcall	.+0      	; 0x42d6 <command_common+0x606>
    42d6:	87 e8       	ldi	r24, 0x87	; 135
    42d8:	93 e0       	ldi	r25, 0x03	; 3
    42da:	ed b7       	in	r30, 0x3d	; 61
    42dc:	fe b7       	in	r31, 0x3e	; 62
    42de:	92 83       	std	Z+2, r25	; 0x02
    42e0:	81 83       	std	Z+1, r24	; 0x01
    42e2:	ad b7       	in	r26, 0x3d	; 61
    42e4:	be b7       	in	r27, 0x3e	; 62
    42e6:	13 96       	adiw	r26, 0x03	; 3
    42e8:	2d 93       	st	X+, r18
    42ea:	3d 93       	st	X+, r19
    42ec:	4d 93       	st	X+, r20
    42ee:	5c 93       	st	X, r21
    42f0:	16 97       	sbiw	r26, 0x06	; 6
    42f2:	0e 94 a7 04 	call	0x94e	; 0x94e <__xprintf>
    42f6:	81 e0       	ldi	r24, 0x01	; 1
    42f8:	ed b7       	in	r30, 0x3d	; 61
    42fa:	fe b7       	in	r31, 0x3e	; 62
    42fc:	36 96       	adiw	r30, 0x06	; 6
    42fe:	0f b6       	in	r0, 0x3f	; 63
    4300:	f8 94       	cli
    4302:	fe bf       	out	0x3e, r31	; 62
    4304:	0f be       	out	0x3f, r0	; 63
    4306:	ed bf       	out	0x3d, r30	; 61
    4308:	0d c0       	rjmp	.+26     	; 0x4324 <command_common+0x654>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    430a:	80 e0       	ldi	r24, 0x00	; 0
    430c:	03 c0       	rjmp	.+6      	; 0x4314 <command_common+0x644>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    430e:	8d 51       	subi	r24, 0x1D	; 29
    4310:	01 c0       	rjmp	.+2      	; 0x4314 <command_common+0x644>
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    4312:	89 53       	subi	r24, 0x39	; 57
    4314:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <switch_default_layer>
    4318:	0a cf       	rjmp	.-492    	; 0x412e <command_common+0x45e>
            break;
        default:
            print("?");
    431a:	85 e8       	ldi	r24, 0x85	; 133
    431c:	93 e0       	ldi	r25, 0x03	; 3
    431e:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    4322:	80 e0       	ldi	r24, 0x00	; 0
            return false;
    }
    return true;
}
    4324:	1f 91       	pop	r17
    4326:	08 95       	ret

00004328 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    4328:	1f 93       	push	r17
    432a:	18 2f       	mov	r17, r24
    switch (command_state) {
    432c:	80 91 bd 01 	lds	r24, 0x01BD
    4330:	88 23       	and	r24, r24
    4332:	19 f0       	breq	.+6      	; 0x433a <command_proc+0x12>
    4334:	81 30       	cpi	r24, 0x01	; 1
    4336:	e1 f5       	brne	.+120    	; 0x43b0 <command_proc+0x88>
    4338:	08 c0       	rjmp	.+16     	; 0x434a <command_proc+0x22>
        case ONESHOT:
            if (!IS_COMMAND())
    433a:	e0 91 0c 01 	lds	r30, 0x010C
    433e:	f0 91 0d 01 	lds	r31, 0x010D
    4342:	80 81       	ld	r24, Z
    4344:	82 32       	cpi	r24, 0x22	; 34
    4346:	b1 f5       	brne	.+108    	; 0x43b4 <command_proc+0x8c>
    4348:	07 c0       	rjmp	.+14     	; 0x4358 <command_proc+0x30>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    434a:	e0 91 0c 01 	lds	r30, 0x010C
    434e:	f0 91 0d 01 	lds	r31, 0x010D
    4352:	80 81       	ld	r24, Z
    4354:	82 32       	cpi	r24, 0x22	; 34
    4356:	49 f4       	brne	.+18     	; 0x436a <command_proc+0x42>
                return (command_extra(code) || command_common(code));
    4358:	81 2f       	mov	r24, r17
    435a:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <command_extra>
    435e:	88 23       	and	r24, r24
    4360:	d1 f4       	brne	.+52     	; 0x4396 <command_proc+0x6e>
    4362:	81 2f       	mov	r24, r17
    4364:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <command_common>
    4368:	26 c0       	rjmp	.+76     	; 0x43b6 <command_proc+0x8e>
            else
                return (command_console_extra(code) || command_console(code));
    436a:	81 2f       	mov	r24, r17
    436c:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <command_console_extra>
    4370:	88 23       	and	r24, r24
    4372:	89 f4       	brne	.+34     	; 0x4396 <command_proc+0x6e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4374:	14 31       	cpi	r17, 0x14	; 20
    4376:	91 f0       	breq	.+36     	; 0x439c <command_proc+0x74>
    4378:	15 31       	cpi	r17, 0x15	; 21
    437a:	18 f4       	brcc	.+6      	; 0x4382 <command_proc+0x5a>
    437c:	1b 30       	cpi	r17, 0x0B	; 11
    437e:	89 f4       	brne	.+34     	; 0x43a2 <command_proc+0x7a>
    4380:	04 c0       	rjmp	.+8      	; 0x438a <command_proc+0x62>
    4382:	19 32       	cpi	r17, 0x29	; 41
    4384:	59 f0       	breq	.+22     	; 0x439c <command_proc+0x74>
    4386:	18 33       	cpi	r17, 0x38	; 56
    4388:	61 f4       	brne	.+24     	; 0x43a2 <command_proc+0x7a>
        case KC_H:
        case KC_SLASH: /* ? */
            command_console_help();
    438a:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <command_console_help>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    438e:	82 e7       	ldi	r24, 0x72	; 114
    4390:	97 e0       	ldi	r25, 0x07	; 7
    4392:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    4396:	81 e0       	ldi	r24, 0x01	; 1
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	0d c0       	rjmp	.+26     	; 0x43b6 <command_proc+0x8e>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    439c:	10 92 bd 01 	sts	0x01BD, r1
    43a0:	04 c0       	rjmp	.+8      	; 0x43aa <command_proc+0x82>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    43a2:	86 e7       	ldi	r24, 0x76	; 118
    43a4:	97 e0       	ldi	r25, 0x07	; 7
    43a6:	0e 94 0e 04 	call	0x81c	; 0x81c <xputs>
    43aa:	80 e0       	ldi	r24, 0x00	; 0
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	03 c0       	rjmp	.+6      	; 0x43b6 <command_proc+0x8e>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    43b0:	10 92 bd 01 	sts	0x01BD, r1
    43b4:	80 e0       	ldi	r24, 0x00	; 0
            return false;
    }
    return true;
}
    43b6:	1f 91       	pop	r17
    43b8:	08 95       	ret

000043ba <__udivmodqi4>:
    43ba:	99 1b       	sub	r25, r25
    43bc:	79 e0       	ldi	r23, 0x09	; 9
    43be:	04 c0       	rjmp	.+8      	; 0x43c8 <__udivmodqi4_ep>

000043c0 <__udivmodqi4_loop>:
    43c0:	99 1f       	adc	r25, r25
    43c2:	96 17       	cp	r25, r22
    43c4:	08 f0       	brcs	.+2      	; 0x43c8 <__udivmodqi4_ep>
    43c6:	96 1b       	sub	r25, r22

000043c8 <__udivmodqi4_ep>:
    43c8:	88 1f       	adc	r24, r24
    43ca:	7a 95       	dec	r23
    43cc:	c9 f7       	brne	.-14     	; 0x43c0 <__udivmodqi4_loop>
    43ce:	80 95       	com	r24
    43d0:	08 95       	ret

000043d2 <__eerd_byte_m32u4>:
    43d2:	f9 99       	sbic	0x1f, 1	; 31
    43d4:	fe cf       	rjmp	.-4      	; 0x43d2 <__eerd_byte_m32u4>
    43d6:	92 bd       	out	0x22, r25	; 34
    43d8:	81 bd       	out	0x21, r24	; 33
    43da:	f8 9a       	sbi	0x1f, 0	; 31
    43dc:	99 27       	eor	r25, r25
    43de:	80 b5       	in	r24, 0x20	; 32
    43e0:	08 95       	ret

000043e2 <__eerd_word_m32u4>:
    43e2:	a8 e1       	ldi	r26, 0x18	; 24
    43e4:	b0 e0       	ldi	r27, 0x00	; 0
    43e6:	42 e0       	ldi	r20, 0x02	; 2
    43e8:	50 e0       	ldi	r21, 0x00	; 0
    43ea:	0c 94 0c 22 	jmp	0x4418	; 0x4418 <__eerd_blraw_m32u4>

000043ee <__eewr_byte_m32u4>:
    43ee:	26 2f       	mov	r18, r22

000043f0 <__eewr_r18_m32u4>:
    43f0:	f9 99       	sbic	0x1f, 1	; 31
    43f2:	fe cf       	rjmp	.-4      	; 0x43f0 <__eewr_r18_m32u4>
    43f4:	1f ba       	out	0x1f, r1	; 31
    43f6:	92 bd       	out	0x22, r25	; 34
    43f8:	81 bd       	out	0x21, r24	; 33
    43fa:	20 bd       	out	0x20, r18	; 32
    43fc:	0f b6       	in	r0, 0x3f	; 63
    43fe:	f8 94       	cli
    4400:	fa 9a       	sbi	0x1f, 2	; 31
    4402:	f9 9a       	sbi	0x1f, 1	; 31
    4404:	0f be       	out	0x3f, r0	; 63
    4406:	01 96       	adiw	r24, 0x01	; 1
    4408:	08 95       	ret

0000440a <__eewr_word_m32u4>:
    440a:	0e 94 f7 21 	call	0x43ee	; 0x43ee <__eewr_byte_m32u4>
    440e:	27 2f       	mov	r18, r23
    4410:	0c 94 f8 21 	jmp	0x43f0	; 0x43f0 <__eewr_r18_m32u4>

00004414 <__eerd_block_m32u4>:
    4414:	dc 01       	movw	r26, r24
    4416:	cb 01       	movw	r24, r22

00004418 <__eerd_blraw_m32u4>:
    4418:	fc 01       	movw	r30, r24
    441a:	f9 99       	sbic	0x1f, 1	; 31
    441c:	fe cf       	rjmp	.-4      	; 0x441a <__eerd_blraw_m32u4+0x2>
    441e:	06 c0       	rjmp	.+12     	; 0x442c <__eerd_blraw_m32u4+0x14>
    4420:	f2 bd       	out	0x22, r31	; 34
    4422:	e1 bd       	out	0x21, r30	; 33
    4424:	f8 9a       	sbi	0x1f, 0	; 31
    4426:	31 96       	adiw	r30, 0x01	; 1
    4428:	00 b4       	in	r0, 0x20	; 32
    442a:	0d 92       	st	X+, r0
    442c:	41 50       	subi	r20, 0x01	; 1
    442e:	50 40       	sbci	r21, 0x00	; 0
    4430:	b8 f7       	brcc	.-18     	; 0x4420 <__eerd_blraw_m32u4+0x8>
    4432:	08 95       	ret

00004434 <_exit>:
    4434:	f8 94       	cli

00004436 <__stop_program>:
    4436:	ff cf       	rjmp	.-2      	; 0x4436 <__stop_program>
